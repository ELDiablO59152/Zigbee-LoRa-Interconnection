

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon May 22 16:07:41 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F25K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34  0000                     
    35                           ; Version 2.20
    36                           ; Generated 12/02/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F25K40 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	idataCOMRAM
    71  00741D                     __pidataCOMRAM:
    72                           	callstack 0
    73                           
    74                           ;initializer for main@F9592
    75  00741D  AD                 	db	173
    76  00741E  4E                 	db	78
    77  00741F  00                 	db	0
    78  007420  00                 	db	0
    79  007421  00                 	db	0
    80  007422  00                 	db	0
    81  007423  00                 	db	0
    82  007424  00                 	db	0
    83  007425  00                 	db	0
    84  0000                     _SP1BRGH	set	3996
    85  0000                     _RC1STAbits	set	3997
    86  0000                     _TX1STAbits	set	3998
    87  0000                     _SSP1CLKPPS	set	3767
    88  0000                     _RC3PPS	set	3834
    89  0000                     _ANSELCbits	set	3873
    90  0000                     _LATBbits	set	3972
    91  0000                     _TRISBbits	set	3977
    92  0000                     _SSP1BUF	set	3986
    93  0000                     _SSP1STAT	set	3989
    94  0000                     _TRISCbits	set	3978
    95  0000                     _TRISAbits	set	3976
    96  0000                     _LATCbits	set	3973
    97  0000                     _ADCLK	set	3927
    98  0000                     _LATAbits	set	3971
    99  0000                     _RC5PPS	set	3836
   100  0000                     _ANSELAbits	set	3857
   101  0000                     _RC6PPS	set	3837
   102  0000                     _PIE3bits	set	3781
   103  0000                     _PIR3bits	set	3789
   104  0000                     _SSP1DATPPS	set	3768
   105  0000                     _SSP1CON3	set	3992
   106  0000                     _SSP1CON1	set	3990
   107  0000                     _SP1BRG	set	3995
   108  0000                     _TX1REG	set	3994
   109  0000                     _RC1STA	set	3997
   110  0000                     _TX1STA	set	3998
   111  0000                     _INTCONbits	set	4082
   112  0000                     _BAUD1CONbits	set	3999
   113  0000                     _ADACQ	set	3932
   114  0000                     _ADPCH	set	3935
   115  0000                     _ADRESL	set	3939
   116  0000                     _ADRESH	set	3940
   117  0000                     _ADCON0bits	set	3936
   118                           
   119                           	psect	mediumconst
   120  007E46                     __pmediumconst:
   121                           	callstack 0
   122  007E46  00                 	db	0
   123  007E47                     STR_4:
   124                           
   125                           ; BSR set to: 14
   126  007E47  6D                 	db	109	;'m'
   127  007E48  6F                 	db	111	;'o'
   128  007E49  64                 	db	100	;'d'
   129  007E4A  65                 	db	101	;'e'
   130  007E4B  20                 	db	32
   131  007E4C  3D                 	db	61	;'='
   132  007E4D  20                 	db	32
   133  007E4E  4C                 	db	76	;'L'
   134  007E4F  6F                 	db	111	;'o'
   135  007E50  52                 	db	82	;'R'
   136  007E51  61                 	db	97	;'a'
   137  007E52  20                 	db	32
   138  007E53  77                 	db	119	;'w'
   139  007E54  69                 	db	105	;'i'
   140  007E55  74                 	db	116	;'t'
   141  007E56  68                 	db	104	;'h'
   142  007E57  20                 	db	32
   143  007E58  46                 	db	70	;'F'
   144  007E59  53                 	db	83	;'S'
   145  007E5A  4B                 	db	75	;'K'
   146  007E5B  20                 	db	32
   147  007E5C  72                 	db	114	;'r'
   148  007E5D  65                 	db	101	;'e'
   149  007E5E  67                 	db	103	;'g'
   150  007E5F  69                 	db	105	;'i'
   151  007E60  73                 	db	115	;'s'
   152  007E61  74                 	db	116	;'t'
   153  007E62  65                 	db	101	;'e'
   154  007E63  72                 	db	114	;'r'
   155  007E64  73                 	db	115	;'s'
   156  007E65  20                 	db	32
   157  007E66  61                 	db	97	;'a'
   158  007E67  63                 	db	99	;'c'
   159  007E68  63                 	db	99	;'c'
   160  007E69  65                 	db	101	;'e'
   161  007E6A  73                 	db	115	;'s'
   162  007E6B  73                 	db	115	;'s'
   163  007E6C  00                 	db	0
   164  007E6D                     STR_16:
   165                           
   166                           ; BSR set to: 14
   167  007E6D  50                 	db	80	;'P'
   168  007E6E  6F                 	db	111	;'o'
   169  007E6F  75                 	db	117	;'u'
   170  007E70  72                 	db	114	;'r'
   171  007E71  63                 	db	99	;'c'
   172  007E72  65                 	db	101	;'e'
   173  007E73  6E                 	db	110	;'n'
   174  007E74  74                 	db	116	;'t'
   175  007E75  61                 	db	97	;'a'
   176  007E76  67                 	db	103	;'g'
   177  007E77  65                 	db	101	;'e'
   178  007E78  20                 	db	32
   179  007E79  64                 	db	100	;'d'
   180  007E7A  65                 	db	101	;'e'
   181  007E7B  20                 	db	32
   182  007E7C  62                 	db	98	;'b'
   183  007E7D  61                 	db	97	;'a'
   184  007E7E  74                 	db	116	;'t'
   185  007E7F  74                 	db	116	;'t'
   186  007E80  65                 	db	101	;'e'
   187  007E81  72                 	db	114	;'r'
   188  007E82  69                 	db	105	;'i'
   189  007E83  65                 	db	101	;'e'
   190  007E84  20                 	db	32
   191  007E85  3A                 	db	58	;':'
   192  007E86  20                 	db	32
   193  007E87  00                 	db	0
   194  007E88                     STR_13:
   195                           
   196                           ; BSR set to: 14
   197  007E88  43                 	db	67	;'C'
   198  007E89  68                 	db	104	;'h'
   199  007E8A  61                 	db	97	;'a'
   200  007E8B  6E                 	db	110	;'n'
   201  007E8C  6E                 	db	110	;'n'
   202  007E8D  65                 	db	101	;'e'
   203  007E8E  6C                 	db	108	;'l'
   204  007E8F  20                 	db	32
   205  007E90  41                 	db	65	;'A'
   206  007E91  63                 	db	99	;'c'
   207  007E92  74                 	db	116	;'t'
   208  007E93  69                 	db	105	;'i'
   209  007E94  76                 	db	118	;'v'
   210  007E95  69                 	db	105	;'i'
   211  007E96  74                 	db	116	;'t'
   212  007E97  79                 	db	121	;'y'
   213  007E98  20                 	db	32
   214  007E99  44                 	db	68	;'D'
   215  007E9A  65                 	db	101	;'e'
   216  007E9B  74                 	db	116	;'t'
   217  007E9C  65                 	db	101	;'e'
   218  007E9D  63                 	db	99	;'c'
   219  007E9E  74                 	db	116	;'t'
   220  007E9F  69                 	db	105	;'i'
   221  007EA0  6F                 	db	111	;'o'
   222  007EA1  6E                 	db	110	;'n'
   223  007EA2  00                 	db	0
   224  007EA3                     STR_30:
   225                           
   226                           ; BSR set to: 14
   227  007EA3  73                 	db	115	;'s'
   228  007EA4  65                 	db	101	;'e'
   229  007EA5  74                 	db	116	;'t'
   230  007EA6  20                 	db	32
   231  007EA7  6D                 	db	109	;'m'
   232  007EA8  6F                 	db	111	;'o'
   233  007EA9  64                 	db	100	;'d'
   234  007EAA  65                 	db	101	;'e'
   235  007EAB  20                 	db	32
   236  007EAC  74                 	db	116	;'t'
   237  007EAD  6F                 	db	111	;'o'
   238  007EAE  20                 	db	32
   239  007EAF  4C                 	db	76	;'L'
   240  007EB0  6F                 	db	111	;'o'
   241  007EB1  52                 	db	82	;'R'
   242  007EB2  61                 	db	97	;'a'
   243  007EB3  20                 	db	32
   244  007EB4  73                 	db	115	;'s'
   245  007EB5  74                 	db	116	;'t'
   246  007EB6  61                 	db	97	;'a'
   247  007EB7  6E                 	db	110	;'n'
   248  007EB8  64                 	db	100	;'d'
   249  007EB9  62                 	db	98	;'b'
   250  007EBA  79                 	db	121	;'y'
   251  007EBB  00                 	db	0
   252  007EBC                     STR_22:
   253                           
   254                           ; BSR set to: 14
   255  007EBC  77                 	db	119	;'w'
   256  007EBD  61                 	db	97	;'a'
   257  007EBE  69                 	db	105	;'i'
   258  007EBF  74                 	db	116	;'t'
   259  007EC0  69                 	db	105	;'i'
   260  007EC1  6E                 	db	110	;'n'
   261  007EC2  67                 	db	103	;'g'
   262  007EC3  20                 	db	32
   263  007EC4  66                 	db	102	;'f'
   264  007EC5  6F                 	db	111	;'o'
   265  007EC6  72                 	db	114	;'r'
   266  007EC7  20                 	db	32
   267  007EC8  76                 	db	118	;'v'
   268  007EC9  61                 	db	97	;'a'
   269  007ECA  6C                 	db	108	;'l'
   270  007ECB  69                 	db	105	;'i'
   271  007ECC  64                 	db	100	;'d'
   272  007ECD  20                 	db	32
   273  007ECE  68                 	db	104	;'h'
   274  007ECF  65                 	db	101	;'e'
   275  007ED0  61                 	db	97	;'a'
   276  007ED1  64                 	db	100	;'d'
   277  007ED2  65                 	db	101	;'e'
   278  007ED3  72                 	db	114	;'r'
   279  007ED4  00                 	db	0
   280  007ED5                     STR_21:
   281                           
   282                           ; BSR set to: 14
   283  007ED5  2D                 	db	45
   284  007ED6  2D                 	db	45
   285  007ED7  2D                 	db	45
   286  007ED8  2D                 	db	45
   287  007ED9  2D                 	db	45
   288  007EDA  2D                 	db	45
   289  007EDB  2D                 	db	45
   290  007EDC  2D                 	db	45
   291  007EDD  2D                 	db	45
   292  007EDE  2D                 	db	45
   293  007EDF  2D                 	db	45
   294  007EE0  2D                 	db	45
   295  007EE1  2D                 	db	45
   296  007EE2  2D                 	db	45
   297  007EE3  2D                 	db	45
   298  007EE4  2D                 	db	45
   299  007EE5  2D                 	db	45
   300  007EE6  2D                 	db	45
   301  007EE7  2D                 	db	45
   302  007EE8  2D                 	db	45
   303  007EE9  2D                 	db	45
   304  007EEA  2D                 	db	45
   305  007EEB  2D                 	db	45
   306  007EEC  00                 	db	0
   307  007EED                     STR_11:
   308                           
   309                           ; BSR set to: 14
   310  007EED  63                 	db	99	;'c'
   311  007EEE  6F                 	db	111	;'o'
   312  007EEF  6E                 	db	110	;'n'
   313  007EF0  74                 	db	116	;'t'
   314  007EF1  69                 	db	105	;'i'
   315  007EF2  6E                 	db	110	;'n'
   316  007EF3  75                 	db	117	;'u'
   317  007EF4  6F                 	db	111	;'o'
   318  007EF5  75                 	db	117	;'u'
   319  007EF6  73                 	db	115	;'s'
   320  007EF7  20                 	db	32
   321  007EF8  72                 	db	114	;'r'
   322  007EF9  65                 	db	101	;'e'
   323  007EFA  63                 	db	99	;'c'
   324  007EFB  65                 	db	101	;'e'
   325  007EFC  69                 	db	105	;'i'
   326  007EFD  76                 	db	118	;'v'
   327  007EFE  65                 	db	101	;'e'
   328  007EFF  20                 	db	32
   329  007F00  6D                 	db	109	;'m'
   330  007F01  6F                 	db	111	;'o'
   331  007F02  64                 	db	100	;'d'
   332  007F03  65                 	db	101	;'e'
   333  007F04  00                 	db	0
   334  007F05                     STR_10:
   335                           
   336                           ; BSR set to: 14
   337  007F05  66                 	db	102	;'f'
   338  007F06  72                 	db	114	;'r'
   339  007F07  65                 	db	101	;'e'
   340  007F08  71                 	db	113	;'q'
   341  007F09  75                 	db	117	;'u'
   342  007F0A  65                 	db	101	;'e'
   343  007F0B  6E                 	db	110	;'n'
   344  007F0C  63                 	db	99	;'c'
   345  007F0D  79                 	db	121	;'y'
   346  007F0E  20                 	db	32
   347  007F0F  73                 	db	115	;'s'
   348  007F10  79                 	db	121	;'y'
   349  007F11  6E                 	db	110	;'n'
   350  007F12  74                 	db	116	;'t'
   351  007F13  68                 	db	104	;'h'
   352  007F14  65                 	db	101	;'e'
   353  007F15  73                 	db	115	;'s'
   354  007F16  69                 	db	105	;'i'
   355  007F17  73                 	db	115	;'s'
   356  007F18  20                 	db	32
   357  007F19  52                 	db	82	;'R'
   358  007F1A  58                 	db	88	;'X'
   359  007F1B  00                 	db	0
   360  007F1C                     STR_8:
   361                           
   362                           ; BSR set to: 14
   363  007F1C  66                 	db	102	;'f'
   364  007F1D  72                 	db	114	;'r'
   365  007F1E  65                 	db	101	;'e'
   366  007F1F  71                 	db	113	;'q'
   367  007F20  75                 	db	117	;'u'
   368  007F21  65                 	db	101	;'e'
   369  007F22  6E                 	db	110	;'n'
   370  007F23  63                 	db	99	;'c'
   371  007F24  79                 	db	121	;'y'
   372  007F25  20                 	db	32
   373  007F26  73                 	db	115	;'s'
   374  007F27  79                 	db	121	;'y'
   375  007F28  6E                 	db	110	;'n'
   376  007F29  74                 	db	116	;'t'
   377  007F2A  68                 	db	104	;'h'
   378  007F2B  65                 	db	101	;'e'
   379  007F2C  73                 	db	115	;'s'
   380  007F2D  69                 	db	105	;'i'
   381  007F2E  73                 	db	115	;'s'
   382  007F2F  20                 	db	32
   383  007F30  54                 	db	84	;'T'
   384  007F31  58                 	db	88	;'X'
   385  007F32  00                 	db	0
   386  007F33                     STR_23:
   387                           
   388                           ; BSR set to: 14
   389  007F33  76                 	db	118	;'v'
   390  007F34  61                 	db	97	;'a'
   391  007F35  6C                 	db	108	;'l'
   392  007F36  69                 	db	105	;'i'
   393  007F37  64                 	db	100	;'d'
   394  007F38  20                 	db	32
   395  007F39  68                 	db	104	;'h'
   396  007F3A  65                 	db	101	;'e'
   397  007F3B  61                 	db	97	;'a'
   398  007F3C  64                 	db	100	;'d'
   399  007F3D  65                 	db	101	;'e'
   400  007F3E  72                 	db	114	;'r'
   401  007F3F  20                 	db	32
   402  007F40  72                 	db	114	;'r'
   403  007F41  65                 	db	101	;'e'
   404  007F42  63                 	db	99	;'c'
   405  007F43  65                 	db	101	;'e'
   406  007F44  69                 	db	105	;'i'
   407  007F45  76                 	db	118	;'v'
   408  007F46  65                 	db	101	;'e'
   409  007F47  64                 	db	100	;'d'
   410  007F48  00                 	db	0
   411  007F49                     STR_12:
   412                           
   413                           ; BSR set to: 14
   414  007F49  73                 	db	115	;'s'
   415  007F4A  69                 	db	105	;'i'
   416  007F4B  6E                 	db	110	;'n'
   417  007F4C  67                 	db	103	;'g'
   418  007F4D  6C                 	db	108	;'l'
   419  007F4E  65                 	db	101	;'e'
   420  007F4F  20                 	db	32
   421  007F50  72                 	db	114	;'r'
   422  007F51  65                 	db	101	;'e'
   423  007F52  63                 	db	99	;'c'
   424  007F53  65                 	db	101	;'e'
   425  007F54  69                 	db	105	;'i'
   426  007F55  76                 	db	118	;'v'
   427  007F56  65                 	db	101	;'e'
   428  007F57  20                 	db	32
   429  007F58  6D                 	db	109	;'m'
   430  007F59  6F                 	db	111	;'o'
   431  007F5A  64                 	db	100	;'d'
   432  007F5B  65                 	db	101	;'e'
   433  007F5C  00                 	db	0
   434  007F5D                     STR_31:
   435                           
   436                           ; BSR set to: 14
   437  007F5D  69                 	db	105	;'i'
   438  007F5E  6E                 	db	110	;'n'
   439  007F5F  69                 	db	105	;'i'
   440  007F60  74                 	db	116	;'t'
   441  007F61  69                 	db	105	;'i'
   442  007F62  61                 	db	97	;'a'
   443  007F63  6C                 	db	108	;'l'
   444  007F64  69                 	db	105	;'i'
   445  007F65  7A                 	db	122	;'z'
   446  007F66  65                 	db	101	;'e'
   447  007F67  20                 	db	32
   448  007F68  6D                 	db	109	;'m'
   449  007F69  6F                 	db	111	;'o'
   450  007F6A  64                 	db	100	;'d'
   451  007F6B  75                 	db	117	;'u'
   452  007F6C  6C                 	db	108	;'l'
   453  007F6D  65                 	db	101	;'e'
   454  007F6E  00                 	db	0
   455  007F6F                     STR_18:
   456                           
   457                           ; BSR set to: 14
   458  007F6F  4D                 	db	77	;'M'
   459  007F70  65                 	db	101	;'e'
   460  007F71  73                 	db	115	;'s'
   461  007F72  73                 	db	115	;'s'
   462  007F73  61                 	db	97	;'a'
   463  007F74  67                 	db	103	;'g'
   464  007F75  65                 	db	101	;'e'
   465  007F76  20                 	db	32
   466  007F77  65                 	db	101	;'e'
   467  007F78  6E                 	db	110	;'n'
   468  007F79  76                 	db	118	;'v'
   469  007F7A  6F                 	db	111	;'o'
   470  007F7B  79                 	db	121	;'y'
   471  007F7C  65                 	db	101	;'e'
   472  007F7D  20                 	db	32
   473  007F7E  3A                 	db	58	;':'
   474  007F7F  20                 	db	32
   475  007F80  00                 	db	0
   476  007F81                     STR_25:
   477                           
   478                           ; BSR set to: 14
   479  007F81  70                 	db	112	;'p'
   480  007F82  61                 	db	97	;'a'
   481  007F83  79                 	db	121	;'y'
   482  007F84  6C                 	db	108	;'l'
   483  007F85  6F                 	db	111	;'o'
   484  007F86  61                 	db	97	;'a'
   485  007F87  64                 	db	100	;'d'
   486  007F88  20                 	db	32
   487  007F89  43                 	db	67	;'C'
   488  007F8A  52                 	db	82	;'R'
   489  007F8B  43                 	db	67	;'C'
   490  007F8C  20                 	db	32
   491  007F8D  65                 	db	101	;'e'
   492  007F8E  72                 	db	114	;'r'
   493  007F8F  72                 	db	114	;'r'
   494  007F90  6F                 	db	111	;'o'
   495  007F91  72                 	db	114	;'r'
   496  007F92  00                 	db	0
   497  007F93                     STR_14:
   498                           
   499                           ; BSR set to: 14
   500  007F93  30                 	db	48	;'0'
   501  007F94  31                 	db	49	;'1'
   502  007F95  32                 	db	50	;'2'
   503  007F96  33                 	db	51	;'3'
   504  007F97  34                 	db	52	;'4'
   505  007F98  35                 	db	53	;'5'
   506  007F99  36                 	db	54	;'6'
   507  007F9A  37                 	db	55	;'7'
   508  007F9B  38                 	db	56	;'8'
   509  007F9C  39                 	db	57	;'9'
   510  007F9D  41                 	db	65	;'A'
   511  007F9E  42                 	db	66	;'B'
   512  007F9F  43                 	db	67	;'C'
   513  007FA0  44                 	db	68	;'D'
   514  007FA1  45                 	db	69	;'E'
   515  007FA2  46                 	db	70	;'F'
   516  007FA3  00                 	db	0
   517  007FA4                     STR_1:
   518                           
   519                           ; BSR set to: 14
   520  007FA4  52                 	db	82	;'R'
   521  007FA5  45                 	db	69	;'E'
   522  007FA6  47                 	db	71	;'G'
   523  007FA7  5F                 	db	95	;'_'
   524  007FA8  4F                 	db	79	;'O'
   525  007FA9  50                 	db	80	;'P'
   526  007FAA  5F                 	db	95	;'_'
   527  007FAB  4D                 	db	77	;'M'
   528  007FAC  4F                 	db	79	;'O'
   529  007FAD  44                 	db	68	;'D'
   530  007FAE  45                 	db	69	;'E'
   531  007FAF  20                 	db	32
   532  007FB0  3D                 	db	61	;'='
   533  007FB1  20                 	db	32
   534  007FB2  30                 	db	48	;'0'
   535  007FB3  78                 	db	120	;'x'
   536  007FB4  00                 	db	0
   537  007FB5                     STR_26:
   538                           
   539                           ; BSR set to: 14
   540  007FB5  72                 	db	114	;'r'
   541  007FB6  65                 	db	101	;'e'
   542  007FB7  63                 	db	99	;'c'
   543  007FB8  65                 	db	101	;'e'
   544  007FB9  69                 	db	105	;'i'
   545  007FBA  76                 	db	118	;'v'
   546  007FBB  65                 	db	101	;'e'
   547  007FBC  64                 	db	100	;'d'
   548  007FBD  20                 	db	32
   549  007FBE  64                 	db	100	;'d'
   550  007FBF  61                 	db	97	;'a'
   551  007FC0  74                 	db	116	;'t'
   552  007FC1  61                 	db	97	;'a'
   553  007FC2  3A                 	db	58	;':'
   554  007FC3  20                 	db	32
   555  007FC4  00                 	db	0
   556  007FC5                     STR_7:
   557                           
   558                           ; BSR set to: 14
   559  007FC5  73                 	db	115	;'s'
   560  007FC6  74                 	db	116	;'t'
   561  007FC7  61                 	db	97	;'a'
   562  007FC8  6E                 	db	110	;'n'
   563  007FC9  64                 	db	100	;'d'
   564  007FCA  62                 	db	98	;'b'
   565  007FCB  79                 	db	121	;'y'
   566  007FCC  20                 	db	32
   567  007FCD  6D                 	db	109	;'m'
   568  007FCE  6F                 	db	111	;'o'
   569  007FCF  64                 	db	100	;'d'
   570  007FD0  65                 	db	101	;'e'
   571  007FD1  00                 	db	0
   572  007FD2                     STR_3:
   573                           
   574                           ; BSR set to: 14
   575  007FD2  6D                 	db	109	;'m'
   576  007FD3  6F                 	db	111	;'o'
   577  007FD4  64                 	db	100	;'d'
   578  007FD5  65                 	db	101	;'e'
   579  007FD6  20                 	db	32
   580  007FD7  3D                 	db	61	;'='
   581  007FD8  20                 	db	32
   582  007FD9  4C                 	db	76	;'L'
   583  007FDA  6F                 	db	111	;'o'
   584  007FDB  52                 	db	82	;'R'
   585  007FDC  61                 	db	97	;'a'
   586  007FDD  00                 	db	0
   587  007FDE                     STR_5:
   588                           
   589                           ; BSR set to: 14
   590  007FDE  6D                 	db	109	;'m'
   591  007FDF  6F                 	db	111	;'o'
   592  007FE0  64                 	db	100	;'d'
   593  007FE1  65                 	db	101	;'e'
   594  007FE2  20                 	db	32
   595  007FE3  3D                 	db	61	;'='
   596  007FE4  20                 	db	32
   597  007FE5  46                 	db	70	;'F'
   598  007FE6  53                 	db	83	;'S'
   599  007FE7  4B                 	db	75	;'K'
   600  007FE8  00                 	db	0
   601  007FE9                     STR_6:
   602                           
   603                           ; BSR set to: 14
   604  007FE9  73                 	db	115	;'s'
   605  007FEA  6C                 	db	108	;'l'
   606  007FEB  65                 	db	101	;'e'
   607  007FEC  65                 	db	101	;'e'
   608  007FED  70                 	db	112	;'p'
   609  007FEE  20                 	db	32
   610  007FEF  6D                 	db	109	;'m'
   611  007FF0  6F                 	db	111	;'o'
   612  007FF1  64                 	db	100	;'d'
   613  007FF2  65                 	db	101	;'e'
   614  007FF3  00                 	db	0
   615  007FF4                     STR_9:
   616                           
   617                           ; BSR set to: 14
   618  007FF4  54                 	db	84	;'T'
   619  007FF5  58                 	db	88	;'X'
   620  007FF6  20                 	db	32
   621  007FF7  6D                 	db	109	;'m'
   622  007FF8  6F                 	db	111	;'o'
   623  007FF9  64                 	db	100	;'d'
   624  007FFA  65                 	db	101	;'e'
   625  007FFB  00                 	db	0
   626  007FFC                     
   627                           ; BSR set to: 14
   628  007FFC  25                 	db	37
   629  007FFD  00                 	db	0
   630  007FFE  00                 	db	0	; dummy byte at the end
   631  0000                     
   632                           ; #config settings
   633                           
   634                           	psect	cinit
   635  007528                     __pcinit:
   636                           	callstack 0
   637  007528                     start_initialization:
   638                           	callstack 0
   639  007528                     __initialization:
   640                           	callstack 0
   641                           
   642                           ; Initialize objects allocated to COMRAM (9 bytes)
   643                           ; load TBLPTR registers with __pidataCOMRAM
   644  007528  0E1D               	movlw	low __pidataCOMRAM
   645  00752A  6EF6               	movwf	tblptrl,c
   646  00752C  0E74               	movlw	high __pidataCOMRAM
   647  00752E  6EF7               	movwf	tblptrh,c
   648  007530  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   649  007532  6EF8               	movwf	tblptru,c
   650  007534  EE00  F042         	lfsr	0,__pdataCOMRAM
   651  007538  EE10 F009          	lfsr	1,9
   652  00753C                     copy_data0:
   653  00753C  0009               	tblrd		*+
   654  00753E  CFF5 FFEE          	movff	tablat,postinc0
   655  007542  50E5               	movf	postdec1,w,c
   656  007544  50E1               	movf	fsr1l,w,c
   657  007546  E1FA               	bnz	copy_data0
   658  007548                     end_of_initialization:
   659                           	callstack 0
   660  007548                     __end_of__initialization:
   661                           	callstack 0
   662  007548  0E00               	movlw	low (__Lmediumconst shr (0+16))
   663  00754A  6EF8               	movwf	tblptru,c
   664  00754C  0100               	movlb	0
   665  00754E  EF36  F03E         	goto	_main	;jump to C main() function
   666                           
   667                           	psect	dataCOMRAM
   668  000042                     __pdataCOMRAM:
   669                           	callstack 0
   670  000042                     main@F9592:
   671                           	callstack 0
   672  000042                     	ds	9
   673                           
   674                           	psect	cstackCOMRAM
   675  000001                     __pcstackCOMRAM:
   676                           	callstack 0
   677  000001                     ??_ResetRFModule:
   678  000001                     ??_AntennaTX:
   679  000001                     ??_AntennaRX:
   680  000001                     SPITransfer@data_out:
   681                           	callstack 0
   682  000001                     SPIReceive@data_out:
   683                           	callstack 0
   684  000001                     UARTWriteByte@data:
   685                           	callstack 0
   686  000001                     UARTInit@baudRate:
   687                           	callstack 0
   688                           
   689                           ; 2 bytes @ 0x0
   690  000001                     	ds	1
   691  000002                     SPIReceive@data_in:
   692                           	callstack 0
   693  000002                     UARTWriteStr@string:
   694                           	callstack 0
   695  000002                     UARTWriteStrLn@string:
   696                           	callstack 0
   697  000002                     UARTWriteByteHex@data:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0x1
   701  000002                     	ds	1
   702  000003                     ReadSXRegister@RegValue:
   703                           	callstack 0
   704                           
   705                           ; 1 bytes @ 0x2
   706  000003                     	ds	1
   707  000004                     ??_UARTWriteStr:
   708  000004                     ??_UARTWriteByteHex:
   709  000004                     ??_UARTWriteStrLn:
   710  000004                     ReadSXRegister@address:
   711                           	callstack 0
   712                           
   713                           ; 1 bytes @ 0x3
   714  000004                     	ds	1
   715  000005                     WriteSXRegister@data:
   716                           	callstack 0
   717                           
   718                           ; 1 bytes @ 0x4
   719  000005                     	ds	1
   720  000006                     WriteSXRegister@address:
   721                           	callstack 0
   722  000006                     UARTWriteStr@i:
   723                           	callstack 0
   724  000006                     UARTWriteStrLn@i:
   725                           	callstack 0
   726                           
   727                           ; 1 bytes @ 0x5
   728  000006                     	ds	1
   729  000007                     
   730                           ; 1 bytes @ 0x6
   731  000007                     	ds	2
   732  000009                     UARTWriteByteHex@hexa:
   733                           	callstack 0
   734                           
   735                           ; 2 bytes @ 0x8
   736  000009                     	ds	2
   737  00000B                     ??_GetMode:
   738  00000B                     Transmit@data:
   739                           	callstack 0
   740  00000B                     Receive@data:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0xA
   744  00000B                     	ds	2
   745  00000D                     ??_Receive:
   746  00000D                     GetMode@masked_reg:
   747                           	callstack 0
   748  00000D                     Transmit@data_long:
   749                           	callstack 0
   750                           
   751                           ; 1 bytes @ 0xC
   752  00000D                     	ds	1
   753  00000E                     ??_Transmit:
   754  00000E                     GetMode@reg:
   755                           	callstack 0
   756  00000E                     Receive@RXNumberOfBytes:
   757                           	callstack 0
   758                           
   759                           ; 1 bytes @ 0xD
   760  00000E                     	ds	1
   761  00000F                     Transmit@reg_val:
   762                           	callstack 0
   763  00000F                     Receive@i:
   764                           	callstack 0
   765                           
   766                           ; 1 bytes @ 0xE
   767  00000F                     	ds	1
   768  000010                     Transmit@i:
   769                           	callstack 0
   770  000010                     Receive@reg_val:
   771                           	callstack 0
   772                           
   773                           ; 1 bytes @ 0xF
   774  000010                     	ds	1
   775  000011                     
   776                           ; 2 bytes @ 0x10
   777  000011                     	ds	2
   778  000013                     
   779                           ; 3 bytes @ 0x12
   780  000013                     	ds	3
   781  000016                     ??_main:
   782                           
   783                           ; 1 bytes @ 0x15
   784  000016                     	ds	2
   785  000018                     main@rxMsg:
   786                           	callstack 0
   787                           
   788                           ; 30 bytes @ 0x17
   789  000018                     	ds	30
   790  000036                     main@txMsg:
   791                           	callstack 0
   792                           
   793                           ; 9 bytes @ 0x35
   794  000036                     	ds	9
   795  00003F                     main@i:
   796                           	callstack 0
   797                           
   798                           ; 1 bytes @ 0x3E
   799  00003F                     	ds	1
   800  000040                     main@i_1046:
   801                           	callstack 0
   802                           
   803                           ; 1 bytes @ 0x3F
   804  000040                     	ds	1
   805  000041                     main@RXNumberOfBytes:
   806                           	callstack 0
   807                           
   808                           ; 1 bytes @ 0x40
   809  000041                     	ds	1
   810                           
   811 ;;
   812 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   813 ;;
   814 ;; *************** function _main *****************
   815 ;; Defined at:
   816 ;;		line 105 in file "main.c"
   817 ;; Parameters:    Size  Location     Type
   818 ;;  argc            2   16[COMRAM] int 
   819 ;;  argv            3   18[COMRAM] PTR PTR unsigned char 
   820 ;; Auto vars:     Size  Location     Type
   821 ;;  i               1   63[COMRAM] unsigned char 
   822 ;;  i               1   62[COMRAM] unsigned char 
   823 ;;  rxMsg          30   23[COMRAM] unsigned char [30]
   824 ;;  txMsg           9   53[COMRAM] unsigned char [9]
   825 ;;  RXNumberOfBy    1   64[COMRAM] unsigned char 
   826 ;; Return value:  Size  Location     Type
   827 ;;                  2   16[COMRAM] int 
   828 ;; Registers used:
   829 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   830 ;; Tracked objects:
   831 ;;		On entry : 0/0
   832 ;;		On exit  : 0/0
   833 ;;		Unchanged: 0/0
   834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   835 ;;      Params:         5       0       0       0       0       0       0       0       0
   836 ;;      Locals:        42       0       0       0       0       0       0       0       0
   837 ;;      Temps:          2       0       0       0       0       0       0       0       0
   838 ;;      Totals:        49       0       0       0       0       0       0       0       0
   839 ;;Total ram usage:       49 bytes
   840 ;; Hardware stack levels required when called: 3
   841 ;; This function calls:
   842 ;;		_GetMode
   843 ;;		_InitModule
   844 ;;		_InitRFLoRaPins
   845 ;;		_ReadSXRegister
   846 ;;		_Receive
   847 ;;		_ResetRFModule
   848 ;;		_SPIInit
   849 ;;		_Transmit
   850 ;;		_UARTInit
   851 ;;		_UARTWriteStrLn
   852 ;;		_WriteSXRegister
   853 ;;		_initVoltmeter
   854 ;; This function is called by:
   855 ;;		Startup code after reset
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           	psect	text0
   860  007C6C                     __ptext0:
   861                           	callstack 0
   862  007C6C                     _main:
   863                           	callstack 28
   864  007C6C                     
   865                           ;main.c: 107:     _delay((unsigned long)((2500)*(1000000UL/4000.0)));
   866  007C6C  0E04               	movlw	4
   867  007C6E  6E17               	movwf	(??_main+1)^0,c
   868  007C70  0E2C               	movlw	44
   869  007C72  6E16               	movwf	??_main^0,c
   870  007C74  0EAC               	movlw	172
   871  007C76                     u607:
   872  007C76  2EE8               	decfsz	wreg,f,c
   873  007C78  D7FE               	bra	u607
   874  007C7A  2E16               	decfsz	??_main^0,f,c
   875  007C7C  D7FC               	bra	u607
   876  007C7E  2E17               	decfsz	(??_main+1)^0,f,c
   877  007C80  D7FA               	bra	u607
   878  007C82                     
   879                           ;main.c: 108:     SPIInit();
   880  007C82  ECA9  F03A         	call	_SPIInit	;wreg free
   881  007C86                     
   882                           ;main.c: 109:     initVoltmeter();
   883  007C86  EC3A  F03A         	call	_initVoltmeter	;wreg free
   884  007C8A                     
   885                           ;main.c: 110:     InitRFLoRaPins();
   886  007C8A  EC13  F03A         	call	_InitRFLoRaPins	;wreg free
   887                           
   888                           ;main.c: 111:     ResetRFModule();
   889  007C8E  EC80  F03A         	call	_ResetRFModule	;wreg free
   890  007C92                     
   891                           ;main.c: 112:     UARTInit(19200);
   892  007C92  0E4B               	movlw	75
   893  007C94  6E02               	movwf	(UARTInit@baudRate+1)^0,c
   894  007C96  0E00               	movlw	0
   895  007C98  6E01               	movwf	UARTInit@baudRate^0,c
   896  007C9A  ECC5  F03A         	call	_UARTInit	;wreg free
   897  007C9E                     
   898                           ;main.c: 114:     _delay((unsigned long)((1)*(1000000UL/4000.0)));
   899  007C9E  0E53               	movlw	83
   900  007CA0                     u617:
   901  007CA0  2EE8               	decfsz	wreg,f,c
   902  007CA2  D7FE               	bra	u617
   903  007CA4  F000               	nop	
   904  007CA6                     
   905                           ;main.c: 115:     _delay((unsigned long)((1)*(1000000UL/4000.0)));
   906  007CA6  0E53               	movlw	83
   907  007CA8                     u627:
   908  007CA8  2EE8               	decfsz	wreg,f,c
   909  007CAA  D7FE               	bra	u627
   910  007CAC  F000               	nop	
   911  007CAE                     
   912                           ;main.c: 116:     _delay((unsigned long)((500)*(1000000UL/4000.0)));
   913  007CAE  0EA3               	movlw	163
   914  007CB0  6E16               	movwf	??_main^0,c
   915  007CB2  0E55               	movlw	85
   916  007CB4                     u637:
   917  007CB4  2EE8               	decfsz	wreg,f,c
   918  007CB6  D7FE               	bra	u637
   919  007CB8  2E16               	decfsz	??_main^0,f,c
   920  007CBA  D7FC               	bra	u637
   921  007CBC  F000               	nop	
   922  007CBE                     
   923                           ;main.c: 119:     UARTWriteStrLn(" ");
   924  007CBE  0E86               	movlw	low (STR_16+25)
   925  007CC0  6E02               	movwf	UARTWriteStrLn@string^0,c
   926  007CC2  0E7E               	movlw	high (STR_16+25)
   927  007CC4  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
   928  007CC6  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
   929  007CCA                     
   930                           ;main.c: 120:     UARTWriteStrLn("set mode to LoRa standby");
   931  007CCA  0EA3               	movlw	low STR_30
   932  007CCC  6E02               	movwf	UARTWriteStrLn@string^0,c
   933  007CCE  0E7E               	movlw	high STR_30
   934  007CD0  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
   935  007CD2  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
   936  007CD6                     
   937                           ;main.c: 122:     WriteSXRegister(0x01, 0x00);
   938  007CD6  0E00               	movlw	0
   939  007CD8  6E05               	movwf	WriteSXRegister@data^0,c
   940  007CDA  0E01               	movlw	1
   941  007CDC  EC45  F03A         	call	_WriteSXRegister
   942  007CE0                     
   943                           ;main.c: 123:     WriteSXRegister(0x01, 0x80);
   944  007CE0  0E80               	movlw	128
   945  007CE2  6E05               	movwf	WriteSXRegister@data^0,c
   946  007CE4  0E01               	movlw	1
   947  007CE6  EC45  F03A         	call	_WriteSXRegister
   948  007CEA                     
   949                           ;main.c: 124:     WriteSXRegister(0x01, 0x81);
   950  007CEA  0E81               	movlw	129
   951  007CEC  6E05               	movwf	WriteSXRegister@data^0,c
   952  007CEE  0E01               	movlw	1
   953  007CF0  EC45  F03A         	call	_WriteSXRegister
   954  007CF4                     
   955                           ;main.c: 125:     _delay((unsigned long)((100)*(1000000UL/4000.0)));
   956  007CF4  0E21               	movlw	33
   957  007CF6  6E16               	movwf	??_main^0,c
   958  007CF8  0E76               	movlw	118
   959  007CFA                     u647:
   960  007CFA  2EE8               	decfsz	wreg,f,c
   961  007CFC  D7FE               	bra	u647
   962  007CFE  2E16               	decfsz	??_main^0,f,c
   963  007D00  D7FC               	bra	u647
   964  007D02  D000               	nop2	
   965  007D04                     
   966                           ;main.c: 126:     GetMode();
   967  007D04  ECC8  F03C         	call	_GetMode	;wreg free
   968  007D08                     
   969                           ;main.c: 129:     UARTWriteStrLn("initialize module");
   970  007D08  0E5D               	movlw	low STR_31
   971  007D0A  6E02               	movwf	UARTWriteStrLn@string^0,c
   972  007D0C  0E7F               	movlw	high STR_31
   973  007D0E  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
   974  007D10  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
   975  007D14                     
   976                           ;main.c: 130:     InitModule();
   977  007D14  ECC7  F03B         	call	_InitModule	;wreg free
   978  007D18                     
   979                           ;main.c: 142:     uint8_t RXNumberOfBytes;;main.c: 143:     uint8_t rxMsg[30];;main.c: 1
      +                          44:     uint8_t txMsg[] = { 0xAD, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
   980  007D18  EE20  F042         	lfsr	2,main@F9592
   981  007D1C  EE10  F036         	lfsr	1,main@txMsg
   982  007D20  0E08               	movlw	8
   983  007D22                     u531:
   984  007D22  CFDB FFE3          	movff	plusw2,plusw1
   985  007D26  06E8               	decf	wreg,f,c
   986  007D28  E2FC               	bc	u531
   987  007D2A                     
   988                           ;main.c: 146:     if (ReadSXRegister(0x42) != 0x22) {
   989  007D2A  0E42               	movlw	66
   990  007D2C  EC60  F03A         	call	_ReadSXRegister
   991  007D30  0A22               	xorlw	34
   992  007D32  B4D8               	btfsc	status,2,c
   993  007D34  EF9E  F03E         	goto	u541
   994  007D38  EFA0  F03E         	goto	u540
   995  007D3C                     u541:
   996  007D3C  EFA6  F03E         	goto	l1781
   997  007D40                     u540:
   998  007D40                     
   999                           ;main.c: 147:          UARTWriteStrLn("initialize module");
  1000  007D40  0E5D               	movlw	low STR_31
  1001  007D42  6E02               	movwf	UARTWriteStrLn@string^0,c
  1002  007D44  0E7F               	movlw	high STR_31
  1003  007D46  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1004  007D48  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  1005  007D4C                     l1781:
  1006                           
  1007                           ;main.c: 152:         Receive(rxMsg);
  1008  007D4C  0E18               	movlw	low main@rxMsg
  1009  007D4E  6E0B               	movwf	Receive@data^0,c
  1010  007D50  0E00               	movlw	high main@rxMsg
  1011  007D52  6E0C               	movwf	(Receive@data+1)^0,c
  1012  007D54  EC7C  F03D         	call	_Receive	;wreg free
  1013  007D58                     
  1014                           ;main.c: 154:         RXNumberOfBytes = ReadSXRegister(0x13);
  1015  007D58  0E13               	movlw	19
  1016  007D5A  EC60  F03A         	call	_ReadSXRegister
  1017  007D5E  6E41               	movwf	main@RXNumberOfBytes^0,c
  1018  007D60                     
  1019                           ;main.c: 157:         if(rxMsg[2] == 0x02 && rxMsg[4] == 0x02){
  1020  007D60  0E02               	movlw	2
  1021  007D62  181A               	xorwf	(main@rxMsg+2)^0,w,c
  1022  007D64  A4D8               	btfss	status,2,c
  1023  007D66  EFB7  F03E         	goto	u551
  1024  007D6A  EFB9  F03E         	goto	u550
  1025  007D6E                     u551:
  1026  007D6E  EFF2  F03E         	goto	l1801
  1027  007D72                     u550:
  1028  007D72  0E02               	movlw	2
  1029  007D74  181C               	xorwf	(main@rxMsg+4)^0,w,c
  1030  007D76  A4D8               	btfss	status,2,c
  1031  007D78  EFC0  F03E         	goto	u561
  1032  007D7C  EFC2  F03E         	goto	u560
  1033  007D80                     u561:
  1034  007D80  EFF2  F03E         	goto	l1801
  1035  007D84                     u560:
  1036  007D84                     
  1037                           ;main.c: 158:             for (uint8_t i = 0; i < RXNumberOfBytes; i++) {
  1038  007D84  0E00               	movlw	0
  1039  007D86  6E3F               	movwf	main@i^0,c
  1040  007D88  EFD5  F03E         	goto	l1795
  1041  007D8C                     l1791:
  1042                           
  1043                           ;main.c: 159:                 txMsg[i] = rxMsg[i];
  1044  007D8C  0E18               	movlw	low main@rxMsg
  1045  007D8E  243F               	addwf	main@i^0,w,c
  1046  007D90  6ED9               	movwf	fsr2l,c
  1047  007D92  6ADA               	clrf	fsr2h,c
  1048  007D94  0E00               	movlw	high main@rxMsg
  1049  007D96  22DA               	addwfc	fsr2h,f,c
  1050  007D98  0E36               	movlw	low main@txMsg
  1051  007D9A  243F               	addwf	main@i^0,w,c
  1052  007D9C  6EE1               	movwf	fsr1l,c
  1053  007D9E  6AE2               	clrf	fsr1h,c
  1054  007DA0  0E00               	movlw	high main@txMsg
  1055  007DA2  22E2               	addwfc	fsr1h,f,c
  1056  007DA4  CFDF FFE7          	movff	indf2,indf1
  1057  007DA8                     
  1058                           ;main.c: 160:             }
  1059  007DA8  2A3F               	incf	main@i^0,f,c
  1060  007DAA                     l1795:
  1061  007DAA  5041               	movf	main@RXNumberOfBytes^0,w,c
  1062  007DAC  5C3F               	subwf	main@i^0,w,c
  1063  007DAE  A0D8               	btfss	status,0,c
  1064  007DB0  EFDC  F03E         	goto	u571
  1065  007DB4  EFDE  F03E         	goto	u570
  1066  007DB8                     u571:
  1067  007DB8  EFC6  F03E         	goto	l1791
  1068  007DBC                     u570:
  1069  007DBC                     
  1070                           ;main.c: 161:             txMsg[0] = rxMsg[1];
  1071  007DBC  C019  F036         	movff	main@rxMsg+1,main@txMsg
  1072                           
  1073                           ;main.c: 162:             txMsg[1] = rxMsg[0];
  1074  007DC0  C018  F037         	movff	main@rxMsg,main@txMsg+1
  1075                           
  1076                           ;main.c: 163:             txMsg[2] = rxMsg[3];
  1077  007DC4  C01B  F038         	movff	main@rxMsg+3,main@txMsg+2
  1078                           
  1079                           ;main.c: 164:             txMsg[3] = rxMsg[2];
  1080  007DC8  C01A  F039         	movff	main@rxMsg+2,main@txMsg+3
  1081                           
  1082                           ;main.c: 165:             txMsg[4] = rxMsg[3];
  1083  007DCC  C01B  F03A         	movff	main@rxMsg+3,main@txMsg+4
  1084  007DD0                     
  1085                           ;main.c: 166:             txMsg[5] = 0x05;
  1086  007DD0  0E05               	movlw	5
  1087  007DD2  6E3B               	movwf	(main@txMsg+5)^0,c
  1088  007DD4                     
  1089                           ;main.c: 167:             Transmit(txMsg, RXNumberOfBytes);
  1090  007DD4  0E36               	movlw	low main@txMsg
  1091  007DD6  6E0B               	movwf	Transmit@data^0,c
  1092  007DD8  0E00               	movlw	high main@txMsg
  1093  007DDA  6E0C               	movwf	(Transmit@data+1)^0,c
  1094  007DDC  C041  F00D         	movff	main@RXNumberOfBytes,Transmit@data_long
  1095  007DE0  EC40  F03C         	call	_Transmit	;wreg free
  1096  007DE4                     l1801:
  1097                           
  1098                           ;main.c: 170:         if(rxMsg[4] == 0x02){
  1099  007DE4  0E02               	movlw	2
  1100  007DE6  181C               	xorwf	(main@rxMsg+4)^0,w,c
  1101  007DE8  A4D8               	btfss	status,2,c
  1102  007DEA  EFF9  F03E         	goto	u581
  1103  007DEE  EFFB  F03E         	goto	u580
  1104  007DF2                     u581:
  1105  007DF2  EFA6  F03E         	goto	l1781
  1106  007DF6                     u580:
  1107  007DF6                     
  1108                           ;main.c: 171:             for (uint8_t i = 0; i < RXNumberOfBytes; i++) {
  1109  007DF6  0E00               	movlw	0
  1110  007DF8  6E40               	movwf	main@i_1046^0,c
  1111  007DFA  EF0E  F03F         	goto	l1809
  1112  007DFE                     l1805:
  1113                           
  1114                           ;main.c: 172:                 txMsg[i] = rxMsg[i];
  1115  007DFE  0E18               	movlw	low main@rxMsg
  1116  007E00  2440               	addwf	main@i_1046^0,w,c
  1117  007E02  6ED9               	movwf	fsr2l,c
  1118  007E04  6ADA               	clrf	fsr2h,c
  1119  007E06  0E00               	movlw	high main@rxMsg
  1120  007E08  22DA               	addwfc	fsr2h,f,c
  1121  007E0A  0E36               	movlw	low main@txMsg
  1122  007E0C  2440               	addwf	main@i_1046^0,w,c
  1123  007E0E  6EE1               	movwf	fsr1l,c
  1124  007E10  6AE2               	clrf	fsr1h,c
  1125  007E12  0E00               	movlw	high main@txMsg
  1126  007E14  22E2               	addwfc	fsr1h,f,c
  1127  007E16  CFDF FFE7          	movff	indf2,indf1
  1128  007E1A                     
  1129                           ;main.c: 173:             }
  1130  007E1A  2A40               	incf	main@i_1046^0,f,c
  1131  007E1C                     l1809:
  1132  007E1C  5041               	movf	main@RXNumberOfBytes^0,w,c
  1133  007E1E  5C40               	subwf	main@i_1046^0,w,c
  1134  007E20  A0D8               	btfss	status,0,c
  1135  007E22  EF15  F03F         	goto	u591
  1136  007E26  EF17  F03F         	goto	u590
  1137  007E2A                     u591:
  1138  007E2A  EFFF  F03E         	goto	l1805
  1139  007E2E                     u590:
  1140  007E2E                     
  1141                           ;main.c: 176:              Transmit(txMsg, RXNumberOfBytes);
  1142  007E2E  0E36               	movlw	low main@txMsg
  1143  007E30  6E0B               	movwf	Transmit@data^0,c
  1144  007E32  0E00               	movlw	high main@txMsg
  1145  007E34  6E0C               	movwf	(Transmit@data+1)^0,c
  1146  007E36  C041  F00D         	movff	main@RXNumberOfBytes,Transmit@data_long
  1147  007E3A  EC40  F03C         	call	_Transmit	;wreg free
  1148  007E3E  EFA6  F03E         	goto	l1781
  1149  007E42  EF00  F000         	goto	start
  1150  007E46                     __end_of_main:
  1151                           	callstack 0
  1152                           
  1153 ;; *************** function _initVoltmeter *****************
  1154 ;; Defined at:
  1155 ;;		line 15 in file "voltmeter.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;		None
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;		None
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      void 
  1162 ;; Registers used:
  1163 ;;		wreg, status,2
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1169 ;;      Params:         0       0       0       0       0       0       0       0       0
  1170 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1171 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1172 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1173 ;;Total ram usage:        0 bytes
  1174 ;; Hardware stack levels used: 1
  1175 ;; This function calls:
  1176 ;;		Nothing
  1177 ;; This function is called by:
  1178 ;;		_main
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           	psect	text1
  1183  007474                     __ptext1:
  1184                           	callstack 0
  1185  007474                     _initVoltmeter:
  1186                           	callstack 30
  1187  007474                     
  1188                           ;voltmeter.c: 36:     ADCLK = 0b00011111;
  1189  007474  0E1F               	movlw	31
  1190  007476  010F               	movlb	15	; () banked
  1191  007478  6F57               	movwf	87,b	;volatile
  1192                           
  1193                           ;voltmeter.c: 37:     ADPCH = 0b00000011;
  1194  00747A  0E03               	movlw	3
  1195  00747C  6F5F               	movwf	95,b	;volatile
  1196                           
  1197                           ;voltmeter.c: 38:     ADACQ = 0x014;
  1198  00747E  0E14               	movlw	20
  1199  007480  6F5C               	movwf	92,b	;volatile
  1200  007482                     
  1201                           ; BSR set to: 15
  1202                           ;voltmeter.c: 39:     ADCON0bits.ADON = 1;
  1203  007482  8E60               	bsf	96,7,c	;volatile
  1204  007484                     
  1205                           ; BSR set to: 15
  1206                           ;voltmeter.c: 41:     TRISAbits.TRISA3 = 1;
  1207  007484  8688               	bsf	136,3,c	;volatile
  1208  007486                     
  1209                           ; BSR set to: 15
  1210                           ;voltmeter.c: 42:     ANSELAbits.ANSELA3 = 1;
  1211  007486  8711               	bsf	17,3,b	;volatile
  1212  007488                     
  1213                           ; BSR set to: 15
  1214  007488  0012               	return		;funcret
  1215  00748A                     __end_of_initVoltmeter:
  1216                           	callstack 0
  1217                           
  1218 ;; *************** function _UARTInit *****************
  1219 ;; Defined at:
  1220 ;;		line 16 in file "uart.c"
  1221 ;; Parameters:    Size  Location     Type
  1222 ;;  baudRate        2    0[COMRAM] unsigned short 
  1223 ;; Auto vars:     Size  Location     Type
  1224 ;;		None
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  1    wreg      void 
  1227 ;; Registers used:
  1228 ;;		wreg, status,2
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1234 ;;      Params:         2       0       0       0       0       0       0       0       0
  1235 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1236 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1237 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1238 ;;Total ram usage:        2 bytes
  1239 ;; Hardware stack levels used: 1
  1240 ;; This function calls:
  1241 ;;		Nothing
  1242 ;; This function is called by:
  1243 ;;		_main
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247                           	psect	text2
  1248  00758A                     __ptext2:
  1249                           	callstack 0
  1250  00758A                     _UARTInit:
  1251                           	callstack 30
  1252  00758A                     
  1253                           ;uart.c: 19:     TRISCbits.TRISC6 = 1;
  1254  00758A  8C8A               	bsf	138,6,c	;volatile
  1255                           
  1256                           ;uart.c: 20:     TRISCbits.TRISC7 = 1;
  1257  00758C  8E8A               	bsf	138,7,c	;volatile
  1258                           
  1259                           ;uart.c: 21:     ANSELCbits.ANSELC7 = 0;
  1260  00758E  010F               	movlb	15	; () banked
  1261  007590  9F21               	bcf	33,7,b	;volatile
  1262                           
  1263                           ;uart.c: 23:     TRISAbits.TRISA0 = 0;
  1264  007592  9088               	bcf	136,0,c	;volatile
  1265                           
  1266                           ;uart.c: 24:     LATAbits.LATA0 = 0;
  1267  007594  9083               	bcf	131,0,c	;volatile
  1268  007596                     
  1269                           ; BSR set to: 15
  1270                           ;uart.c: 27:     TX1STA = 0;
  1271  007596  0E00               	movlw	0
  1272  007598  6E9E               	movwf	158,c	;volatile
  1273                           
  1274                           ;uart.c: 28:     RC1STA = 0;
  1275  00759A  0E00               	movlw	0
  1276  00759C  6E9D               	movwf	157,c	;volatile
  1277                           
  1278                           ;uart.c: 29:     RC6PPS = 0x09;
  1279  00759E  0E09               	movlw	9
  1280  0075A0  010E               	movlb	14	; () banked
  1281  0075A2  6FFD               	movwf	253,b	;volatile
  1282  0075A4                     
  1283                           ; BSR set to: 14
  1284                           ;uart.c: 31:     TX1STAbits.SYNC = 0;
  1285  0075A4  989E               	bcf	158,4,c	;volatile
  1286  0075A6                     
  1287                           ; BSR set to: 14
  1288                           ;uart.c: 32:     TX1STAbits.TX9 = 0;
  1289  0075A6  9C9E               	bcf	158,6,c	;volatile
  1290  0075A8                     
  1291                           ; BSR set to: 14
  1292                           ;uart.c: 33:     RC1STAbits.RX9 = 0;
  1293  0075A8  9C9D               	bcf	157,6,c	;volatile
  1294  0075AA                     
  1295                           ; BSR set to: 14
  1296                           ;uart.c: 34:     RC1STAbits.CREN = 1;
  1297  0075AA  889D               	bsf	157,4,c	;volatile
  1298  0075AC                     
  1299                           ; BSR set to: 14
  1300                           ;uart.c: 35:     RC1STAbits.ADDEN = 0;
  1301  0075AC  969D               	bcf	157,3,c	;volatile
  1302  0075AE                     
  1303                           ; BSR set to: 14
  1304                           ;uart.c: 37:     PIE3bits.RC1IE = 1;
  1305  0075AE  8BC5               	bsf	197,5,b	;volatile
  1306  0075B0                     
  1307                           ; BSR set to: 14
  1308                           ;uart.c: 38:     PIE3bits.TX1IE = 0;
  1309  0075B0  99C5               	bcf	197,4,b	;volatile
  1310  0075B2                     
  1311                           ; BSR set to: 14
  1312                           ;uart.c: 40:     TX1STAbits.BRGH = 1;
  1313  0075B2  849E               	bsf	158,2,c	;volatile
  1314  0075B4                     
  1315                           ; BSR set to: 14
  1316                           ;uart.c: 41:     BAUD1CONbits.BRG16 = 1;
  1317  0075B4  869F               	bsf	159,3,c	;volatile
  1318                           
  1319                           ;uart.c: 45:     SP1BRG = 12;
  1320  0075B6  0E00               	movlw	0
  1321  0075B8  6E9C               	movwf	156,c	;volatile
  1322  0075BA  0E0C               	movlw	12
  1323  0075BC  6E9B               	movwf	155,c	;volatile
  1324                           
  1325                           ;uart.c: 46:     SP1BRGH = 0;
  1326  0075BE  0E00               	movlw	0
  1327  0075C0  6E9C               	movwf	156,c	;volatile
  1328  0075C2                     
  1329                           ; BSR set to: 14
  1330                           ;uart.c: 50:     TX1STAbits.TXEN = 1;
  1331  0075C2  8A9E               	bsf	158,5,c	;volatile
  1332  0075C4                     
  1333                           ; BSR set to: 14
  1334                           ;uart.c: 51:     RC1STAbits.SPEN = 1;
  1335  0075C4  8E9D               	bsf	157,7,c	;volatile
  1336  0075C6                     
  1337                           ; BSR set to: 14
  1338                           ;uart.c: 53:     PIR3bits.RC1IF = 0;
  1339  0075C6  9BCD               	bcf	205,5,b	;volatile
  1340  0075C8                     
  1341                           ; BSR set to: 14
  1342                           ;uart.c: 55:     PIE3bits.RC1IE = 1;
  1343  0075C8  8BC5               	bsf	197,5,b	;volatile
  1344  0075CA                     
  1345                           ; BSR set to: 14
  1346                           ;uart.c: 56:     INTCONbits.PEIE = 1;
  1347  0075CA  8CF2               	bsf	242,6,c	;volatile
  1348  0075CC                     
  1349                           ; BSR set to: 14
  1350  0075CC  0012               	return		;funcret
  1351  0075CE                     __end_of_UARTInit:
  1352                           	callstack 0
  1353                           
  1354 ;; *************** function _Transmit *****************
  1355 ;; Defined at:
  1356 ;;		line 17 in file "sendRecept.c"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;  data            2   10[COMRAM] PTR const unsigned char 
  1359 ;;		 -> main@txMsg(9), 
  1360 ;;  data_long       1   12[COMRAM] const unsigned char 
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;  i               1   15[COMRAM] unsigned char 
  1363 ;;  reg_val         1   14[COMRAM] unsigned char 
  1364 ;; Return value:  Size  Location     Type
  1365 ;;                  1    wreg      void 
  1366 ;; Registers used:
  1367 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1368 ;; Tracked objects:
  1369 ;;		On entry : 0/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1373 ;;      Params:         3       0       0       0       0       0       0       0       0
  1374 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1375 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1376 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1377 ;;Total ram usage:        6 bytes
  1378 ;; Hardware stack levels used: 1
  1379 ;; Hardware stack levels required when called: 2
  1380 ;; This function calls:
  1381 ;;		_AntennaTX
  1382 ;;		_ReadSXRegister
  1383 ;;		_UARTWriteByteHex
  1384 ;;		_UARTWriteStr
  1385 ;;		_UARTWriteStrLn
  1386 ;;		_WriteSXRegister
  1387 ;; This function is called by:
  1388 ;;		_main
  1389 ;; This function uses a non-reentrant model
  1390 ;;
  1391                           
  1392                           	psect	text3
  1393  007880                     __ptext3:
  1394                           	callstack 0
  1395  007880                     _Transmit:
  1396                           	callstack 28
  1397  007880                     
  1398                           ;sendRecept.c: 20:     uint8_t reg_val;;sendRecept.c: 21:     uint8_t i;;sendRecept.c: 2
      +                          7:     AntennaTX();
  1399  007880  EC2F  F03A         	call	_AntennaTX	;wreg free
  1400  007884                     
  1401                           ;sendRecept.c: 32:     WriteSXRegister(0x0D, ReadSXRegister(0x0E));
  1402  007884  0E0E               	movlw	14
  1403  007886  EC60  F03A         	call	_ReadSXRegister
  1404  00788A  6E05               	movwf	WriteSXRegister@data^0,c
  1405  00788C  0E0D               	movlw	13
  1406  00788E  EC45  F03A         	call	_WriteSXRegister
  1407  007892                     
  1408                           ;sendRecept.c: 33:     WriteSXRegister(0x22, data_long);
  1409  007892  C00D  F005         	movff	Transmit@data_long,WriteSXRegister@data
  1410  007896  0E22               	movlw	34
  1411  007898  EC45  F03A         	call	_WriteSXRegister
  1412  00789C                     
  1413                           ;sendRecept.c: 35:     for (i = 0; i < data_long; i++) {
  1414  00789C  0E00               	movlw	0
  1415  00789E  6E10               	movwf	Transmit@i^0,c
  1416  0078A0  500D               	movf	Transmit@data_long^0,w,c
  1417  0078A2  A4D8               	btfss	status,2,c
  1418  0078A4  EF56  F03C         	goto	u421
  1419  0078A8  EF58  F03C         	goto	u420
  1420  0078AC                     u421:
  1421  0078AC  EF5A  F03C         	goto	l1611
  1422  0078B0                     u420:
  1423  0078B0  EF6F  F03C         	goto	l1617
  1424  0078B4                     l1611:
  1425                           
  1426                           ;sendRecept.c: 36:         WriteSXRegister(0x00, data[i]);
  1427  0078B4  5010               	movf	Transmit@i^0,w,c
  1428  0078B6  240B               	addwf	Transmit@data^0,w,c
  1429  0078B8  6ED9               	movwf	fsr2l,c
  1430  0078BA  0E00               	movlw	0
  1431  0078BC  200C               	addwfc	(Transmit@data+1)^0,w,c
  1432  0078BE  6EDA               	movwf	fsr2h,c
  1433  0078C0  50DF               	movf	indf2,w,c
  1434  0078C2  6E05               	movwf	WriteSXRegister@data^0,c
  1435  0078C4  0E00               	movlw	0
  1436  0078C6  EC45  F03A         	call	_WriteSXRegister
  1437  0078CA                     
  1438                           ;sendRecept.c: 37:     }
  1439  0078CA  2A10               	incf	Transmit@i^0,f,c
  1440  0078CC  500D               	movf	Transmit@data_long^0,w,c
  1441  0078CE  5C10               	subwf	Transmit@i^0,w,c
  1442  0078D0  A0D8               	btfss	status,0,c
  1443  0078D2  EF6D  F03C         	goto	u431
  1444  0078D6  EF6F  F03C         	goto	u430
  1445  0078DA                     u431:
  1446  0078DA  EF5A  F03C         	goto	l1611
  1447  0078DE                     u430:
  1448  0078DE                     l1617:
  1449                           
  1450                           ;sendRecept.c: 42:     WriteSXRegister(0x01, 0x83);
  1451  0078DE  0E83               	movlw	131
  1452  0078E0  6E05               	movwf	WriteSXRegister@data^0,c
  1453  0078E2  0E01               	movlw	1
  1454  0078E4  EC45  F03A         	call	_WriteSXRegister
  1455  0078E8                     
  1456                           ;sendRecept.c: 43:     _delay((unsigned long)((100)*(1000000UL/4000.0)));
  1457  0078E8  0E21               	movlw	33
  1458  0078EA  6E0E               	movwf	??_Transmit^0,c
  1459  0078EC  0E76               	movlw	118
  1460  0078EE                     u657:
  1461  0078EE  2EE8               	decfsz	wreg,f,c
  1462  0078F0  D7FE               	bra	u657
  1463  0078F2  2E0E               	decfsz	??_Transmit^0,f,c
  1464  0078F4  D7FC               	bra	u657
  1465  0078F6  D000               	nop2	
  1466  0078F8                     
  1467                           ;sendRecept.c: 47:     reg_val = ReadSXRegister(0x12);
  1468  0078F8  0E12               	movlw	18
  1469  0078FA  EC60  F03A         	call	_ReadSXRegister
  1470  0078FE  6E0F               	movwf	Transmit@reg_val^0,c
  1471                           
  1472                           ;sendRecept.c: 48:     while ((reg_val & 0x08) == 0x00) {
  1473  007900  EF86  F03C         	goto	l1625
  1474  007904                     l1623:
  1475                           
  1476                           ;sendRecept.c: 49:         reg_val = ReadSXRegister(0x12);
  1477  007904  0E12               	movlw	18
  1478  007906  EC60  F03A         	call	_ReadSXRegister
  1479  00790A  6E0F               	movwf	Transmit@reg_val^0,c
  1480  00790C                     l1625:
  1481                           
  1482                           ;sendRecept.c: 48:     while ((reg_val & 0x08) == 0x00) {
  1483  00790C  A60F               	btfss	Transmit@reg_val^0,3,c
  1484  00790E  EF8B  F03C         	goto	u441
  1485  007912  EF8D  F03C         	goto	u440
  1486  007916                     u441:
  1487  007916  EF82  F03C         	goto	l1623
  1488  00791A                     u440:
  1489  00791A                     
  1490                           ;sendRecept.c: 65:     WriteSXRegister(0x12, 0xFF);
  1491  00791A  0EFF               	movlw	255
  1492  00791C  6E05               	movwf	WriteSXRegister@data^0,c
  1493  00791E  0E12               	movlw	18
  1494  007920  EC45  F03A         	call	_WriteSXRegister
  1495  007924                     
  1496                           ;sendRecept.c: 74:     UARTWriteStr("Message envoye : ");
  1497  007924  0E6F               	movlw	low STR_18
  1498  007926  6E02               	movwf	UARTWriteStr@string^0,c
  1499  007928  0E7F               	movlw	high STR_18
  1500  00792A  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  1501  00792C  EC15  F03B         	call	_UARTWriteStr	;wreg free
  1502  007930                     
  1503                           ;sendRecept.c: 75:     for(i = 0; i < data_long; i++) {
  1504  007930  0E00               	movlw	0
  1505  007932  6E10               	movwf	Transmit@i^0,c
  1506  007934  500D               	movf	Transmit@data_long^0,w,c
  1507  007936  A4D8               	btfss	status,2,c
  1508  007938  EFA0  F03C         	goto	u451
  1509  00793C  EFA2  F03C         	goto	u450
  1510  007940                     u451:
  1511  007940  EFA4  F03C         	goto	l1637
  1512  007944                     u450:
  1513  007944  EFC1  F03C         	goto	l1645
  1514  007948                     l1637:
  1515                           
  1516                           ;sendRecept.c: 76:             UARTWriteByteHex(data[i]);
  1517  007948  5010               	movf	Transmit@i^0,w,c
  1518  00794A  240B               	addwf	Transmit@data^0,w,c
  1519  00794C  6ED9               	movwf	fsr2l,c
  1520  00794E  0E00               	movlw	0
  1521  007950  200C               	addwfc	(Transmit@data+1)^0,w,c
  1522  007952  6EDA               	movwf	fsr2h,c
  1523  007954  50DF               	movf	indf2,w,c
  1524  007956  6E0E               	movwf	??_Transmit^0,c
  1525  007958  500E               	movf	??_Transmit^0,w,c
  1526  00795A  6E02               	movwf	UARTWriteByteHex@data^0,c
  1527  00795C  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  1528  00795E  EC51  F03B         	call	_UARTWriteByteHex	;wreg free
  1529  007962                     
  1530                           ;sendRecept.c: 77:             UARTWriteStr(" ");
  1531  007962  0E86               	movlw	low (STR_16+25)
  1532  007964  6E02               	movwf	UARTWriteStr@string^0,c
  1533  007966  0E7E               	movlw	high (STR_16+25)
  1534  007968  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  1535  00796A  EC15  F03B         	call	_UARTWriteStr	;wreg free
  1536  00796E                     
  1537                           ;sendRecept.c: 78:     }
  1538  00796E  2A10               	incf	Transmit@i^0,f,c
  1539  007970  500D               	movf	Transmit@data_long^0,w,c
  1540  007972  5C10               	subwf	Transmit@i^0,w,c
  1541  007974  A0D8               	btfss	status,0,c
  1542  007976  EFBF  F03C         	goto	u461
  1543  00797A  EFC1  F03C         	goto	u460
  1544  00797E                     u461:
  1545  00797E  EFA4  F03C         	goto	l1637
  1546  007982                     u460:
  1547  007982                     l1645:
  1548                           
  1549                           ;sendRecept.c: 79:     UARTWriteStrLn(" ");
  1550  007982  0E86               	movlw	low (STR_16+25)
  1551  007984  6E02               	movwf	UARTWriteStrLn@string^0,c
  1552  007986  0E7E               	movlw	high (STR_16+25)
  1553  007988  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1554  00798A  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  1555  00798E  0012               	return		;funcret
  1556  007990                     __end_of_Transmit:
  1557                           	callstack 0
  1558                           
  1559 ;; *************** function _AntennaTX *****************
  1560 ;; Defined at:
  1561 ;;		line 34 in file "RF_LoRa_868_SO.c"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;		None
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;		None
  1566 ;; Return value:  Size  Location     Type
  1567 ;;                  1    wreg      void 
  1568 ;; Registers used:
  1569 ;;		wreg
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1575 ;;      Params:         0       0       0       0       0       0       0       0       0
  1576 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1577 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1578 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1579 ;;Total ram usage:        1 bytes
  1580 ;; Hardware stack levels used: 1
  1581 ;; This function calls:
  1582 ;;		Nothing
  1583 ;; This function is called by:
  1584 ;;		_Transmit
  1585 ;; This function uses a non-reentrant model
  1586 ;;
  1587                           
  1588                           	psect	text4
  1589  00745E                     __ptext4:
  1590                           	callstack 0
  1591  00745E                     _AntennaTX:
  1592                           	callstack 29
  1593  00745E                     
  1594                           ;RF_LoRa_868_SO.c: 35:     LATBbits.LATB4 = 0;
  1595  00745E  9884               	bcf	132,4,c	;volatile
  1596                           
  1597                           ;RF_LoRa_868_SO.c: 36:     LATBbits.LATB3 = 0;
  1598  007460  9684               	bcf	132,3,c	;volatile
  1599  007462                     
  1600                           ;RF_LoRa_868_SO.c: 37:     _delay((unsigned long)((10)*(1000000UL/4000.0)));
  1601  007462  0E04               	movlw	4
  1602  007464  6E01               	movwf	??_AntennaTX^0,c
  1603  007466  0E3E               	movlw	62
  1604  007468                     u667:
  1605  007468  2EE8               	decfsz	wreg,f,c
  1606  00746A  D7FE               	bra	u667
  1607  00746C  2E01               	decfsz	??_AntennaTX^0,f,c
  1608  00746E  D7FC               	bra	u667
  1609  007470                     
  1610                           ;RF_LoRa_868_SO.c: 38:     LATBbits.LATB3 = 1;
  1611  007470  8684               	bsf	132,3,c	;volatile
  1612  007472  0012               	return		;funcret
  1613  007474                     __end_of_AntennaTX:
  1614                           	callstack 0
  1615                           
  1616 ;; *************** function _SPIInit *****************
  1617 ;; Defined at:
  1618 ;;		line 16 in file "spi.c"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;		None
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;		None
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  1    wreg      void 
  1625 ;; Registers used:
  1626 ;;		wreg, status,2
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1632 ;;      Params:         0       0       0       0       0       0       0       0       0
  1633 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1634 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1635 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1636 ;;Total ram usage:        0 bytes
  1637 ;; Hardware stack levels used: 1
  1638 ;; This function calls:
  1639 ;;		Nothing
  1640 ;; This function is called by:
  1641 ;;		_main
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645                           	psect	text5
  1646  007552                     __ptext5:
  1647                           	callstack 0
  1648  007552                     _SPIInit:
  1649                           	callstack 30
  1650  007552                     
  1651                           ;spi.c: 18:     TRISCbits.TRISC3 = 0;
  1652  007552  968A               	bcf	138,3,c	;volatile
  1653                           
  1654                           ;spi.c: 19:     ANSELCbits.ANSELC3 = 0;
  1655  007554  010F               	movlb	15	; () banked
  1656  007556  9721               	bcf	33,3,b	;volatile
  1657                           
  1658                           ;spi.c: 20:     TRISCbits.TRISC4 = 1;
  1659  007558  888A               	bsf	138,4,c	;volatile
  1660                           
  1661                           ;spi.c: 21:     ANSELCbits.ANSELC4 = 0;
  1662  00755A  9921               	bcf	33,4,b	;volatile
  1663                           
  1664                           ;spi.c: 22:     TRISCbits.TRISC5 = 0;
  1665  00755C  9A8A               	bcf	138,5,c	;volatile
  1666                           
  1667                           ;spi.c: 24:     TRISCbits.TRISC2 = 0;
  1668  00755E  948A               	bcf	138,2,c	;volatile
  1669                           
  1670                           ;spi.c: 25:     LATCbits.LATC2 = 1;
  1671  007560  8485               	bsf	133,2,c	;volatile
  1672                           
  1673                           ;spi.c: 27:     TRISCbits.TRISC0 = 0;
  1674  007562  908A               	bcf	138,0,c	;volatile
  1675                           
  1676                           ;spi.c: 28:     LATCbits.LATC0 = 1;
  1677  007564  8085               	bsf	133,0,c	;volatile
  1678                           
  1679                           ;spi.c: 30:     TRISCbits.TRISC1 = 0;
  1680  007566  928A               	bcf	138,1,c	;volatile
  1681                           
  1682                           ;spi.c: 31:     LATCbits.LATC1 = 1;
  1683  007568  8285               	bsf	133,1,c	;volatile
  1684  00756A                     
  1685                           ; BSR set to: 15
  1686                           ;spi.c: 33:     RC3PPS = 0x0D;
  1687  00756A  0E0D               	movlw	13
  1688  00756C  010E               	movlb	14	; () banked
  1689  00756E  6FFA               	movwf	250,b	;volatile
  1690                           
  1691                           ;spi.c: 34:     RC5PPS = 0x0E;
  1692  007570  0E0E               	movlw	14
  1693  007572  6FFC               	movwf	252,b	;volatile
  1694                           
  1695                           ;spi.c: 35:     SSP1CLKPPS = 0b00010011;
  1696  007574  0E13               	movlw	19
  1697  007576  6FB7               	movwf	183,b	;volatile
  1698                           
  1699                           ;spi.c: 36:     SSP1DATPPS = 0b00010100;
  1700  007578  0E14               	movlw	20
  1701  00757A  6FB8               	movwf	184,b	;volatile
  1702                           
  1703                           ;spi.c: 37:     SSP1STAT = 0b01000000;
  1704  00757C  0E40               	movlw	64
  1705  00757E  6E95               	movwf	149,c	;volatile
  1706                           
  1707                           ;spi.c: 40:     SSP1CON1 = 0b00100000;
  1708  007580  0E20               	movlw	32
  1709  007582  6E96               	movwf	150,c	;volatile
  1710                           
  1711                           ;spi.c: 46:     SSP1CON3 = 0b00000000;
  1712  007584  0E00               	movlw	0
  1713  007586  6E98               	movwf	152,c	;volatile
  1714  007588                     
  1715                           ; BSR set to: 14
  1716  007588  0012               	return		;funcret
  1717  00758A                     __end_of_SPIInit:
  1718                           	callstack 0
  1719                           
  1720 ;; *************** function _ResetRFModule *****************
  1721 ;; Defined at:
  1722 ;;		line 26 in file "RF_LoRa_868_SO.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;		None
  1725 ;; Auto vars:     Size  Location     Type
  1726 ;;		None
  1727 ;; Return value:  Size  Location     Type
  1728 ;;                  1    wreg      void 
  1729 ;; Registers used:
  1730 ;;		wreg
  1731 ;; Tracked objects:
  1732 ;;		On entry : 0/0
  1733 ;;		On exit  : 0/0
  1734 ;;		Unchanged: 0/0
  1735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1736 ;;      Params:         0       0       0       0       0       0       0       0       0
  1737 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1738 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1739 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1740 ;;Total ram usage:        1 bytes
  1741 ;; Hardware stack levels used: 1
  1742 ;; This function calls:
  1743 ;;		Nothing
  1744 ;; This function is called by:
  1745 ;;		_main
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           	psect	text6
  1750  007500                     __ptext6:
  1751                           	callstack 0
  1752  007500                     _ResetRFModule:
  1753                           	callstack 30
  1754  007500                     
  1755                           ;RF_LoRa_868_SO.c: 27:     LATBbits.LATB2 = 1;
  1756  007500  8484               	bsf	132,2,c	;volatile
  1757                           
  1758                           ;RF_LoRa_868_SO.c: 28:     TRISBbits.TRISB2 = 0;
  1759  007502  9489               	bcf	137,2,c	;volatile
  1760  007504                     
  1761                           ;RF_LoRa_868_SO.c: 29:     _delay((unsigned long)((50)*(1000000UL/4000.0)));
  1762  007504  0E11               	movlw	17
  1763  007506  6E01               	movwf	??_ResetRFModule^0,c
  1764  007508  0E3A               	movlw	58
  1765  00750A                     u677:
  1766  00750A  2EE8               	decfsz	wreg,f,c
  1767  00750C  D7FE               	bra	u677
  1768  00750E  2E01               	decfsz	??_ResetRFModule^0,f,c
  1769  007510  D7FC               	bra	u677
  1770  007512  D000               	nop2	
  1771  007514                     
  1772                           ;RF_LoRa_868_SO.c: 30:     TRISBbits.TRISB2 = 1;
  1773  007514  8489               	bsf	137,2,c	;volatile
  1774                           
  1775                           ;RF_LoRa_868_SO.c: 31:     _delay((unsigned long)((50)*(1000000UL/4000.0)));
  1776  007516  0E11               	movlw	17
  1777  007518  6E01               	movwf	??_ResetRFModule^0,c
  1778  00751A  0E3A               	movlw	58
  1779  00751C                     u687:
  1780  00751C  2EE8               	decfsz	wreg,f,c
  1781  00751E  D7FE               	bra	u687
  1782  007520  2E01               	decfsz	??_ResetRFModule^0,f,c
  1783  007522  D7FC               	bra	u687
  1784  007524  D000               	nop2	
  1785  007526  0012               	return		;funcret
  1786  007528                     __end_of_ResetRFModule:
  1787                           	callstack 0
  1788                           
  1789 ;; *************** function _Receive *****************
  1790 ;; Defined at:
  1791 ;;		line 84 in file "sendRecept.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;  data            2   10[COMRAM] PTR unsigned char 
  1794 ;;		 -> main@rxMsg(30), 
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;  reg_val         1   15[COMRAM] unsigned char 
  1797 ;;  i               1   14[COMRAM] unsigned char 
  1798 ;;  RXNumberOfBy    1   13[COMRAM] unsigned char 
  1799 ;; Return value:  Size  Location     Type
  1800 ;;                  1    wreg      void 
  1801 ;; Registers used:
  1802 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1803 ;; Tracked objects:
  1804 ;;		On entry : 0/0
  1805 ;;		On exit  : 0/0
  1806 ;;		Unchanged: 0/0
  1807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1808 ;;      Params:         2       0       0       0       0       0       0       0       0
  1809 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1810 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1811 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1812 ;;Total ram usage:        6 bytes
  1813 ;; Hardware stack levels used: 1
  1814 ;; Hardware stack levels required when called: 2
  1815 ;; This function calls:
  1816 ;;		_AntennaRX
  1817 ;;		_ReadSXRegister
  1818 ;;		_UARTWriteByteHex
  1819 ;;		_UARTWriteStr
  1820 ;;		_UARTWriteStrLn
  1821 ;;		_WriteSXRegister
  1822 ;; This function is called by:
  1823 ;;		_main
  1824 ;; This function uses a non-reentrant model
  1825 ;;
  1826                           
  1827                           	psect	text7
  1828  007AF8                     __ptext7:
  1829                           	callstack 0
  1830  007AF8                     _Receive:
  1831                           	callstack 28
  1832  007AF8                     
  1833                           ;sendRecept.c: 86:     uint8_t reg_val;;sendRecept.c: 87:     uint8_t RXNumberOfBytes;;s
      +                          endRecept.c: 88:     uint8_t i;;sendRecept.c: 90:     AntennaRX();
  1834  007AF8  EC24  F03A         	call	_AntennaRX	;wreg free
  1835  007AFC                     
  1836                           ;sendRecept.c: 93:     WriteSXRegister(0x0D, ReadSXRegister(0x0F));
  1837  007AFC  0E0F               	movlw	15
  1838  007AFE  EC60  F03A         	call	_ReadSXRegister
  1839  007B02  6E05               	movwf	WriteSXRegister@data^0,c
  1840  007B04  0E0D               	movlw	13
  1841  007B06  EC45  F03A         	call	_WriteSXRegister
  1842  007B0A                     
  1843                           ;sendRecept.c: 98:     WriteSXRegister(0x01, 0x85);
  1844  007B0A  0E85               	movlw	133
  1845  007B0C  6E05               	movwf	WriteSXRegister@data^0,c
  1846  007B0E  0E01               	movlw	1
  1847  007B10  EC45  F03A         	call	_WriteSXRegister
  1848  007B14                     
  1849                           ;sendRecept.c: 102:     _delay((unsigned long)((100)*(1000000UL/4000.0)));
  1850  007B14  0E21               	movlw	33
  1851  007B16  6E0D               	movwf	??_Receive^0,c
  1852  007B18  0E76               	movlw	118
  1853  007B1A                     u697:
  1854  007B1A  2EE8               	decfsz	wreg,f,c
  1855  007B1C  D7FE               	bra	u697
  1856  007B1E  2E0D               	decfsz	??_Receive^0,f,c
  1857  007B20  D7FC               	bra	u697
  1858  007B22  D000               	nop2	
  1859  007B24                     
  1860                           ;sendRecept.c: 106:     UARTWriteStrLn("-----------------------");
  1861  007B24  0ED5               	movlw	low STR_21
  1862  007B26  6E02               	movwf	UARTWriteStrLn@string^0,c
  1863  007B28  0E7E               	movlw	high STR_21
  1864  007B2A  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1865  007B2C  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  1866  007B30                     
  1867                           ;sendRecept.c: 107:     UARTWriteStrLn("waiting for valid header");
  1868  007B30  0EBC               	movlw	low STR_22
  1869  007B32  6E02               	movwf	UARTWriteStrLn@string^0,c
  1870  007B34  0E7E               	movlw	high STR_22
  1871  007B36  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1872  007B38  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  1873  007B3C                     l1661:
  1874                           
  1875                           ;sendRecept.c: 110:         reg_val = ReadSXRegister(0x12);
  1876  007B3C  0E12               	movlw	18
  1877  007B3E  EC60  F03A         	call	_ReadSXRegister
  1878  007B42  6E10               	movwf	Receive@reg_val^0,c
  1879  007B44                     
  1880                           ;sendRecept.c: 111:     } while (((reg_val & 0x10) == 0x00) && ((reg_val & 0x80) == 0x00
      +                          ));
  1881  007B44  B810               	btfsc	Receive@reg_val^0,4,c
  1882  007B46  EFA7  F03D         	goto	u471
  1883  007B4A  EFA9  F03D         	goto	u470
  1884  007B4E                     u471:
  1885  007B4E  EFB0  F03D         	goto	l1667
  1886  007B52                     u470:
  1887  007B52  AE10               	btfss	Receive@reg_val^0,7,c
  1888  007B54  EFAE  F03D         	goto	u481
  1889  007B58  EFB0  F03D         	goto	u480
  1890  007B5C                     u481:
  1891  007B5C  EF9E  F03D         	goto	l1661
  1892  007B60                     u480:
  1893  007B60                     l1667:
  1894                           
  1895                           ;sendRecept.c: 113:     if ((ReadSXRegister(0x12) & 0x10) == 0x00) {
  1896  007B60  0E12               	movlw	18
  1897  007B62  EC60  F03A         	call	_ReadSXRegister
  1898  007B66  6E0D               	movwf	??_Receive^0,c
  1899  007B68  B80D               	btfsc	??_Receive^0,4,c
  1900  007B6A  EFB9  F03D         	goto	u491
  1901  007B6E  EFBB  F03D         	goto	u490
  1902  007B72                     u491:
  1903  007B72  EFC2  F03D         	goto	l1673
  1904  007B76                     u490:
  1905  007B76                     
  1906                           ;sendRecept.c: 115:         WriteSXRegister(0x12, 0xFF);
  1907  007B76  0EFF               	movlw	255
  1908  007B78  6E05               	movwf	WriteSXRegister@data^0,c
  1909  007B7A  0E12               	movlw	18
  1910  007B7C  EC45  F03A         	call	_WriteSXRegister
  1911  007B80  EF35  F03E         	goto	l225
  1912  007B84                     l1673:
  1913                           
  1914                           ;sendRecept.c: 120:     UARTWriteStrLn("valid header received");
  1915  007B84  0E33               	movlw	low STR_23
  1916  007B86  6E02               	movwf	UARTWriteStrLn@string^0,c
  1917  007B88  0E7F               	movlw	high STR_23
  1918  007B8A  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1919  007B8C  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  1920  007B90                     
  1921                           ;sendRecept.c: 129:     reg_val = ReadSXRegister(0x12);
  1922  007B90  0E12               	movlw	18
  1923  007B92  EC60  F03A         	call	_ReadSXRegister
  1924  007B96  6E10               	movwf	Receive@reg_val^0,c
  1925                           
  1926                           ;sendRecept.c: 130:     while ((reg_val & 0x40) == 0x00) {
  1927  007B98  EFD2  F03D         	goto	l1679
  1928  007B9C                     l1677:
  1929                           
  1930                           ;sendRecept.c: 131:         reg_val = ReadSXRegister(0x12);
  1931  007B9C  0E12               	movlw	18
  1932  007B9E  EC60  F03A         	call	_ReadSXRegister
  1933  007BA2  6E10               	movwf	Receive@reg_val^0,c
  1934  007BA4                     l1679:
  1935                           
  1936                           ;sendRecept.c: 130:     while ((reg_val & 0x40) == 0x00) {
  1937  007BA4  AC10               	btfss	Receive@reg_val^0,6,c
  1938  007BA6  EFD7  F03D         	goto	u501
  1939  007BAA  EFD9  F03D         	goto	u500
  1940  007BAE                     u501:
  1941  007BAE  EFCE  F03D         	goto	l1677
  1942  007BB2                     u500:
  1943  007BB2                     
  1944                           ;sendRecept.c: 143:     if((reg_val & 0x20) != 0x00){
  1945  007BB2  AA10               	btfss	Receive@reg_val^0,5,c
  1946  007BB4  EFDE  F03D         	goto	u511
  1947  007BB8  EFE0  F03D         	goto	u510
  1948  007BBC                     u511:
  1949  007BBC  EFEE  F03D         	goto	l1683
  1950  007BC0                     u510:
  1951  007BC0                     
  1952                           ;sendRecept.c: 144:         UARTWriteStrLn(" ");
  1953  007BC0  0E86               	movlw	low (STR_16+25)
  1954  007BC2  6E02               	movwf	UARTWriteStrLn@string^0,c
  1955  007BC4  0E7E               	movlw	high (STR_16+25)
  1956  007BC6  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1957  007BC8  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  1958                           
  1959                           ;sendRecept.c: 145:         UARTWriteStrLn("payload CRC error");
  1960  007BCC  0E81               	movlw	low STR_25
  1961  007BCE  6E02               	movwf	UARTWriteStrLn@string^0,c
  1962  007BD0  0E7F               	movlw	high STR_25
  1963  007BD2  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1964  007BD4  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  1965                           
  1966                           ;sendRecept.c: 146:     }
  1967  007BD8  EF30  F03E         	goto	l1703
  1968  007BDC                     l1683:
  1969                           
  1970                           ;sendRecept.c: 149:         UARTWriteStr("received data: ");
  1971  007BDC  0EB5               	movlw	low STR_26
  1972  007BDE  6E02               	movwf	UARTWriteStr@string^0,c
  1973  007BE0  0E7F               	movlw	high STR_26
  1974  007BE2  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  1975  007BE4  EC15  F03B         	call	_UARTWriteStr	;wreg free
  1976  007BE8                     
  1977                           ;sendRecept.c: 150:         RXNumberOfBytes = ReadSXRegister(0x13);
  1978  007BE8  0E13               	movlw	19
  1979  007BEA  EC60  F03A         	call	_ReadSXRegister
  1980  007BEE  6E0E               	movwf	Receive@RXNumberOfBytes^0,c
  1981  007BF0                     
  1982                           ;sendRecept.c: 151:         WriteSXRegister(0x0D, ReadSXRegister(0x10));
  1983  007BF0  0E10               	movlw	16
  1984  007BF2  EC60  F03A         	call	_ReadSXRegister
  1985  007BF6  6E05               	movwf	WriteSXRegister@data^0,c
  1986  007BF8  0E0D               	movlw	13
  1987  007BFA  EC45  F03A         	call	_WriteSXRegister
  1988  007BFE                     
  1989                           ;sendRecept.c: 153:         for (i = 0; i < RXNumberOfBytes; i++) {
  1990  007BFE  0E00               	movlw	0
  1991  007C00  6E0F               	movwf	Receive@i^0,c
  1992  007C02  EF21  F03E         	goto	l1699
  1993  007C06                     l1691:
  1994                           
  1995                           ;sendRecept.c: 160:             data[i] = ReadSXRegister(0x00);
  1996  007C06  500F               	movf	Receive@i^0,w,c
  1997  007C08  240B               	addwf	Receive@data^0,w,c
  1998  007C0A  6ED9               	movwf	fsr2l,c
  1999  007C0C  0E00               	movlw	0
  2000  007C0E  200C               	addwfc	(Receive@data+1)^0,w,c
  2001  007C10  6EDA               	movwf	fsr2h,c
  2002  007C12  0E00               	movlw	0
  2003  007C14  EC60  F03A         	call	_ReadSXRegister
  2004  007C18  6EDF               	movwf	indf2,c
  2005  007C1A                     
  2006                           ;sendRecept.c: 161:             UARTWriteByteHex(data[i]);
  2007  007C1A  500F               	movf	Receive@i^0,w,c
  2008  007C1C  240B               	addwf	Receive@data^0,w,c
  2009  007C1E  6ED9               	movwf	fsr2l,c
  2010  007C20  0E00               	movlw	0
  2011  007C22  200C               	addwfc	(Receive@data+1)^0,w,c
  2012  007C24  6EDA               	movwf	fsr2h,c
  2013  007C26  50DF               	movf	indf2,w,c
  2014  007C28  6E0D               	movwf	??_Receive^0,c
  2015  007C2A  500D               	movf	??_Receive^0,w,c
  2016  007C2C  6E02               	movwf	UARTWriteByteHex@data^0,c
  2017  007C2E  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  2018  007C30  EC51  F03B         	call	_UARTWriteByteHex	;wreg free
  2019  007C34                     
  2020                           ;sendRecept.c: 162:             UARTWriteStr(" ");
  2021  007C34  0E86               	movlw	low (STR_16+25)
  2022  007C36  6E02               	movwf	UARTWriteStr@string^0,c
  2023  007C38  0E7E               	movlw	high (STR_16+25)
  2024  007C3A  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  2025  007C3C  EC15  F03B         	call	_UARTWriteStr	;wreg free
  2026  007C40                     
  2027                           ;sendRecept.c: 163:         }
  2028  007C40  2A0F               	incf	Receive@i^0,f,c
  2029  007C42                     l1699:
  2030  007C42  500E               	movf	Receive@RXNumberOfBytes^0,w,c
  2031  007C44  5C0F               	subwf	Receive@i^0,w,c
  2032  007C46  A0D8               	btfss	status,0,c
  2033  007C48  EF28  F03E         	goto	u521
  2034  007C4C  EF2A  F03E         	goto	u520
  2035  007C50                     u521:
  2036  007C50  EF03  F03E         	goto	l1691
  2037  007C54                     u520:
  2038  007C54                     
  2039                           ;sendRecept.c: 164:         UARTWriteStrLn(" ");
  2040  007C54  0E86               	movlw	low (STR_16+25)
  2041  007C56  6E02               	movwf	UARTWriteStrLn@string^0,c
  2042  007C58  0E7E               	movlw	high (STR_16+25)
  2043  007C5A  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2044  007C5C  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  2045  007C60                     l1703:
  2046                           
  2047                           ;sendRecept.c: 188:     WriteSXRegister(0x12, 0xFF);
  2048  007C60  0EFF               	movlw	255
  2049  007C62  6E05               	movwf	WriteSXRegister@data^0,c
  2050  007C64  0E12               	movlw	18
  2051  007C66  EC45  F03A         	call	_WriteSXRegister
  2052  007C6A                     l225:
  2053  007C6A  0012               	return		;funcret
  2054  007C6C                     __end_of_Receive:
  2055                           	callstack 0
  2056                           
  2057 ;; *************** function _AntennaRX *****************
  2058 ;; Defined at:
  2059 ;;		line 41 in file "RF_LoRa_868_SO.c"
  2060 ;; Parameters:    Size  Location     Type
  2061 ;;		None
  2062 ;; Auto vars:     Size  Location     Type
  2063 ;;		None
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  1    wreg      void 
  2066 ;; Registers used:
  2067 ;;		wreg
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2073 ;;      Params:         0       0       0       0       0       0       0       0       0
  2074 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2075 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2076 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2077 ;;Total ram usage:        1 bytes
  2078 ;; Hardware stack levels used: 1
  2079 ;; This function calls:
  2080 ;;		Nothing
  2081 ;; This function is called by:
  2082 ;;		_Receive
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           	psect	text8
  2087  007448                     __ptext8:
  2088                           	callstack 0
  2089  007448                     _AntennaRX:
  2090                           	callstack 29
  2091  007448                     
  2092                           ;RF_LoRa_868_SO.c: 42:     LATBbits.LATB4 = 0;
  2093  007448  9884               	bcf	132,4,c	;volatile
  2094                           
  2095                           ;RF_LoRa_868_SO.c: 43:     LATBbits.LATB3 = 0;
  2096  00744A  9684               	bcf	132,3,c	;volatile
  2097  00744C                     
  2098                           ;RF_LoRa_868_SO.c: 44:     _delay((unsigned long)((10)*(1000000UL/4000.0)));
  2099  00744C  0E04               	movlw	4
  2100  00744E  6E01               	movwf	??_AntennaRX^0,c
  2101  007450  0E3E               	movlw	62
  2102  007452                     u707:
  2103  007452  2EE8               	decfsz	wreg,f,c
  2104  007454  D7FE               	bra	u707
  2105  007456  2E01               	decfsz	??_AntennaRX^0,f,c
  2106  007458  D7FC               	bra	u707
  2107  00745A                     
  2108                           ;RF_LoRa_868_SO.c: 45:     LATBbits.LATB4 = 1;
  2109  00745A  8884               	bsf	132,4,c	;volatile
  2110  00745C  0012               	return		;funcret
  2111  00745E                     __end_of_AntennaRX:
  2112                           	callstack 0
  2113                           
  2114 ;; *************** function _InitRFLoRaPins *****************
  2115 ;; Defined at:
  2116 ;;		line 18 in file "RF_LoRa_868_SO.c"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;		None
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;		None
  2121 ;; Return value:  Size  Location     Type
  2122 ;;                  1    wreg      void 
  2123 ;; Registers used:
  2124 ;;		None
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2130 ;;      Params:         0       0       0       0       0       0       0       0       0
  2131 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2132 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2133 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2134 ;;Total ram usage:        0 bytes
  2135 ;; Hardware stack levels used: 1
  2136 ;; This function calls:
  2137 ;;		Nothing
  2138 ;; This function is called by:
  2139 ;;		_main
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           	psect	text9
  2144  007426                     __ptext9:
  2145                           	callstack 0
  2146  007426                     _InitRFLoRaPins:
  2147                           	callstack 30
  2148  007426                     
  2149                           ;RF_LoRa_868_SO.c: 19:     TRISBbits.TRISB2 = 1;
  2150  007426  8489               	bsf	137,2,c	;volatile
  2151                           
  2152                           ;RF_LoRa_868_SO.c: 20:     LATBbits.LATB3 = 0;
  2153  007428  9684               	bcf	132,3,c	;volatile
  2154                           
  2155                           ;RF_LoRa_868_SO.c: 21:     TRISBbits.TRISB3 = 0;
  2156  00742A  9689               	bcf	137,3,c	;volatile
  2157                           
  2158                           ;RF_LoRa_868_SO.c: 22:     LATBbits.LATB4 = 0;
  2159  00742C  9884               	bcf	132,4,c	;volatile
  2160                           
  2161                           ;RF_LoRa_868_SO.c: 23:     TRISBbits.TRISB4 = 0;
  2162  00742E  9889               	bcf	137,4,c	;volatile
  2163  007430  0012               	return		;funcret
  2164  007432                     __end_of_InitRFLoRaPins:
  2165                           	callstack 0
  2166                           
  2167 ;; *************** function _InitModule *****************
  2168 ;; Defined at:
  2169 ;;		line 96 in file "SX1272.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;		None
  2172 ;; Auto vars:     Size  Location     Type
  2173 ;;  pout            1    0        unsigned char 
  2174 ;; Return value:  Size  Location     Type
  2175 ;;                  1    wreg      void 
  2176 ;; Registers used:
  2177 ;;		wreg, status,2, status,0, cstack
  2178 ;; Tracked objects:
  2179 ;;		On entry : 0/0
  2180 ;;		On exit  : 0/0
  2181 ;;		Unchanged: 0/0
  2182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2183 ;;      Params:         0       0       0       0       0       0       0       0       0
  2184 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2185 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2186 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2187 ;;Total ram usage:        0 bytes
  2188 ;; Hardware stack levels used: 1
  2189 ;; Hardware stack levels required when called: 2
  2190 ;; This function calls:
  2191 ;;		_WriteSXRegister
  2192 ;; This function is called by:
  2193 ;;		_main
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           	psect	text10
  2198  00778E                     __ptext10:
  2199                           	callstack 0
  2200  00778E                     _InitModule:
  2201                           	callstack 28
  2202  00778E                     
  2203                           ;SX1272.c: 97:   uint8_t pout;;SX1272.c: 99:   WriteSXRegister(0x00, 0x00);
  2204  00778E  0E00               	movlw	0
  2205  007790  6E05               	movwf	WriteSXRegister@data^0,c
  2206  007792  0E00               	movlw	0
  2207  007794  EC45  F03A         	call	_WriteSXRegister
  2208                           
  2209                           ;SX1272.c: 101:   WriteSXRegister(0x06, 0xD8);
  2210  007798  0ED8               	movlw	216
  2211  00779A  6E05               	movwf	WriteSXRegister@data^0,c
  2212  00779C  0E06               	movlw	6
  2213  00779E  EC45  F03A         	call	_WriteSXRegister
  2214                           
  2215                           ;SX1272.c: 102:   WriteSXRegister(0x07, 0x99);
  2216  0077A2  0E99               	movlw	153
  2217  0077A4  6E05               	movwf	WriteSXRegister@data^0,c
  2218  0077A6  0E07               	movlw	7
  2219  0077A8  EC45  F03A         	call	_WriteSXRegister
  2220                           
  2221                           ;SX1272.c: 103:   WriteSXRegister(0x08, 0x99);
  2222  0077AC  0E99               	movlw	153
  2223  0077AE  6E05               	movwf	WriteSXRegister@data^0,c
  2224  0077B0  0E08               	movlw	8
  2225  0077B2  EC45  F03A         	call	_WriteSXRegister
  2226  0077B6                     
  2227                           ;SX1272.c: 107:   WriteSXRegister(0x09, 0x80 | pout);
  2228  0077B6  0E8C               	movlw	140
  2229  0077B8  6E05               	movwf	WriteSXRegister@data^0,c
  2230  0077BA  0E09               	movlw	9
  2231  0077BC  EC45  F03A         	call	_WriteSXRegister
  2232  0077C0                     
  2233                           ;SX1272.c: 109:   WriteSXRegister(0x0A, 0x19);
  2234  0077C0  0E19               	movlw	25
  2235  0077C2  6E05               	movwf	WriteSXRegister@data^0,c
  2236  0077C4  0E0A               	movlw	10
  2237  0077C6  EC45  F03A         	call	_WriteSXRegister
  2238  0077CA                     
  2239                           ;SX1272.c: 111:   WriteSXRegister(0x0B, 0b00101011);
  2240  0077CA  0E2B               	movlw	43
  2241  0077CC  6E05               	movwf	WriteSXRegister@data^0,c
  2242  0077CE  0E0B               	movlw	11
  2243  0077D0  EC45  F03A         	call	_WriteSXRegister
  2244  0077D4                     
  2245                           ;SX1272.c: 113:   WriteSXRegister(0x0C, 0b00100011);
  2246  0077D4  0E23               	movlw	35
  2247  0077D6  6E05               	movwf	WriteSXRegister@data^0,c
  2248  0077D8  0E0C               	movlw	12
  2249  0077DA  EC45  F03A         	call	_WriteSXRegister
  2250  0077DE                     
  2251                           ;SX1272.c: 115:   WriteSXRegister(0x0D, 0x00);
  2252  0077DE  0E00               	movlw	0
  2253  0077E0  6E05               	movwf	WriteSXRegister@data^0,c
  2254  0077E2  0E0D               	movlw	13
  2255  0077E4  EC45  F03A         	call	_WriteSXRegister
  2256  0077E8                     
  2257                           ;SX1272.c: 116:   WriteSXRegister(0x0E, 0x80);
  2258  0077E8  0E80               	movlw	128
  2259  0077EA  6E05               	movwf	WriteSXRegister@data^0,c
  2260  0077EC  0E0E               	movlw	14
  2261  0077EE  EC45  F03A         	call	_WriteSXRegister
  2262  0077F2                     
  2263                           ;SX1272.c: 117:   WriteSXRegister(0x0F, 0x00);
  2264  0077F2  0E00               	movlw	0
  2265  0077F4  6E05               	movwf	WriteSXRegister@data^0,c
  2266  0077F6  0E0F               	movlw	15
  2267  0077F8  EC45  F03A         	call	_WriteSXRegister
  2268  0077FC                     
  2269                           ;SX1272.c: 119:   WriteSXRegister(0x11, 0x00);
  2270  0077FC  0E00               	movlw	0
  2271  0077FE  6E05               	movwf	WriteSXRegister@data^0,c
  2272  007800  0E11               	movlw	17
  2273  007802  EC45  F03A         	call	_WriteSXRegister
  2274  007806                     
  2275                           ;SX1272.c: 121:   WriteSXRegister(0x12, 0xFF);
  2276  007806  0EFF               	movlw	255
  2277  007808  6E05               	movwf	WriteSXRegister@data^0,c
  2278  00780A  0E12               	movlw	18
  2279  00780C  EC45  F03A         	call	_WriteSXRegister
  2280  007810                     
  2281                           ;SX1272.c: 125:   WriteSXRegister(0x1D, 0b10001010);
  2282  007810  0E8A               	movlw	138
  2283  007812  6E05               	movwf	WriteSXRegister@data^0,c
  2284  007814  0E1D               	movlw	29
  2285  007816  EC45  F03A         	call	_WriteSXRegister
  2286  00781A                     
  2287                           ;SX1272.c: 129:   WriteSXRegister(0x1E, 0b01110010);
  2288  00781A  0E72               	movlw	114
  2289  00781C  6E05               	movwf	WriteSXRegister@data^0,c
  2290  00781E  0E1E               	movlw	30
  2291  007820  EC45  F03A         	call	_WriteSXRegister
  2292  007824                     
  2293                           ;SX1272.c: 133:   WriteSXRegister(0x1F, 0xFF);
  2294  007824  0EFF               	movlw	255
  2295  007826  6E05               	movwf	WriteSXRegister@data^0,c
  2296  007828  0E1F               	movlw	31
  2297  00782A  EC45  F03A         	call	_WriteSXRegister
  2298  00782E                     
  2299                           ;SX1272.c: 140:   WriteSXRegister(0x20, 0x00);
  2300  00782E  0E00               	movlw	0
  2301  007830  6E05               	movwf	WriteSXRegister@data^0,c
  2302  007832  0E20               	movlw	32
  2303  007834  EC45  F03A         	call	_WriteSXRegister
  2304  007838                     
  2305                           ;SX1272.c: 141:   WriteSXRegister(0x21, 0x08);
  2306  007838  0E08               	movlw	8
  2307  00783A  6E05               	movwf	WriteSXRegister@data^0,c
  2308  00783C  0E21               	movlw	33
  2309  00783E  EC45  F03A         	call	_WriteSXRegister
  2310  007842                     
  2311                           ;SX1272.c: 143:   WriteSXRegister(0x23, 0x80);
  2312  007842  0E80               	movlw	128
  2313  007844  6E05               	movwf	WriteSXRegister@data^0,c
  2314  007846  0E23               	movlw	35
  2315  007848  EC45  F03A         	call	_WriteSXRegister
  2316  00784C                     
  2317                           ;SX1272.c: 145:   WriteSXRegister(0x24, 0x00);
  2318  00784C  0E00               	movlw	0
  2319  00784E  6E05               	movwf	WriteSXRegister@data^0,c
  2320  007850  0E24               	movlw	36
  2321  007852  EC45  F03A         	call	_WriteSXRegister
  2322  007856                     
  2323                           ;SX1272.c: 147:   WriteSXRegister(0x31, 0xC3);
  2324  007856  0EC3               	movlw	195
  2325  007858  6E05               	movwf	WriteSXRegister@data^0,c
  2326  00785A  0E31               	movlw	49
  2327  00785C  EC45  F03A         	call	_WriteSXRegister
  2328  007860                     
  2329                           ;SX1272.c: 149:   WriteSXRegister(0x33, 0x27);
  2330  007860  0E27               	movlw	39
  2331  007862  6E05               	movwf	WriteSXRegister@data^0,c
  2332  007864  0E33               	movlw	51
  2333  007866  EC45  F03A         	call	_WriteSXRegister
  2334  00786A                     
  2335                           ;SX1272.c: 151:   WriteSXRegister(0x37, 0x0A);
  2336  00786A  0E0A               	movlw	10
  2337  00786C  6E05               	movwf	WriteSXRegister@data^0,c
  2338  00786E  0E37               	movlw	55
  2339  007870  EC45  F03A         	call	_WriteSXRegister
  2340  007874                     
  2341                           ;SX1272.c: 153:   WriteSXRegister(0x39, 0x12);
  2342  007874  0E12               	movlw	18
  2343  007876  6E05               	movwf	WriteSXRegister@data^0,c
  2344  007878  0E39               	movlw	57
  2345  00787A  EC45  F03A         	call	_WriteSXRegister
  2346  00787E  0012               	return		;funcret
  2347  007880                     __end_of_InitModule:
  2348                           	callstack 0
  2349                           
  2350 ;; *************** function _WriteSXRegister *****************
  2351 ;; Defined at:
  2352 ;;		line 19 in file "SX1272.c"
  2353 ;; Parameters:    Size  Location     Type
  2354 ;;  address         1    wreg     unsigned char 
  2355 ;;  data            1    4[COMRAM] unsigned char 
  2356 ;; Auto vars:     Size  Location     Type
  2357 ;;  address         1    5[COMRAM] unsigned char 
  2358 ;; Return value:  Size  Location     Type
  2359 ;;                  1    wreg      void 
  2360 ;; Registers used:
  2361 ;;		wreg, status,2, status,0, cstack
  2362 ;; Tracked objects:
  2363 ;;		On entry : 0/0
  2364 ;;		On exit  : 0/0
  2365 ;;		Unchanged: 0/0
  2366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2367 ;;      Params:         1       0       0       0       0       0       0       0       0
  2368 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2369 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2370 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2371 ;;Total ram usage:        2 bytes
  2372 ;; Hardware stack levels used: 1
  2373 ;; Hardware stack levels required when called: 1
  2374 ;; This function calls:
  2375 ;;		_SPITransfer
  2376 ;; This function is called by:
  2377 ;;		_InitModule
  2378 ;;		_Transmit
  2379 ;;		_Receive
  2380 ;;		_main
  2381 ;; This function uses a non-reentrant model
  2382 ;;
  2383                           
  2384                           	psect	text11
  2385  00748A                     __ptext11:
  2386                           	callstack 0
  2387  00748A                     _WriteSXRegister:
  2388                           	callstack 29
  2389                           
  2390                           ;incstack = 0
  2391                           ;WriteSXRegister@address stored from wreg
  2392  00748A  6E06               	movwf	WriteSXRegister@address^0,c
  2393  00748C                     
  2394                           ;SX1272.c: 21:     LATCbits.LATC2 = 0;
  2395  00748C  9485               	bcf	133,2,c	;volatile
  2396  00748E                     
  2397                           ;SX1272.c: 22:     address = address | 0x80;
  2398  00748E  5006               	movf	WriteSXRegister@address^0,w,c
  2399  007490  0980               	iorlw	128
  2400  007492  6E06               	movwf	WriteSXRegister@address^0,c
  2401  007494                     
  2402                           ;SX1272.c: 24:     SPITransfer(address);
  2403  007494  5006               	movf	WriteSXRegister@address^0,w,c
  2404  007496  EC52  F03A         	call	_SPITransfer
  2405  00749A                     
  2406                           ;SX1272.c: 25:     SPITransfer(data);
  2407  00749A  5005               	movf	WriteSXRegister@data^0,w,c
  2408  00749C  EC52  F03A         	call	_SPITransfer
  2409  0074A0                     
  2410                           ;SX1272.c: 26:     LATCbits.LATC2 = 1;
  2411  0074A0  8485               	bsf	133,2,c	;volatile
  2412  0074A2  0012               	return		;funcret
  2413  0074A4                     __end_of_WriteSXRegister:
  2414                           	callstack 0
  2415                           
  2416 ;; *************** function _GetMode *****************
  2417 ;; Defined at:
  2418 ;;		line 42 in file "SX1272.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;		None
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;  reg             1   13[COMRAM] unsigned char 
  2423 ;;  masked_reg      1   12[COMRAM] unsigned char 
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      void 
  2426 ;; Registers used:
  2427 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2433 ;;      Params:         0       0       0       0       0       0       0       0       0
  2434 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2435 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2436 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2437 ;;Total ram usage:        4 bytes
  2438 ;; Hardware stack levels used: 1
  2439 ;; Hardware stack levels required when called: 2
  2440 ;; This function calls:
  2441 ;;		_ReadSXRegister
  2442 ;;		_UARTWriteByteHex
  2443 ;;		_UARTWriteStr
  2444 ;;		_UARTWriteStrLn
  2445 ;; This function is called by:
  2446 ;;		_main
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           	psect	text12
  2451  007990                     __ptext12:
  2452                           	callstack 0
  2453  007990                     _GetMode:
  2454                           	callstack 28
  2455  007990                     
  2456                           ;SX1272.c: 43:     uint8_t reg, masked_reg;;SX1272.c: 44:     reg = ReadSXRegister(0x01)
      +                          ;
  2457  007990  0E01               	movlw	1
  2458  007992  EC60  F03A         	call	_ReadSXRegister
  2459  007996  6E0E               	movwf	GetMode@reg^0,c
  2460  007998                     
  2461                           ;SX1272.c: 47:         UARTWriteStr("REG_OP_MODE = 0x");
  2462  007998  0EA4               	movlw	low STR_1
  2463  00799A  6E02               	movwf	UARTWriteStr@string^0,c
  2464  00799C  0E7F               	movlw	high STR_1
  2465  00799E  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  2466  0079A0  EC15  F03B         	call	_UARTWriteStr	;wreg free
  2467  0079A4                     
  2468                           ;SX1272.c: 48:         UARTWriteByteHex(reg);
  2469  0079A4  C00E  F002         	movff	GetMode@reg,UARTWriteByteHex@data
  2470  0079A8  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  2471  0079AA  EC51  F03B         	call	_UARTWriteByteHex	;wreg free
  2472  0079AE                     
  2473                           ;SX1272.c: 49:         UARTWriteStrLn(" ");
  2474  0079AE  0E86               	movlw	low (STR_16+25)
  2475  0079B0  6E02               	movwf	UARTWriteStrLn@string^0,c
  2476  0079B2  0E7E               	movlw	high (STR_16+25)
  2477  0079B4  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2478  0079B6  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  2479  0079BA                     
  2480                           ;SX1272.c: 51:     masked_reg = reg & 0x80;
  2481  0079BA  500E               	movf	GetMode@reg^0,w,c
  2482  0079BC  0B80               	andlw	128
  2483  0079BE  6E0D               	movwf	GetMode@masked_reg^0,c
  2484  0079C0                     
  2485                           ;SX1272.c: 52:     if (masked_reg)
  2486  0079C0  500D               	movf	GetMode@masked_reg^0,w,c
  2487  0079C2  B4D8               	btfsc	status,2,c
  2488  0079C4  EFE6  F03C         	goto	u401
  2489  0079C8  EFE8  F03C         	goto	u400
  2490  0079CC                     u401:
  2491  0079CC  EF03  F03D         	goto	l1495
  2492  0079D0                     u400:
  2493  0079D0                     
  2494                           ;SX1272.c: 53:         {;SX1272.c: 55:         masked_reg = reg & 0x40;
  2495  0079D0  500E               	movf	GetMode@reg^0,w,c
  2496  0079D2  0B40               	andlw	64
  2497  0079D4  6E0D               	movwf	GetMode@masked_reg^0,c
  2498  0079D6                     
  2499                           ;SX1272.c: 56:         if (!masked_reg) {
  2500  0079D6  500D               	movf	GetMode@masked_reg^0,w,c
  2501  0079D8  A4D8               	btfss	status,2,c
  2502  0079DA  EFF1  F03C         	goto	u411
  2503  0079DE  EFF3  F03C         	goto	u410
  2504  0079E2                     u411:
  2505  0079E2  EFFB  F03C         	goto	l1493
  2506  0079E6                     u410:
  2507  0079E6                     
  2508                           ;SX1272.c: 57:             UARTWriteStrLn("mode = LoRa");
  2509  0079E6  0ED2               	movlw	low STR_3
  2510  0079E8  6E02               	movwf	UARTWriteStrLn@string^0,c
  2511  0079EA  0E7F               	movlw	high STR_3
  2512  0079EC  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2513  0079EE  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  2514                           
  2515                           ;SX1272.c: 58:         }
  2516  0079F2  EF09  F03D         	goto	l1497
  2517  0079F6                     l1493:
  2518                           
  2519                           ;SX1272.c: 60:             UARTWriteStrLn("mode = LoRa with FSK registers access");
  2520  0079F6  0E47               	movlw	low STR_4
  2521  0079F8  6E02               	movwf	UARTWriteStrLn@string^0,c
  2522  0079FA  0E7E               	movlw	high STR_4
  2523  0079FC  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2524  0079FE  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  2525  007A02  EF09  F03D         	goto	l1497
  2526  007A06                     l1495:
  2527                           
  2528                           ;SX1272.c: 64:         UARTWriteStrLn("mode = FSK");
  2529  007A06  0EDE               	movlw	low STR_5
  2530  007A08  6E02               	movwf	UARTWriteStrLn@string^0,c
  2531  007A0A  0E7F               	movlw	high STR_5
  2532  007A0C  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2533  007A0E  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  2534  007A12                     l1497:
  2535                           
  2536                           ;SX1272.c: 66:     masked_reg = reg & 0x07;
  2537  007A12  500E               	movf	GetMode@reg^0,w,c
  2538  007A14  0B07               	andlw	7
  2539  007A16  6E0D               	movwf	GetMode@masked_reg^0,c
  2540                           
  2541                           ;SX1272.c: 67:         switch (masked_reg){
  2542  007A18  EF4E  F03D         	goto	l1517
  2543  007A1C                     l1499:
  2544                           
  2545                           ;SX1272.c: 69:             UARTWriteStrLn("sleep mode");
  2546  007A1C  0EE9               	movlw	low STR_6
  2547  007A1E  6E02               	movwf	UARTWriteStrLn@string^0,c
  2548  007A20  0E7F               	movlw	high STR_6
  2549  007A22  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2550  007A24  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  2551                           
  2552                           ;SX1272.c: 70:             break;
  2553  007A28  EF7B  F03D         	goto	l92
  2554  007A2C                     l1501:
  2555                           
  2556                           ;SX1272.c: 72:             UARTWriteStrLn("standby mode");
  2557  007A2C  0EC5               	movlw	low STR_7
  2558  007A2E  6E02               	movwf	UARTWriteStrLn@string^0,c
  2559  007A30  0E7F               	movlw	high STR_7
  2560  007A32  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2561  007A34  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  2562                           
  2563                           ;SX1272.c: 73:             break;
  2564  007A38  EF7B  F03D         	goto	l92
  2565  007A3C                     l1503:
  2566                           
  2567                           ;SX1272.c: 75:             UARTWriteStrLn("frequency synthesis TX");
  2568  007A3C  0E1C               	movlw	low STR_8
  2569  007A3E  6E02               	movwf	UARTWriteStrLn@string^0,c
  2570  007A40  0E7F               	movlw	high STR_8
  2571  007A42  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2572  007A44  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  2573                           
  2574                           ;SX1272.c: 76:             break;
  2575  007A48  EF7B  F03D         	goto	l92
  2576  007A4C                     l1505:
  2577                           
  2578                           ;SX1272.c: 78:             UARTWriteStrLn("TX mode");
  2579  007A4C  0EF4               	movlw	low STR_9
  2580  007A4E  6E02               	movwf	UARTWriteStrLn@string^0,c
  2581  007A50  0E7F               	movlw	high STR_9
  2582  007A52  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2583  007A54  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  2584                           
  2585                           ;SX1272.c: 79:             break;
  2586  007A58  EF7B  F03D         	goto	l92
  2587  007A5C                     l1507:
  2588                           
  2589                           ;SX1272.c: 81:             UARTWriteStrLn("frequency synthesis RX");
  2590  007A5C  0E05               	movlw	low STR_10
  2591  007A5E  6E02               	movwf	UARTWriteStrLn@string^0,c
  2592  007A60  0E7F               	movlw	high STR_10
  2593  007A62  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2594  007A64  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  2595                           
  2596                           ;SX1272.c: 82:             break;
  2597  007A68  EF7B  F03D         	goto	l92
  2598  007A6C                     l1509:
  2599                           
  2600                           ;SX1272.c: 84:             UARTWriteStrLn("continuous receive mode");
  2601  007A6C  0EED               	movlw	low STR_11
  2602  007A6E  6E02               	movwf	UARTWriteStrLn@string^0,c
  2603  007A70  0E7E               	movlw	high STR_11
  2604  007A72  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2605  007A74  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  2606                           
  2607                           ;SX1272.c: 85:             break;
  2608  007A78  EF7B  F03D         	goto	l92
  2609  007A7C                     l1511:
  2610                           
  2611                           ;SX1272.c: 87:             UARTWriteStrLn("single receive mode");
  2612  007A7C  0E49               	movlw	low STR_12
  2613  007A7E  6E02               	movwf	UARTWriteStrLn@string^0,c
  2614  007A80  0E7F               	movlw	high STR_12
  2615  007A82  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2616  007A84  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  2617                           
  2618                           ;SX1272.c: 88:             break;
  2619  007A88  EF7B  F03D         	goto	l92
  2620  007A8C                     l1513:
  2621                           
  2622                           ;SX1272.c: 90:             UARTWriteStrLn("Channel Activity Detection");
  2623  007A8C  0E88               	movlw	low STR_13
  2624  007A8E  6E02               	movwf	UARTWriteStrLn@string^0,c
  2625  007A90  0E7E               	movlw	high STR_13
  2626  007A92  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2627  007A94  ECE7  F03A         	call	_UARTWriteStrLn	;wreg free
  2628                           
  2629                           ;SX1272.c: 91:             break;
  2630  007A98  EF7B  F03D         	goto	l92
  2631  007A9C                     l1517:
  2632  007A9C  500D               	movf	GetMode@masked_reg^0,w,c
  2633  007A9E  6E0B               	movwf	??_GetMode^0,c
  2634  007AA0  6A0C               	clrf	(??_GetMode+1)^0,c
  2635                           
  2636                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2637                           ; Switch size 1, requested type "simple"
  2638                           ; Number of cases is 1, Range of values is 0 to 0
  2639                           ; switch strategies available:
  2640                           ; Name         Instructions Cycles
  2641                           ; simple_byte            4     3 (average)
  2642                           ;	Chosen strategy is simple_byte
  2643  007AA2  500C               	movf	(??_GetMode+1)^0,w,c
  2644  007AA4  0A00               	xorlw	0	; case 0
  2645  007AA6  B4D8               	btfsc	status,2,c
  2646  007AA8  EF58  F03D         	goto	l1837
  2647  007AAC  EF7B  F03D         	goto	l92
  2648  007AB0                     l1837:
  2649                           
  2650                           ; Switch size 1, requested type "simple"
  2651                           ; Number of cases is 8, Range of values is 0 to 7
  2652                           ; switch strategies available:
  2653                           ; Name         Instructions Cycles
  2654                           ; simple_byte           25    13 (average)
  2655                           ;	Chosen strategy is simple_byte
  2656  007AB0  500B               	movf	??_GetMode^0,w,c
  2657  007AB2  0A00               	xorlw	0	; case 0
  2658  007AB4  B4D8               	btfsc	status,2,c
  2659  007AB6  EF0E  F03D         	goto	l1499
  2660  007ABA  0A01               	xorlw	1	; case 1
  2661  007ABC  B4D8               	btfsc	status,2,c
  2662  007ABE  EF16  F03D         	goto	l1501
  2663  007AC2  0A03               	xorlw	3	; case 2
  2664  007AC4  B4D8               	btfsc	status,2,c
  2665  007AC6  EF1E  F03D         	goto	l1503
  2666  007ACA  0A01               	xorlw	1	; case 3
  2667  007ACC  B4D8               	btfsc	status,2,c
  2668  007ACE  EF26  F03D         	goto	l1505
  2669  007AD2  0A07               	xorlw	7	; case 4
  2670  007AD4  B4D8               	btfsc	status,2,c
  2671  007AD6  EF2E  F03D         	goto	l1507
  2672  007ADA  0A01               	xorlw	1	; case 5
  2673  007ADC  B4D8               	btfsc	status,2,c
  2674  007ADE  EF36  F03D         	goto	l1509
  2675  007AE2  0A03               	xorlw	3	; case 6
  2676  007AE4  B4D8               	btfsc	status,2,c
  2677  007AE6  EF3E  F03D         	goto	l1511
  2678  007AEA  0A01               	xorlw	1	; case 7
  2679  007AEC  B4D8               	btfsc	status,2,c
  2680  007AEE  EF46  F03D         	goto	l1513
  2681  007AF2  EF7B  F03D         	goto	l92
  2682  007AF6                     l92:
  2683  007AF6  0012               	return		;funcret
  2684  007AF8                     __end_of_GetMode:
  2685                           	callstack 0
  2686                           
  2687 ;; *************** function _UARTWriteStrLn *****************
  2688 ;; Defined at:
  2689 ;;		line 77 in file "uart.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  string          2    1[COMRAM] PTR unsigned char 
  2692 ;;		 -> STR_32(18), STR_31(18), STR_30(25), STR_29(2), 
  2693 ;;		 -> STR_28(2), STR_25(18), STR_24(2), STR_23(22), 
  2694 ;;		 -> STR_22(25), STR_21(24), STR_20(2), STR_17(2), 
  2695 ;;		 -> STR_15(2), STR_13(27), STR_12(20), STR_11(24), 
  2696 ;;		 -> STR_10(23), STR_9(8), STR_8(23), STR_7(13), 
  2697 ;;		 -> STR_6(11), STR_5(11), STR_4(38), STR_3(12), 
  2698 ;;		 -> STR_2(2), 
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;  i               1    5[COMRAM] unsigned char 
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  1    wreg      void 
  2703 ;; Registers used:
  2704 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2710 ;;      Params:         2       0       0       0       0       0       0       0       0
  2711 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2712 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2713 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2714 ;;Total ram usage:        5 bytes
  2715 ;; Hardware stack levels used: 1
  2716 ;; Hardware stack levels required when called: 1
  2717 ;; This function calls:
  2718 ;;		_UARTWriteByte
  2719 ;; This function is called by:
  2720 ;;		_GetMode
  2721 ;;		_Transmit
  2722 ;;		_Receive
  2723 ;;		_main
  2724 ;;		_printBatteryLevel
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	text13
  2729  0075CE                     __ptext13:
  2730                           	callstack 0
  2731  0075CE                     _UARTWriteStrLn:
  2732                           	callstack 29
  2733  0075CE                     
  2734                           ;uart.c: 78:   uint8_t i = 0;
  2735  0075CE  0E00               	movlw	0
  2736  0075D0  6E06               	movwf	UARTWriteStrLn@i^0,c
  2737                           
  2738                           ;uart.c: 80:   while (string[i])
  2739  0075D2  EFFA  F03A         	goto	l1471
  2740  0075D6                     l1467:
  2741                           
  2742                           ;uart.c: 81:     UARTWriteByte(string[i++]);
  2743  0075D6  5006               	movf	UARTWriteStrLn@i^0,w,c
  2744  0075D8  2402               	addwf	UARTWriteStrLn@string^0,w,c
  2745  0075DA  6E04               	movwf	??_UARTWriteStrLn^0,c
  2746  0075DC  0E00               	movlw	0
  2747  0075DE  2003               	addwfc	(UARTWriteStrLn@string+1)^0,w,c
  2748  0075E0  6E05               	movwf	(??_UARTWriteStrLn+1)^0,c
  2749  0075E2  C004  FFF6         	movff	??_UARTWriteStrLn,tblptrl
  2750  0075E6  C005  FFF7         	movff	??_UARTWriteStrLn+1,tblptrh
  2751  0075EA                     	if	0	;tblptru may be non-zero
  2752  0075EA                     	endif
  2753  0075EA                     	if	0	;tblptru may be non-zero
  2754  0075EA                     	endif
  2755  0075EA  0008               	tblrd		*
  2756  0075EC  50F5               	movf	tablat,w,c
  2757  0075EE  EC19  F03A         	call	_UARTWriteByte
  2758  0075F2  2A06               	incf	UARTWriteStrLn@i^0,f,c
  2759  0075F4                     l1471:
  2760                           
  2761                           ;uart.c: 80:   while (string[i])
  2762  0075F4  5006               	movf	UARTWriteStrLn@i^0,w,c
  2763  0075F6  2402               	addwf	UARTWriteStrLn@string^0,w,c
  2764  0075F8  6E04               	movwf	??_UARTWriteStrLn^0,c
  2765  0075FA  0E00               	movlw	0
  2766  0075FC  2003               	addwfc	(UARTWriteStrLn@string+1)^0,w,c
  2767  0075FE  6E05               	movwf	(??_UARTWriteStrLn+1)^0,c
  2768  007600  C004  FFF6         	movff	??_UARTWriteStrLn,tblptrl
  2769  007604  C005  FFF7         	movff	??_UARTWriteStrLn+1,tblptrh
  2770  007608                     	if	0	;tblptru may be non-zero
  2771  007608                     	endif
  2772  007608                     	if	0	;tblptru may be non-zero
  2773  007608                     	endif
  2774  007608  0008               	tblrd		*
  2775  00760A  50F5               	movf	tablat,w,c
  2776  00760C  0900               	iorlw	0
  2777  00760E  A4D8               	btfss	status,2,c
  2778  007610  EF0C  F03B         	goto	u391
  2779  007614  EF0E  F03B         	goto	u390
  2780  007618                     u391:
  2781  007618  EFEB  F03A         	goto	l1467
  2782  00761C                     u390:
  2783  00761C                     
  2784                           ;uart.c: 83:   UARTWriteByte(0x0D);
  2785  00761C  0E0D               	movlw	13
  2786  00761E  EC19  F03A         	call	_UARTWriteByte
  2787                           
  2788                           ;uart.c: 84:   UARTWriteByte(0x0A);
  2789  007622  0E0A               	movlw	10
  2790  007624  EC19  F03A         	call	_UARTWriteByte
  2791  007628  0012               	return		;funcret
  2792  00762A                     __end_of_UARTWriteStrLn:
  2793                           	callstack 0
  2794                           
  2795 ;; *************** function _UARTWriteStr *****************
  2796 ;; Defined at:
  2797 ;;		line 70 in file "uart.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;  string          2    1[COMRAM] PTR unsigned char 
  2800 ;;		 -> STR_27(2), STR_26(16), STR_19(2), STR_18(18), 
  2801 ;;		 -> STR_16(27), printBatteryLevel@string(6), STR_1(17), 
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;  i               1    5[COMRAM] unsigned char 
  2804 ;; Return value:  Size  Location     Type
  2805 ;;                  1    wreg      void 
  2806 ;; Registers used:
  2807 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2808 ;; Tracked objects:
  2809 ;;		On entry : 0/0
  2810 ;;		On exit  : 0/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2813 ;;      Params:         2       0       0       0       0       0       0       0       0
  2814 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2815 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2816 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2817 ;;Total ram usage:        5 bytes
  2818 ;; Hardware stack levels used: 1
  2819 ;; Hardware stack levels required when called: 1
  2820 ;; This function calls:
  2821 ;;		_UARTWriteByte
  2822 ;; This function is called by:
  2823 ;;		_GetMode
  2824 ;;		_Transmit
  2825 ;;		_Receive
  2826 ;;		_printBatteryLevel
  2827 ;; This function uses a non-reentrant model
  2828 ;;
  2829                           
  2830                           	psect	text14
  2831  00762A                     __ptext14:
  2832                           	callstack 0
  2833  00762A                     _UARTWriteStr:
  2834                           	callstack 28
  2835  00762A                     
  2836                           ;uart.c: 71:   uint8_t i = 0;
  2837  00762A  0E00               	movlw	0
  2838  00762C  6E06               	movwf	UARTWriteStr@i^0,c
  2839                           
  2840                           ;uart.c: 73:   while (string[i])
  2841  00762E  EF32  F03B         	goto	l1455
  2842  007632                     l1451:
  2843                           
  2844                           ;uart.c: 74:     UARTWriteByte(string[i++]);
  2845  007632  5006               	movf	UARTWriteStr@i^0,w,c
  2846  007634  2402               	addwf	UARTWriteStr@string^0,w,c
  2847  007636  6E04               	movwf	??_UARTWriteStr^0,c
  2848  007638  0E00               	movlw	0
  2849  00763A  2003               	addwfc	(UARTWriteStr@string+1)^0,w,c
  2850  00763C  6E05               	movwf	(??_UARTWriteStr+1)^0,c
  2851  00763E  C004  FFF6         	movff	??_UARTWriteStr,tblptrl
  2852  007642  C005  FFF7         	movff	??_UARTWriteStr+1,tblptrh
  2853  007646  6AF8               	clrf	tblptru,c
  2854  007648  0E07               	movlw	(high __ramtop+-1)
  2855  00764A  64F7               	cpfsgt	tblptrh,c
  2856  00764C  D003               	bra	u337
  2857  00764E  0008               	tblrd		*
  2858  007650  50F5               	movf	tablat,w,c
  2859  007652  D005               	bra	u330
  2860  007654                     u337:
  2861  007654  CFF6 FFE9          	movff	tblptrl,fsr0l
  2862  007658  CFF7 FFEA          	movff	tblptrh,fsr0h
  2863  00765C  50EF               	movf	indf0,w,c
  2864  00765E                     u330:
  2865  00765E  EC19  F03A         	call	_UARTWriteByte
  2866  007662  2A06               	incf	UARTWriteStr@i^0,f,c
  2867  007664                     l1455:
  2868                           
  2869                           ;uart.c: 73:   while (string[i])
  2870  007664  5006               	movf	UARTWriteStr@i^0,w,c
  2871  007666  2402               	addwf	UARTWriteStr@string^0,w,c
  2872  007668  6E04               	movwf	??_UARTWriteStr^0,c
  2873  00766A  0E00               	movlw	0
  2874  00766C  2003               	addwfc	(UARTWriteStr@string+1)^0,w,c
  2875  00766E  6E05               	movwf	(??_UARTWriteStr+1)^0,c
  2876  007670  C004  FFF6         	movff	??_UARTWriteStr,tblptrl
  2877  007674  C005  FFF7         	movff	??_UARTWriteStr+1,tblptrh
  2878  007678  6AF8               	clrf	tblptru,c
  2879  00767A  0E07               	movlw	(high __ramtop+-1)
  2880  00767C  64F7               	cpfsgt	tblptrh,c
  2881  00767E  D003               	bra	u347
  2882  007680  0008               	tblrd		*
  2883  007682  50F5               	movf	tablat,w,c
  2884  007684  D005               	bra	u340
  2885  007686                     u347:
  2886  007686  CFF6 FFE9          	movff	tblptrl,fsr0l
  2887  00768A  CFF7 FFEA          	movff	tblptrh,fsr0h
  2888  00768E  50EF               	movf	indf0,w,c
  2889  007690                     u340:
  2890  007690  0900               	iorlw	0
  2891  007692  A4D8               	btfss	status,2,c
  2892  007694  EF4E  F03B         	goto	u351
  2893  007698  EF50  F03B         	goto	u350
  2894  00769C                     u351:
  2895  00769C  EF19  F03B         	goto	l1451
  2896  0076A0                     u350:
  2897  0076A0  0012               	return		;funcret
  2898  0076A2                     __end_of_UARTWriteStr:
  2899                           	callstack 0
  2900                           
  2901 ;; *************** function _UARTWriteByteHex *****************
  2902 ;; Defined at:
  2903 ;;		line 87 in file "uart.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;  data            2    1[COMRAM] unsigned short 
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;  hexa            2    8[COMRAM] PTR unsigned char 
  2908 ;;		 -> STR_14(17), 
  2909 ;; Return value:  Size  Location     Type
  2910 ;;                  1    wreg      void 
  2911 ;; Registers used:
  2912 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2913 ;; Tracked objects:
  2914 ;;		On entry : 0/0
  2915 ;;		On exit  : 0/0
  2916 ;;		Unchanged: 0/0
  2917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2918 ;;      Params:         2       0       0       0       0       0       0       0       0
  2919 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2920 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2921 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2922 ;;Total ram usage:        9 bytes
  2923 ;; Hardware stack levels used: 1
  2924 ;; Hardware stack levels required when called: 1
  2925 ;; This function calls:
  2926 ;;		_UARTWriteByte
  2927 ;; This function is called by:
  2928 ;;		_GetMode
  2929 ;;		_Transmit
  2930 ;;		_Receive
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934                           	psect	text15
  2935  0076A2                     __ptext15:
  2936                           	callstack 0
  2937  0076A2                     _UARTWriteByteHex:
  2938                           	callstack 28
  2939  0076A2                     
  2940                           ;uart.c: 88:     char *hexa = "0123456789ABCDEF";
  2941  0076A2  0E93               	movlw	low STR_14
  2942  0076A4  6E09               	movwf	UARTWriteByteHex@hexa^0,c
  2943  0076A6  0E7F               	movlw	high STR_14
  2944  0076A8  6E0A               	movwf	(UARTWriteByteHex@hexa+1)^0,c
  2945                           
  2946                           ;uart.c: 90:     if (data > 4095) UARTWriteByte(hexa[data / 4096]);
  2947  0076AA  0E10               	movlw	16
  2948  0076AC  5C03               	subwf	(UARTWriteByteHex@data+1)^0,w,c
  2949  0076AE  A0D8               	btfss	status,0,c
  2950  0076B0  EF5C  F03B         	goto	u361
  2951  0076B4  EF5E  F03B         	goto	u360
  2952  0076B8                     u361:
  2953  0076B8  EF6D  F03B         	goto	l1461
  2954  0076BC                     u360:
  2955  0076BC  3803               	swapf	(UARTWriteByteHex@data+1)^0,w,c
  2956  0076BE  0B0F               	andlw	15
  2957  0076C0  2409               	addwf	UARTWriteByteHex@hexa^0,w,c
  2958  0076C2  6E04               	movwf	??_UARTWriteByteHex^0,c
  2959  0076C4  0E00               	movlw	0
  2960  0076C6  200A               	addwfc	(UARTWriteByteHex@hexa+1)^0,w,c
  2961  0076C8  6E05               	movwf	(??_UARTWriteByteHex+1)^0,c
  2962  0076CA  C004  FFF6         	movff	??_UARTWriteByteHex,tblptrl
  2963  0076CE  C005  FFF7         	movff	??_UARTWriteByteHex+1,tblptrh
  2964  0076D2                     	if	0	;tblptru may be non-zero
  2965  0076D2                     	endif
  2966  0076D2                     	if	0	;tblptru may be non-zero
  2967  0076D2                     	endif
  2968  0076D2  0008               	tblrd		*
  2969  0076D4  50F5               	movf	tablat,w,c
  2970  0076D6  EC19  F03A         	call	_UARTWriteByte
  2971  0076DA                     l1461:
  2972                           
  2973                           ;uart.c: 91:     if (data > 255) UARTWriteByte(hexa[data / 256 % 16]);
  2974  0076DA  0403               	decf	(UARTWriteByteHex@data+1)^0,w,c
  2975  0076DC  A0D8               	btfss	status,0,c
  2976  0076DE  EF73  F03B         	goto	u371
  2977  0076E2  EF75  F03B         	goto	u370
  2978  0076E6                     u371:
  2979  0076E6  EF90  F03B         	goto	l152
  2980  0076EA                     u370:
  2981  0076EA  C002  F004         	movff	UARTWriteByteHex@data,??_UARTWriteByteHex
  2982  0076EE  C003  F005         	movff	UARTWriteByteHex@data+1,??_UARTWriteByteHex+1
  2983  0076F2  C005  F004         	movff	??_UARTWriteByteHex+1,??_UARTWriteByteHex
  2984  0076F6  6A05               	clrf	(??_UARTWriteByteHex+1)^0,c
  2985  0076F8  0E0F               	movlw	15
  2986  0076FA  1604               	andwf	??_UARTWriteByteHex^0,f,c
  2987  0076FC  0E00               	movlw	0
  2988  0076FE  1605               	andwf	(??_UARTWriteByteHex+1)^0,f,c
  2989  007700  C009  F006         	movff	UARTWriteByteHex@hexa,??_UARTWriteByteHex+2
  2990  007704  C00A  F007         	movff	UARTWriteByteHex@hexa+1,??_UARTWriteByteHex+3
  2991  007708  5004               	movf	??_UARTWriteByteHex^0,w,c
  2992  00770A  2606               	addwf	(??_UARTWriteByteHex+2)^0,f,c
  2993  00770C  5005               	movf	(??_UARTWriteByteHex+1)^0,w,c
  2994  00770E  2207               	addwfc	(??_UARTWriteByteHex+3)^0,f,c
  2995  007710  C006  FFF6         	movff	??_UARTWriteByteHex+2,tblptrl
  2996  007714  C007  FFF7         	movff	??_UARTWriteByteHex+3,tblptrh
  2997  007718                     	if	0	;tblptru may be non-zero
  2998  007718                     	endif
  2999  007718                     	if	0	;tblptru may be non-zero
  3000  007718                     	endif
  3001  007718  0008               	tblrd		*
  3002  00771A  50F5               	movf	tablat,w,c
  3003  00771C  EC19  F03A         	call	_UARTWriteByte
  3004  007720                     l152:
  3005                           
  3006                           ;uart.c: 92:     UARTWriteByte(hexa[data / 16 % 16]);
  3007  007720  C002  F004         	movff	UARTWriteByteHex@data,??_UARTWriteByteHex
  3008  007724  C003  F005         	movff	UARTWriteByteHex@data+1,??_UARTWriteByteHex+1
  3009  007728  0E04               	movlw	4
  3010  00772A  6E06               	movwf	(??_UARTWriteByteHex+2)^0,c
  3011  00772C                     u385:
  3012  00772C  90D8               	bcf	status,0,c
  3013  00772E  3205               	rrcf	(??_UARTWriteByteHex+1)^0,f,c
  3014  007730  3204               	rrcf	??_UARTWriteByteHex^0,f,c
  3015  007732  2E06               	decfsz	(??_UARTWriteByteHex+2)^0,f,c
  3016  007734  EF96  F03B         	goto	u385
  3017  007738  0E0F               	movlw	15
  3018  00773A  1604               	andwf	??_UARTWriteByteHex^0,f,c
  3019  00773C  0E00               	movlw	0
  3020  00773E  1605               	andwf	(??_UARTWriteByteHex+1)^0,f,c
  3021  007740  C009  F007         	movff	UARTWriteByteHex@hexa,??_UARTWriteByteHex+3
  3022  007744  C00A  F008         	movff	UARTWriteByteHex@hexa+1,??_UARTWriteByteHex+4
  3023  007748  5004               	movf	??_UARTWriteByteHex^0,w,c
  3024  00774A  2607               	addwf	(??_UARTWriteByteHex+3)^0,f,c
  3025  00774C  5005               	movf	(??_UARTWriteByteHex+1)^0,w,c
  3026  00774E  2208               	addwfc	(??_UARTWriteByteHex+4)^0,f,c
  3027  007750  C007  FFF6         	movff	??_UARTWriteByteHex+3,tblptrl
  3028  007754  C008  FFF7         	movff	??_UARTWriteByteHex+4,tblptrh
  3029  007758                     	if	0	;tblptru may be non-zero
  3030  007758                     	endif
  3031  007758                     	if	0	;tblptru may be non-zero
  3032  007758                     	endif
  3033  007758  0008               	tblrd		*
  3034  00775A  50F5               	movf	tablat,w,c
  3035  00775C  EC19  F03A         	call	_UARTWriteByte
  3036                           
  3037                           ;uart.c: 93:     UARTWriteByte(hexa[data % 16]);
  3038  007760  0E0F               	movlw	15
  3039  007762  1402               	andwf	UARTWriteByteHex@data^0,w,c
  3040  007764  6E04               	movwf	??_UARTWriteByteHex^0,c
  3041  007766  0E00               	movlw	0
  3042  007768  1403               	andwf	(UARTWriteByteHex@data+1)^0,w,c
  3043  00776A  6E05               	movwf	(??_UARTWriteByteHex+1)^0,c
  3044  00776C  C009  F006         	movff	UARTWriteByteHex@hexa,??_UARTWriteByteHex+2
  3045  007770  C00A  F007         	movff	UARTWriteByteHex@hexa+1,??_UARTWriteByteHex+3
  3046  007774  5004               	movf	??_UARTWriteByteHex^0,w,c
  3047  007776  2606               	addwf	(??_UARTWriteByteHex+2)^0,f,c
  3048  007778  5005               	movf	(??_UARTWriteByteHex+1)^0,w,c
  3049  00777A  2207               	addwfc	(??_UARTWriteByteHex+3)^0,f,c
  3050  00777C  C006  FFF6         	movff	??_UARTWriteByteHex+2,tblptrl
  3051  007780  C007  FFF7         	movff	??_UARTWriteByteHex+3,tblptrh
  3052  007784                     	if	0	;tblptru may be non-zero
  3053  007784                     	endif
  3054  007784                     	if	0	;tblptru may be non-zero
  3055  007784                     	endif
  3056  007784  0008               	tblrd		*
  3057  007786  50F5               	movf	tablat,w,c
  3058  007788  EC19  F03A         	call	_UARTWriteByte
  3059  00778C  0012               	return		;funcret
  3060  00778E                     __end_of_UARTWriteByteHex:
  3061                           	callstack 0
  3062                           
  3063 ;; *************** function _UARTWriteByte *****************
  3064 ;; Defined at:
  3065 ;;		line 59 in file "uart.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  data            1    wreg     unsigned char 
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;  data            1    0[COMRAM] unsigned char 
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  1    wreg      void 
  3072 ;; Registers used:
  3073 ;;		wreg
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3079 ;;      Params:         0       0       0       0       0       0       0       0       0
  3080 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3081 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3082 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3083 ;;Total ram usage:        1 bytes
  3084 ;; Hardware stack levels used: 1
  3085 ;; This function calls:
  3086 ;;		Nothing
  3087 ;; This function is called by:
  3088 ;;		_UARTWriteStr
  3089 ;;		_UARTWriteStrLn
  3090 ;;		_UARTWriteByteHex
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           	psect	text16
  3095  007432                     __ptext16:
  3096                           	callstack 0
  3097  007432                     _UARTWriteByte:
  3098                           	callstack 29
  3099                           
  3100                           ;incstack = 0
  3101                           ;UARTWriteByte@data stored from wreg
  3102  007432  6E01               	movwf	UARTWriteByte@data^0,c
  3103  007434                     l133:
  3104  007434  A29E               	btfss	158,1,c	;volatile
  3105  007436  EF1F  F03A         	goto	u31
  3106  00743A  EF21  F03A         	goto	u30
  3107  00743E                     u31:
  3108  00743E  EF1A  F03A         	goto	l133
  3109  007442                     u30:
  3110  007442                     
  3111                           ;uart.c: 63:     TX1REG = data;
  3112  007442  C001  FF9A         	movff	UARTWriteByte@data,3994	;volatile
  3113  007446  0012               	return		;funcret
  3114  007448                     __end_of_UARTWriteByte:
  3115                           	callstack 0
  3116                           
  3117 ;; *************** function _ReadSXRegister *****************
  3118 ;; Defined at:
  3119 ;;		line 29 in file "SX1272.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;  address         1    wreg     unsigned char 
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;  address         1    3[COMRAM] unsigned char 
  3124 ;;  RegValue        1    2[COMRAM] unsigned char 
  3125 ;; Return value:  Size  Location     Type
  3126 ;;                  1    wreg      unsigned char 
  3127 ;; Registers used:
  3128 ;;		wreg, status,2, status,0, cstack
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3134 ;;      Params:         0       0       0       0       0       0       0       0       0
  3135 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3136 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3137 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3138 ;;Total ram usage:        2 bytes
  3139 ;; Hardware stack levels used: 1
  3140 ;; Hardware stack levels required when called: 1
  3141 ;; This function calls:
  3142 ;;		_SPIReceive
  3143 ;;		_SPITransfer
  3144 ;; This function is called by:
  3145 ;;		_GetMode
  3146 ;;		_Transmit
  3147 ;;		_Receive
  3148 ;;		_main
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           	psect	text17
  3153  0074C0                     __ptext17:
  3154                           	callstack 0
  3155  0074C0                     _ReadSXRegister:
  3156                           	callstack 28
  3157                           
  3158                           ;incstack = 0
  3159                           ;ReadSXRegister@address stored from wreg
  3160  0074C0  6E04               	movwf	ReadSXRegister@address^0,c
  3161  0074C2                     
  3162                           ;SX1272.c: 30:     uint8_t RegValue;;SX1272.c: 31:     LATCbits.LATC2 = 0;
  3163  0074C2  9485               	bcf	133,2,c	;volatile
  3164  0074C4                     
  3165                           ;SX1272.c: 32:     address = address & 0x7F;
  3166  0074C4  5004               	movf	ReadSXRegister@address^0,w,c
  3167  0074C6  0B7F               	andlw	127
  3168  0074C8  6E04               	movwf	ReadSXRegister@address^0,c
  3169  0074CA                     
  3170                           ;SX1272.c: 34:     SPITransfer(address);
  3171  0074CA  5004               	movf	ReadSXRegister@address^0,w,c
  3172  0074CC  EC52  F03A         	call	_SPITransfer
  3173  0074D0                     
  3174                           ;SX1272.c: 35:     RegValue = SPIReceive(0x00);
  3175  0074D0  0E00               	movlw	0
  3176  0074D2  EC6F  F03A         	call	_SPIReceive
  3177  0074D6  6E03               	movwf	ReadSXRegister@RegValue^0,c
  3178  0074D8                     
  3179                           ;SX1272.c: 36:     LATCbits.LATC2 = 1;
  3180  0074D8  8485               	bsf	133,2,c	;volatile
  3181  0074DA                     
  3182                           ;SX1272.c: 37:     return RegValue;
  3183  0074DA  5003               	movf	ReadSXRegister@RegValue^0,w,c
  3184  0074DC  0012               	return		;funcret
  3185  0074DE                     __end_of_ReadSXRegister:
  3186                           	callstack 0
  3187                           
  3188 ;; *************** function _SPITransfer *****************
  3189 ;; Defined at:
  3190 ;;		line 50 in file "spi.c"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;  data_out        1    wreg     unsigned char 
  3193 ;; Auto vars:     Size  Location     Type
  3194 ;;  data_out        1    0[COMRAM] unsigned char 
  3195 ;;  dummy_byte      1    0        unsigned char 
  3196 ;; Return value:  Size  Location     Type
  3197 ;;                  1    wreg      void 
  3198 ;; Registers used:
  3199 ;;		wreg
  3200 ;; Tracked objects:
  3201 ;;		On entry : 0/0
  3202 ;;		On exit  : 0/0
  3203 ;;		Unchanged: 0/0
  3204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3205 ;;      Params:         0       0       0       0       0       0       0       0       0
  3206 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3207 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3208 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3209 ;;Total ram usage:        1 bytes
  3210 ;; Hardware stack levels used: 1
  3211 ;; This function calls:
  3212 ;;		Nothing
  3213 ;; This function is called by:
  3214 ;;		_WriteSXRegister
  3215 ;;		_ReadSXRegister
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text18
  3220  0074A4                     __ptext18:
  3221                           	callstack 0
  3222  0074A4                     _SPITransfer:
  3223                           	callstack 29
  3224                           
  3225                           ;incstack = 0
  3226                           ;SPITransfer@data_out stored from wreg
  3227  0074A4  6E01               	movwf	SPITransfer@data_out^0,c
  3228  0074A6  5092               	movf	146,w,c	;volatile
  3229                           
  3230                           ;spi.c: 54:     PIR3bits.SSP1IF = 0;
  3231  0074A8  010E               	movlb	14	; () banked
  3232  0074AA  91CD               	bcf	205,0,b	;volatile
  3233  0074AC                     
  3234                           ; BSR set to: 14
  3235                           ;spi.c: 55:     SSP1BUF = data_out;
  3236  0074AC  C001  FF92         	movff	SPITransfer@data_out,3986	;volatile
  3237  0074B0                     l48:
  3238                           
  3239                           ; BSR set to: 14
  3240  0074B0  A1CD               	btfss	205,0,b	;volatile
  3241  0074B2  EF5D  F03A         	goto	u11
  3242  0074B6  EF5F  F03A         	goto	u10
  3243  0074BA                     u11:
  3244  0074BA  EF58  F03A         	goto	l48
  3245  0074BE                     u10:
  3246  0074BE                     
  3247                           ; BSR set to: 14
  3248  0074BE  0012               	return		;funcret
  3249  0074C0                     __end_of_SPITransfer:
  3250                           	callstack 0
  3251                           
  3252 ;; *************** function _SPIReceive *****************
  3253 ;; Defined at:
  3254 ;;		line 59 in file "spi.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;  data_out        1    wreg     unsigned char 
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;  data_out        1    0[COMRAM] unsigned char 
  3259 ;;  data_in         1    1[COMRAM] unsigned char 
  3260 ;;  dummy_byte      1    0        unsigned char 
  3261 ;; Return value:  Size  Location     Type
  3262 ;;                  1    wreg      unsigned char 
  3263 ;; Registers used:
  3264 ;;		wreg, status,2
  3265 ;; Tracked objects:
  3266 ;;		On entry : 0/0
  3267 ;;		On exit  : 0/0
  3268 ;;		Unchanged: 0/0
  3269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3270 ;;      Params:         0       0       0       0       0       0       0       0       0
  3271 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3272 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3273 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3274 ;;Total ram usage:        2 bytes
  3275 ;; Hardware stack levels used: 1
  3276 ;; This function calls:
  3277 ;;		Nothing
  3278 ;; This function is called by:
  3279 ;;		_ReadSXRegister
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           	psect	text19
  3284  0074DE                     __ptext19:
  3285                           	callstack 0
  3286  0074DE                     _SPIReceive:
  3287                           	callstack 28
  3288                           
  3289                           ; BSR set to: 14
  3290                           ;incstack = 0
  3291                           ;SPIReceive@data_out stored from wreg
  3292  0074DE  6E01               	movwf	SPIReceive@data_out^0,c
  3293  0074E0  5092               	movf	146,w,c	;volatile
  3294                           
  3295                           ;spi.c: 63:     PIR3bits.SSP1IF = 0;
  3296  0074E2  010E               	movlb	14	; () banked
  3297  0074E4  91CD               	bcf	205,0,b	;volatile
  3298  0074E6                     
  3299                           ; BSR set to: 14
  3300                           ;spi.c: 64:     SSP1BUF = data_out;
  3301  0074E6  C001  FF92         	movff	SPIReceive@data_out,3986	;volatile
  3302  0074EA                     l54:
  3303                           
  3304                           ; BSR set to: 14
  3305  0074EA  A1CD               	btfss	205,0,b	;volatile
  3306  0074EC  EF7A  F03A         	goto	u21
  3307  0074F0  EF7C  F03A         	goto	u20
  3308  0074F4                     u21:
  3309  0074F4  EF75  F03A         	goto	l54
  3310  0074F8                     u20:
  3311  0074F8                     
  3312                           ; BSR set to: 14
  3313                           ;spi.c: 66:     data_in = SSP1BUF;
  3314  0074F8  CF92 F002          	movff	3986,SPIReceive@data_in	;volatile
  3315                           
  3316                           ;spi.c: 67:     return(data_in);
  3317  0074FC  5002               	movf	SPIReceive@data_in^0,w,c
  3318  0074FE                     
  3319                           ; BSR set to: 14
  3320  0074FE  0012               	return		;funcret
  3321  007500                     __end_of_SPIReceive:
  3322                           	callstack 0
  3323                           
  3324                           	psect	rparam
  3325  0000                     
  3326                           	psect	idloc
  3327                           
  3328                           ;Config register IDLOC0 @ 0x200000
  3329                           ;	unspecified, using default values
  3330  200000                     	org	2097152
  3331  200000  0FFF               	dw	4095
  3332                           
  3333                           ;Config register IDLOC1 @ 0x200002
  3334                           ;	unspecified, using default values
  3335  200002                     	org	2097154
  3336  200002  0FFF               	dw	4095
  3337                           
  3338                           ;Config register IDLOC2 @ 0x200004
  3339                           ;	unspecified, using default values
  3340  200004                     	org	2097156
  3341  200004  0FFF               	dw	4095
  3342                           
  3343                           ;Config register IDLOC3 @ 0x200006
  3344                           ;	unspecified, using default values
  3345  200006                     	org	2097158
  3346  200006  0FFF               	dw	4095
  3347                           
  3348                           ;Config register IDLOC4 @ 0x200008
  3349                           ;	unspecified, using default values
  3350  200008                     	org	2097160
  3351  200008  0FFF               	dw	4095
  3352                           
  3353                           ;Config register IDLOC5 @ 0x20000A
  3354                           ;	unspecified, using default values
  3355  20000A                     	org	2097162
  3356  20000A  0FFF               	dw	4095
  3357                           
  3358                           ;Config register IDLOC6 @ 0x20000C
  3359                           ;	unspecified, using default values
  3360  20000C                     	org	2097164
  3361  20000C  0FFF               	dw	4095
  3362                           
  3363                           ;Config register IDLOC7 @ 0x20000E
  3364                           ;	unspecified, using default values
  3365  20000E                     	org	2097166
  3366  20000E  0FFF               	dw	4095
  3367                           
  3368                           	psect	config
  3369                           
  3370                           ;Config register CONFIG1L @ 0x300000
  3371                           ;	External Oscillator mode Selection bits
  3372                           ;	FEXTOSC = OFF, Oscillator not enabled
  3373                           ;	Power-up default value for COSC bits
  3374                           ;	RSTOSC = HFINTOSC_1MHZ, HFINTOSC with HFFRQ = 4 MHz and CDIV = 4:1
  3375  300000                     	org	3145728
  3376  300000  EC                 	db	236
  3377                           
  3378                           ;Config register CONFIG1H @ 0x300001
  3379                           ;	Clock Out Enable bit
  3380                           ;	CLKOUTEN = OFF, CLKOUT function is disabled
  3381                           ;	Clock Switch Enable bit
  3382                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  3383                           ;	Fail-Safe Clock Monitor Enable bit
  3384                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  3385  300001                     	org	3145729
  3386  300001  FF                 	db	255
  3387                           
  3388                           ;Config register CONFIG2L @ 0x300002
  3389                           ;	Master Clear Enable bit
  3390                           ;	MCLRE = EXTMCLR, If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR
  3391                           ;	Power-up Timer Enable bit
  3392                           ;	PWRTE = OFF, Power up timer disabled
  3393                           ;	Low-power BOR enable bit
  3394                           ;	LPBOREN = OFF, ULPBOR disabled
  3395                           ;	Brown-out Reset Enable bits
  3396                           ;	BOREN = SBORDIS, Brown-out Reset enabled , SBOREN bit is ignored
  3397  300002                     	org	3145730
  3398  300002  FF                 	db	255
  3399                           
  3400                           ;Config register CONFIG2H @ 0x300003
  3401                           ;	Brown Out Reset Voltage selection bits
  3402                           ;	BORV = VBOR_2P45, Brown-out Reset Voltage (VBOR) set to 2.45V
  3403                           ;	ZCD Disable bit
  3404                           ;	ZCD = OFF, ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON
  3405                           ;	PPSLOCK bit One-Way Set Enable bit
  3406                           ;	PPS1WAY = ON, PPSLOCK bit can be cleared and set only once; PPS registers remain locke
      +                          d after one clear/set cycle
  3407                           ;	Stack Full/Underflow Reset Enable bit
  3408                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3409                           ;	Debugger Enable bit
  3410                           ;	DEBUG = ON, Background debugger enabled
  3411                           ;	Extended Instruction Set Enable bit
  3412                           ;	XINST = OFF, Extended Instruction Set and Indexed Addressing Mode disabled
  3413  300003                     	org	3145731
  3414  300003  DF                 	db	223
  3415                           
  3416                           ;Config register CONFIG3L @ 0x300004
  3417                           ;	WDT Period Select bits
  3418                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  3419                           ;	WDT operating mode
  3420                           ;	WDTE = OFF, WDT Disabled
  3421  300004                     	org	3145732
  3422  300004  9F                 	db	159
  3423                           
  3424                           ;Config register CONFIG3H @ 0x300005
  3425                           ;	WDT Window Select bits
  3426                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
  3427                           ;	WDT input clock selector
  3428                           ;	WDTCCS = SC, Software Control
  3429  300005                     	org	3145733
  3430  300005  FF                 	db	255
  3431                           
  3432                           ;Config register CONFIG4L @ 0x300006
  3433                           ;	Write Protection Block 0
  3434                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3435                           ;	Write Protection Block 1
  3436                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3437                           ;	Write Protection Block 2
  3438                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3439                           ;	Write Protection Block 3
  3440                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3441  300006                     	org	3145734
  3442  300006  FF                 	db	255
  3443                           
  3444                           ;Config register CONFIG4H @ 0x300007
  3445                           ;	Configuration Register Write Protection bit
  3446                           ;	WRTC = OFF, Configuration registers (300000-30000Bh) not write-protected
  3447                           ;	Boot Block Write Protection bit
  3448                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  3449                           ;	Data EEPROM Write Protection bit
  3450                           ;	WRTD = OFF, Data EEPROM not write-protected
  3451                           ;	Scanner Enable bit
  3452                           ;	SCANE = ON, Scanner module is available for use, SCANMD bit can control the module
  3453                           ;	Low Voltage Programming Enable bit
  3454                           ;	LVP = ON, Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE config
      +                          uration bit is ignored
  3455  300007                     	org	3145735
  3456  300007  FF                 	db	255
  3457                           
  3458                           ;Config register CONFIG5L @ 0x300008
  3459                           ;	UserNVM Program Memory Code Protection bit
  3460                           ;	CP = OFF, UserNVM code protection disabled
  3461                           ;	DataNVM Memory Code Protection bit
  3462                           ;	CPD = OFF, DataNVM code protection disabled
  3463  300008                     	org	3145736
  3464  300008  FF                 	db	255
  3465                           
  3466                           ;Config register CONFIG5H @ 0x300009
  3467                           ;	unspecified, using default values
  3468  300009                     	org	3145737
  3469  300009  FF                 	db	255
  3470                           
  3471                           ;Config register CONFIG6L @ 0x30000A
  3472                           ;	Table Read Protection Block 0
  3473                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3474                           ;	Table Read Protection Block 1
  3475                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3476                           ;	Table Read Protection Block 2
  3477                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3478                           ;	Table Read Protection Block 3
  3479                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3480  30000A                     	org	3145738
  3481  30000A  FF                 	db	255
  3482                           
  3483                           ;Config register CONFIG6H @ 0x30000B
  3484                           ;	Boot Block Table Read Protection bit
  3485                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3486  30000B                     	org	3145739
  3487  30000B  FF                 	db	255
  3488                           tosu	equ	0xFFF
  3489                           tosh	equ	0xFFE
  3490                           tosl	equ	0xFFD
  3491                           stkptr	equ	0xFFC
  3492                           pclatu	equ	0xFFB
  3493                           pclath	equ	0xFFA
  3494                           pcl	equ	0xFF9
  3495                           tblptru	equ	0xFF8
  3496                           tblptrh	equ	0xFF7
  3497                           tblptrl	equ	0xFF6
  3498                           tablat	equ	0xFF5
  3499                           prodh	equ	0xFF4
  3500                           prodl	equ	0xFF3
  3501                           indf0	equ	0xFEF
  3502                           postinc0	equ	0xFEE
  3503                           postdec0	equ	0xFED
  3504                           preinc0	equ	0xFEC
  3505                           plusw0	equ	0xFEB
  3506                           fsr0h	equ	0xFEA
  3507                           fsr0l	equ	0xFE9
  3508                           wreg	equ	0xFE8
  3509                           indf1	equ	0xFE7
  3510                           postinc1	equ	0xFE6
  3511                           postdec1	equ	0xFE5
  3512                           preinc1	equ	0xFE4
  3513                           plusw1	equ	0xFE3
  3514                           fsr1h	equ	0xFE2
  3515                           fsr1l	equ	0xFE1
  3516                           bsr	equ	0xFE0
  3517                           indf2	equ	0xFDF
  3518                           postinc2	equ	0xFDE
  3519                           postdec2	equ	0xFDD
  3520                           preinc2	equ	0xFDC
  3521                           plusw2	equ	0xFDB
  3522                           fsr2h	equ	0xFDA
  3523                           fsr2l	equ	0xFD9
  3524                           status	equ	0xFD8

Data Sizes:
    Strings     439
    Constant    0
    Data        9
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     65      74
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Receive@data	PTR unsigned char  size(2) Largest target is 30
		 -> main@rxMsg(COMRAM[30]), 

    Transmit@data	PTR const unsigned char  size(2) Largest target is 9
		 -> main@txMsg(COMRAM[9]), 

    UARTWriteByteHex@hexa	PTR unsigned char  size(2) Largest target is 17
		 -> STR_14(CODE[17]), 

    UARTWriteStrLn@string	PTR unsigned char  size(2) Largest target is 38
		 -> STR_32(CODE[18]), STR_31(CODE[18]), STR_30(CODE[25]), STR_29(CODE[2]), 
		 -> STR_28(CODE[2]), STR_25(CODE[18]), STR_24(CODE[2]), STR_23(CODE[22]), 
		 -> STR_22(CODE[25]), STR_21(CODE[24]), STR_20(CODE[2]), STR_17(CODE[2]), 
		 -> STR_15(CODE[2]), STR_13(CODE[27]), STR_12(CODE[20]), STR_11(CODE[24]), 
		 -> STR_10(CODE[23]), STR_9(CODE[8]), STR_8(CODE[23]), STR_7(CODE[13]), 
		 -> STR_6(CODE[11]), STR_5(CODE[11]), STR_4(CODE[38]), STR_3(CODE[12]), 
		 -> STR_2(CODE[2]), 

    UARTWriteStr@string	PTR unsigned char  size(2) Largest target is 27
		 -> STR_27(CODE[2]), STR_26(CODE[16]), STR_19(CODE[2]), STR_18(CODE[18]), 
		 -> STR_16(CODE[27]), printBatteryLevel@string(COMRAM[6]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_Receive
    _main->_Transmit
    _Transmit->_UARTWriteByteHex
    _Receive->_UARTWriteByteHex
    _InitModule->_WriteSXRegister
    _WriteSXRegister->_ReadSXRegister
    _GetMode->_UARTWriteByteHex
    _UARTWriteStrLn->_UARTWriteByte
    _UARTWriteStr->_UARTWriteByte
    _UARTWriteByteHex->_UARTWriteByte
    _ReadSXRegister->_SPIReceive

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                49    44      5   25179
                                             16 COMRAM    49    44      5
                            _GetMode
                         _InitModule
                     _InitRFLoRaPins
                     _ReadSXRegister
                            _Receive
                      _ResetRFModule
                            _SPIInit
                           _Transmit
                           _UARTInit
                     _UARTWriteStrLn
                    _WriteSXRegister
                      _initVoltmeter
 ---------------------------------------------------------------------------------
 (1) _initVoltmeter                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Transmit                                             6     3      3    6708
                                             10 COMRAM     6     3      3
                          _AntennaTX
                     _ReadSXRegister
                   _UARTWriteByteHex
                       _UARTWriteStr
                     _UARTWriteStrLn
                    _WriteSXRegister
 ---------------------------------------------------------------------------------
 (2) _AntennaTX                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ResetRFModule                                        1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Receive                                              6     4      2    6392
                                             10 COMRAM     6     4      2
                          _AntennaRX
                     _ReadSXRegister
                   _UARTWriteByteHex
                       _UARTWriteStr
                     _UARTWriteStrLn
                    _WriteSXRegister
 ---------------------------------------------------------------------------------
 (2) _AntennaRX                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitRFLoRaPins                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitModule                                           1     1      0    2917
                    _WriteSXRegister
 ---------------------------------------------------------------------------------
 (1) _WriteSXRegister                                      2     1      1    2894
                                              4 COMRAM     2     1      1
                     _ReadSXRegister (ARG)
                        _SPITransfer
 ---------------------------------------------------------------------------------
 (1) _GetMode                                              4     4      0    3354
                                             10 COMRAM     4     4      0
                     _ReadSXRegister
                   _UARTWriteByteHex
                       _UARTWriteStr
                     _UARTWriteStrLn
 ---------------------------------------------------------------------------------
 (1) _UARTWriteStrLn                                       5     3      2    2005
                                              1 COMRAM     5     3      2
                      _UARTWriteByte
 ---------------------------------------------------------------------------------
 (2) _UARTWriteStr                                         5     3      2     637
                                              1 COMRAM     5     3      2
                      _UARTWriteByte
 ---------------------------------------------------------------------------------
 (2) _UARTWriteByteHex                                     9     7      2     464
                                              1 COMRAM     9     7      2
                      _UARTWriteByte
 ---------------------------------------------------------------------------------
 (2) _UARTWriteByte                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ReadSXRegister                                       2     2      0      90
                                              2 COMRAM     2     2      0
                         _SPIReceive
                        _SPITransfer
 ---------------------------------------------------------------------------------
 (2) _SPITransfer                                          2     2      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SPIReceive                                           3     3      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetMode
     _ReadSXRegister
       _SPIReceive
       _SPITransfer
     _UARTWriteByteHex
       _UARTWriteByte
     _UARTWriteStr
       _UARTWriteByte
     _UARTWriteStrLn
       _UARTWriteByte
   _InitModule
     _WriteSXRegister
       _ReadSXRegister (ARG)
       _SPITransfer (ARG)
   _InitRFLoRaPins
   _ReadSXRegister
   _Receive
     _AntennaRX
     _ReadSXRegister
     _UARTWriteByteHex
     _UARTWriteStr
     _UARTWriteStrLn
     _WriteSXRegister
   _ResetRFModule
   _SPIInit
   _Transmit
     _AntennaTX
     _ReadSXRegister
     _UARTWriteByteHex
     _UARTWriteStr
     _UARTWriteStrLn
     _WriteSXRegister
   _UARTInit
   _UARTWriteStrLn
   _WriteSXRegister
   _initVoltmeter

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      40        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     41      4A       1       77.9%
BITBIGSFRhhhhl      52      0       0      21        0.0%
BITBIGSFRllhl       35      0       0      31        0.0%
BITBIGSFRllllhh     2C      0       0      35        0.0%
BITBIGSFRllhhhh     1E      0       0      27        0.0%
BITBIGSFRlllll      17      0       0      38        0.0%
BITBIGSFRlllhhl     13      0       0      33        0.0%
BITBIGSFRlllhhh      F      0       0      32        0.0%
BITBIGSFRhhhhh       D      0       0      20        0.0%
BITBIGSFRllllhl      C      0       0      37        0.0%
BITBIGSFRllllhl      7      0       0      36        0.0%
BITBIGSFRhll         7      0       0      25        0.0%
BITBIGSFRllhhll      4      0       0      30        0.0%
BITBIGSFRllhhlh      2      0       0      29        0.0%
BITBIGSFRllhhhl      2      0       0      28        0.0%
BITBIGSFRhlh         2      0       0      24        0.0%
BITBIGSFRlh          2      0       0      26        0.0%
BITBIGSFRhhhl        1      0       0      22        0.0%
BITBIGSFRhhl         1      0       0      23        0.0%
BITBIGSFRlllhl       1      0       0      34        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4A      39        0.0%
DATA                 0      0      4A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon May 22 16:07:41 2023

  __end_of_InitRFLoRaPins 7432     __end_of_ResetRFModule 7528                         l9 7430  
                      l12 7526                        l15 7472                        l18 745C  
                      l51 74BE                        l45 7588                        l54 74EA  
                      l56 74F8                        l48 74B0                        l72 74A2  
                      l57 74FE                        l75 74DC                        l92 7AF6  
                      l95 787E                        u10 74BE                        u11 74BA  
                      u20 74F8                        u21 74F4                        u30 7442  
                      u31 743E               _SPITransfer 74A4    Receive@RXNumberOfBytes 000E  
        _UARTWriteByteHex 76A2                       l130 75CC                       l133 7434  
                     l142 76A0                       l136 7446                       l152 7720  
                     l153 778C                       l225 7C6A                       l217 798E  
                     l148 7628                       l228 7BB2                       l176 7488  
                     l274 7DBC                       l961 74AC                       l963 74E0  
                     l971 745E                       l965 74E6                       l981 745A  
                     l973 7462                       l959 74A6                       l967 7434  
                     l975 7470                       l993 74C2                       l969 7442  
                     l977 7448                       l995 74C4                       l979 744C  
                     l997 74CA                       l999 74D0                       u400 79D0  
                     u401 79CC                       u330 765E                       u410 79E6  
                     u411 79E2                       u340 7690                       u500 7BB2  
                     u420 78B0                       u501 7BAE                       u421 78AC  
                     u350 76A0                       u510 7BC0                       u430 78DE  
                     u351 769C                       u511 7BBC                       u431 78DA  
                     u360 76BC                       u520 7C54                       u440 791A  
                     u361 76B8                       u337 7654                       u521 7C50  
                     u441 7916                       u370 76EA                       u450 7944  
                     u371 76E6                       u347 7686                       u451 7940  
                     u531 7D22                       u460 7982                       u540 7D40  
                     u461 797E                       u541 7D3C                       u390 761C  
                     u470 7B52                       u550 7D72                       u391 7618  
                     u471 7B4E                       u551 7D6E                       u607 7C76  
                     u480 7B60                       u560 7D84                       u385 772C  
                     u481 7B5C                       u561 7D80                       u617 7CA0  
                     u490 7B76                       u570 7DBC                       u707 7452  
                     u491 7B72                       u571 7DB8                       u627 7CA8  
                     u580 7DF6                       u581 7DF2                       u637 7CB4  
                     u590 7E2E                       u591 7E2A                       u647 7CFA  
                     u657 78EE                       u667 7468                       u677 750A  
                     u687 751C                       u697 7B1A                       wreg 000FE8  
            _BAUD1CONbits 000F9F                      l1001 74D8                      l1003 74DA  
                    l1033 7426                      l1041 7552                      l1035 7500  
                    l1043 756A                      l1037 7504                      l1039 7514  
                    l1171 7482                      l1501 7A2C                      l1173 7484  
                    l1511 7A7C                      l1503 7A3C                      l1175 7486  
                    l1513 7A8C                      l1505 7A4C                      l1441 748E  
                    l1601 7884                      l1169 7474                      l1451 7632  
                    l1507 7A5C                      l1443 7494                      l1531 77CA  
                    l1523 778E                      l1611 78B4                      l1603 7892  
                    l1461 76DA                      l1453 7662                      l1509 7A6C  
                    l1517 7A9C                      l1445 749A                      l1541 77FC  
                    l1533 77D4                      l1525 77B6                      l1701 7C54  
                    l1621 78F8                      l1613 78CA                      l1605 789C  
                    l1463 76EA                      l1455 7664                      l1471 75F4  
                    l1447 74A0                      l1439 748C                      l1551 782E  
                    l1543 7806                      l1535 77DE                      l1527 77B6  
                    l1703 7C60                      l1631 7930                      l1623 7904  
                    l1615 78CC                      l1607 78A0                      l1457 76A2  
                    l1449 762A                      l1473 761C                      l1465 75CE  
                    l1481 79AE                      l1561 7860                      l1553 7838  
                    l1545 7810                      l1537 77E8                      l1529 77C0  
                    l1641 796E                      l1633 7934                      l1625 790C  
                    l1617 78DE                      l1801 7DE4                      l1459 76BC  
                    l1467 75D6                      l1491 79E6                      l1483 79BA  
                    l1475 7990                      l1563 786A                      l1555 7842  
                    l1547 781A                      l1539 77F2                      l1651 7AFC  
                    l1643 7970                      l1627 791A                      l1619 78E8  
                    l1571 75A4                      l1803 7DF6                      l1469 75F2  
                    l1493 79F6                      l1485 79C0                      l1477 7998  
                    l1565 7874                      l1557 784C                      l1549 7824  
                    l1661 7B3C                      l1653 7B0A                      l1645 7982  
                    l1637 7948                      l1629 7924                      l1581 75AE  
                    l1573 75A6                      l1805 7DFE                      l1741 7C6C  
                    l1487 79D0                      l1495 7A06                      l1479 79A4  
                    l1559 7856                      l1663 7B44                      l1655 7B14  
                    l1639 7962                      l1591 75C4                      l1583 75B0  
                    l1575 75A8                      l1567 758A                      l1815 7E2E  
                    l1807 7E1A                      l1751 7C9E                      l1743 7C82  
                    l1497 7A12                      l1489 79D6                      l1681 7BC0  
                    l1673 7B84                      l1665 7B52                      l1657 7B24  
                    l1649 7AF8                      l1593 75C6                      l1585 75B2  
                    l1577 75AA                      l1569 7596                      l1809 7E1C  
                    l1761 7CD6                      l1753 7CA6                      l1745 7C86  
                    l1499 7A1C                      l1691 7C06                      l1683 7BDC  
                    l1675 7B90                      l1667 7B60                      l1659 7B30  
                    l1595 75C8                      l1587 75B4                      l1579 75AC  
                    l1771 7D08                      l1763 7CE0                      l1755 7CAE  
                    l1747 7C8A                      l1837 7AB0                      l1693 7C1A  
                    l1685 7BE8                      l1677 7B9C                      l1669 7B76  
                    l1597 75CA                      l1589 75C2                      l1781 7D4C  
                    l1773 7D14                      l1765 7CEA                      l1757 7CBE  
                    l1749 7C92                      l1695 7C34                      l1687 7BF0  
                    l1679 7BA4                      l1599 7880                      l1791 7D8C  
                    l1783 7D58                      l1775 7D18                      l1767 7CF4  
                    l1759 7CCA                      l1697 7C40                      l1689 7BFE  
                    l1793 7DA8                      l1785 7D60                      l1777 7D2A  
                    l1769 7D04                      l1699 7C42                      l1795 7DAA  
                    l1787 7D72                      l1779 7D40                      l1797 7DD0  
                    l1789 7D84                      l1799 7DD4                      STR_1 7FA4  
                    STR_2 7E86                      STR_3 7FD2                      STR_4 7E47  
                    STR_5 7FDE                      STR_6 7FE9                      STR_7 7FC5  
                    STR_8 7F1C                      STR_9 7FF4         GetMode@masked_reg 000D  
   ReadSXRegister@address 0004                      _main 7C6C              Transmit@data 000B  
         __end_of_SPIInit 758A                      fsr0h 000FEA                      indf0 000FEF  
                    fsr0l 000FE9                      indf1 000FE7                      indf2 000FDF  
                    fsr1l 000FE1                      fsr2l 000FD9                      start 0000  
         __end_of_GetMode 7AF8    ReadSXRegister@RegValue 0003              ___param_bank 000000  
         ?_InitRFLoRaPins 0001           __end_of_Receive 7C6C                     _ADACQ 000F5C  
                   ?_main 0011                     _ADCLK 000F57                     _ADPCH 000F5F  
                   STR_10 7F05                     STR_11 7EED                     STR_20 7E86  
                   STR_12 7F49                     STR_21 7ED5                     STR_13 7E88  
                   STR_14 7F93                     STR_22 7EBC                     STR_30 7EA3  
                   STR_31 7F5D                     STR_23 7F33                     STR_24 7E86  
                   STR_32 7F5D                     STR_16 7E6D                     STR_17 7FFC  
                   STR_25 7F81                     STR_26 7FB5                     STR_18 7F6F  
                   STR_27 7E86                     STR_19 7E86                     STR_28 7E86  
                   STR_29 7E86          __end_of_UARTInit 75CE                     main@i 003F  
         UARTWriteStrLn@i 0006                     tablat 000FF5            _ReadSXRegister 74C0  
                   plusw1 000FE3                     plusw2 000FDB                     status 000FD8  
    UARTWriteByteHex@data 0002      UARTWriteByteHex@hexa 0009               ?_SPIReceive 0001  
         __initialization 7528                _InitModule 778E              __end_of_main 7E46  
                  ??_main 0016             __activetblptr 000002          __end_of_Transmit 7990  
                  _ADRESH 000F64                    _ADRESL 000F63                 ??_SPIInit 0001  
  __end_of_ReadSXRegister 74DE                    _RC1STA 000F9D                    _RC3PPS 000EFA  
                  _RC5PPS 000EFC                    _RC6PPS 000EFD                    _SP1BRG 000F9B  
               ??_GetMode 000B                    _TX1REG 000F9A                    _TX1STA 000F9E  
               ??_Receive 000D               Receive@data 000B                    isa$std 000001  
      SPIReceive@data_out 0001              __pdataCOMRAM 0042              __mediumconst 7E46  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
         ?_ReadSXRegister 0001                __accesstop 0060   __end_of__initialization 7548  
__end_of_UARTWriteByteHex 778E             ___rparam_used 000001         __end_of_AntennaRX 745E  
       __end_of_AntennaTX 7474               ?_InitModule 0001            __pcstackCOMRAM 0001  
               ?_UARTInit 0001              ?_SPITransfer 0001       main@RXNumberOfBytes 0041  
   __end_of_UARTWriteByte 7448             _initVoltmeter 7474          ??_InitRFLoRaPins 0001  
              ??_UARTInit 0003                 ?_Transmit 000B            ?_initVoltmeter 0001  
                 _SP1BRGH 000F9C                   _SSP1BUF 000F92                   _SPIInit 7552  
                 _GetMode 7990         UARTWriteByte@data 0001                   _Receive 7AF8  
            ??_SPIReceive 0001                   __Hparam 0000                   __Lparam 0000  
           ?_UARTWriteStr 0002                ??_Transmit 000E                   __pcinit 7528  
                 __ramtop 0800                   __ptext0 7C6C                   __ptext1 7474  
                 __ptext2 758A                   __ptext3 7880                   __ptext4 745E  
                 __ptext5 7552                   __ptext6 7500                   __ptext7 7AF8  
                 __ptext8 7448                   __ptext9 7426         ??_WriteSXRegister 0006  
      __end_of_SPIReceive 7500           Transmit@reg_val 000F      end_of_initialization 7548  
           __Lmediumconst 7E46                   postdec1 000FE5            ??_UARTWriteStr 0004  
                 postinc0 000FEE             _ResetRFModule 7500           ??_initVoltmeter 0001  
        ??_ReadSXRegister 0003                 _TRISAbits 000F88                 _TRISBbits 000F89  
               _TRISCbits 000F8A                main@i_1046 0040            _UARTWriteStrLn 75CE  
       ?_UARTWriteByteHex 0002        ??_UARTWriteByteHex 0004              ??_InitModule 0007  
          ?_ResetRFModule 0001                 _AntennaRX 7448                 _AntennaTX 745E  
    UARTWriteStrLn@string 0002             __pidataCOMRAM 741D       start_initialization 7528  
  __end_of_UARTWriteStrLn 762A        __end_of_InitModule 7880            Receive@reg_val 0010  
              ?_AntennaRX 0001                ?_AntennaTX 0001         SPIReceive@data_in 0002  
               Transmit@i 0010           ?_UARTWriteStrLn 0002                  ?_SPIInit 0001  
    __end_of_UARTWriteStr 76A2                  ?_GetMode 0001                  ?_Receive 000B  
         ??_ResetRFModule 0001             __pmediumconst 7E46           _WriteSXRegister 748A  
       Transmit@data_long 000D                  _LATAbits 000F83                  _LATBbits 000F84  
                _LATCbits 000F85                  _PIE3bits 000EC5                  _PIR3bits 000ECD  
     SPITransfer@data_out 0001                 main@F9592 0042                  _SSP1CON1 000F96  
                _SSP1CON3 000F98                  _UARTInit 758A                  _SSP1STAT 000F95  
             ??_AntennaRX 0001               ??_AntennaTX 0001             _UARTWriteByte 7432  
              _ADCON0bits 000F60                 main@rxMsg 0018                 main@txMsg 0036  
                Receive@i 000F                 copy_data0 753C             UARTWriteStr@i 0006  
 __end_of_WriteSXRegister 74A4                  __Hrparam 0000                  __Lrparam 0000  
                _Transmit 7880             ??_SPITransfer 0001            ?_UARTWriteByte 0001  
   __end_of_initVoltmeter 748A                _ANSELAbits 000F11                _ANSELCbits 000F21  
                __ptext10 778E                  __ptext11 748A                  __ptext12 7990  
                __ptext13 75CE                  __ptext14 762A                  __ptext15 76A2  
                __ptext16 7432                  __ptext17 74C0                  __ptext18 74A4  
                __ptext19 74DE                _RC1STAbits 000F9D       WriteSXRegister@data 0005  
                isa$xinst 000000              _UARTWriteStr 762A                  main@argc 0011  
                main@argv 0013          ??_UARTWriteStrLn 0004        UARTWriteStr@string 0002  
              _INTCONbits 000FF2       __end_of_SPITransfer 74C0          ?_WriteSXRegister 0005  
              GetMode@reg 000E    WriteSXRegister@address 0006           ??_UARTWriteByte 0001  
          _InitRFLoRaPins 7426                _SSP1DATPPS 000EB8                _SSP1CLKPPS 000EB7  
              _TX1STAbits 000F9E                _SPIReceive 74DE          UARTInit@baudRate 0001  
