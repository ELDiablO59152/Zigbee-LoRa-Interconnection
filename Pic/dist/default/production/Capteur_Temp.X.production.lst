

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Jun 30 09:43:18 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F25K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    73                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    74                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    75  0000                     
    76                           ; Version 2.20
    77                           ; Generated 12/02/2020 GMT
    78                           ; 
    79                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC18F25K40 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     
   111                           	psect	idataBANK0
   112  004A97                     __pidataBANK0:
   113                           	callstack 0
   114                           
   115                           ;initializer for main@F9622
   116  004A97  AD                 	db	173
   117  004A98  4E                 	db	78
   118  004A99  01                 	db	1
   119  004A9A  04                 	db	4
   120  004A9B  00                 	db	0
   121  004A9C  00                 	db	0
   122  004A9D  00                 	db	0
   123  004A9E  00                 	db	0
   124  004A9F  00                 	db	0
   125  0000                     _PIE3bits	set	3781
   126  0000                     _RC6PPS	set	3837
   127  0000                     _PIR3bits	set	3789
   128  0000                     _SSP1DATPPS	set	3768
   129  0000                     _SSP1CLKPPS	set	3767
   130  0000                     _RC5PPS	set	3836
   131  0000                     _RC3PPS	set	3834
   132  0000                     _ANSELAbits	set	3857
   133  0000                     _ADACQ	set	3932
   134  0000                     _ADPCH	set	3935
   135  0000                     _ADCLK	set	3927
   136  0000                     _ANSELCbits	set	3873
   137  0000                     _SP1BRG	set	3995
   138  0000                     _ADRESL	set	3939
   139  0000                     _ADRESH	set	3940
   140  0000                     _ADCON0bits	set	3936
   141  0000                     _TX1REG	set	3994
   142  0000                     _INTCONbits	set	4082
   143  0000                     _SP1BRGH	set	3996
   144  0000                     _BAUD1CONbits	set	3999
   145  0000                     _RC1STAbits	set	3997
   146  0000                     _TX1STAbits	set	3998
   147  0000                     _RC1STA	set	3997
   148  0000                     _TX1STA	set	3998
   149  0000                     _LATAbits	set	3971
   150  0000                     _TRISAbits	set	3976
   151  0000                     _SSP1BUF	set	3986
   152  0000                     _SSP1CON3	set	3992
   153  0000                     _SSP1CON1	set	3990
   154  0000                     _SSP1STAT	set	3989
   155  0000                     _LATCbits	set	3973
   156  0000                     _TRISCbits	set	3978
   157  0000                     _LATBbits	set	3972
   158  0000                     _TRISBbits	set	3977
   159                           
   160                           	psect	mediumconst
   161  007D1C                     __pmediumconst:
   162                           	callstack 0
   163  007D1C  00                 	db	0
   164  007D1D                     STR_37:
   165                           
   166                           ; BSR set to: 14
   167  007D1D  6D                 	db	109	;'m'
   168  007D1E  6F                 	db	111	;'o'
   169  007D1F  64                 	db	100	;'d'
   170  007D20  65                 	db	101	;'e'
   171  007D21  20                 	db	32
   172  007D22  3D                 	db	61	;'='
   173  007D23  20                 	db	32
   174  007D24  4C                 	db	76	;'L'
   175  007D25  6F                 	db	111	;'o'
   176  007D26  52                 	db	82	;'R'
   177  007D27  61                 	db	97	;'a'
   178  007D28  20                 	db	32
   179  007D29  77                 	db	119	;'w'
   180  007D2A  69                 	db	105	;'i'
   181  007D2B  74                 	db	116	;'t'
   182  007D2C  68                 	db	104	;'h'
   183  007D2D  20                 	db	32
   184  007D2E  46                 	db	70	;'F'
   185  007D2F  53                 	db	83	;'S'
   186  007D30  4B                 	db	75	;'K'
   187  007D31  20                 	db	32
   188  007D32  72                 	db	114	;'r'
   189  007D33  65                 	db	101	;'e'
   190  007D34  67                 	db	103	;'g'
   191  007D35  69                 	db	105	;'i'
   192  007D36  73                 	db	115	;'s'
   193  007D37  74                 	db	116	;'t'
   194  007D38  65                 	db	101	;'e'
   195  007D39  72                 	db	114	;'r'
   196  007D3A  73                 	db	115	;'s'
   197  007D3B  20                 	db	32
   198  007D3C  61                 	db	97	;'a'
   199  007D3D  63                 	db	99	;'c'
   200  007D3E  63                 	db	99	;'c'
   201  007D3F  65                 	db	101	;'e'
   202  007D40  73                 	db	115	;'s'
   203  007D41  73                 	db	115	;'s'
   204  007D42  00                 	db	0
   205  007D43                     STR_49:
   206                           
   207                           ; BSR set to: 14
   208  007D43  50                 	db	80	;'P'
   209  007D44  6F                 	db	111	;'o'
   210  007D45  75                 	db	117	;'u'
   211  007D46  72                 	db	114	;'r'
   212  007D47  63                 	db	99	;'c'
   213  007D48  65                 	db	101	;'e'
   214  007D49  6E                 	db	110	;'n'
   215  007D4A  74                 	db	116	;'t'
   216  007D4B  61                 	db	97	;'a'
   217  007D4C  67                 	db	103	;'g'
   218  007D4D  65                 	db	101	;'e'
   219  007D4E  20                 	db	32
   220  007D4F  64                 	db	100	;'d'
   221  007D50  65                 	db	101	;'e'
   222  007D51  20                 	db	32
   223  007D52  62                 	db	98	;'b'
   224  007D53  61                 	db	97	;'a'
   225  007D54  74                 	db	116	;'t'
   226  007D55  74                 	db	116	;'t'
   227  007D56  65                 	db	101	;'e'
   228  007D57  72                 	db	114	;'r'
   229  007D58  69                 	db	105	;'i'
   230  007D59  65                 	db	101	;'e'
   231  007D5A  20                 	db	32
   232  007D5B  3A                 	db	58	;':'
   233  007D5C  20                 	db	32
   234  007D5D  00                 	db	0
   235  007D5E                     STR_46:
   236                           
   237                           ; BSR set to: 14
   238  007D5E  43                 	db	67	;'C'
   239  007D5F  68                 	db	104	;'h'
   240  007D60  61                 	db	97	;'a'
   241  007D61  6E                 	db	110	;'n'
   242  007D62  6E                 	db	110	;'n'
   243  007D63  65                 	db	101	;'e'
   244  007D64  6C                 	db	108	;'l'
   245  007D65  20                 	db	32
   246  007D66  41                 	db	65	;'A'
   247  007D67  63                 	db	99	;'c'
   248  007D68  74                 	db	116	;'t'
   249  007D69  69                 	db	105	;'i'
   250  007D6A  76                 	db	118	;'v'
   251  007D6B  69                 	db	105	;'i'
   252  007D6C  74                 	db	116	;'t'
   253  007D6D  79                 	db	121	;'y'
   254  007D6E  20                 	db	32
   255  007D6F  44                 	db	68	;'D'
   256  007D70  65                 	db	101	;'e'
   257  007D71  74                 	db	116	;'t'
   258  007D72  65                 	db	101	;'e'
   259  007D73  63                 	db	99	;'c'
   260  007D74  74                 	db	116	;'t'
   261  007D75  69                 	db	105	;'i'
   262  007D76  6F                 	db	111	;'o'
   263  007D77  6E                 	db	110	;'n'
   264  007D78  00                 	db	0
   265  007D79                     STR_58:
   266                           
   267                           ; BSR set to: 14
   268  007D79  77                 	db	119	;'w'
   269  007D7A  61                 	db	97	;'a'
   270  007D7B  69                 	db	105	;'i'
   271  007D7C  74                 	db	116	;'t'
   272  007D7D  69                 	db	105	;'i'
   273  007D7E  6E                 	db	110	;'n'
   274  007D7F  67                 	db	103	;'g'
   275  007D80  20                 	db	32
   276  007D81  66                 	db	102	;'f'
   277  007D82  6F                 	db	111	;'o'
   278  007D83  72                 	db	114	;'r'
   279  007D84  20                 	db	32
   280  007D85  76                 	db	118	;'v'
   281  007D86  61                 	db	97	;'a'
   282  007D87  6C                 	db	108	;'l'
   283  007D88  69                 	db	105	;'i'
   284  007D89  64                 	db	100	;'d'
   285  007D8A  20                 	db	32
   286  007D8B  68                 	db	104	;'h'
   287  007D8C  65                 	db	101	;'e'
   288  007D8D  61                 	db	97	;'a'
   289  007D8E  64                 	db	100	;'d'
   290  007D8F  65                 	db	101	;'e'
   291  007D90  72                 	db	114	;'r'
   292  007D91  00                 	db	0
   293  007D92                     STR_3:
   294                           
   295                           ; BSR set to: 14
   296  007D92  73                 	db	115	;'s'
   297  007D93  65                 	db	101	;'e'
   298  007D94  74                 	db	116	;'t'
   299  007D95  20                 	db	32
   300  007D96  6D                 	db	109	;'m'
   301  007D97  6F                 	db	111	;'o'
   302  007D98  64                 	db	100	;'d'
   303  007D99  65                 	db	101	;'e'
   304  007D9A  20                 	db	32
   305  007D9B  74                 	db	116	;'t'
   306  007D9C  6F                 	db	111	;'o'
   307  007D9D  20                 	db	32
   308  007D9E  4C                 	db	76	;'L'
   309  007D9F  6F                 	db	111	;'o'
   310  007DA0  52                 	db	82	;'R'
   311  007DA1  61                 	db	97	;'a'
   312  007DA2  20                 	db	32
   313  007DA3  73                 	db	115	;'s'
   314  007DA4  74                 	db	116	;'t'
   315  007DA5  61                 	db	97	;'a'
   316  007DA6  6E                 	db	110	;'n'
   317  007DA7  64                 	db	100	;'d'
   318  007DA8  62                 	db	98	;'b'
   319  007DA9  79                 	db	121	;'y'
   320  007DAA  00                 	db	0
   321  007DAB                     STR_57:
   322                           
   323                           ; BSR set to: 14
   324  007DAB  2D                 	db	45
   325  007DAC  2D                 	db	45
   326  007DAD  2D                 	db	45
   327  007DAE  2D                 	db	45
   328  007DAF  2D                 	db	45
   329  007DB0  2D                 	db	45
   330  007DB1  2D                 	db	45
   331  007DB2  2D                 	db	45
   332  007DB3  2D                 	db	45
   333  007DB4  2D                 	db	45
   334  007DB5  2D                 	db	45
   335  007DB6  2D                 	db	45
   336  007DB7  2D                 	db	45
   337  007DB8  2D                 	db	45
   338  007DB9  2D                 	db	45
   339  007DBA  2D                 	db	45
   340  007DBB  2D                 	db	45
   341  007DBC  2D                 	db	45
   342  007DBD  2D                 	db	45
   343  007DBE  2D                 	db	45
   344  007DBF  2D                 	db	45
   345  007DC0  2D                 	db	45
   346  007DC1  2D                 	db	45
   347  007DC2  00                 	db	0
   348  007DC3                     STR_44:
   349                           
   350                           ; BSR set to: 14
   351  007DC3  63                 	db	99	;'c'
   352  007DC4  6F                 	db	111	;'o'
   353  007DC5  6E                 	db	110	;'n'
   354  007DC6  74                 	db	116	;'t'
   355  007DC7  69                 	db	105	;'i'
   356  007DC8  6E                 	db	110	;'n'
   357  007DC9  75                 	db	117	;'u'
   358  007DCA  6F                 	db	111	;'o'
   359  007DCB  75                 	db	117	;'u'
   360  007DCC  73                 	db	115	;'s'
   361  007DCD  20                 	db	32
   362  007DCE  72                 	db	114	;'r'
   363  007DCF  65                 	db	101	;'e'
   364  007DD0  63                 	db	99	;'c'
   365  007DD1  65                 	db	101	;'e'
   366  007DD2  69                 	db	105	;'i'
   367  007DD3  76                 	db	118	;'v'
   368  007DD4  65                 	db	101	;'e'
   369  007DD5  20                 	db	32
   370  007DD6  6D                 	db	109	;'m'
   371  007DD7  6F                 	db	111	;'o'
   372  007DD8  64                 	db	100	;'d'
   373  007DD9  65                 	db	101	;'e'
   374  007DDA  00                 	db	0
   375  007DDB                     STR_43:
   376                           
   377                           ; BSR set to: 14
   378  007DDB  66                 	db	102	;'f'
   379  007DDC  72                 	db	114	;'r'
   380  007DDD  65                 	db	101	;'e'
   381  007DDE  71                 	db	113	;'q'
   382  007DDF  75                 	db	117	;'u'
   383  007DE0  65                 	db	101	;'e'
   384  007DE1  6E                 	db	110	;'n'
   385  007DE2  63                 	db	99	;'c'
   386  007DE3  79                 	db	121	;'y'
   387  007DE4  20                 	db	32
   388  007DE5  73                 	db	115	;'s'
   389  007DE6  79                 	db	121	;'y'
   390  007DE7  6E                 	db	110	;'n'
   391  007DE8  74                 	db	116	;'t'
   392  007DE9  68                 	db	104	;'h'
   393  007DEA  65                 	db	101	;'e'
   394  007DEB  73                 	db	115	;'s'
   395  007DEC  69                 	db	105	;'i'
   396  007DED  73                 	db	115	;'s'
   397  007DEE  20                 	db	32
   398  007DEF  52                 	db	82	;'R'
   399  007DF0  58                 	db	88	;'X'
   400  007DF1  00                 	db	0
   401  007DF2                     STR_41:
   402                           
   403                           ; BSR set to: 14
   404  007DF2  66                 	db	102	;'f'
   405  007DF3  72                 	db	114	;'r'
   406  007DF4  65                 	db	101	;'e'
   407  007DF5  71                 	db	113	;'q'
   408  007DF6  75                 	db	117	;'u'
   409  007DF7  65                 	db	101	;'e'
   410  007DF8  6E                 	db	110	;'n'
   411  007DF9  63                 	db	99	;'c'
   412  007DFA  79                 	db	121	;'y'
   413  007DFB  20                 	db	32
   414  007DFC  73                 	db	115	;'s'
   415  007DFD  79                 	db	121	;'y'
   416  007DFE  6E                 	db	110	;'n'
   417  007DFF  74                 	db	116	;'t'
   418  007E00  68                 	db	104	;'h'
   419  007E01  65                 	db	101	;'e'
   420  007E02  73                 	db	115	;'s'
   421  007E03  69                 	db	105	;'i'
   422  007E04  73                 	db	115	;'s'
   423  007E05  20                 	db	32
   424  007E06  54                 	db	84	;'T'
   425  007E07  58                 	db	88	;'X'
   426  007E08  00                 	db	0
   427  007E09                     STR_59:
   428                           
   429                           ; BSR set to: 14
   430  007E09  76                 	db	118	;'v'
   431  007E0A  61                 	db	97	;'a'
   432  007E0B  6C                 	db	108	;'l'
   433  007E0C  69                 	db	105	;'i'
   434  007E0D  64                 	db	100	;'d'
   435  007E0E  20                 	db	32
   436  007E0F  68                 	db	104	;'h'
   437  007E10  65                 	db	101	;'e'
   438  007E11  61                 	db	97	;'a'
   439  007E12  64                 	db	100	;'d'
   440  007E13  65                 	db	101	;'e'
   441  007E14  72                 	db	114	;'r'
   442  007E15  20                 	db	32
   443  007E16  72                 	db	114	;'r'
   444  007E17  65                 	db	101	;'e'
   445  007E18  63                 	db	99	;'c'
   446  007E19  65                 	db	101	;'e'
   447  007E1A  69                 	db	105	;'i'
   448  007E1B  76                 	db	118	;'v'
   449  007E1C  65                 	db	101	;'e'
   450  007E1D  64                 	db	100	;'d'
   451  007E1E  00                 	db	0
   452  007E1F                     STR_45:
   453                           
   454                           ; BSR set to: 14
   455  007E1F  73                 	db	115	;'s'
   456  007E20  69                 	db	105	;'i'
   457  007E21  6E                 	db	110	;'n'
   458  007E22  67                 	db	103	;'g'
   459  007E23  6C                 	db	108	;'l'
   460  007E24  65                 	db	101	;'e'
   461  007E25  20                 	db	32
   462  007E26  72                 	db	114	;'r'
   463  007E27  65                 	db	101	;'e'
   464  007E28  63                 	db	99	;'c'
   465  007E29  65                 	db	101	;'e'
   466  007E2A  69                 	db	105	;'i'
   467  007E2B  76                 	db	118	;'v'
   468  007E2C  65                 	db	101	;'e'
   469  007E2D  20                 	db	32
   470  007E2E  6D                 	db	109	;'m'
   471  007E2F  6F                 	db	111	;'o'
   472  007E30  64                 	db	100	;'d'
   473  007E31  65                 	db	101	;'e'
   474  007E32  00                 	db	0
   475  007E33                     STR_28:
   476                           
   477                           ; BSR set to: 14
   478  007E33  45                 	db	69	;'E'
   479  007E34  72                 	db	114	;'r'
   480  007E35  72                 	db	114	;'r'
   481  007E36  65                 	db	101	;'e'
   482  007E37  75                 	db	117	;'u'
   483  007E38  72                 	db	114	;'r'
   484  007E39  20                 	db	32
   485  007E3A  64                 	db	100	;'d'
   486  007E3B  65                 	db	101	;'e'
   487  007E3C  20                 	db	32
   488  007E3D  74                 	db	116	;'t'
   489  007E3E  72                 	db	114	;'r'
   490  007E3F  61                 	db	97	;'a'
   491  007E40  6E                 	db	110	;'n'
   492  007E41  73                 	db	115	;'s'
   493  007E42  66                 	db	102	;'f'
   494  007E43  65                 	db	101	;'e'
   495  007E44  72                 	db	114	;'r'
   496  007E45  74                 	db	116	;'t'
   497  007E46  00                 	db	0
   498  007E47                     STR_15:
   499                           
   500                           ; BSR set to: 14
   501  007E47  52                 	db	82	;'R'
   502  007E48  65                 	db	101	;'e'
   503  007E49  71                 	db	113	;'q'
   504  007E4A  75                 	db	117	;'u'
   505  007E4B  65                 	db	101	;'e'
   506  007E4C  74                 	db	116	;'t'
   507  007E4D  65                 	db	101	;'e'
   508  007E4E  20                 	db	32
   509  007E4F  64                 	db	100	;'d'
   510  007E50  65                 	db	101	;'e'
   511  007E51  20                 	db	32
   512  007E52  64                 	db	100	;'d'
   513  007E53  6F                 	db	111	;'o'
   514  007E54  6E                 	db	110	;'n'
   515  007E55  6E                 	db	110	;'n'
   516  007E56  65                 	db	101	;'e'
   517  007E57  65                 	db	101	;'e'
   518  007E58  73                 	db	115	;'s'
   519  007E59  00                 	db	0
   520  007E5A                     STR_54:
   521                           
   522                           ; BSR set to: 14
   523  007E5A  4D                 	db	77	;'M'
   524  007E5B  65                 	db	101	;'e'
   525  007E5C  73                 	db	115	;'s'
   526  007E5D  73                 	db	115	;'s'
   527  007E5E  61                 	db	97	;'a'
   528  007E5F  67                 	db	103	;'g'
   529  007E60  65                 	db	101	;'e'
   530  007E61  20                 	db	32
   531  007E62  65                 	db	101	;'e'
   532  007E63  6E                 	db	110	;'n'
   533  007E64  76                 	db	118	;'v'
   534  007E65  6F                 	db	111	;'o'
   535  007E66  79                 	db	121	;'y'
   536  007E67  65                 	db	101	;'e'
   537  007E68  20                 	db	32
   538  007E69  3A                 	db	58	;':'
   539  007E6A  20                 	db	32
   540  007E6B  00                 	db	0
   541  007E6C                     STR_61:
   542                           
   543                           ; BSR set to: 14
   544  007E6C  70                 	db	112	;'p'
   545  007E6D  61                 	db	97	;'a'
   546  007E6E  79                 	db	121	;'y'
   547  007E6F  6C                 	db	108	;'l'
   548  007E70  6F                 	db	111	;'o'
   549  007E71  61                 	db	97	;'a'
   550  007E72  64                 	db	100	;'d'
   551  007E73  20                 	db	32
   552  007E74  43                 	db	67	;'C'
   553  007E75  52                 	db	82	;'R'
   554  007E76  43                 	db	67	;'C'
   555  007E77  20                 	db	32
   556  007E78  65                 	db	101	;'e'
   557  007E79  72                 	db	114	;'r'
   558  007E7A  72                 	db	114	;'r'
   559  007E7B  6F                 	db	111	;'o'
   560  007E7C  72                 	db	114	;'r'
   561  007E7D  00                 	db	0
   562  007E7E                     STR_9:
   563                           
   564                           ; BSR set to: 14
   565  007E7E  44                 	db	68	;'D'
   566  007E7F  69                 	db	105	;'i'
   567  007E80  73                 	db	115	;'s'
   568  007E81  63                 	db	99	;'c'
   569  007E82  6F                 	db	111	;'o'
   570  007E83  76                 	db	118	;'v'
   571  007E84  65                 	db	101	;'e'
   572  007E85  72                 	db	114	;'r'
   573  007E86  20                 	db	32
   574  007E87  67                 	db	103	;'g'
   575  007E88  72                 	db	114	;'r'
   576  007E89  6F                 	db	111	;'o'
   577  007E8A  75                 	db	117	;'u'
   578  007E8B  70                 	db	112	;'p'
   579  007E8C  20                 	db	32
   580  007E8D  3A                 	db	58	;':'
   581  007E8E  20                 	db	32
   582  007E8F  00                 	db	0
   583  007E90                     STR_24:
   584                           
   585                           ; BSR set to: 14
   586  007E90  4D                 	db	77	;'M'
   587  007E91  65                 	db	101	;'e'
   588  007E92  73                 	db	115	;'s'
   589  007E93  75                 	db	117	;'u'
   590  007E94  72                 	db	114	;'r'
   591  007E95  65                 	db	101	;'e'
   592  007E96  20                 	db	32
   593  007E97  69                 	db	105	;'i'
   594  007E98  6D                 	db	109	;'m'
   595  007E99  70                 	db	112	;'p'
   596  007E9A  6F                 	db	111	;'o'
   597  007E9B  73                 	db	115	;'s'
   598  007E9C  73                 	db	115	;'s'
   599  007E9D  69                 	db	105	;'i'
   600  007E9E  62                 	db	98	;'b'
   601  007E9F  6C                 	db	108	;'l'
   602  007EA0  65                 	db	101	;'e'
   603  007EA1  00                 	db	0
   604  007EA2                     STR_4:
   605                           
   606                           ; BSR set to: 14
   607  007EA2  69                 	db	105	;'i'
   608  007EA3  6E                 	db	110	;'n'
   609  007EA4  69                 	db	105	;'i'
   610  007EA5  74                 	db	116	;'t'
   611  007EA6  69                 	db	105	;'i'
   612  007EA7  61                 	db	97	;'a'
   613  007EA8  6C                 	db	108	;'l'
   614  007EA9  69                 	db	105	;'i'
   615  007EAA  7A                 	db	122	;'z'
   616  007EAB  65                 	db	101	;'e'
   617  007EAC  20                 	db	32
   618  007EAD  6D                 	db	109	;'m'
   619  007EAE  6F                 	db	111	;'o'
   620  007EAF  64                 	db	100	;'d'
   621  007EB0  75                 	db	117	;'u'
   622  007EB1  6C                 	db	108	;'l'
   623  007EB2  65                 	db	101	;'e'
   624  007EB3  00                 	db	0
   625  007EB4                     STR_47:
   626                           
   627                           ; BSR set to: 14
   628  007EB4  30                 	db	48	;'0'
   629  007EB5  31                 	db	49	;'1'
   630  007EB6  32                 	db	50	;'2'
   631  007EB7  33                 	db	51	;'3'
   632  007EB8  34                 	db	52	;'4'
   633  007EB9  35                 	db	53	;'5'
   634  007EBA  36                 	db	54	;'6'
   635  007EBB  37                 	db	55	;'7'
   636  007EBC  38                 	db	56	;'8'
   637  007EBD  39                 	db	57	;'9'
   638  007EBE  41                 	db	65	;'A'
   639  007EBF  42                 	db	66	;'B'
   640  007EC0  43                 	db	67	;'C'
   641  007EC1  44                 	db	68	;'D'
   642  007EC2  45                 	db	69	;'E'
   643  007EC3  46                 	db	70	;'F'
   644  007EC4  00                 	db	0
   645  007EC5                     STR_33:
   646                           
   647                           ; BSR set to: 14
   648  007EC5  52                 	db	82	;'R'
   649  007EC6  45                 	db	69	;'E'
   650  007EC7  47                 	db	71	;'G'
   651  007EC8  5F                 	db	95	;'_'
   652  007EC9  4F                 	db	79	;'O'
   653  007ECA  50                 	db	80	;'P'
   654  007ECB  5F                 	db	95	;'_'
   655  007ECC  4D                 	db	77	;'M'
   656  007ECD  4F                 	db	79	;'O'
   657  007ECE  44                 	db	68	;'D'
   658  007ECF  45                 	db	69	;'E'
   659  007ED0  20                 	db	32
   660  007ED1  3D                 	db	61	;'='
   661  007ED2  20                 	db	32
   662  007ED3  30                 	db	48	;'0'
   663  007ED4  78                 	db	120	;'x'
   664  007ED5  00                 	db	0
   665  007ED6                     STR_26:
   666                           
   667                           ; BSR set to: 14
   668  007ED6  41                 	db	65	;'A'
   669  007ED7  63                 	db	99	;'c'
   670  007ED8  63                 	db	99	;'c'
   671  007ED9  75                 	db	117	;'u'
   672  007EDA  73                 	db	115	;'s'
   673  007EDB  65                 	db	101	;'e'
   674  007EDC  20                 	db	32
   675  007EDD  72                 	db	114	;'r'
   676  007EDE  65                 	db	101	;'e'
   677  007EDF  63                 	db	99	;'c'
   678  007EE0  65                 	db	101	;'e'
   679  007EE1  70                 	db	112	;'p'
   680  007EE2  74                 	db	116	;'t'
   681  007EE3  69                 	db	105	;'i'
   682  007EE4  6F                 	db	111	;'o'
   683  007EE5  6E                 	db	110	;'n'
   684  007EE6  00                 	db	0
   685  007EE7                     STR_62:
   686                           
   687                           ; BSR set to: 14
   688  007EE7  72                 	db	114	;'r'
   689  007EE8  65                 	db	101	;'e'
   690  007EE9  63                 	db	99	;'c'
   691  007EEA  65                 	db	101	;'e'
   692  007EEB  69                 	db	105	;'i'
   693  007EEC  76                 	db	118	;'v'
   694  007EED  65                 	db	101	;'e'
   695  007EEE  64                 	db	100	;'d'
   696  007EEF  20                 	db	32
   697  007EF0  64                 	db	100	;'d'
   698  007EF1  61                 	db	97	;'a'
   699  007EF2  74                 	db	116	;'t'
   700  007EF3  61                 	db	97	;'a'
   701  007EF4  3A                 	db	58	;':'
   702  007EF5  20                 	db	32
   703  007EF6  00                 	db	0
   704  007EF7                     STR_6:
   705                           
   706                           ; BSR set to: 14
   707  007EF7  4D                 	db	77	;'M'
   708  007EF8  65                 	db	101	;'e'
   709  007EF9  73                 	db	115	;'s'
   710  007EFA  73                 	db	115	;'s'
   711  007EFB  61                 	db	97	;'a'
   712  007EFC  67                 	db	103	;'g'
   713  007EFD  65                 	db	101	;'e'
   714  007EFE  20                 	db	32
   715  007EFF  72                 	db	114	;'r'
   716  007F00  65                 	db	101	;'e'
   717  007F01  63                 	db	99	;'c'
   718  007F02  75                 	db	117	;'u'
   719  007F03  20                 	db	32
   720  007F04  3A                 	db	58	;':'
   721  007F05  20                 	db	32
   722  007F06  00                 	db	0
   723  007F07                     STR_18:
   724                           
   725                           ; BSR set to: 14
   726  007F07  4D                 	db	77	;'M'
   727  007F08  65                 	db	101	;'e'
   728  007F09  73                 	db	115	;'s'
   729  007F0A  75                 	db	117	;'u'
   730  007F0B  72                 	db	114	;'r'
   731  007F0C  65                 	db	101	;'e'
   732  007F0D  20                 	db	32
   733  007F0E  70                 	db	112	;'p'
   734  007F0F  6F                 	db	111	;'o'
   735  007F10  73                 	db	115	;'s'
   736  007F11  73                 	db	115	;'s'
   737  007F12  69                 	db	105	;'i'
   738  007F13  62                 	db	98	;'b'
   739  007F14  6C                 	db	108	;'l'
   740  007F15  65                 	db	101	;'e'
   741  007F16  00                 	db	0
   742  007F17                     STR_20:
   743                           
   744                           ; BSR set to: 14
   745  007F17  4D                 	db	77	;'M'
   746  007F18  65                 	db	101	;'e'
   747  007F19  73                 	db	115	;'s'
   748  007F1A  75                 	db	117	;'u'
   749  007F1B  72                 	db	114	;'r'
   750  007F1C  65                 	db	101	;'e'
   751  007F1D  20                 	db	32
   752  007F1E  65                 	db	101	;'e'
   753  007F1F  6E                 	db	110	;'n'
   754  007F20  20                 	db	32
   755  007F21  63                 	db	99	;'c'
   756  007F22  6F                 	db	111	;'o'
   757  007F23  75                 	db	117	;'u'
   758  007F24  72                 	db	114	;'r'
   759  007F25  73                 	db	115	;'s'
   760  007F26  00                 	db	0
   761  007F27                     STR_53:
   762                           
   763                           ; BSR set to: 14
   764  007F27  54                 	db	84	;'T'
   765  007F28  65                 	db	101	;'e'
   766  007F29  6D                 	db	109	;'m'
   767  007F2A  70                 	db	112	;'p'
   768  007F2B  65                 	db	101	;'e'
   769  007F2C  72                 	db	114	;'r'
   770  007F2D  61                 	db	97	;'a'
   771  007F2E  74                 	db	116	;'t'
   772  007F2F  75                 	db	117	;'u'
   773  007F30  72                 	db	114	;'r'
   774  007F31  65                 	db	101	;'e'
   775  007F32  20                 	db	32
   776  007F33  3A                 	db	58	;':'
   777  007F34  20                 	db	32
   778  007F35  00                 	db	0
   779  007F36                     STR_13:
   780                           
   781                           ; BSR set to: 14
   782  007F36  45                 	db	69	;'E'
   783  007F37  6E                 	db	110	;'n'
   784  007F38  72                 	db	114	;'r'
   785  007F39  65                 	db	101	;'e'
   786  007F3A  67                 	db	103	;'g'
   787  007F3B  69                 	db	105	;'i'
   788  007F3C  73                 	db	115	;'s'
   789  007F3D  74                 	db	116	;'t'
   790  007F3E  72                 	db	114	;'r'
   791  007F3F  65                 	db	101	;'e'
   792  007F40  6D                 	db	109	;'m'
   793  007F41  65                 	db	101	;'e'
   794  007F42  6E                 	db	110	;'n'
   795  007F43  74                 	db	116	;'t'
   796  007F44  00                 	db	0
   797  007F45                     STR_40:
   798                           
   799                           ; BSR set to: 14
   800  007F45  73                 	db	115	;'s'
   801  007F46  74                 	db	116	;'t'
   802  007F47  61                 	db	97	;'a'
   803  007F48  6E                 	db	110	;'n'
   804  007F49  64                 	db	100	;'d'
   805  007F4A  62                 	db	98	;'b'
   806  007F4B  79                 	db	121	;'y'
   807  007F4C  20                 	db	32
   808  007F4D  6D                 	db	109	;'m'
   809  007F4E  6F                 	db	111	;'o'
   810  007F4F  64                 	db	100	;'d'
   811  007F50  65                 	db	101	;'e'
   812  007F51  00                 	db	0
   813  007F52                     STR_52:
   814                           
   815                           ; BSR set to: 14
   816  007F52  48                 	db	72	;'H'
   817  007F53  75                 	db	117	;'u'
   818  007F54  6D                 	db	109	;'m'
   819  007F55  69                 	db	105	;'i'
   820  007F56  64                 	db	100	;'d'
   821  007F57  69                 	db	105	;'i'
   822  007F58  74                 	db	116	;'t'
   823  007F59  65                 	db	101	;'e'
   824  007F5A  20                 	db	32
   825  007F5B  3A                 	db	58	;':'
   826  007F5C  20                 	db	32
   827  007F5D  00                 	db	0
   828  007F5E                     STR_35:
   829                           
   830                           ; BSR set to: 14
   831  007F5E  6D                 	db	109	;'m'
   832  007F5F  6F                 	db	111	;'o'
   833  007F60  64                 	db	100	;'d'
   834  007F61  65                 	db	101	;'e'
   835  007F62  20                 	db	32
   836  007F63  3D                 	db	61	;'='
   837  007F64  20                 	db	32
   838  007F65  4C                 	db	76	;'L'
   839  007F66  6F                 	db	111	;'o'
   840  007F67  52                 	db	82	;'R'
   841  007F68  61                 	db	97	;'a'
   842  007F69  00                 	db	0
   843  007F6A                     STR_36:
   844                           
   845                           ; BSR set to: 14
   846  007F6A  4C                 	db	76	;'L'
   847  007F6B  6F                 	db	111	;'o'
   848  007F6C  52                 	db	82	;'R'
   849  007F6D  61                 	db	97	;'a'
   850  007F6E  20                 	db	32
   851  007F6F  6D                 	db	109	;'m'
   852  007F70  6F                 	db	111	;'o'
   853  007F71  64                 	db	100	;'d'
   854  007F72  65                 	db	101	;'e'
   855  007F73  20                 	db	32
   856  007F74  00                 	db	0
   857  007F75                     STR_38:
   858                           
   859                           ; BSR set to: 14
   860  007F75  6D                 	db	109	;'m'
   861  007F76  6F                 	db	111	;'o'
   862  007F77  64                 	db	100	;'d'
   863  007F78  65                 	db	101	;'e'
   864  007F79  20                 	db	32
   865  007F7A  3D                 	db	61	;'='
   866  007F7B  20                 	db	32
   867  007F7C  46                 	db	70	;'F'
   868  007F7D  53                 	db	83	;'S'
   869  007F7E  4B                 	db	75	;'K'
   870  007F7F  00                 	db	0
   871  007F80                     STR_39:
   872                           
   873                           ; BSR set to: 14
   874  007F80  73                 	db	115	;'s'
   875  007F81  6C                 	db	108	;'l'
   876  007F82  65                 	db	101	;'e'
   877  007F83  65                 	db	101	;'e'
   878  007F84  70                 	db	112	;'p'
   879  007F85  20                 	db	32
   880  007F86  6D                 	db	109	;'m'
   881  007F87  6F                 	db	111	;'o'
   882  007F88  64                 	db	100	;'d'
   883  007F89  65                 	db	101	;'e'
   884  007F8A  00                 	db	0
   885  007F8B                     STR_27:
   886                           
   887                           ; BSR set to: 14
   888  007F8B  41                 	db	65	;'A'
   889  007F8C  43                 	db	67	;'C'
   890  007F8D  4B                 	db	75	;'K'
   891  007F8E  2E                 	db	46
   892  007F8F  2E                 	db	46
   893  007F90  2E                 	db	46
   894  007F91  20                 	db	32
   895  007F92  20                 	db	32
   896  007F93  20                 	db	32
   897  007F94  20                 	db	32
   898  007F95  00                 	db	0
   899  007F96                     STR_1:
   900                           
   901                           ; BSR set to: 14
   902  007F96  49                 	db	73	;'I'
   903  007F97  6E                 	db	110	;'n'
   904  007F98  69                 	db	105	;'i'
   905  007F99  74                 	db	116	;'t'
   906  007F9A  2E                 	db	46
   907  007F9B  2E                 	db	46
   908  007F9C  2E                 	db	46
   909  007F9D  20                 	db	32
   910  007F9E  20                 	db	32
   911  007F9F  20                 	db	32
   912  007FA0  00                 	db	0
   913  007FA1                     STR_31:
   914                           
   915                           ; BSR set to: 14
   916  007FA1  54                 	db	84	;'T'
   917  007FA2  69                 	db	105	;'i'
   918  007FA3  6D                 	db	109	;'m'
   919  007FA4  65                 	db	101	;'e'
   920  007FA5  6F                 	db	111	;'o'
   921  007FA6  75                 	db	117	;'u'
   922  007FA7  74                 	db	116	;'t'
   923  007FA8  20                 	db	32
   924  007FA9  20                 	db	32
   925  007FAA  20                 	db	32
   926  007FAB  00                 	db	0
   927  007FAC                     STR_22:
   928                           
   929                           ; BSR set to: 14
   930  007FAC  45                 	db	69	;'E'
   931  007FAD  6E                 	db	110	;'n'
   932  007FAE  76                 	db	118	;'v'
   933  007FAF  6F                 	db	111	;'o'
   934  007FB0  69                 	db	105	;'i'
   935  007FB1  2E                 	db	46
   936  007FB2  2E                 	db	46
   937  007FB3  2E                 	db	46
   938  007FB4  20                 	db	32
   939  007FB5  20                 	db	32
   940  007FB6  00                 	db	0
   941  007FB7                     STR_14:
   942                           
   943                           ; BSR set to: 14
   944  007FB7  52                 	db	82	;'R'
   945  007FB8  65                 	db	101	;'e'
   946  007FB9  67                 	db	103	;'g'
   947  007FBA  69                 	db	105	;'i'
   948  007FBB  73                 	db	115	;'s'
   949  007FBC  74                 	db	116	;'t'
   950  007FBD  65                 	db	101	;'e'
   951  007FBE  72                 	db	114	;'r'
   952  007FBF  20                 	db	32
   953  007FC0  20                 	db	32
   954  007FC1  00                 	db	0
   955  007FC2                     STR_21:
   956                           
   957                           ; BSR set to: 14
   958  007FC2  4D                 	db	77	;'M'
   959  007FC3  65                 	db	101	;'e'
   960  007FC4  73                 	db	115	;'s'
   961  007FC5  75                 	db	117	;'u'
   962  007FC6  72                 	db	114	;'r'
   963  007FC7  65                 	db	101	;'e'
   964  007FC8  2E                 	db	46
   965  007FC9  2E                 	db	46
   966  007FCA  2E                 	db	46
   967  007FCB  20                 	db	32
   968  007FCC  00                 	db	0
   969  007FCD                     STR_25:
   970                           
   971                           ; BSR set to: 14
   972  007FCD  49                 	db	73	;'I'
   973  007FCE  6D                 	db	109	;'m'
   974  007FCF  70                 	db	112	;'p'
   975  007FD0  6F                 	db	111	;'o'
   976  007FD1  73                 	db	115	;'s'
   977  007FD2  73                 	db	115	;'s'
   978  007FD3  69                 	db	105	;'i'
   979  007FD4  62                 	db	98	;'b'
   980  007FD5  6C                 	db	108	;'l'
   981  007FD6  65                 	db	101	;'e'
   982  007FD7  00                 	db	0
   983  007FD8                     STR_16:
   984                           
   985                           ; BSR set to: 14
   986  007FD8  52                 	db	82	;'R'
   987  007FD9  65                 	db	101	;'e'
   988  007FDA  71                 	db	113	;'q'
   989  007FDB  75                 	db	117	;'u'
   990  007FDC  65                 	db	101	;'e'
   991  007FDD  74                 	db	116	;'t'
   992  007FDE  65                 	db	101	;'e'
   993  007FDF  3A                 	db	58	;':'
   994  007FE0  20                 	db	32
   995  007FE1  00                 	db	0
   996  007FE2                     STR_11:
   997                           
   998                           ; BSR set to: 14
   999  007FE2  44                 	db	68	;'D'
  1000  007FE3  69                 	db	105	;'i'
  1001  007FE4  73                 	db	115	;'s'
  1002  007FE5  63                 	db	99	;'c'
  1003  007FE6  6F                 	db	111	;'o'
  1004  007FE7  76                 	db	118	;'v'
  1005  007FE8  65                 	db	101	;'e'
  1006  007FE9  72                 	db	114	;'r'
  1007  007FEA  3A                 	db	58	;':'
  1008  007FEB  00                 	db	0
  1009  007FEC                     STR_42:
  1010                           
  1011                           ; BSR set to: 14
  1012  007FEC  54                 	db	84	;'T'
  1013  007FED  58                 	db	88	;'X'
  1014  007FEE  20                 	db	32
  1015  007FEF  6D                 	db	109	;'m'
  1016  007FF0  6F                 	db	111	;'o'
  1017  007FF1  64                 	db	100	;'d'
  1018  007FF2  65                 	db	101	;'e'
  1019  007FF3  00                 	db	0
  1020  007FF4                     STR_30:
  1021                           
  1022                           ; BSR set to: 14
  1023  007FF4  54                 	db	84	;'T'
  1024  007FF5  69                 	db	105	;'i'
  1025  007FF6  6D                 	db	109	;'m'
  1026  007FF7  65                 	db	101	;'e'
  1027  007FF8  6F                 	db	111	;'o'
  1028  007FF9  75                 	db	117	;'u'
  1029  007FFA  74                 	db	116	;'t'
  1030  007FFB  00                 	db	0
  1031  007FFC                     STR_50:
  1032                           
  1033                           ; BSR set to: 14
  1034  007FFC  25                 	db	37
  1035  007FFD  00                 	db	0
  1036  007FFE  00                 	db	0	; dummy byte at the end
  1037  0000                     
  1038                           ; #config settings
  1039                           
  1040                           	psect	cinit
  1041  004BD6                     __pcinit:
  1042                           	callstack 0
  1043  004BD6                     start_initialization:
  1044                           	callstack 0
  1045  004BD6                     __initialization:
  1046                           	callstack 0
  1047                           
  1048                           ; Initialize objects allocated to BANK0 (9 bytes)
  1049                           ; load TBLPTR registers with __pidataBANK0
  1050  004BD6  0E97               	movlw	low __pidataBANK0
  1051  004BD8  6EF6               	movwf	tblptrl,c
  1052  004BDA  0E4A               	movlw	high __pidataBANK0
  1053  004BDC  6EF7               	movwf	tblptrh,c
  1054  004BDE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1055  004BE0  6EF8               	movwf	tblptru,c
  1056  004BE2  EE00  F0E7         	lfsr	0,__pdataBANK0
  1057  004BE6  EE10 F009          	lfsr	1,9
  1058  004BEA                     copy_data0:
  1059  004BEA  0009               	tblrd		*+
  1060  004BEC  CFF5 FFEE          	movff	tablat,postinc0
  1061  004BF0  50E5               	movf	postdec1,w,c
  1062  004BF2  50E1               	movf	fsr1l,w,c
  1063  004BF4  E1FA               	bnz	copy_data0
  1064  004BF6                     end_of_initialization:
  1065                           	callstack 0
  1066  004BF6                     __end_of__initialization:
  1067                           	callstack 0
  1068  004BF6  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1069  004BF8  6EF8               	movwf	tblptru,c
  1070  004BFA  0100               	movlb	0
  1071  004BFC  EF50  F03B         	goto	_main	;jump to C main() function
  1072                           
  1073                           	psect	dataBANK0
  1074  0000E7                     __pdataBANK0:
  1075                           	callstack 0
  1076  0000E7                     main@F9622:
  1077                           	callstack 0
  1078  0000E7                     	ds	9
  1079                           
  1080                           	psect	cstackBANK1
  1081  000100                     __pcstackBANK1:
  1082                           	callstack 0
  1083  000100                     main@rxMsg:
  1084                           	callstack 0
  1085                           
  1086                           ; 30 bytes @ 0x0
  1087  000100                     	ds	30
  1088  00011E                     main@RXNumberOfBytes:
  1089                           	callstack 0
  1090                           
  1091                           ; 1 bytes @ 0x1E
  1092  00011E                     	ds	1
  1093  00011F                     main@humidite:
  1094                           	callstack 0
  1095                           
  1096                           ; 2 bytes @ 0x1F
  1097  00011F                     	ds	2
  1098  000121                     main@i:
  1099                           	callstack 0
  1100                           
  1101                           ; 1 bytes @ 0x21
  1102  000121                     	ds	1
  1103  000122                     main@capteurPresent:
  1104                           	callstack 0
  1105                           
  1106                           ; 1 bytes @ 0x22
  1107  000122                     	ds	1
  1108  000123                     main@txMsg:
  1109                           	callstack 0
  1110                           
  1111                           ; 9 bytes @ 0x23
  1112  000123                     	ds	9
  1113  00012C                     main@batterie:
  1114                           	callstack 0
  1115                           
  1116                           ; 2 bytes @ 0x2C
  1117  00012C                     	ds	2
  1118  00012E                     main@temperature:
  1119                           	callstack 0
  1120                           
  1121                           ; 2 bytes @ 0x2E
  1122  00012E                     	ds	2
  1123                           
  1124                           	psect	cstackBANK0
  1125  000060                     __pcstackBANK0:
  1126                           	callstack 0
  1127  000060                     ??___fltol:
  1128                           
  1129                           ; 1 bytes @ 0x0
  1130  000060                     	ds	4
  1131  000064                     ___fltol@sign1:
  1132                           	callstack 0
  1133                           
  1134                           ; 1 bytes @ 0x4
  1135  000064                     	ds	1
  1136  000065                     ___fltol@exp1:
  1137                           	callstack 0
  1138                           
  1139                           ; 1 bytes @ 0x5
  1140  000065                     	ds	1
  1141  000066                     ?_sendMeanTemp:
  1142                           	callstack 0
  1143  000066                     ?_pourcentBatt:
  1144                           	callstack 0
  1145  000066                     ?_humidityDec:
  1146                           	callstack 0
  1147  000066                     ?_sendMeanHumi:
  1148                           	callstack 0
  1149  000066                     ?___lwmod:
  1150                           	callstack 0
  1151  000066                     ___lwmod@dividend:
  1152                           	callstack 0
  1153  000066                     voltmeterDec@volts:
  1154                           	callstack 0
  1155                           
  1156                           ; 4 bytes @ 0x6
  1157  000066                     	ds	2
  1158  000068                     ??_sendMeanTemp:
  1159  000068                     ??_sendMeanHumi:
  1160  000068                     humidityDec@humidite:
  1161                           	callstack 0
  1162  000068                     ___lwmod@divisor:
  1163                           	callstack 0
  1164  000068                     _pourcentBatt$2031:
  1165                           	callstack 0
  1166                           
  1167                           ; 4 bytes @ 0x8
  1168  000068                     	ds	2
  1169  00006A                     afficher_temperature@data:
  1170                           	callstack 0
  1171  00006A                     afficher_humidite@data:
  1172                           	callstack 0
  1173  00006A                     afficher_batterie@data:
  1174                           	callstack 0
  1175  00006A                     printBatteryLevel@volts:
  1176                           	callstack 0
  1177  00006A                     printHumidityLevel@humidite:
  1178                           	callstack 0
  1179  00006A                     _voltmeterDec$2030:
  1180                           	callstack 0
  1181                           
  1182                           ; 4 bytes @ 0xA
  1183  00006A                     	ds	2
  1184  00006C                     afficher_donnees@tem:
  1185                           	callstack 0
  1186  00006C                     _pourcentBatt$2032:
  1187                           	callstack 0
  1188  00006C                     sendMeanHumi@humiMoy:
  1189                           	callstack 0
  1190  00006C                     sendMeanTemp@tempMoy:
  1191                           	callstack 0
  1192                           
  1193                           ; 100 bytes @ 0xC
  1194  00006C                     	ds	2
  1195  00006E                     voltmeterDec@vBatt:
  1196                           	callstack 0
  1197  00006E                     printHumidityLevel@value:
  1198                           	callstack 0
  1199  00006E                     afficher_donnees@hum:
  1200                           	callstack 0
  1201  00006E                     _printBatteryLevel$2033:
  1202                           	callstack 0
  1203                           
  1204                           ; 4 bytes @ 0xE
  1205  00006E                     	ds	2
  1206  000070                     pourcentBatt@pourcentBattDec:
  1207                           	callstack 0
  1208  000070                     afficher_donnees@bat:
  1209                           	callstack 0
  1210  000070                     printHumidityLevel@string:
  1211                           	callstack 0
  1212                           
  1213                           ; 6 bytes @ 0x10
  1214  000070                     	ds	2
  1215  000072                     printBatteryLevel@value:
  1216                           	callstack 0
  1217                           
  1218                           ; 2 bytes @ 0x12
  1219  000072                     	ds	2
  1220  000074                     printBatteryLevel@integer:
  1221                           	callstack 0
  1222                           
  1223                           ; 2 bytes @ 0x14
  1224  000074                     	ds	2
  1225  000076                     printBatteryLevel@vBatt:
  1226                           	callstack 0
  1227  000076                     printHumidityLevel@integer:
  1228                           	callstack 0
  1229                           
  1230                           ; 2 bytes @ 0x16
  1231  000076                     	ds	2
  1232  000078                     printBatteryLevel@string:
  1233                           	callstack 0
  1234                           
  1235                           ; 6 bytes @ 0x18
  1236  000078                     	ds	6
  1237  00007E                     printBatteryLevel@pourcentBatt:
  1238                           	callstack 0
  1239                           
  1240                           ; 2 bytes @ 0x1E
  1241  00007E                     	ds	82
  1242  0000D0                     sendMeanHumi@integer:
  1243                           	callstack 0
  1244  0000D0                     _sendMeanTemp$2035:
  1245                           	callstack 0
  1246                           
  1247                           ; 4 bytes @ 0x70
  1248  0000D0                     	ds	2
  1249  0000D2                     sendMeanHumi@i:
  1250                           	callstack 0
  1251                           
  1252                           ; 1 bytes @ 0x72
  1253  0000D2                     	ds	1
  1254  0000D3                     sendMeanHumi@j:
  1255                           	callstack 0
  1256                           
  1257                           ; 1 bytes @ 0x73
  1258  0000D3                     	ds	1
  1259  0000D4                     sendMeanTemp@i:
  1260                           	callstack 0
  1261                           
  1262                           ; 1 bytes @ 0x74
  1263  0000D4                     	ds	1
  1264  0000D5                     sendMeanTemp@j:
  1265                           	callstack 0
  1266                           
  1267                           ; 1 bytes @ 0x75
  1268  0000D5                     	ds	1
  1269  0000D6                     sendMeanTemp@integer:
  1270                           	callstack 0
  1271                           
  1272                           ; 2 bytes @ 0x76
  1273  0000D6                     	ds	2
  1274  0000D8                     printTemperatureLevel@string:
  1275                           	callstack 0
  1276                           
  1277                           ; 6 bytes @ 0x78
  1278  0000D8                     	ds	6
  1279  0000DE                     printTemperatureLevel@integer:
  1280                           	callstack 0
  1281                           
  1282                           ; 2 bytes @ 0x7E
  1283  0000DE                     	ds	2
  1284  0000E0                     
  1285                           ; 2 bytes @ 0x80
  1286  0000E0                     	ds	2
  1287  0000E2                     
  1288                           ; 3 bytes @ 0x82
  1289  0000E2                     	ds	3
  1290  0000E5                     ??_main:
  1291                           
  1292                           ; 1 bytes @ 0x85
  1293  0000E5                     	ds	2
  1294                           
  1295                           	psect	cstackCOMRAM
  1296  000001                     __pcstackCOMRAM:
  1297                           	callstack 0
  1298  000001                     ??_ResetRFModule:
  1299  000001                     ??_AntennaTX:
  1300  000001                     ??_AntennaRX:
  1301  000001                     ??_inverser_binaire:
  1302  000001                     ?_voltmeterHex:
  1303                           	callstack 0
  1304  000001                     ?___awdiv:
  1305                           	callstack 0
  1306  000001                     ?___awmod:
  1307                           	callstack 0
  1308  000001                     ?___lwdiv:
  1309                           	callstack 0
  1310  000001                     SPITransfer@data_out:
  1311                           	callstack 0
  1312  000001                     SPIReceive@data_out:
  1313                           	callstack 0
  1314  000001                     UARTWriteByte@data:
  1315                           	callstack 0
  1316  000001                     UARTInit@baudRate:
  1317                           	callstack 0
  1318  000001                     refresh_leds@temperature:
  1319                           	callstack 0
  1320  000001                     ___awdiv@dividend:
  1321                           	callstack 0
  1322  000001                     ___awmod@dividend:
  1323                           	callstack 0
  1324  000001                     ___lwdiv@dividend:
  1325                           	callstack 0
  1326                           
  1327                           ; 2 bytes @ 0x0
  1328  000001                     	ds	1
  1329  000002                     SPIReceive@data_in:
  1330                           	callstack 0
  1331  000002                     ecrire_ecran_start_byte@RSW:
  1332                           	callstack 0
  1333  000002                     UARTWriteStr@string:
  1334                           	callstack 0
  1335  000002                     UARTWriteStrLn@string:
  1336                           	callstack 0
  1337  000002                     UARTWriteByteHex@data:
  1338                           	callstack 0
  1339                           
  1340                           ; 2 bytes @ 0x1
  1341  000002                     	ds	1
  1342  000003                     ??_voltmeterHex:
  1343  000003                     ?_humidityHex:
  1344                           	callstack 0
  1345  000003                     ?_temperatureHex:
  1346                           	callstack 0
  1347  000003                     ReadSXRegister@RegValue:
  1348                           	callstack 0
  1349  000003                     refresh_leds@batterie:
  1350                           	callstack 0
  1351  000003                     ___awdiv@divisor:
  1352                           	callstack 0
  1353  000003                     ___awmod@divisor:
  1354                           	callstack 0
  1355  000003                     ___lwdiv@divisor:
  1356                           	callstack 0
  1357                           
  1358                           ; 2 bytes @ 0x2
  1359  000003                     	ds	1
  1360  000004                     ??_UARTWriteStrLn:
  1361  000004                     ??_UARTWriteStr:
  1362  000004                     ??_UARTWriteByteHex:
  1363  000004                     ReadSXRegister@address:
  1364                           	callstack 0
  1365                           
  1366                           ; 1 bytes @ 0x3
  1367  000004                     	ds	1
  1368  000005                     ??_humidityHex:
  1369  000005                     ??_temperatureHex:
  1370  000005                     WriteSXRegister@data:
  1371                           	callstack 0
  1372  000005                     inverser_binaire@data_inverse:
  1373                           	callstack 0
  1374  000005                     ___awdiv@counter:
  1375                           	callstack 0
  1376  000005                     ___awmod@counter:
  1377                           	callstack 0
  1378  000005                     ___lwdiv@quotient:
  1379                           	callstack 0
  1380                           
  1381                           ; 2 bytes @ 0x4
  1382  000005                     	ds	1
  1383  000006                     WriteSXRegister@address:
  1384                           	callstack 0
  1385  000006                     UARTWriteStr@i:
  1386                           	callstack 0
  1387  000006                     UARTWriteStrLn@i:
  1388                           	callstack 0
  1389  000006                     inverser_binaire@data:
  1390                           	callstack 0
  1391  000006                     ___awdiv@sign:
  1392                           	callstack 0
  1393  000006                     ___awmod@sign:
  1394                           	callstack 0
  1395                           
  1396                           ; 1 bytes @ 0x5
  1397  000006                     	ds	1
  1398  000007                     ___lwdiv@counter:
  1399                           	callstack 0
  1400  000007                     voltmeterHex@value:
  1401                           	callstack 0
  1402  000007                     inverser_binaire@i:
  1403                           	callstack 0
  1404  000007                     ___awdiv@quotient:
  1405                           	callstack 0
  1406                           
  1407                           ; 2 bytes @ 0x6
  1408  000007                     	ds	1
  1409  000008                     humidityHex@value:
  1410                           	callstack 0
  1411  000008                     temperatureHex@value:
  1412                           	callstack 0
  1413                           
  1414                           ; 2 bytes @ 0x7
  1415  000008                     	ds	1
  1416  000009                     ??_ecrire_ecran_data:
  1417  000009                     hexToDec@upperHex:
  1418                           	callstack 0
  1419  000009                     UARTWriteByteHex@hexa:
  1420                           	callstack 0
  1421                           
  1422                           ; 2 bytes @ 0x8
  1423  000009                     	ds	1
  1424  00000A                     temperatureHex@trash:
  1425                           	callstack 0
  1426  00000A                     hexToDec@lowerHex:
  1427                           	callstack 0
  1428  00000A                     ecrire_ecran_data@data:
  1429                           	callstack 0
  1430                           
  1431                           ; 1 bytes @ 0x9
  1432  00000A                     	ds	1
  1433  00000B                     ?___xxtofl:
  1434                           	callstack 0
  1435  00000B                     hexToDec@data:
  1436                           	callstack 0
  1437  00000B                     ecrire_ecran_data@data_inverse:
  1438                           	callstack 0
  1439  00000B                     Transmit@data:
  1440                           	callstack 0
  1441  00000B                     Receive@data:
  1442                           	callstack 0
  1443  00000B                     ___xxtofl@val:
  1444                           	callstack 0
  1445                           
  1446                           ; 4 bytes @ 0xA
  1447  00000B                     	ds	1
  1448  00000C                     ??_init_ecran:
  1449  00000C                     afficher_string@string:
  1450                           	callstack 0
  1451  00000C                     afficher_string_hex@data:
  1452                           	callstack 0
  1453                           
  1454                           ; 2 bytes @ 0xB
  1455  00000C                     	ds	1
  1456  00000D                     ??_Receive:
  1457  00000D                     Transmit@data_long:
  1458                           	callstack 0
  1459                           
  1460                           ; 1 bytes @ 0xC
  1461  00000D                     	ds	1
  1462  00000E                     ??_GetMode:
  1463  00000E                     ??_afficher_string_hex:
  1464  00000E                     ??_Transmit:
  1465  00000E                     Receive@RXNumberOfBytes:
  1466                           	callstack 0
  1467                           
  1468                           ; 1 bytes @ 0xD
  1469  00000E                     	ds	1
  1470  00000F                     ??___xxtofl:
  1471  00000F                     Transmit@reg_val:
  1472                           	callstack 0
  1473  00000F                     Receive@i:
  1474                           	callstack 0
  1475                           
  1476                           ; 1 bytes @ 0xE
  1477  00000F                     	ds	1
  1478  000010                     GetMode@masked_reg:
  1479                           	callstack 0
  1480  000010                     Transmit@i:
  1481                           	callstack 0
  1482  000010                     Receive@reg_val:
  1483                           	callstack 0
  1484                           
  1485                           ; 1 bytes @ 0xF
  1486  000010                     	ds	1
  1487  000011                     GetMode@reg:
  1488                           	callstack 0
  1489                           
  1490                           ; 1 bytes @ 0x10
  1491  000011                     	ds	2
  1492  000013                     ___xxtofl@sign:
  1493                           	callstack 0
  1494  000013                     afficher_string_hex@hexa:
  1495                           	callstack 0
  1496                           
  1497                           ; 2 bytes @ 0x12
  1498  000013                     	ds	1
  1499  000014                     ___xxtofl@exp:
  1500                           	callstack 0
  1501                           
  1502                           ; 1 bytes @ 0x13
  1503  000014                     	ds	1
  1504  000015                     ___xxtofl@arg:
  1505                           	callstack 0
  1506                           
  1507                           ; 4 bytes @ 0x14
  1508  000015                     	ds	4
  1509  000019                     ?___fldiv:
  1510                           	callstack 0
  1511  000019                     ___fldiv@b:
  1512                           	callstack 0
  1513                           
  1514                           ; 4 bytes @ 0x18
  1515  000019                     	ds	4
  1516  00001D                     ___fldiv@a:
  1517                           	callstack 0
  1518                           
  1519                           ; 4 bytes @ 0x1C
  1520  00001D                     	ds	4
  1521  000021                     ??___fldiv:
  1522                           
  1523                           ; 1 bytes @ 0x20
  1524  000021                     	ds	4
  1525  000025                     ___fldiv@rem:
  1526                           	callstack 0
  1527                           
  1528                           ; 4 bytes @ 0x24
  1529  000025                     	ds	4
  1530  000029                     ___fldiv@sign:
  1531                           	callstack 0
  1532                           
  1533                           ; 1 bytes @ 0x28
  1534  000029                     	ds	1
  1535  00002A                     ___fldiv@new_exp:
  1536                           	callstack 0
  1537                           
  1538                           ; 2 bytes @ 0x29
  1539  00002A                     	ds	2
  1540  00002C                     ___fldiv@grs:
  1541                           	callstack 0
  1542                           
  1543                           ; 4 bytes @ 0x2B
  1544  00002C                     	ds	4
  1545  000030                     ___fldiv@bexp:
  1546                           	callstack 0
  1547                           
  1548                           ; 1 bytes @ 0x2F
  1549  000030                     	ds	1
  1550  000031                     ___fldiv@aexp:
  1551                           	callstack 0
  1552                           
  1553                           ; 1 bytes @ 0x30
  1554  000031                     	ds	1
  1555  000032                     ?___flmul:
  1556                           	callstack 0
  1557  000032                     ___flmul@b:
  1558                           	callstack 0
  1559                           
  1560                           ; 4 bytes @ 0x31
  1561  000032                     	ds	4
  1562  000036                     ___flmul@a:
  1563                           	callstack 0
  1564                           
  1565                           ; 4 bytes @ 0x35
  1566  000036                     	ds	4
  1567  00003A                     ??___flmul:
  1568                           
  1569                           ; 1 bytes @ 0x39
  1570  00003A                     	ds	4
  1571  00003E                     ___flmul@sign:
  1572                           	callstack 0
  1573                           
  1574                           ; 1 bytes @ 0x3D
  1575  00003E                     	ds	1
  1576  00003F                     ___flmul@grs:
  1577                           	callstack 0
  1578                           
  1579                           ; 4 bytes @ 0x3E
  1580  00003F                     	ds	4
  1581  000043                     ___flmul@aexp:
  1582                           	callstack 0
  1583                           
  1584                           ; 1 bytes @ 0x42
  1585  000043                     	ds	1
  1586  000044                     ___flmul@bexp:
  1587                           	callstack 0
  1588                           
  1589                           ; 1 bytes @ 0x43
  1590  000044                     	ds	1
  1591  000045                     ___flmul@prod:
  1592                           	callstack 0
  1593                           
  1594                           ; 4 bytes @ 0x44
  1595  000045                     	ds	4
  1596  000049                     ___flmul@temp:
  1597                           	callstack 0
  1598                           
  1599                           ; 2 bytes @ 0x48
  1600  000049                     	ds	2
  1601  00004B                     ?___fladd:
  1602                           	callstack 0
  1603  00004B                     ___fladd@b:
  1604                           	callstack 0
  1605                           
  1606                           ; 4 bytes @ 0x4A
  1607  00004B                     	ds	4
  1608  00004F                     ___fladd@a:
  1609                           	callstack 0
  1610                           
  1611                           ; 4 bytes @ 0x4E
  1612  00004F                     	ds	4
  1613  000053                     ??___fladd:
  1614                           
  1615                           ; 1 bytes @ 0x52
  1616  000053                     	ds	4
  1617  000057                     ___fladd@signs:
  1618                           	callstack 0
  1619                           
  1620                           ; 1 bytes @ 0x56
  1621  000057                     	ds	1
  1622  000058                     ___fladd@aexp:
  1623                           	callstack 0
  1624                           
  1625                           ; 1 bytes @ 0x57
  1626  000058                     	ds	1
  1627  000059                     ___fladd@bexp:
  1628                           	callstack 0
  1629                           
  1630                           ; 1 bytes @ 0x58
  1631  000059                     	ds	1
  1632  00005A                     ___fladd@grs:
  1633                           	callstack 0
  1634                           
  1635                           ; 1 bytes @ 0x59
  1636  00005A                     	ds	1
  1637  00005B                     ?___fltol:
  1638                           	callstack 0
  1639  00005B                     ___fltol@f1:
  1640                           	callstack 0
  1641                           
  1642                           ; 4 bytes @ 0x5A
  1643  00005B                     	ds	4
  1644  00005F                     ___lwmod@counter:
  1645                           	callstack 0
  1646                           
  1647                           ; 1 bytes @ 0x5E
  1648  00005F                     	ds	1
  1649  000060                     
  1650                           ; 1 bytes @ 0x5F
  1651 ;;
  1652 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1653 ;;
  1654 ;; *************** function _main *****************
  1655 ;; Defined at:
  1656 ;;		line 108 in file "Capteur_Temp.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;  argc            2  128[BANK0 ] int 
  1659 ;;  argv            3  130[BANK0 ] PTR PTR unsigned char 
  1660 ;; Auto vars:     Size  Location     Type
  1661 ;;  rxMsg          30    0[BANK1 ] unsigned char [30]
  1662 ;;  txMsg           9   35[BANK1 ] unsigned char [9]
  1663 ;;  temperature     2   46[BANK1 ] unsigned short 
  1664 ;;  batterie        2   44[BANK1 ] unsigned short 
  1665 ;;  humidite        2   31[BANK1 ] unsigned short 
  1666 ;;  capteurPrese    1   34[BANK1 ] unsigned char 
  1667 ;;  i               1   33[BANK1 ] unsigned char 
  1668 ;;  RXNumberOfBy    1   30[BANK1 ] unsigned char 
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  2  128[BANK0 ] int 
  1671 ;; Registers used:
  1672 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1678 ;;      Params:         0       5       0       0       0       0       0       0       0
  1679 ;;      Locals:         0       0      48       0       0       0       0       0       0
  1680 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1681 ;;      Totals:         0       7      48       0       0       0       0       0       0
  1682 ;;Total ram usage:       55 bytes
  1683 ;; Hardware stack levels required when called: 4
  1684 ;; This function calls:
  1685 ;;		_GetMode
  1686 ;;		_InitModule
  1687 ;;		_InitRFLoRaPins
  1688 ;;		_ReadSXRegister
  1689 ;;		_Receive
  1690 ;;		_ResetRFModule
  1691 ;;		_SPIInit
  1692 ;;		_Transmit
  1693 ;;		_UARTInit
  1694 ;;		_UARTWriteByteHex
  1695 ;;		_UARTWriteStr
  1696 ;;		_UARTWriteStrLn
  1697 ;;		_WriteSXRegister
  1698 ;;		___lwdiv
  1699 ;;		___lwmod
  1700 ;;		_afficher_donnees
  1701 ;;		_afficher_string
  1702 ;;		_afficher_string_hex
  1703 ;;		_clear_ecran
  1704 ;;		_hexToDec
  1705 ;;		_humidityDec
  1706 ;;		_humidityHex
  1707 ;;		_initLeds
  1708 ;;		_initVoltmeter
  1709 ;;		_init_ecran
  1710 ;;		_pourcentBatt
  1711 ;;		_printBatteryLevel
  1712 ;;		_printHumidityLevel
  1713 ;;		_printTemperatureLevel
  1714 ;;		_refresh_leds
  1715 ;;		_sendMeanHumi
  1716 ;;		_sendMeanTemp
  1717 ;;		_voltmeterDec
  1718 ;; This function is called by:
  1719 ;;		Startup code after reset
  1720 ;; This function uses a non-reentrant model
  1721 ;;
  1722                           
  1723                           	psect	text0
  1724  0076A0                     __ptext0:
  1725                           	callstack 0
  1726  0076A0                     _main:
  1727                           	callstack 27
  1728  0076A0                     
  1729                           ;Capteur_Temp.c: 110:     _delay((unsigned long)((2500)*(1000000UL/4000.0)));
  1730  0076A0  0E04               	movlw	4
  1731  0076A2  0100               	movlb	0	; () banked
  1732  0076A4  6FE6               	movwf	(??_main+1)& (0+255),b
  1733  0076A6  0E2C               	movlw	44
  1734  0076A8  6FE5               	movwf	??_main& (0+255),b
  1735  0076AA  0EAB               	movlw	171
  1736  0076AC                     u3757:
  1737  0076AC  2EE8               	decfsz	wreg,f,c
  1738  0076AE  D7FE               	bra	u3757
  1739  0076B0  2FE5               	decfsz	??_main& (0+255),f,b
  1740  0076B2  D7FC               	bra	u3757
  1741  0076B4  2FE6               	decfsz	(??_main+1)& (0+255),f,b
  1742  0076B6  D7FA               	bra	u3757
  1743  0076B8  D000               	nop2	
  1744  0076BA                     
  1745                           ;Capteur_Temp.c: 111:     SPIInit();
  1746  0076BA  EC31  F026         	call	_SPIInit	;wreg free
  1747  0076BE                     
  1748                           ;Capteur_Temp.c: 112:     initVoltmeter();
  1749  0076BE  EC91  F025         	call	_initVoltmeter	;wreg free
  1750  0076C2                     
  1751                           ;Capteur_Temp.c: 113:     init_ecran();
  1752  0076C2  EC6F  F027         	call	_init_ecran	;wreg free
  1753  0076C6                     
  1754                           ;Capteur_Temp.c: 114:     InitRFLoRaPins();
  1755  0076C6  EC50  F025         	call	_InitRFLoRaPins	;wreg free
  1756  0076CA                     
  1757                           ;Capteur_Temp.c: 115:     ResetRFModule();
  1758  0076CA  ECD7  F025         	call	_ResetRFModule	;wreg free
  1759  0076CE                     
  1760                           ;Capteur_Temp.c: 116:     UARTInit(19200);
  1761  0076CE  0E4B               	movlw	75
  1762  0076D0  6E02               	movwf	(UARTInit@baudRate+1)^0,c
  1763  0076D2  0E00               	movlw	0
  1764  0076D4  6E01               	movwf	UARTInit@baudRate^0,c
  1765  0076D6  EC6B  F026         	call	_UARTInit	;wreg free
  1766  0076DA                     
  1767                           ;Capteur_Temp.c: 117:     initLeds();
  1768  0076DA  EC66  F025         	call	_initLeds	;wreg free
  1769  0076DE                     
  1770                           ;Capteur_Temp.c: 119:     clear_ecran();
  1771  0076DE  EC56  F025         	call	_clear_ecran	;wreg free
  1772  0076E2                     
  1773                           ;Capteur_Temp.c: 120:     _delay((unsigned long)((1)*(1000000UL/4000.0)));
  1774  0076E2  0E53               	movlw	83
  1775  0076E4                     u3767:
  1776  0076E4  2EE8               	decfsz	wreg,f,c
  1777  0076E6  D7FE               	bra	u3767
  1778  0076E8  F000               	nop	
  1779  0076EA                     
  1780                           ;Capteur_Temp.c: 121:     clear_ecran();
  1781  0076EA  EC56  F025         	call	_clear_ecran	;wreg free
  1782  0076EE                     
  1783                           ;Capteur_Temp.c: 122:     _delay((unsigned long)((1)*(1000000UL/4000.0)));
  1784  0076EE  0E53               	movlw	83
  1785  0076F0                     u3777:
  1786  0076F0  2EE8               	decfsz	wreg,f,c
  1787  0076F2  D7FE               	bra	u3777
  1788  0076F4  F000               	nop	
  1789  0076F6                     
  1790                           ;Capteur_Temp.c: 123:     afficher_string("Init...   ");
  1791  0076F6  0E96               	movlw	low STR_1
  1792  0076F8  6E0C               	movwf	afficher_string@string^0,c
  1793  0076FA  0E7F               	movlw	high STR_1
  1794  0076FC  6E0D               	movwf	(afficher_string@string+1)^0,c
  1795  0076FE  EC8D  F026         	call	_afficher_string	;wreg free
  1796  007702                     
  1797                           ;Capteur_Temp.c: 124:     _delay((unsigned long)((500)*(1000000UL/4000.0)));
  1798  007702  0EA3               	movlw	163
  1799  007704  0100               	movlb	0	; () banked
  1800  007706  6FE5               	movwf	??_main& (0+255),b
  1801  007708  0E55               	movlw	85
  1802  00770A                     u3787:
  1803  00770A  2EE8               	decfsz	wreg,f,c
  1804  00770C  D7FE               	bra	u3787
  1805  00770E  2FE5               	decfsz	??_main& (0+255),f,b
  1806  007710  D7FC               	bra	u3787
  1807  007712                     
  1808                           ;Capteur_Temp.c: 127:     UARTWriteStrLn(" ");
  1809  007712  0E94               	movlw	low (STR_27+9)
  1810  007714  6E02               	movwf	UARTWriteStrLn@string^0,c
  1811  007716  0E7F               	movlw	high (STR_27+9)
  1812  007718  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1813  00771A  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  1814  00771E                     
  1815                           ;Capteur_Temp.c: 128:     UARTWriteStrLn("set mode to LoRa standby");
  1816  00771E  0E92               	movlw	low STR_3
  1817  007720  6E02               	movwf	UARTWriteStrLn@string^0,c
  1818  007722  0E7D               	movlw	high STR_3
  1819  007724  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1820  007726  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  1821  00772A                     
  1822                           ;Capteur_Temp.c: 130:     WriteSXRegister(0x01, 0x00);
  1823  00772A  0E00               	movlw	0
  1824  00772C  6E05               	movwf	WriteSXRegister@data^0,c
  1825  00772E  0E01               	movlw	1
  1826  007730  EC9C  F025         	call	_WriteSXRegister
  1827  007734                     
  1828                           ;Capteur_Temp.c: 131:     WriteSXRegister(0x01, 0x80);
  1829  007734  0E80               	movlw	128
  1830  007736  6E05               	movwf	WriteSXRegister@data^0,c
  1831  007738  0E01               	movlw	1
  1832  00773A  EC9C  F025         	call	_WriteSXRegister
  1833  00773E                     
  1834                           ;Capteur_Temp.c: 132:     WriteSXRegister(0x01, 0x81);
  1835  00773E  0E81               	movlw	129
  1836  007740  6E05               	movwf	WriteSXRegister@data^0,c
  1837  007742  0E01               	movlw	1
  1838  007744  EC9C  F025         	call	_WriteSXRegister
  1839  007748                     
  1840                           ;Capteur_Temp.c: 133:     _delay((unsigned long)((100)*(1000000UL/4000.0)));
  1841  007748  0E21               	movlw	33
  1842  00774A  0100               	movlb	0	; () banked
  1843  00774C  6FE5               	movwf	??_main& (0+255),b
  1844  00774E  0E76               	movlw	118
  1845  007750                     u3797:
  1846  007750  2EE8               	decfsz	wreg,f,c
  1847  007752  D7FE               	bra	u3797
  1848  007754  2FE5               	decfsz	??_main& (0+255),f,b
  1849  007756  D7FC               	bra	u3797
  1850  007758  F000               	nop	
  1851  00775A                     
  1852                           ;Capteur_Temp.c: 134:     GetMode();
  1853  00775A  ECDA  F02F         	call	_GetMode	;wreg free
  1854  00775E                     
  1855                           ;Capteur_Temp.c: 137:     UARTWriteStrLn("initialize module");
  1856  00775E  0EA2               	movlw	low STR_4
  1857  007760  6E02               	movwf	UARTWriteStrLn@string^0,c
  1858  007762  0E7E               	movlw	high STR_4
  1859  007764  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1860  007766  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  1861  00776A                     
  1862                           ;Capteur_Temp.c: 138:     InitModule();
  1863  00776A  EC36  F02B         	call	_InitModule	;wreg free
  1864  00776E                     
  1865                           ;Capteur_Temp.c: 150:     uint8_t RXNumberOfBytes;;Capteur_Temp.c: 151:     uint8_t rxMs
      +                          g[30];;Capteur_Temp.c: 152:     uint8_t txMsg[] = { 0xAD, 0x4E, 0x01, 0x04, 0x00, 0x00, 
      +                          0x00, 0x00, 0x00 };
  1866  00776E  EE20  F0E7         	lfsr	2,main@F9622
  1867  007772  EE11  F023         	lfsr	1,main@txMsg
  1868  007776  0E08               	movlw	8
  1869  007778                     u3601:
  1870  007778  CFDB FFE3          	movff	plusw2,plusw1
  1871  00777C  06E8               	decf	wreg,f,c
  1872  00777E  E2FC               	bc	u3601
  1873  007780                     
  1874                           ;Capteur_Temp.c: 153:     uint8_t i;;Capteur_Temp.c: 154:     BOOL capteurPresent = (hum
      +                          idityHex() ? 1 : 0);
  1875  007780  EC3A  F027         	call	_humidityHex	;wreg free
  1876  007784  5003               	movf	?_humidityHex^0,w,c
  1877  007786  1004               	iorwf	(?_humidityHex+1)^0,w,c
  1878  007788  A4D8               	btfss	status,2,c
  1879  00778A  EFC9  F03B         	goto	u3611
  1880  00778E  EFCC  F03B         	goto	u3610
  1881  007792                     u3611:
  1882  007792  0E01               	movlw	1
  1883  007794  EFCD  F03B         	goto	u3620
  1884  007798                     u3610:
  1885  007798  0E00               	movlw	0
  1886  00779A                     u3620:
  1887  00779A  0101               	movlb	1	; () banked
  1888  00779C  6F22               	movwf	main@capteurPresent& (0+255),b
  1889  00779E                     
  1890                           ; BSR set to: 1
  1891                           ;Capteur_Temp.c: 155:     uint16_t temperature = sendMeanTemp();
  1892  00779E  EC16  F032         	call	_sendMeanTemp	;wreg free
  1893  0077A2  C066  F12E         	movff	?_sendMeanTemp,main@temperature
  1894  0077A6  C067  F12F         	movff	?_sendMeanTemp+1,main@temperature+1
  1895  0077AA                     
  1896                           ;Capteur_Temp.c: 156:     uint16_t humidite = 0;
  1897  0077AA  0E00               	movlw	0
  1898  0077AC  0101               	movlb	1	; () banked
  1899  0077AE  6F20               	movwf	(main@humidite+1)& (0+255),b
  1900  0077B0  0E00               	movlw	0
  1901  0077B2  6F1F               	movwf	main@humidite& (0+255),b
  1902  0077B4                     
  1903                           ; BSR set to: 1
  1904                           ;Capteur_Temp.c: 157:     uint16_t batterie = pourcentBatt();
  1905  0077B4  EC3D  F02E         	call	_pourcentBatt	;wreg free
  1906  0077B8  C066  F12C         	movff	?_pourcentBatt,main@batterie
  1907  0077BC  C067  F12D         	movff	?_pourcentBatt+1,main@batterie+1
  1908  0077C0                     
  1909                           ;Capteur_Temp.c: 160:     if(capteurPresent) {
  1910  0077C0  0101               	movlb	1	; () banked
  1911  0077C2  5122               	movf	main@capteurPresent& (0+255),w,b
  1912  0077C4  B4D8               	btfsc	status,2,c
  1913  0077C6  EFE7  F03B         	goto	u3631
  1914  0077CA  EFE9  F03B         	goto	u3630
  1915  0077CE                     u3631:
  1916  0077CE  EF09  F03C         	goto	l4313
  1917  0077D2                     u3630:
  1918  0077D2                     
  1919                           ; BSR set to: 1
  1920                           ;Capteur_Temp.c: 161:         printHumidityLevel();
  1921  0077D2  EC94  F030         	call	_printHumidityLevel	;wreg free
  1922  0077D6                     
  1923                           ;Capteur_Temp.c: 162:         printTemperatureLevel();
  1924  0077D6  ECF4  F029         	call	_printTemperatureLevel	;wreg free
  1925  0077DA                     
  1926                           ;Capteur_Temp.c: 163:         printBatteryLevel();
  1927  0077DA  ECBF  F033         	call	_printBatteryLevel	;wreg free
  1928  0077DE                     
  1929                           ;Capteur_Temp.c: 165:         afficher_donnees(temperature, humidityDec(), batterie);
  1930  0077DE  C12E  F06C         	movff	main@temperature,afficher_donnees@tem
  1931  0077E2  C12F  F06D         	movff	main@temperature+1,afficher_donnees@tem+1
  1932  0077E6  EC98  F028         	call	_humidityDec	;wreg free
  1933  0077EA  C066  F06E         	movff	?_humidityDec,afficher_donnees@hum
  1934  0077EE  C067  F06F         	movff	?_humidityDec+1,afficher_donnees@hum+1
  1935  0077F2  C12C  F070         	movff	main@batterie,afficher_donnees@bat
  1936  0077F6  C12D  F071         	movff	main@batterie+1,afficher_donnees@bat+1
  1937  0077FA  EC00  F026         	call	_afficher_donnees	;wreg free
  1938  0077FE                     
  1939                           ;Capteur_Temp.c: 166:         refresh_leds(&temperature, &batterie);
  1940  0077FE  0E2E               	movlw	low main@temperature
  1941  007800  6E01               	movwf	refresh_leds@temperature^0,c
  1942  007802  0E01               	movlw	high main@temperature
  1943  007804  6E02               	movwf	(refresh_leds@temperature+1)^0,c
  1944  007806  0E2C               	movlw	low main@batterie
  1945  007808  6E03               	movwf	refresh_leds@batterie^0,c
  1946  00780A  0E01               	movlw	high main@batterie
  1947  00780C  6E04               	movwf	(refresh_leds@batterie+1)^0,c
  1948  00780E  ECE0  F027         	call	_refresh_leds	;wreg free
  1949  007812                     l4313:
  1950                           
  1951                           ;Capteur_Temp.c: 175:         Receive(rxMsg);
  1952  007812  0E00               	movlw	low main@rxMsg
  1953  007814  6E0B               	movwf	Receive@data^0,c
  1954  007816  0E01               	movlw	high main@rxMsg
  1955  007818  6E0C               	movwf	(Receive@data+1)^0,c
  1956  00781A  EC54  F031         	call	_Receive	;wreg free
  1957  00781E                     
  1958                           ;Capteur_Temp.c: 177:         temperature = sendMeanTemp();
  1959  00781E  EC16  F032         	call	_sendMeanTemp	;wreg free
  1960  007822  C066  F12E         	movff	?_sendMeanTemp,main@temperature
  1961  007826  C067  F12F         	movff	?_sendMeanTemp+1,main@temperature+1
  1962  00782A                     
  1963                           ;Capteur_Temp.c: 179:         if(!capteurPresent) {
  1964  00782A  0101               	movlb	1	; () banked
  1965  00782C  5122               	movf	main@capteurPresent& (0+255),w,b
  1966  00782E  A4D8               	btfss	status,2,c
  1967  007830  EF1C  F03C         	goto	u3641
  1968  007834  EF1E  F03C         	goto	u3640
  1969  007838                     u3641:
  1970  007838  EF22  F03C         	goto	l4323
  1971  00783C                     u3640:
  1972  00783C                     
  1973                           ; BSR set to: 1
  1974                           ;Capteur_Temp.c: 180:             printHumidityLevel();
  1975  00783C  EC94  F030         	call	_printHumidityLevel	;wreg free
  1976  007840                     
  1977                           ;Capteur_Temp.c: 181:             printTemperatureLevel();
  1978  007840  ECF4  F029         	call	_printTemperatureLevel	;wreg free
  1979  007844                     l4323:
  1980                           
  1981                           ;Capteur_Temp.c: 184:         afficher_donnees(temperature, humidityDec(), batterie);
  1982  007844  C12E  F06C         	movff	main@temperature,afficher_donnees@tem
  1983  007848  C12F  F06D         	movff	main@temperature+1,afficher_donnees@tem+1
  1984  00784C  EC98  F028         	call	_humidityDec	;wreg free
  1985  007850  C066  F06E         	movff	?_humidityDec,afficher_donnees@hum
  1986  007854  C067  F06F         	movff	?_humidityDec+1,afficher_donnees@hum+1
  1987  007858  C12C  F070         	movff	main@batterie,afficher_donnees@bat
  1988  00785C  C12D  F071         	movff	main@batterie+1,afficher_donnees@bat+1
  1989  007860  EC00  F026         	call	_afficher_donnees	;wreg free
  1990  007864                     
  1991                           ;Capteur_Temp.c: 185:         refresh_leds(&temperature, &batterie);
  1992  007864  0E2E               	movlw	low main@temperature
  1993  007866  6E01               	movwf	refresh_leds@temperature^0,c
  1994  007868  0E01               	movlw	high main@temperature
  1995  00786A  6E02               	movwf	(refresh_leds@temperature+1)^0,c
  1996  00786C  0E2C               	movlw	low main@batterie
  1997  00786E  6E03               	movwf	refresh_leds@batterie^0,c
  1998  007870  0E01               	movlw	high main@batterie
  1999  007872  6E04               	movwf	(refresh_leds@batterie+1)^0,c
  2000  007874  ECE0  F027         	call	_refresh_leds	;wreg free
  2001  007878                     
  2002                           ;Capteur_Temp.c: 187:         if(rxMsg[4] == 42) {
  2003  007878  0E2A               	movlw	42
  2004  00787A  0101               	movlb	1	; () banked
  2005  00787C  1904               	xorwf	(main@rxMsg+4)& (0+255),w,b
  2006  00787E  A4D8               	btfss	status,2,c
  2007  007880  EF44  F03C         	goto	u3651
  2008  007884  EF46  F03C         	goto	u3650
  2009  007888                     u3651:
  2010  007888  EF80  F03C         	goto	l4345
  2011  00788C                     u3650:
  2012  00788C                     
  2013                           ; BSR set to: 1
  2014                           ;Capteur_Temp.c: 188:             UARTWriteStrLn(" ");
  2015  00788C  0E94               	movlw	low (STR_27+9)
  2016  00788E  6E02               	movwf	UARTWriteStrLn@string^0,c
  2017  007890  0E7F               	movlw	high (STR_27+9)
  2018  007892  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2019  007894  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  2020                           
  2021                           ;Capteur_Temp.c: 189:             UARTWriteStr("Message recu : ");
  2022  007898  0EF7               	movlw	low STR_6
  2023  00789A  6E02               	movwf	UARTWriteStr@string^0,c
  2024  00789C  0E7E               	movlw	high STR_6
  2025  00789E  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  2026  0078A0  EC1A  F028         	call	_UARTWriteStr	;wreg free
  2027  0078A4                     
  2028                           ;Capteur_Temp.c: 191:             RXNumberOfBytes = ReadSXRegister(0x13);
  2029  0078A4  0E13               	movlw	19
  2030  0078A6  ECB7  F025         	call	_ReadSXRegister
  2031  0078AA  0101               	movlb	1	; () banked
  2032  0078AC  6F1E               	movwf	main@RXNumberOfBytes& (0+255),b
  2033  0078AE                     
  2034                           ; BSR set to: 1
  2035                           ;Capteur_Temp.c: 193:             for(i = 0; i < RXNumberOfBytes; i++) {
  2036  0078AE  0E00               	movlw	0
  2037  0078B0  6F21               	movwf	main@i& (0+255),b
  2038  0078B2  EF71  F03C         	goto	l4341
  2039  0078B6                     l4335:
  2040                           
  2041                           ; BSR set to: 1
  2042                           ;Capteur_Temp.c: 194:                 UARTWriteByteHex(rxMsg[i]);
  2043  0078B6  0E00               	movlw	low main@rxMsg
  2044  0078B8  2521               	addwf	main@i& (0+255),w,b
  2045  0078BA  6ED9               	movwf	fsr2l,c
  2046  0078BC  6ADA               	clrf	fsr2h,c
  2047  0078BE  0E01               	movlw	high main@rxMsg
  2048  0078C0  22DA               	addwfc	fsr2h,f,c
  2049  0078C2  50DF               	movf	indf2,w,c
  2050  0078C4  0100               	movlb	0	; () banked
  2051  0078C6  6FE5               	movwf	??_main& (0+255),b
  2052  0078C8  51E5               	movf	??_main& (0+255),w,b
  2053  0078CA  6E02               	movwf	UARTWriteByteHex@data^0,c
  2054  0078CC  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  2055  0078CE  ECC0  F02A         	call	_UARTWriteByteHex	;wreg free
  2056  0078D2                     
  2057                           ;Capteur_Temp.c: 195:                 UARTWriteStr(" ");
  2058  0078D2  0E94               	movlw	low (STR_27+9)
  2059  0078D4  6E02               	movwf	UARTWriteStr@string^0,c
  2060  0078D6  0E7F               	movlw	high (STR_27+9)
  2061  0078D8  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  2062  0078DA  EC1A  F028         	call	_UARTWriteStr	;wreg free
  2063  0078DE                     
  2064                           ;Capteur_Temp.c: 196:             }
  2065  0078DE  0101               	movlb	1	; () banked
  2066  0078E0  2B21               	incf	main@i& (0+255),f,b
  2067  0078E2                     l4341:
  2068                           
  2069                           ; BSR set to: 1
  2070  0078E2  511E               	movf	main@RXNumberOfBytes& (0+255),w,b
  2071  0078E4  5D21               	subwf	main@i& (0+255),w,b
  2072  0078E6  A0D8               	btfss	status,0,c
  2073  0078E8  EF78  F03C         	goto	u3661
  2074  0078EC  EF7A  F03C         	goto	u3660
  2075  0078F0                     u3661:
  2076  0078F0  EF5B  F03C         	goto	l4335
  2077  0078F4                     u3660:
  2078  0078F4                     
  2079                           ; BSR set to: 1
  2080                           ;Capteur_Temp.c: 197:             UARTWriteStrLn(" ");
  2081  0078F4  0E94               	movlw	low (STR_27+9)
  2082  0078F6  6E02               	movwf	UARTWriteStrLn@string^0,c
  2083  0078F8  0E7F               	movlw	high (STR_27+9)
  2084  0078FA  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2085  0078FC  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  2086  007900                     l4345:
  2087                           
  2088                           ;Capteur_Temp.c: 200:         txMsg[4] = 0x00;
  2089  007900  0E00               	movlw	0
  2090  007902  0101               	movlb	1	; () banked
  2091  007904  6F27               	movwf	(main@txMsg+4)& (0+255),b
  2092  007906                     
  2093                           ; BSR set to: 1
  2094                           ;Capteur_Temp.c: 201:         txMsg[5] = 0x00;
  2095  007906  0E00               	movlw	0
  2096  007908  6F28               	movwf	(main@txMsg+5)& (0+255),b
  2097  00790A                     
  2098                           ; BSR set to: 1
  2099                           ;Capteur_Temp.c: 203:         if(!capteurPresent && rxMsg[3] == 0x04 && rxMsg[4] == 0x02
      +                          ) rxMsg[4] = 0x04;
  2100  00790A  5122               	movf	main@capteurPresent& (0+255),w,b
  2101  00790C  A4D8               	btfss	status,2,c
  2102  00790E  EF8B  F03C         	goto	u3671
  2103  007912  EF8D  F03C         	goto	u3670
  2104  007916                     u3671:
  2105  007916  EFA1  F03C         	goto	l4357
  2106  00791A                     u3670:
  2107  00791A                     
  2108                           ; BSR set to: 1
  2109  00791A  0E04               	movlw	4
  2110  00791C  1903               	xorwf	(main@rxMsg+3)& (0+255),w,b
  2111  00791E  A4D8               	btfss	status,2,c
  2112  007920  EF94  F03C         	goto	u3681
  2113  007924  EF96  F03C         	goto	u3680
  2114  007928                     u3681:
  2115  007928  EFA1  F03C         	goto	l4357
  2116  00792C                     u3680:
  2117  00792C                     
  2118                           ; BSR set to: 1
  2119  00792C  0E02               	movlw	2
  2120  00792E  1904               	xorwf	(main@rxMsg+4)& (0+255),w,b
  2121  007930  A4D8               	btfss	status,2,c
  2122  007932  EF9D  F03C         	goto	u3691
  2123  007936  EF9F  F03C         	goto	u3690
  2124  00793A                     u3691:
  2125  00793A  EFA1  F03C         	goto	l4357
  2126  00793E                     u3690:
  2127  00793E                     
  2128                           ; BSR set to: 1
  2129  00793E  0E04               	movlw	4
  2130  007940  6F04               	movwf	(main@rxMsg+4)& (0+255),b
  2131  007942                     l4357:
  2132                           
  2133                           ; BSR set to: 1
  2134                           ;Capteur_Temp.c: 205:         if(rxMsg[2] == 0x01) {
  2135  007942  0502               	decf	(main@rxMsg+2)& (0+255),w,b
  2136  007944  A4D8               	btfss	status,2,c
  2137  007946  EFA7  F03C         	goto	u3701
  2138  00794A  EFA9  F03C         	goto	u3700
  2139  00794E                     u3701:
  2140  00794E  EF09  F03C         	goto	l4313
  2141  007952                     u3700:
  2142  007952  EF62  F03E         	goto	l4475
  2143  007956                     l4361:
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;Capteur_Temp.c: 208:                     UARTWriteStr("Discover group : ");
  2147  007956  0E7E               	movlw	low STR_9
  2148  007958  6E02               	movwf	UARTWriteStr@string^0,c
  2149  00795A  0E7E               	movlw	high STR_9
  2150  00795C  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  2151  00795E  EC1A  F028         	call	_UARTWriteStr	;wreg free
  2152  007962                     
  2153                           ;Capteur_Temp.c: 209:                     UARTWriteByteHex(rxMsg[3]);
  2154  007962  C103  F002         	movff	main@rxMsg+3,UARTWriteByteHex@data
  2155  007966  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  2156  007968  ECC0  F02A         	call	_UARTWriteByteHex	;wreg free
  2157  00796C                     
  2158                           ;Capteur_Temp.c: 210:                     UARTWriteStrLn(" ");
  2159  00796C  0E94               	movlw	low (STR_27+9)
  2160  00796E  6E02               	movwf	UARTWriteStrLn@string^0,c
  2161  007970  0E7F               	movlw	high (STR_27+9)
  2162  007972  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2163  007974  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  2164  007978                     
  2165                           ;Capteur_Temp.c: 211:                     afficher_string("Discover:");
  2166  007978  0EE2               	movlw	low STR_11
  2167  00797A  6E0C               	movwf	afficher_string@string^0,c
  2168  00797C  0E7F               	movlw	high STR_11
  2169  00797E  6E0D               	movwf	(afficher_string@string+1)^0,c
  2170  007980  EC8D  F026         	call	_afficher_string	;wreg free
  2171  007984                     
  2172                           ;Capteur_Temp.c: 212:                     afficher_string_hex(rxMsg[3]);
  2173  007984  C103  F00C         	movff	main@rxMsg+3,afficher_string_hex@data
  2174  007988  6A0D               	clrf	(afficher_string_hex@data+1)^0,c
  2175  00798A  EC2F  F02D         	call	_afficher_string_hex	;wreg free
  2176  00798E                     
  2177                           ;Capteur_Temp.c: 214:                     if(rxMsg[3] != 0x04) break;
  2178  00798E  0E04               	movlw	4
  2179  007990  0101               	movlb	1	; () banked
  2180  007992  1903               	xorwf	(main@rxMsg+3)& (0+255),w,b
  2181  007994  B4D8               	btfsc	status,2,c
  2182  007996  EFCF  F03C         	goto	u3711
  2183  00799A  EFD1  F03C         	goto	u3710
  2184  00799E                     u3711:
  2185  00799E  EFD3  F03C         	goto	l4375
  2186  0079A2                     u3710:
  2187  0079A2  EF09  F03C         	goto	l4313
  2188  0079A6                     l4375:
  2189                           
  2190                           ; BSR set to: 1
  2191                           ;Capteur_Temp.c: 216:                     UARTWriteStrLn(" ");
  2192  0079A6  0E94               	movlw	low (STR_27+9)
  2193  0079A8  6E02               	movwf	UARTWriteStrLn@string^0,c
  2194  0079AA  0E7F               	movlw	high (STR_27+9)
  2195  0079AC  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2196  0079AE  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  2197                           
  2198                           ;Capteur_Temp.c: 217:                     UARTWriteStrLn("Enregistrement");
  2199  0079B2  0E36               	movlw	low STR_13
  2200  0079B4  6E02               	movwf	UARTWriteStrLn@string^0,c
  2201  0079B6  0E7F               	movlw	high STR_13
  2202  0079B8  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2203  0079BA  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  2204  0079BE                     
  2205                           ;Capteur_Temp.c: 218:                     txMsg[0] = 0xAD;
  2206  0079BE  0EAD               	movlw	173
  2207  0079C0  0101               	movlb	1	; () banked
  2208  0079C2  6F23               	movwf	main@txMsg& (0+255),b
  2209  0079C4                     
  2210                           ; BSR set to: 1
  2211                           ;Capteur_Temp.c: 219:                     txMsg[1] = 0x4E;
  2212  0079C4  0E4E               	movlw	78
  2213  0079C6  6F24               	movwf	(main@txMsg+1)& (0+255),b
  2214  0079C8                     
  2215                           ; BSR set to: 1
  2216                           ;Capteur_Temp.c: 220:                     txMsg[2] = 0x01;
  2217  0079C8  0E01               	movlw	1
  2218  0079CA  6F25               	movwf	(main@txMsg+2)& (0+255),b
  2219  0079CC                     
  2220                           ; BSR set to: 1
  2221                           ;Capteur_Temp.c: 221:                     txMsg[3] = 0x04;
  2222  0079CC  0E04               	movlw	4
  2223  0079CE  6F26               	movwf	(main@txMsg+3)& (0+255),b
  2224  0079D0                     
  2225                           ; BSR set to: 1
  2226                           ;Capteur_Temp.c: 222:                     txMsg[4] = 0x01;
  2227  0079D0  0E01               	movlw	1
  2228  0079D2  6F27               	movwf	(main@txMsg+4)& (0+255),b
  2229  0079D4                     
  2230                           ; BSR set to: 1
  2231                           ;Capteur_Temp.c: 223:                     txMsg[5] = 0x05;
  2232  0079D4  0E05               	movlw	5
  2233  0079D6  6F28               	movwf	(main@txMsg+5)& (0+255),b
  2234  0079D8                     
  2235                           ; BSR set to: 1
  2236                           ;Capteur_Temp.c: 225:                     afficher_string("Register  ");
  2237  0079D8  0EB7               	movlw	low STR_14
  2238  0079DA  6E0C               	movwf	afficher_string@string^0,c
  2239  0079DC  0E7F               	movlw	high STR_14
  2240  0079DE  6E0D               	movwf	(afficher_string@string+1)^0,c
  2241  0079E0  EC8D  F026         	call	_afficher_string	;wreg free
  2242  0079E4                     
  2243                           ;Capteur_Temp.c: 227:                     Transmit(txMsg, 6);
  2244  0079E4  0E23               	movlw	low main@txMsg
  2245  0079E6  6E0B               	movwf	Transmit@data^0,c
  2246  0079E8  0E01               	movlw	high main@txMsg
  2247  0079EA  6E0C               	movwf	(Transmit@data+1)^0,c
  2248  0079EC  0E06               	movlw	6
  2249  0079EE  6E0D               	movwf	Transmit@data_long^0,c
  2250  0079F0  ECB5  F02D         	call	_Transmit	;wreg free
  2251                           
  2252                           ;Capteur_Temp.c: 228:                     break;
  2253  0079F4  EF09  F03C         	goto	l4313
  2254  0079F8                     l4393:
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;Capteur_Temp.c: 231:                     UARTWriteStrLn("Requete de donnees");
  2258  0079F8  0E47               	movlw	low STR_15
  2259  0079FA  6E02               	movwf	UARTWriteStrLn@string^0,c
  2260  0079FC  0E7E               	movlw	high STR_15
  2261  0079FE  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2262  007A00  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  2263  007A04                     
  2264                           ;Capteur_Temp.c: 232:                     afficher_string("Requete: ");
  2265  007A04  0ED8               	movlw	low STR_16
  2266  007A06  6E0C               	movwf	afficher_string@string^0,c
  2267  007A08  0E7F               	movlw	high STR_16
  2268  007A0A  6E0D               	movwf	(afficher_string@string+1)^0,c
  2269  007A0C  EC8D  F026         	call	_afficher_string	;wreg free
  2270  007A10                     
  2271                           ;Capteur_Temp.c: 233:                     afficher_string_hex(rxMsg[3]);
  2272  007A10  C103  F00C         	movff	main@rxMsg+3,afficher_string_hex@data
  2273  007A14  6A0D               	clrf	(afficher_string_hex@data+1)^0,c
  2274  007A16  EC2F  F02D         	call	_afficher_string_hex	;wreg free
  2275  007A1A                     
  2276                           ;Capteur_Temp.c: 235:                     if(rxMsg[3] != 0x04) break;
  2277  007A1A  0E04               	movlw	4
  2278  007A1C  0101               	movlb	1	; () banked
  2279  007A1E  1903               	xorwf	(main@rxMsg+3)& (0+255),w,b
  2280  007A20  B4D8               	btfsc	status,2,c
  2281  007A22  EF15  F03D         	goto	u3721
  2282  007A26  EF17  F03D         	goto	u3720
  2283  007A2A                     u3721:
  2284  007A2A  EF19  F03D         	goto	l4403
  2285  007A2E                     u3720:
  2286  007A2E  EF09  F03C         	goto	l4313
  2287  007A32                     l4403:
  2288                           
  2289                           ; BSR set to: 1
  2290                           ;Capteur_Temp.c: 237:                     UARTWriteStrLn(" ");
  2291  007A32  0E94               	movlw	low (STR_27+9)
  2292  007A34  6E02               	movwf	UARTWriteStrLn@string^0,c
  2293  007A36  0E7F               	movlw	high (STR_27+9)
  2294  007A38  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2295  007A3A  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  2296                           
  2297                           ;Capteur_Temp.c: 238:                     UARTWriteStrLn("Mesure possible");
  2298  007A3E  0E07               	movlw	low STR_18
  2299  007A40  6E02               	movwf	UARTWriteStrLn@string^0,c
  2300  007A42  0E7F               	movlw	high STR_18
  2301  007A44  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2302  007A46  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  2303  007A4A                     
  2304                           ;Capteur_Temp.c: 239:                     txMsg[4] = 0x03;
  2305  007A4A  0E03               	movlw	3
  2306  007A4C  0101               	movlb	1	; () banked
  2307  007A4E  6F27               	movwf	(main@txMsg+4)& (0+255),b
  2308  007A50                     
  2309                           ; BSR set to: 1
  2310                           ;Capteur_Temp.c: 241:                     Transmit(txMsg, 5);
  2311  007A50  0E23               	movlw	low main@txMsg
  2312  007A52  6E0B               	movwf	Transmit@data^0,c
  2313  007A54  0E01               	movlw	high main@txMsg
  2314  007A56  6E0C               	movwf	(Transmit@data+1)^0,c
  2315  007A58  0E05               	movlw	5
  2316  007A5A  6E0D               	movwf	Transmit@data_long^0,c
  2317  007A5C  ECB5  F02D         	call	_Transmit	;wreg free
  2318  007A60                     
  2319                           ;Capteur_Temp.c: 243:                     UARTWriteStrLn(" ");
  2320  007A60  0E94               	movlw	low (STR_27+9)
  2321  007A62  6E02               	movwf	UARTWriteStrLn@string^0,c
  2322  007A64  0E7F               	movlw	high (STR_27+9)
  2323  007A66  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2324  007A68  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  2325  007A6C                     
  2326                           ;Capteur_Temp.c: 244:                     UARTWriteStrLn("Mesure en cours");
  2327  007A6C  0E17               	movlw	low STR_20
  2328  007A6E  6E02               	movwf	UARTWriteStrLn@string^0,c
  2329  007A70  0E7F               	movlw	high STR_20
  2330  007A72  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2331  007A74  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  2332  007A78                     
  2333                           ;Capteur_Temp.c: 245:                     afficher_string("Mesure... ");
  2334  007A78  0EC2               	movlw	low STR_21
  2335  007A7A  6E0C               	movwf	afficher_string@string^0,c
  2336  007A7C  0E7F               	movlw	high STR_21
  2337  007A7E  6E0D               	movwf	(afficher_string@string+1)^0,c
  2338  007A80  EC8D  F026         	call	_afficher_string	;wreg free
  2339  007A84                     
  2340                           ;Capteur_Temp.c: 246:                     _delay((unsigned long)((100)*(1000000UL/4000.0
      +                          )));
  2341  007A84  0E21               	movlw	33
  2342  007A86  0100               	movlb	0	; () banked
  2343  007A88  6FE5               	movwf	??_main& (0+255),b
  2344  007A8A  0E76               	movlw	118
  2345  007A8C                     u3807:
  2346  007A8C  2EE8               	decfsz	wreg,f,c
  2347  007A8E  D7FE               	bra	u3807
  2348  007A90  2FE5               	decfsz	??_main& (0+255),f,b
  2349  007A92  D7FC               	bra	u3807
  2350  007A94  F000               	nop	
  2351  007A96                     
  2352                           ;Capteur_Temp.c: 250:                     temperature = sendMeanTemp();
  2353  007A96  EC16  F032         	call	_sendMeanTemp	;wreg free
  2354  007A9A  C066  F12E         	movff	?_sendMeanTemp,main@temperature
  2355  007A9E  C067  F12F         	movff	?_sendMeanTemp+1,main@temperature+1
  2356  007AA2                     
  2357                           ;Capteur_Temp.c: 251:                     humidite = sendMeanHumi();
  2358  007AA2  ECC5  F02E         	call	_sendMeanHumi	;wreg free
  2359  007AA6  C066  F11F         	movff	?_sendMeanHumi,main@humidite
  2360  007AAA  C067  F120         	movff	?_sendMeanHumi+1,main@humidite+1
  2361  007AAE                     
  2362                           ;Capteur_Temp.c: 252:                     batterie = pourcentBatt();
  2363  007AAE  EC3D  F02E         	call	_pourcentBatt	;wreg free
  2364  007AB2  C066  F12C         	movff	?_pourcentBatt,main@batterie
  2365  007AB6  C067  F12D         	movff	?_pourcentBatt+1,main@batterie+1
  2366  007ABA                     
  2367                           ;Capteur_Temp.c: 254:                     txMsg[4] = hexToDec((uint8_t)(temperature / 10
      +                          0));
  2368  007ABA  C12E  F001         	movff	main@temperature,___lwdiv@dividend
  2369  007ABE  C12F  F002         	movff	main@temperature+1,___lwdiv@dividend+1
  2370  007AC2  0E00               	movlw	0
  2371  007AC4  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  2372  007AC6  0E64               	movlw	100
  2373  007AC8  6E03               	movwf	___lwdiv@divisor^0,c
  2374  007ACA  ECA6  F027         	call	___lwdiv	;wreg free
  2375  007ACE  5001               	movf	?___lwdiv^0,w,c
  2376  007AD0  EC4D  F026         	call	_hexToDec
  2377  007AD4  0101               	movlb	1	; () banked
  2378  007AD6  6F27               	movwf	(main@txMsg+4)& (0+255),b
  2379  007AD8                     
  2380                           ; BSR set to: 1
  2381                           ;Capteur_Temp.c: 255:                     txMsg[4 + 1] = hexToDec((uint8_t)(temperature 
      +                          % 100));
  2382  007AD8  C12E  F066         	movff	main@temperature,___lwmod@dividend
  2383  007ADC  C12F  F067         	movff	main@temperature+1,___lwmod@dividend+1
  2384  007AE0  0E00               	movlw	0
  2385  007AE2  0100               	movlb	0	; () banked
  2386  007AE4  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  2387  007AE6  0E64               	movlw	100
  2388  007AE8  6F68               	movwf	___lwmod@divisor& (0+255),b
  2389  007AEA  EC07  F027         	call	___lwmod	;wreg free
  2390  007AEE  0100               	movlb	0	; () banked
  2391  007AF0  5166               	movf	?___lwmod& (0+255),w,b
  2392  007AF2  EC4D  F026         	call	_hexToDec
  2393  007AF6  0101               	movlb	1	; () banked
  2394  007AF8  6F28               	movwf	(main@txMsg+5)& (0+255),b
  2395  007AFA                     
  2396                           ; BSR set to: 1
  2397                           ;Capteur_Temp.c: 256:                     txMsg[4 + 2] = hexToDec((uint8_t)(humidite / 1
      +                          00));
  2398  007AFA  C11F  F001         	movff	main@humidite,___lwdiv@dividend
  2399  007AFE  C120  F002         	movff	main@humidite+1,___lwdiv@dividend+1
  2400  007B02  0E00               	movlw	0
  2401  007B04  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  2402  007B06  0E64               	movlw	100
  2403  007B08  6E03               	movwf	___lwdiv@divisor^0,c
  2404  007B0A  ECA6  F027         	call	___lwdiv	;wreg free
  2405  007B0E  5001               	movf	?___lwdiv^0,w,c
  2406  007B10  EC4D  F026         	call	_hexToDec
  2407  007B14  0101               	movlb	1	; () banked
  2408  007B16  6F29               	movwf	(main@txMsg+6)& (0+255),b
  2409  007B18                     
  2410                           ; BSR set to: 1
  2411                           ;Capteur_Temp.c: 257:                     txMsg[4 + 0x05 - 2] = hexToDec((uint8_t)(batte
      +                          rie / 100));
  2412  007B18  C12C  F001         	movff	main@batterie,___lwdiv@dividend
  2413  007B1C  C12D  F002         	movff	main@batterie+1,___lwdiv@dividend+1
  2414  007B20  0E00               	movlw	0
  2415  007B22  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  2416  007B24  0E64               	movlw	100
  2417  007B26  6E03               	movwf	___lwdiv@divisor^0,c
  2418  007B28  ECA6  F027         	call	___lwdiv	;wreg free
  2419  007B2C  5001               	movf	?___lwdiv^0,w,c
  2420  007B2E  EC4D  F026         	call	_hexToDec
  2421  007B32  0101               	movlb	1	; () banked
  2422  007B34  6F2A               	movwf	(main@txMsg+7)& (0+255),b
  2423  007B36                     
  2424                           ; BSR set to: 1
  2425                           ;Capteur_Temp.c: 258:                     txMsg[4 + 0x05 - 1] = hexToDec(voltmeterDec())
      +                          ;
  2426  007B36  EC32  F029         	call	_voltmeterDec	;wreg free
  2427  007B3A  EC4D  F026         	call	_hexToDec
  2428  007B3E  0101               	movlb	1	; () banked
  2429  007B40  6F2B               	movwf	(main@txMsg+8)& (0+255),b
  2430  007B42                     
  2431                           ; BSR set to: 1
  2432                           ;Capteur_Temp.c: 260:                     afficher_string("Envoi...  ");
  2433  007B42  0EAC               	movlw	low STR_22
  2434  007B44  6E0C               	movwf	afficher_string@string^0,c
  2435  007B46  0E7F               	movlw	high STR_22
  2436  007B48  6E0D               	movwf	(afficher_string@string+1)^0,c
  2437  007B4A  EC8D  F026         	call	_afficher_string	;wreg free
  2438  007B4E                     l4435:
  2439                           
  2440                           ;Capteur_Temp.c: 262:                     Transmit(txMsg, (0x05 + 4));
  2441  007B4E  0E23               	movlw	low main@txMsg
  2442  007B50  6E0B               	movwf	Transmit@data^0,c
  2443  007B52  0E01               	movlw	high main@txMsg
  2444  007B54  6E0C               	movwf	(Transmit@data+1)^0,c
  2445  007B56  0E09               	movlw	9
  2446  007B58  6E0D               	movwf	Transmit@data_long^0,c
  2447  007B5A  ECB5  F02D         	call	_Transmit	;wreg free
  2448                           
  2449                           ;Capteur_Temp.c: 263:                     break;
  2450  007B5E  EF09  F03C         	goto	l4313
  2451  007B62                     l4437:
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;Capteur_Temp.c: 266:                     UARTWriteStrLn("Mesure possible");
  2455  007B62  0E07               	movlw	low STR_18
  2456  007B64  6E02               	movwf	UARTWriteStrLn@string^0,c
  2457  007B66  0E7F               	movlw	high STR_18
  2458  007B68  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2459  007B6A  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  2460                           
  2461                           ;Capteur_Temp.c: 267:                     break;
  2462  007B6E  EF09  F03C         	goto	l4313
  2463  007B72                     l4439:
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;Capteur_Temp.c: 270:                     UARTWriteStrLn("Mesure impossible");
  2467  007B72  0E90               	movlw	low STR_24
  2468  007B74  6E02               	movwf	UARTWriteStrLn@string^0,c
  2469  007B76  0E7E               	movlw	high STR_24
  2470  007B78  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2471  007B7A  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  2472  007B7E                     
  2473                           ;Capteur_Temp.c: 272:                     if(rxMsg[3] != 0x04) break;
  2474  007B7E  0E04               	movlw	4
  2475  007B80  0101               	movlb	1	; () banked
  2476  007B82  1903               	xorwf	(main@rxMsg+3)& (0+255),w,b
  2477  007B84  B4D8               	btfsc	status,2,c
  2478  007B86  EFC7  F03D         	goto	u3731
  2479  007B8A  EFC9  F03D         	goto	u3730
  2480  007B8E                     u3731:
  2481  007B8E  EFCB  F03D         	goto	l4445
  2482  007B92                     u3730:
  2483  007B92  EF09  F03C         	goto	l4313
  2484  007B96                     l4445:
  2485                           
  2486                           ; BSR set to: 1
  2487                           ;Capteur_Temp.c: 274:                     txMsg[4] = 0x04;
  2488  007B96  0E04               	movlw	4
  2489  007B98  6F27               	movwf	(main@txMsg+4)& (0+255),b
  2490  007B9A                     
  2491                           ; BSR set to: 1
  2492                           ;Capteur_Temp.c: 276:                     afficher_string("Impossible");
  2493  007B9A  0ECD               	movlw	low STR_25
  2494  007B9C  6E0C               	movwf	afficher_string@string^0,c
  2495  007B9E  0E7F               	movlw	high STR_25
  2496  007BA0  6E0D               	movwf	(afficher_string@string+1)^0,c
  2497  007BA2  EC8D  F026         	call	_afficher_string	;wreg free
  2498  007BA6                     
  2499                           ;Capteur_Temp.c: 278:                     Transmit(txMsg, 5);
  2500  007BA6  0E23               	movlw	low main@txMsg
  2501  007BA8  6E0B               	movwf	Transmit@data^0,c
  2502  007BAA  0E01               	movlw	high main@txMsg
  2503  007BAC  6E0C               	movwf	(Transmit@data+1)^0,c
  2504  007BAE  0E05               	movlw	5
  2505  007BB0  6E0D               	movwf	Transmit@data_long^0,c
  2506  007BB2  ECB5  F02D         	call	_Transmit	;wreg free
  2507                           
  2508                           ;Capteur_Temp.c: 279:                     break;
  2509  007BB6  EF09  F03C         	goto	l4313
  2510  007BBA                     l4451:
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;Capteur_Temp.c: 282:                     UARTWriteStrLn("Accuse reception");
  2514  007BBA  0ED6               	movlw	low STR_26
  2515  007BBC  6E02               	movwf	UARTWriteStrLn@string^0,c
  2516  007BBE  0E7E               	movlw	high STR_26
  2517  007BC0  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2518  007BC2  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  2519  007BC6                     
  2520                           ;Capteur_Temp.c: 283:                     afficher_string("ACK...    ");
  2521  007BC6  0E8B               	movlw	low STR_27
  2522  007BC8  6E0C               	movwf	afficher_string@string^0,c
  2523  007BCA  0E7F               	movlw	high STR_27
  2524  007BCC  6E0D               	movwf	(afficher_string@string+1)^0,c
  2525  007BCE  EC8D  F026         	call	_afficher_string	;wreg free
  2526                           
  2527                           ;Capteur_Temp.c: 284:                     break;
  2528  007BD2  EF09  F03C         	goto	l4313
  2529  007BD6                     l4455:
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;Capteur_Temp.c: 287:                     UARTWriteStrLn("Erreur de transfert");
  2533  007BD6  0E33               	movlw	low STR_28
  2534  007BD8  6E02               	movwf	UARTWriteStrLn@string^0,c
  2535  007BDA  0E7E               	movlw	high STR_28
  2536  007BDC  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2537  007BDE  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  2538  007BE2                     
  2539                           ;Capteur_Temp.c: 289:                     if(rxMsg[3] != 0x04) break;
  2540  007BE2  0E04               	movlw	4
  2541  007BE4  0101               	movlb	1	; () banked
  2542  007BE6  1903               	xorwf	(main@rxMsg+3)& (0+255),w,b
  2543  007BE8  B4D8               	btfsc	status,2,c
  2544  007BEA  EFF9  F03D         	goto	u3741
  2545  007BEE  EFFB  F03D         	goto	u3740
  2546  007BF2                     u3741:
  2547  007BF2  EFFD  F03D         	goto	l4461
  2548  007BF6                     u3740:
  2549  007BF6  EF09  F03C         	goto	l4313
  2550  007BFA                     l4461:
  2551                           
  2552                           ; BSR set to: 1
  2553                           ;Capteur_Temp.c: 291:                     txMsg[4] = hexToDec((uint8_t)(temperature / 10
      +                          0));
  2554  007BFA  C12E  F001         	movff	main@temperature,___lwdiv@dividend
  2555  007BFE  C12F  F002         	movff	main@temperature+1,___lwdiv@dividend+1
  2556  007C02  0E00               	movlw	0
  2557  007C04  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  2558  007C06  0E64               	movlw	100
  2559  007C08  6E03               	movwf	___lwdiv@divisor^0,c
  2560  007C0A  ECA6  F027         	call	___lwdiv	;wreg free
  2561  007C0E  5001               	movf	?___lwdiv^0,w,c
  2562  007C10  EC4D  F026         	call	_hexToDec
  2563  007C14  0101               	movlb	1	; () banked
  2564  007C16  6F27               	movwf	(main@txMsg+4)& (0+255),b
  2565                           
  2566                           ;Capteur_Temp.c: 292:                     txMsg[4 + 1] = hexToDec((uint8_t)(temperature 
      +                          % 100));
  2567  007C18  C12E  F066         	movff	main@temperature,___lwmod@dividend
  2568  007C1C  C12F  F067         	movff	main@temperature+1,___lwmod@dividend+1
  2569  007C20  0E00               	movlw	0
  2570  007C22  0100               	movlb	0	; () banked
  2571  007C24  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  2572  007C26  0E64               	movlw	100
  2573  007C28  6F68               	movwf	___lwmod@divisor& (0+255),b
  2574  007C2A  EC07  F027         	call	___lwmod	;wreg free
  2575  007C2E  0100               	movlb	0	; () banked
  2576  007C30  5166               	movf	?___lwmod& (0+255),w,b
  2577  007C32  EC4D  F026         	call	_hexToDec
  2578  007C36  0101               	movlb	1	; () banked
  2579  007C38  6F28               	movwf	(main@txMsg+5)& (0+255),b
  2580                           
  2581                           ;Capteur_Temp.c: 293:                     txMsg[4 + 2] = hexToDec((uint8_t)(humidite / 1
      +                          00));
  2582  007C3A  C11F  F001         	movff	main@humidite,___lwdiv@dividend
  2583  007C3E  C120  F002         	movff	main@humidite+1,___lwdiv@dividend+1
  2584  007C42  0E00               	movlw	0
  2585  007C44  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  2586  007C46  0E64               	movlw	100
  2587  007C48  6E03               	movwf	___lwdiv@divisor^0,c
  2588  007C4A  ECA6  F027         	call	___lwdiv	;wreg free
  2589  007C4E  5001               	movf	?___lwdiv^0,w,c
  2590  007C50  EC4D  F026         	call	_hexToDec
  2591  007C54  0101               	movlb	1	; () banked
  2592  007C56  6F29               	movwf	(main@txMsg+6)& (0+255),b
  2593                           
  2594                           ;Capteur_Temp.c: 294:                     txMsg[4 + 0x05 - 2] = hexToDec((uint8_t)(batte
      +                          rie / 100));
  2595  007C58  C12C  F001         	movff	main@batterie,___lwdiv@dividend
  2596  007C5C  C12D  F002         	movff	main@batterie+1,___lwdiv@dividend+1
  2597  007C60  0E00               	movlw	0
  2598  007C62  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  2599  007C64  0E64               	movlw	100
  2600  007C66  6E03               	movwf	___lwdiv@divisor^0,c
  2601  007C68  ECA6  F027         	call	___lwdiv	;wreg free
  2602  007C6C  5001               	movf	?___lwdiv^0,w,c
  2603  007C6E  EC4D  F026         	call	_hexToDec
  2604  007C72  0101               	movlb	1	; () banked
  2605  007C74  6F2A               	movwf	(main@txMsg+7)& (0+255),b
  2606                           
  2607                           ;Capteur_Temp.c: 295:                     txMsg[4 + 0x05 - 1] = hexToDec(voltmeterDec())
      +                          ;
  2608  007C76  EC32  F029         	call	_voltmeterDec	;wreg free
  2609  007C7A  EC4D  F026         	call	_hexToDec
  2610  007C7E  0101               	movlb	1	; () banked
  2611  007C80  6F2B               	movwf	(main@txMsg+8)& (0+255),b
  2612  007C82                     
  2613                           ; BSR set to: 1
  2614                           ;Capteur_Temp.c: 297:                     afficher_string("Envoi...  ");
  2615  007C82  0EAC               	movlw	low STR_22
  2616  007C84  6E0C               	movwf	afficher_string@string^0,c
  2617  007C86  0E7F               	movlw	high STR_22
  2618  007C88  6E0D               	movwf	(afficher_string@string+1)^0,c
  2619  007C8A  EC8D  F026         	call	_afficher_string	;wreg free
  2620  007C8E  EFA7  F03D         	goto	l4435
  2621  007C92                     l4467:
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;Capteur_Temp.c: 303:                     UARTWriteStrLn("Timeout");
  2625  007C92  0EF4               	movlw	low STR_30
  2626  007C94  6E02               	movwf	UARTWriteStrLn@string^0,c
  2627  007C96  0E7F               	movlw	high STR_30
  2628  007C98  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2629  007C9A  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  2630  007C9E                     
  2631                           ;Capteur_Temp.c: 304:                     afficher_string("Timeout   ");
  2632  007C9E  0EA1               	movlw	low STR_31
  2633  007CA0  6E0C               	movwf	afficher_string@string^0,c
  2634  007CA2  0E7F               	movlw	high STR_31
  2635  007CA4  6E0D               	movwf	(afficher_string@string+1)^0,c
  2636  007CA6  EC8D  F026         	call	_afficher_string	;wreg free
  2637  007CAA                     
  2638                           ;Capteur_Temp.c: 305:                     rxMsg[4] = 0;
  2639  007CAA  0E00               	movlw	0
  2640  007CAC  0101               	movlb	1	; () banked
  2641  007CAE  6F04               	movwf	(main@rxMsg+4)& (0+255),b
  2642                           
  2643                           ;Capteur_Temp.c: 306:                     break;
  2644  007CB0  EF09  F03C         	goto	l4313
  2645  007CB4                     l4473:
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;Capteur_Temp.c: 309:                     UARTWriteStrLn("error");
  2649  007CB4  0E78               	movlw	low (STR_61+12)
  2650  007CB6  6E02               	movwf	UARTWriteStrLn@string^0,c
  2651  007CB8  0E7E               	movlw	high (STR_61+12)
  2652  007CBA  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2653  007CBC  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  2654                           
  2655                           ;Capteur_Temp.c: 311:             }
  2656  007CC0  EF09  F03C         	goto	l4313
  2657  007CC4                     l4475:
  2658                           
  2659                           ; BSR set to: 1
  2660  007CC4  5104               	movf	(main@rxMsg+4)& (0+255),w,b
  2661  007CC6  0100               	movlb	0	; () banked
  2662  007CC8  6FE5               	movwf	??_main& (0+255),b
  2663  007CCA  6BE6               	clrf	(??_main+1)& (0+255),b
  2664                           
  2665                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2666                           ; Switch size 1, requested type "simple"
  2667                           ; Number of cases is 1, Range of values is 0 to 0
  2668                           ; switch strategies available:
  2669                           ; Name         Instructions Cycles
  2670                           ; simple_byte            4     3 (average)
  2671                           ;	Chosen strategy is simple_byte
  2672  007CCC  51E6               	movf	(??_main+1)& (0+255),w,b
  2673  007CCE  0A00               	xorlw	0	; case 0
  2674  007CD0  B4D8               	btfsc	status,2,c
  2675  007CD2  EF6D  F03E         	goto	l4537
  2676  007CD6  EF5A  F03E         	goto	l4473
  2677  007CDA                     l4537:
  2678                           
  2679                           ; BSR set to: 0
  2680                           ; Switch size 1, requested type "simple"
  2681                           ; Number of cases is 7, Range of values is 1 to 66
  2682                           ; switch strategies available:
  2683                           ; Name         Instructions Cycles
  2684                           ; simple_byte           22    12 (average)
  2685                           ;	Chosen strategy is simple_byte
  2686  007CDA  51E5               	movf	??_main& (0+255),w,b
  2687  007CDC  0A01               	xorlw	1	; case 1
  2688  007CDE  B4D8               	btfsc	status,2,c
  2689  007CE0  EFAB  F03C         	goto	l4361
  2690  007CE4  0A03               	xorlw	3	; case 2
  2691  007CE6  B4D8               	btfsc	status,2,c
  2692  007CE8  EFFC  F03C         	goto	l4393
  2693  007CEC  0A01               	xorlw	1	; case 3
  2694  007CEE  B4D8               	btfsc	status,2,c
  2695  007CF0  EFB1  F03D         	goto	l4437
  2696  007CF4  0A07               	xorlw	7	; case 4
  2697  007CF6  B4D8               	btfsc	status,2,c
  2698  007CF8  EFB9  F03D         	goto	l4439
  2699  007CFC  0A01               	xorlw	1	; case 5
  2700  007CFE  B4D8               	btfsc	status,2,c
  2701  007D00  EFDD  F03D         	goto	l4451
  2702  007D04  0A03               	xorlw	3	; case 6
  2703  007D06  B4D8               	btfsc	status,2,c
  2704  007D08  EFEB  F03D         	goto	l4455
  2705  007D0C  0A44               	xorlw	68	; case 66
  2706  007D0E  B4D8               	btfsc	status,2,c
  2707  007D10  EF49  F03E         	goto	l4467
  2708  007D14  EF5A  F03E         	goto	l4473
  2709  007D18  EF00  F000         	goto	start
  2710  007D1C                     __end_of_main:
  2711                           	callstack 0
  2712                           
  2713 ;; *************** function _voltmeterDec *****************
  2714 ;; Defined at:
  2715 ;;		line 59 in file "voltmeter.c"
  2716 ;; Parameters:    Size  Location     Type
  2717 ;;		None
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;  volts           4    6[BANK0 ] float 
  2720 ;;  vBatt           1   14[BANK0 ] unsigned char 
  2721 ;; Return value:  Size  Location     Type
  2722 ;;                  1    wreg      unsigned char 
  2723 ;; Registers used:
  2724 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2730 ;;      Params:         0       0       0       0       0       0       0       0       0
  2731 ;;      Locals:         0       9       0       0       0       0       0       0       0
  2732 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2733 ;;      Totals:         0       9       0       0       0       0       0       0       0
  2734 ;;Total ram usage:        9 bytes
  2735 ;; Hardware stack levels used: 1
  2736 ;; Hardware stack levels required when called: 1
  2737 ;; This function calls:
  2738 ;;		___flmul
  2739 ;;		___fltol
  2740 ;;		___xxtofl
  2741 ;;		_voltmeterHex
  2742 ;; This function is called by:
  2743 ;;		_main
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           	psect	text1
  2748  005264                     __ptext1:
  2749                           	callstack 0
  2750  005264                     _voltmeterDec:
  2751                           	callstack 29
  2752  005264                     
  2753                           ;voltmeter.c: 61:     float volts = (float)((3.2 / 1023) * voltmeterHex());
  2754  005264  ECB1  F026         	call	_voltmeterHex	;wreg free
  2755  005268  C001  F00B         	movff	?_voltmeterHex,___xxtofl@val
  2756  00526C  C002  F00C         	movff	?_voltmeterHex+1,___xxtofl@val+1
  2757  005270  6A0D               	clrf	(___xxtofl@val+2)^0,c
  2758  005272  6A0E               	clrf	(___xxtofl@val+3)^0,c
  2759  005274  0E00               	movlw	0
  2760  005276  ECE5  F032         	call	___xxtofl
  2761  00527A  C00B  F032         	movff	?___xxtofl,___flmul@b
  2762  00527E  C00C  F033         	movff	?___xxtofl+1,___flmul@b+1
  2763  005282  C00D  F034         	movff	?___xxtofl+2,___flmul@b+2
  2764  005286  C00E  F035         	movff	?___xxtofl+3,___flmul@b+3
  2765  00528A  0E0D               	movlw	13
  2766  00528C  6E36               	movwf	___flmul@a^0,c
  2767  00528E  0E00               	movlw	0
  2768  005290  6E37               	movwf	(___flmul@a+1)^0,c
  2769  005292  0E4D               	movlw	77
  2770  005294  6E38               	movwf	(___flmul@a+2)^0,c
  2771  005296  0E3B               	movlw	59
  2772  005298  6E39               	movwf	(___flmul@a+3)^0,c
  2773  00529A  ECDB  F036         	call	___flmul	;wreg free
  2774  00529E  C032  F066         	movff	?___flmul,voltmeterDec@volts
  2775  0052A2  C033  F067         	movff	?___flmul+1,voltmeterDec@volts+1
  2776  0052A6  C034  F068         	movff	?___flmul+2,voltmeterDec@volts+2
  2777  0052AA  C035  F069         	movff	?___flmul+3,voltmeterDec@volts+3
  2778                           
  2779                           ;voltmeter.c: 62:     uint8_t vBatt = (uint8_t)(volts * 10 * 2.765);
  2780  0052AE  0E00               	movlw	0
  2781  0052B0  6E36               	movwf	___flmul@a^0,c
  2782  0052B2  0E00               	movlw	0
  2783  0052B4  6E37               	movwf	(___flmul@a+1)^0,c
  2784  0052B6  0E20               	movlw	32
  2785  0052B8  6E38               	movwf	(___flmul@a+2)^0,c
  2786  0052BA  0E41               	movlw	65
  2787  0052BC  6E39               	movwf	(___flmul@a+3)^0,c
  2788  0052BE  C066  F032         	movff	voltmeterDec@volts,___flmul@b
  2789  0052C2  C067  F033         	movff	voltmeterDec@volts+1,___flmul@b+1
  2790  0052C6  C068  F034         	movff	voltmeterDec@volts+2,___flmul@b+2
  2791  0052CA  C069  F035         	movff	voltmeterDec@volts+3,___flmul@b+3
  2792  0052CE  ECDB  F036         	call	___flmul	;wreg free
  2793  0052D2  C032  F06A         	movff	?___flmul,_voltmeterDec$2030
  2794  0052D6  C033  F06B         	movff	?___flmul+1,_voltmeterDec$2030+1
  2795  0052DA  C034  F06C         	movff	?___flmul+2,_voltmeterDec$2030+2
  2796  0052DE  C035  F06D         	movff	?___flmul+3,_voltmeterDec$2030+3
  2797                           
  2798                           ;voltmeter.c: 62:     uint8_t vBatt = (uint8_t)(volts * 10 * 2.765);
  2799  0052E2  0EC3               	movlw	195
  2800  0052E4  6E36               	movwf	___flmul@a^0,c
  2801  0052E6  0EF5               	movlw	245
  2802  0052E8  6E37               	movwf	(___flmul@a+1)^0,c
  2803  0052EA  0E30               	movlw	48
  2804  0052EC  6E38               	movwf	(___flmul@a+2)^0,c
  2805  0052EE  0E40               	movlw	64
  2806  0052F0  6E39               	movwf	(___flmul@a+3)^0,c
  2807  0052F2  C06A  F032         	movff	_voltmeterDec$2030,___flmul@b
  2808  0052F6  C06B  F033         	movff	_voltmeterDec$2030+1,___flmul@b+1
  2809  0052FA  C06C  F034         	movff	_voltmeterDec$2030+2,___flmul@b+2
  2810  0052FE  C06D  F035         	movff	_voltmeterDec$2030+3,___flmul@b+3
  2811  005302  ECDB  F036         	call	___flmul	;wreg free
  2812  005306  C032  F05B         	movff	?___flmul,___fltol@f1
  2813  00530A  C033  F05C         	movff	?___flmul+1,___fltol@f1+1
  2814  00530E  C034  F05D         	movff	?___flmul+2,___fltol@f1+2
  2815  005312  C035  F05E         	movff	?___flmul+3,___fltol@f1+3
  2816  005316  ECAB  F02C         	call	___fltol	;wreg free
  2817  00531A  505B               	movf	?___fltol^0,w,c
  2818  00531C  0100               	movlb	0	; () banked
  2819  00531E  6F6E               	movwf	voltmeterDec@vBatt& (0+255),b
  2820  005320                     
  2821                           ; BSR set to: 0
  2822                           ;voltmeter.c: 64:     return vBatt;
  2823  005320  516E               	movf	voltmeterDec@vBatt& (0+255),w,b
  2824  005322                     
  2825                           ; BSR set to: 0
  2826  005322  0012               	return		;funcret
  2827  005324                     __end_of_voltmeterDec:
  2828                           	callstack 0
  2829                           
  2830 ;; *************** function _sendMeanHumi *****************
  2831 ;; Defined at:
  2832 ;;		line 132 in file "sensor.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;		None
  2835 ;; Auto vars:     Size  Location     Type
  2836 ;;  humiMoy       100   12[BANK0 ] unsigned short [50]
  2837 ;;  integer         2  112[BANK0 ] unsigned short 
  2838 ;;  j               1  115[BANK0 ] unsigned char 
  2839 ;;  i               1  114[BANK0 ] unsigned char 
  2840 ;; Return value:  Size  Location     Type
  2841 ;;                  2    6[BANK0 ] unsigned short 
  2842 ;; Registers used:
  2843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2844 ;; Tracked objects:
  2845 ;;		On entry : 0/0
  2846 ;;		On exit  : 0/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2849 ;;      Params:         0       2       0       0       0       0       0       0       0
  2850 ;;      Locals:         0     104       0       0       0       0       0       0       0
  2851 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2852 ;;      Totals:         0     110       0       0       0       0       0       0       0
  2853 ;;Total ram usage:      110 bytes
  2854 ;; Hardware stack levels used: 1
  2855 ;; Hardware stack levels required when called: 2
  2856 ;; This function calls:
  2857 ;;		___fldiv
  2858 ;;		___flmul
  2859 ;;		___fltol
  2860 ;;		___xxtofl
  2861 ;;		_humidityHex
  2862 ;; This function is called by:
  2863 ;;		_main
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           	psect	text2
  2868  005D8A                     __ptext2:
  2869                           	callstack 0
  2870  005D8A                     _sendMeanHumi:
  2871                           	callstack 28
  2872  005D8A                     
  2873                           ;sensor.c: 134:     uint16_t humiMoy[50];;sensor.c: 135:     uint16_t integer;;sensor.c:
      +                           136:     uint8_t i;;sensor.c: 137:     uint8_t j;;sensor.c: 139:     for(j = 0; j < 20;
      +                           j++) {
  2874  005D8A  0E00               	movlw	0
  2875  005D8C  0100               	movlb	0	; () banked
  2876  005D8E  6FD3               	movwf	sendMeanHumi@j& (0+255),b
  2877  005D90                     l4207:
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;sensor.c: 143:         integer = (uint16_t)((humidityHex() / (16384.0 - 2) * 10000));
  2881  005D90  0E00               	movlw	0
  2882  005D92  6E36               	movwf	___flmul@a^0,c
  2883  005D94  0E40               	movlw	64
  2884  005D96  6E37               	movwf	(___flmul@a+1)^0,c
  2885  005D98  0E1C               	movlw	28
  2886  005D9A  6E38               	movwf	(___flmul@a+2)^0,c
  2887  005D9C  0E46               	movlw	70
  2888  005D9E  6E39               	movwf	(___flmul@a+3)^0,c
  2889  005DA0  0E00               	movlw	0
  2890  005DA2  6E1D               	movwf	___fldiv@a^0,c
  2891  005DA4  0EF8               	movlw	248
  2892  005DA6  6E1E               	movwf	(___fldiv@a+1)^0,c
  2893  005DA8  0E7F               	movlw	127
  2894  005DAA  6E1F               	movwf	(___fldiv@a+2)^0,c
  2895  005DAC  0E46               	movlw	70
  2896  005DAE  6E20               	movwf	(___fldiv@a+3)^0,c
  2897  005DB0  EC3A  F027         	call	_humidityHex	;wreg free
  2898  005DB4  C003  F00B         	movff	?_humidityHex,___xxtofl@val
  2899  005DB8  C004  F00C         	movff	?_humidityHex+1,___xxtofl@val+1
  2900  005DBC  6A0D               	clrf	(___xxtofl@val+2)^0,c
  2901  005DBE  6A0E               	clrf	(___xxtofl@val+3)^0,c
  2902  005DC0  0E00               	movlw	0
  2903  005DC2  ECE5  F032         	call	___xxtofl
  2904  005DC6  C00B  F019         	movff	?___xxtofl,___fldiv@b
  2905  005DCA  C00C  F01A         	movff	?___xxtofl+1,___fldiv@b+1
  2906  005DCE  C00D  F01B         	movff	?___xxtofl+2,___fldiv@b+2
  2907  005DD2  C00E  F01C         	movff	?___xxtofl+3,___fldiv@b+3
  2908  005DD6  EC0E  F035         	call	___fldiv	;wreg free
  2909  005DDA  C019  F032         	movff	?___fldiv,___flmul@b
  2910  005DDE  C01A  F033         	movff	?___fldiv+1,___flmul@b+1
  2911  005DE2  C01B  F034         	movff	?___fldiv+2,___flmul@b+2
  2912  005DE6  C01C  F035         	movff	?___fldiv+3,___flmul@b+3
  2913  005DEA  ECDB  F036         	call	___flmul	;wreg free
  2914  005DEE  C032  F05B         	movff	?___flmul,___fltol@f1
  2915  005DF2  C033  F05C         	movff	?___flmul+1,___fltol@f1+1
  2916  005DF6  C034  F05D         	movff	?___flmul+2,___fltol@f1+2
  2917  005DFA  C035  F05E         	movff	?___flmul+3,___fltol@f1+3
  2918  005DFE  ECAB  F02C         	call	___fltol	;wreg free
  2919  005E02  C05B  F0D0         	movff	?___fltol,sendMeanHumi@integer
  2920  005E06  C05C  F0D1         	movff	?___fltol+1,sendMeanHumi@integer+1
  2921  005E0A                     
  2922                           ;sensor.c: 145:         humiMoy[j] = integer;
  2923  005E0A  0100               	movlb	0	; () banked
  2924  005E0C  51D3               	movf	sendMeanHumi@j& (0+255),w,b
  2925  005E0E  0D02               	mullw	2
  2926  005E10  0E6C               	movlw	low sendMeanHumi@humiMoy
  2927  005E12  24F3               	addwf	243,w,c
  2928  005E14  6ED9               	movwf	fsr2l,c
  2929  005E16  0E00               	movlw	high sendMeanHumi@humiMoy
  2930  005E18  20F4               	addwfc	prodh,w,c
  2931  005E1A  6EDA               	movwf	fsr2h,c
  2932  005E1C  C0D0  FFDE         	movff	sendMeanHumi@integer,postinc2
  2933  005E20  C0D1  FFDD         	movff	sendMeanHumi@integer+1,postdec2
  2934  005E24                     
  2935                           ; BSR set to: 0
  2936                           ;sensor.c: 147:         if(j == 19) {
  2937  005E24  0E13               	movlw	19
  2938  005E26  19D3               	xorwf	sendMeanHumi@j& (0+255),w,b
  2939  005E28  A4D8               	btfss	status,2,c
  2940  005E2A  EF19  F02F         	goto	u3571
  2941  005E2E  EF1B  F02F         	goto	u3570
  2942  005E32                     u3571:
  2943  005E32  EF41  F02F         	goto	l4227
  2944  005E36                     u3570:
  2945  005E36                     
  2946                           ; BSR set to: 0
  2947                           ;sensor.c: 149:             integer = humiMoy[0];
  2948  005E36  C06C  F0D0         	movff	sendMeanHumi@humiMoy,sendMeanHumi@integer
  2949  005E3A  C06D  F0D1         	movff	sendMeanHumi@humiMoy+1,sendMeanHumi@integer+1
  2950  005E3E                     
  2951                           ; BSR set to: 0
  2952                           ;sensor.c: 151:             for(i = 1; i < 20; i++) {
  2953  005E3E  0E01               	movlw	1
  2954  005E40  6FD2               	movwf	sendMeanHumi@i& (0+255),b
  2955  005E42                     l4221:
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;sensor.c: 152:                 integer = (integer + humiMoy[i]) / 2;
  2959  005E42  51D2               	movf	sendMeanHumi@i& (0+255),w,b
  2960  005E44  0D02               	mullw	2
  2961  005E46  0E6C               	movlw	low sendMeanHumi@humiMoy
  2962  005E48  24F3               	addwf	243,w,c
  2963  005E4A  6ED9               	movwf	fsr2l,c
  2964  005E4C  0E00               	movlw	high sendMeanHumi@humiMoy
  2965  005E4E  20F4               	addwfc	prodh,w,c
  2966  005E50  6EDA               	movwf	fsr2h,c
  2967  005E52  CFDE F068          	movff	postinc2,??_sendMeanHumi
  2968  005E56  CFDD F069          	movff	postdec2,??_sendMeanHumi+1
  2969  005E5A  51D0               	movf	sendMeanHumi@integer& (0+255),w,b
  2970  005E5C  2768               	addwf	??_sendMeanHumi& (0+255),f,b
  2971  005E5E  51D1               	movf	(sendMeanHumi@integer+1)& (0+255),w,b
  2972  005E60  2369               	addwfc	(??_sendMeanHumi+1)& (0+255),f,b
  2973  005E62  90D8               	bcf	status,0,c
  2974  005E64  3169               	rrcf	(??_sendMeanHumi+1)& (0+255),w,b
  2975  005E66  6F6A               	movwf	(??_sendMeanHumi+2)& (0+255),b
  2976  005E68  3168               	rrcf	??_sendMeanHumi& (0+255),w,b
  2977  005E6A  6FD0               	movwf	sendMeanHumi@integer& (0+255),b
  2978  005E6C  C06A  F0D1         	movff	??_sendMeanHumi+2,sendMeanHumi@integer+1
  2979  005E70                     
  2980                           ; BSR set to: 0
  2981                           ;sensor.c: 153:             }
  2982  005E70  2BD2               	incf	sendMeanHumi@i& (0+255),f,b
  2983  005E72                     
  2984                           ; BSR set to: 0
  2985  005E72  0E13               	movlw	19
  2986  005E74  65D2               	cpfsgt	sendMeanHumi@i& (0+255),b
  2987  005E76  EF3F  F02F         	goto	u3581
  2988  005E7A  EF41  F02F         	goto	u3580
  2989  005E7E                     u3581:
  2990  005E7E  EF21  F02F         	goto	l4221
  2991  005E82                     u3580:
  2992  005E82                     l4227:
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;sensor.c: 166:     }
  2996  005E82  2BD3               	incf	sendMeanHumi@j& (0+255),f,b
  2997  005E84                     
  2998                           ; BSR set to: 0
  2999  005E84  0E13               	movlw	19
  3000  005E86  65D3               	cpfsgt	sendMeanHumi@j& (0+255),b
  3001  005E88  EF48  F02F         	goto	u3591
  3002  005E8C  EF4A  F02F         	goto	u3590
  3003  005E90                     u3591:
  3004  005E90  EFC8  F02E         	goto	l4207
  3005  005E94                     u3590:
  3006  005E94                     
  3007                           ; BSR set to: 0
  3008                           ;sensor.c: 167:     return integer;
  3009  005E94  C0D0  F066         	movff	sendMeanHumi@integer,?_sendMeanHumi
  3010  005E98  C0D1  F067         	movff	sendMeanHumi@integer+1,?_sendMeanHumi+1
  3011  005E9C                     
  3012                           ; BSR set to: 0
  3013  005E9C  0012               	return		;funcret
  3014  005E9E                     __end_of_sendMeanHumi:
  3015                           	callstack 0
  3016                           
  3017 ;; *************** function _refresh_leds *****************
  3018 ;; Defined at:
  3019 ;;		line 62 in file "leds.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;  temperature     2    0[COMRAM] PTR const unsigned short
  3022 ;;		 -> main@temperature(2), 
  3023 ;;  batterie        2    2[COMRAM] PTR const unsigned short
  3024 ;;		 -> main@batterie(2), 
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;		None
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      void 
  3029 ;; Registers used:
  3030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3036 ;;      Params:         4       0       0       0       0       0       0       0       0
  3037 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3038 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3039 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3040 ;;Total ram usage:        6 bytes
  3041 ;; Hardware stack levels used: 1
  3042 ;; Hardware stack levels required when called: 1
  3043 ;; This function calls:
  3044 ;;		_allumer_bleu
  3045 ;;		_allumer_rouge
  3046 ;;		_allumer_rouge_solo
  3047 ;;		_allumer_vert
  3048 ;; This function is called by:
  3049 ;;		_main
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           	psect	text3
  3054  004FC0                     __ptext3:
  3055                           	callstack 0
  3056  004FC0                     _refresh_leds:
  3057                           	callstack 29
  3058  004FC0                     
  3059                           ;leds.c: 63:     if(*temperature >= 1000){
  3060  004FC0  C001  FFD9         	movff	refresh_leds@temperature,fsr2l
  3061  004FC4  C002  FFDA         	movff	refresh_leds@temperature+1,fsr2h
  3062  004FC8  0EE8               	movlw	232
  3063  004FCA  5CDE               	subwf	postinc2,w,c
  3064  004FCC  0E03               	movlw	3
  3065  004FCE  58DE               	subwfb	postinc2,w,c
  3066  004FD0  A0D8               	btfss	status,0,c
  3067  004FD2  EFED  F027         	goto	u3391
  3068  004FD6  EFEF  F027         	goto	u3390
  3069  004FDA                     u3391:
  3070  004FDA  EF06  F028         	goto	l4063
  3071  004FDE                     u3390:
  3072  004FDE                     
  3073                           ;leds.c: 64:         if(*temperature >= 3000) allumer_rouge();
  3074  004FDE  C001  FFD9         	movff	refresh_leds@temperature,fsr2l
  3075  004FE2  C002  FFDA         	movff	refresh_leds@temperature+1,fsr2h
  3076  004FE6  0EB8               	movlw	184
  3077  004FE8  5CDE               	subwf	postinc2,w,c
  3078  004FEA  0E0B               	movlw	11
  3079  004FEC  58DE               	subwfb	postinc2,w,c
  3080  004FEE  A0D8               	btfss	status,0,c
  3081  004FF0  EFFC  F027         	goto	u3401
  3082  004FF4  EFFE  F027         	goto	u3400
  3083  004FF8                     u3401:
  3084  004FF8  EF02  F028         	goto	l4061
  3085  004FFC                     u3400:
  3086  004FFC  EC43  F025         	call	_allumer_rouge	;wreg free
  3087  005000  EF08  F028         	goto	l4065
  3088  005004                     l4061:
  3089  005004  EC47  F025         	call	_allumer_vert	;wreg free
  3090  005008  EF08  F028         	goto	l4065
  3091  00500C                     l4063:
  3092  00500C  EC3F  F025         	call	_allumer_bleu	;wreg free
  3093  005010                     l4065:
  3094                           
  3095                           ;leds.c: 68:     if (*batterie <= 1000){
  3096  005010  C003  FFD9         	movff	refresh_leds@batterie,fsr2l
  3097  005014  C004  FFDA         	movff	refresh_leds@batterie+1,fsr2h
  3098  005018  0EE9               	movlw	233
  3099  00501A  5CDE               	subwf	postinc2,w,c
  3100  00501C  0E03               	movlw	3
  3101  00501E  58DE               	subwfb	postinc2,w,c
  3102  005020  B0D8               	btfsc	status,0,c
  3103  005022  EF15  F028         	goto	u3411
  3104  005026  EF17  F028         	goto	u3410
  3105  00502A                     u3411:
  3106  00502A  EF19  F028         	goto	l477
  3107  00502E                     u3410:
  3108  00502E                     
  3109                           ;leds.c: 69:         allumer_rouge_solo();
  3110  00502E  EC3D  F025         	call	_allumer_rouge_solo	;wreg free
  3111  005032                     l477:
  3112  005032  0012               	return		;funcret
  3113  005034                     __end_of_refresh_leds:
  3114                           	callstack 0
  3115                           
  3116 ;; *************** function _allumer_vert *****************
  3117 ;; Defined at:
  3118 ;;		line 42 in file "leds.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;		None
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;		None
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  1    wreg      void 
  3125 ;; Registers used:
  3126 ;;		None
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3132 ;;      Params:         0       0       0       0       0       0       0       0       0
  3133 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3134 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3135 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3136 ;;Total ram usage:        0 bytes
  3137 ;; Hardware stack levels used: 1
  3138 ;; This function calls:
  3139 ;;		Nothing
  3140 ;; This function is called by:
  3141 ;;		_refresh_leds
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           	psect	text4
  3146  004A8E                     __ptext4:
  3147                           	callstack 0
  3148  004A8E                     _allumer_vert:
  3149                           	callstack 29
  3150  004A8E                     
  3151                           ;leds.c: 43:     LATAbits.LATA6 = 0;
  3152  004A8E  9C83               	bcf	131,6,c	;volatile
  3153                           
  3154                           ;leds.c: 44:     LATAbits.LATA7 = 1;
  3155  004A90  8E83               	bsf	131,7,c	;volatile
  3156                           
  3157                           ;leds.c: 45:     LATAbits.LATA5 = 0;
  3158  004A92  9A83               	bcf	131,5,c	;volatile
  3159  004A94  0012               	return		;funcret
  3160  004A96                     __end_of_allumer_vert:
  3161                           	callstack 0
  3162                           
  3163 ;; *************** function _allumer_rouge_solo *****************
  3164 ;; Defined at:
  3165 ;;		line 50 in file "leds.c"
  3166 ;; Parameters:    Size  Location     Type
  3167 ;;		None
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;		None
  3170 ;; Return value:  Size  Location     Type
  3171 ;;                  1    wreg      void 
  3172 ;; Registers used:
  3173 ;;		None
  3174 ;; Tracked objects:
  3175 ;;		On entry : 0/0
  3176 ;;		On exit  : 0/0
  3177 ;;		Unchanged: 0/0
  3178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3179 ;;      Params:         0       0       0       0       0       0       0       0       0
  3180 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3181 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3182 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3183 ;;Total ram usage:        0 bytes
  3184 ;; Hardware stack levels used: 1
  3185 ;; This function calls:
  3186 ;;		Nothing
  3187 ;; This function is called by:
  3188 ;;		_refresh_leds
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           	psect	text5
  3193  004A7A                     __ptext5:
  3194                           	callstack 0
  3195  004A7A                     _allumer_rouge_solo:
  3196                           	callstack 29
  3197  004A7A                     
  3198                           ;leds.c: 51:     LATAbits.LATA4 = 1;
  3199  004A7A  8883               	bsf	131,4,c	;volatile
  3200  004A7C  0012               	return		;funcret
  3201  004A7E                     __end_of_allumer_rouge_solo:
  3202                           	callstack 0
  3203                           
  3204 ;; *************** function _allumer_rouge *****************
  3205 ;; Defined at:
  3206 ;;		line 26 in file "leds.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;		None
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;		None
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  1    wreg      void 
  3213 ;; Registers used:
  3214 ;;		None
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3220 ;;      Params:         0       0       0       0       0       0       0       0       0
  3221 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3222 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3223 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3224 ;;Total ram usage:        0 bytes
  3225 ;; Hardware stack levels used: 1
  3226 ;; This function calls:
  3227 ;;		Nothing
  3228 ;; This function is called by:
  3229 ;;		_refresh_leds
  3230 ;; This function uses a non-reentrant model
  3231 ;;
  3232                           
  3233                           	psect	text6
  3234  004A86                     __ptext6:
  3235                           	callstack 0
  3236  004A86                     _allumer_rouge:
  3237                           	callstack 29
  3238  004A86                     
  3239                           ;leds.c: 27:     LATAbits.LATA6 = 1;
  3240  004A86  8C83               	bsf	131,6,c	;volatile
  3241                           
  3242                           ;leds.c: 28:     LATAbits.LATA7 = 0;
  3243  004A88  9E83               	bcf	131,7,c	;volatile
  3244                           
  3245                           ;leds.c: 29:     LATAbits.LATA5 = 0;
  3246  004A8A  9A83               	bcf	131,5,c	;volatile
  3247  004A8C  0012               	return		;funcret
  3248  004A8E                     __end_of_allumer_rouge:
  3249                           	callstack 0
  3250                           
  3251 ;; *************** function _allumer_bleu *****************
  3252 ;; Defined at:
  3253 ;;		line 34 in file "leds.c"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;		None
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;		None
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  1    wreg      void 
  3260 ;; Registers used:
  3261 ;;		None
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3267 ;;      Params:         0       0       0       0       0       0       0       0       0
  3268 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3269 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3270 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3271 ;;Total ram usage:        0 bytes
  3272 ;; Hardware stack levels used: 1
  3273 ;; This function calls:
  3274 ;;		Nothing
  3275 ;; This function is called by:
  3276 ;;		_refresh_leds
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           	psect	text7
  3281  004A7E                     __ptext7:
  3282                           	callstack 0
  3283  004A7E                     _allumer_bleu:
  3284                           	callstack 29
  3285  004A7E                     
  3286                           ;leds.c: 35:     LATAbits.LATA6 = 0;
  3287  004A7E  9C83               	bcf	131,6,c	;volatile
  3288                           
  3289                           ;leds.c: 36:     LATAbits.LATA7 = 0;
  3290  004A80  9E83               	bcf	131,7,c	;volatile
  3291                           
  3292                           ;leds.c: 37:     LATAbits.LATA5 = 1;
  3293  004A82  8A83               	bsf	131,5,c	;volatile
  3294  004A84  0012               	return		;funcret
  3295  004A86                     __end_of_allumer_bleu:
  3296                           	callstack 0
  3297                           
  3298 ;; *************** function _printTemperatureLevel *****************
  3299 ;; Defined at:
  3300 ;;		line 100 in file "sensor.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;		None
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;  string          6  120[BANK0 ] unsigned char [6]
  3305 ;;  integer         2  126[BANK0 ] unsigned short 
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  1    wreg      void 
  3308 ;; Registers used:
  3309 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3315 ;;      Params:         0       0       0       0       0       0       0       0       0
  3316 ;;      Locals:         0       8       0       0       0       0       0       0       0
  3317 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3318 ;;      Totals:         0       8       0       0       0       0       0       0       0
  3319 ;;Total ram usage:        8 bytes
  3320 ;; Hardware stack levels used: 1
  3321 ;; Hardware stack levels required when called: 3
  3322 ;; This function calls:
  3323 ;;		_UARTWriteStr
  3324 ;;		_UARTWriteStrLn
  3325 ;;		___lwdiv
  3326 ;;		___lwmod
  3327 ;;		_sendMeanTemp
  3328 ;; This function is called by:
  3329 ;;		_main
  3330 ;; This function uses a non-reentrant model
  3331 ;;
  3332                           
  3333                           	psect	text8
  3334  0053E8                     __ptext8:
  3335                           	callstack 0
  3336  0053E8                     _printTemperatureLevel:
  3337                           	callstack 27
  3338  0053E8                     
  3339                           ;sensor.c: 105:     uint16_t integer = sendMeanTemp();
  3340  0053E8  EC16  F032         	call	_sendMeanTemp	;wreg free
  3341  0053EC  C066  F0DE         	movff	?_sendMeanTemp,printTemperatureLevel@integer
  3342  0053F0  C067  F0DF         	movff	?_sendMeanTemp+1,printTemperatureLevel@integer+1
  3343  0053F4                     
  3344                           ;sensor.c: 106:     char string[6];;sensor.c: 108:     string[0] = (integer / 1000) + '0
      +                          ';
  3345  0053F4  C0DE  F001         	movff	printTemperatureLevel@integer,___lwdiv@dividend
  3346  0053F8  C0DF  F002         	movff	printTemperatureLevel@integer+1,___lwdiv@dividend+1
  3347  0053FC  0E03               	movlw	3
  3348  0053FE  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  3349  005400  0EE8               	movlw	232
  3350  005402  6E03               	movwf	___lwdiv@divisor^0,c
  3351  005404  ECA6  F027         	call	___lwdiv	;wreg free
  3352  005408  5001               	movf	?___lwdiv^0,w,c
  3353  00540A  0F30               	addlw	48
  3354  00540C  0100               	movlb	0	; () banked
  3355  00540E  6FD8               	movwf	printTemperatureLevel@string& (0+255),b
  3356  005410                     
  3357                           ; BSR set to: 0
  3358                           ;sensor.c: 109:     string[1] = (integer / 100) % 10 + '0';
  3359  005410  0E00               	movlw	0
  3360  005412  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  3361  005414  0E64               	movlw	100
  3362  005416  6E03               	movwf	___lwdiv@divisor^0,c
  3363  005418  C0DE  F001         	movff	printTemperatureLevel@integer,___lwdiv@dividend
  3364  00541C  C0DF  F002         	movff	printTemperatureLevel@integer+1,___lwdiv@dividend+1
  3365  005420  ECA6  F027         	call	___lwdiv	;wreg free
  3366  005424  C001  F066         	movff	?___lwdiv,___lwmod@dividend
  3367  005428  C002  F067         	movff	?___lwdiv+1,___lwmod@dividend+1
  3368  00542C  0E00               	movlw	0
  3369  00542E  0100               	movlb	0	; () banked
  3370  005430  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  3371  005432  0E0A               	movlw	10
  3372  005434  6F68               	movwf	___lwmod@divisor& (0+255),b
  3373  005436  EC07  F027         	call	___lwmod	;wreg free
  3374  00543A  0100               	movlb	0	; () banked
  3375  00543C  5166               	movf	?___lwmod& (0+255),w,b
  3376  00543E  0F30               	addlw	48
  3377  005440  6FD9               	movwf	(printTemperatureLevel@string+1)& (0+255),b
  3378  005442                     
  3379                           ; BSR set to: 0
  3380                           ;sensor.c: 110:     string[2] = '.';
  3381  005442  0E2E               	movlw	46
  3382  005444  6FDA               	movwf	(printTemperatureLevel@string+2)& (0+255),b
  3383  005446                     
  3384                           ; BSR set to: 0
  3385                           ;sensor.c: 111:     string[3] = (integer / 10) % 10 + '0';
  3386  005446  0E00               	movlw	0
  3387  005448  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  3388  00544A  0E0A               	movlw	10
  3389  00544C  6E03               	movwf	___lwdiv@divisor^0,c
  3390  00544E  C0DE  F001         	movff	printTemperatureLevel@integer,___lwdiv@dividend
  3391  005452  C0DF  F002         	movff	printTemperatureLevel@integer+1,___lwdiv@dividend+1
  3392  005456  ECA6  F027         	call	___lwdiv	;wreg free
  3393  00545A  C001  F066         	movff	?___lwdiv,___lwmod@dividend
  3394  00545E  C002  F067         	movff	?___lwdiv+1,___lwmod@dividend+1
  3395  005462  0E00               	movlw	0
  3396  005464  0100               	movlb	0	; () banked
  3397  005466  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  3398  005468  0E0A               	movlw	10
  3399  00546A  6F68               	movwf	___lwmod@divisor& (0+255),b
  3400  00546C  EC07  F027         	call	___lwmod	;wreg free
  3401  005470  0100               	movlb	0	; () banked
  3402  005472  5166               	movf	?___lwmod& (0+255),w,b
  3403  005474  0F30               	addlw	48
  3404  005476  6FDB               	movwf	(printTemperatureLevel@string+3)& (0+255),b
  3405  005478                     
  3406                           ; BSR set to: 0
  3407                           ;sensor.c: 112:     string[4] = integer % 10 + '0';
  3408  005478  C0DE  F066         	movff	printTemperatureLevel@integer,___lwmod@dividend
  3409  00547C  C0DF  F067         	movff	printTemperatureLevel@integer+1,___lwmod@dividend+1
  3410  005480  0E00               	movlw	0
  3411  005482  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  3412  005484  0E0A               	movlw	10
  3413  005486  6F68               	movwf	___lwmod@divisor& (0+255),b
  3414  005488  EC07  F027         	call	___lwmod	;wreg free
  3415  00548C  0100               	movlb	0	; () banked
  3416  00548E  5166               	movf	?___lwmod& (0+255),w,b
  3417  005490  0F30               	addlw	48
  3418  005492  6FDC               	movwf	(printTemperatureLevel@string+4)& (0+255),b
  3419  005494                     
  3420                           ; BSR set to: 0
  3421                           ;sensor.c: 113:     string[5] = '\0';
  3422  005494  0E00               	movlw	0
  3423  005496  6FDD               	movwf	(printTemperatureLevel@string+5)& (0+255),b
  3424  005498                     
  3425                           ; BSR set to: 0
  3426                           ;sensor.c: 116:     UARTWriteStr("Temperature : ");
  3427  005498  0E27               	movlw	low STR_53
  3428  00549A  6E02               	movwf	UARTWriteStr@string^0,c
  3429  00549C  0E7F               	movlw	high STR_53
  3430  00549E  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  3431  0054A0  EC1A  F028         	call	_UARTWriteStr	;wreg free
  3432  0054A4                     
  3433                           ;sensor.c: 117:     UARTWriteStrLn(string);
  3434  0054A4  0ED8               	movlw	low printTemperatureLevel@string
  3435  0054A6  6E02               	movwf	UARTWriteStrLn@string^0,c
  3436  0054A8  0E00               	movlw	high printTemperatureLevel@string
  3437  0054AA  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  3438  0054AC  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  3439  0054B0  0012               	return		;funcret
  3440  0054B2                     __end_of_printTemperatureLevel:
  3441                           	callstack 0
  3442                           
  3443 ;; *************** function _sendMeanTemp *****************
  3444 ;; Defined at:
  3445 ;;		line 170 in file "sensor.c"
  3446 ;; Parameters:    Size  Location     Type
  3447 ;;		None
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;  tempMoy       100   12[BANK0 ] unsigned short [50]
  3450 ;;  integer         2  118[BANK0 ] unsigned short 
  3451 ;;  j               1  117[BANK0 ] unsigned char 
  3452 ;;  i               1  116[BANK0 ] unsigned char 
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  2    6[BANK0 ] unsigned short 
  3455 ;; Registers used:
  3456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3462 ;;      Params:         0       2       0       0       0       0       0       0       0
  3463 ;;      Locals:         0     108       0       0       0       0       0       0       0
  3464 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3465 ;;      Totals:         0     114       0       0       0       0       0       0       0
  3466 ;;Total ram usage:      114 bytes
  3467 ;; Hardware stack levels used: 1
  3468 ;; Hardware stack levels required when called: 2
  3469 ;; This function calls:
  3470 ;;		___fladd
  3471 ;;		___fldiv
  3472 ;;		___flmul
  3473 ;;		___fltol
  3474 ;;		___xxtofl
  3475 ;;		_temperatureHex
  3476 ;; This function is called by:
  3477 ;;		_main
  3478 ;;		_printTemperatureLevel
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482                           	psect	text9
  3483  00642C                     __ptext9:
  3484                           	callstack 0
  3485  00642C                     _sendMeanTemp:
  3486                           	callstack 28
  3487  00642C                     
  3488                           ;sensor.c: 172:     uint16_t tempMoy[50];;sensor.c: 173:     uint16_t integer;;sensor.c:
      +                           174:     uint8_t i;;sensor.c: 175:     uint8_t j;;sensor.c: 177:     for(j = 0; j < 20;
      +                           j++) {
  3489  00642C  0E00               	movlw	0
  3490  00642E  0100               	movlb	0	; () banked
  3491  006430  6FD5               	movwf	sendMeanTemp@j& (0+255),b
  3492  006432                     l3563:
  3493                           
  3494                           ; BSR set to: 0
  3495                           ;sensor.c: 181:         integer = (uint16_t)((temperatureHex() / (16384.0 - 2) * 165 - 4
      +                          0) * 100);
  3496  006432  0E00               	movlw	0
  3497  006434  6E4F               	movwf	___fladd@a^0,c
  3498  006436  0E00               	movlw	0
  3499  006438  6E50               	movwf	(___fladd@a+1)^0,c
  3500  00643A  0E20               	movlw	32
  3501  00643C  6E51               	movwf	(___fladd@a+2)^0,c
  3502  00643E  0EC2               	movlw	194
  3503  006440  6E52               	movwf	(___fladd@a+3)^0,c
  3504  006442  0E00               	movlw	0
  3505  006444  6E36               	movwf	___flmul@a^0,c
  3506  006446  0E00               	movlw	0
  3507  006448  6E37               	movwf	(___flmul@a+1)^0,c
  3508  00644A  0E25               	movlw	37
  3509  00644C  6E38               	movwf	(___flmul@a+2)^0,c
  3510  00644E  0E43               	movlw	67
  3511  006450  6E39               	movwf	(___flmul@a+3)^0,c
  3512  006452  0E00               	movlw	0
  3513  006454  6E1D               	movwf	___fldiv@a^0,c
  3514  006456  0EF8               	movlw	248
  3515  006458  6E1E               	movwf	(___fldiv@a+1)^0,c
  3516  00645A  0E7F               	movlw	127
  3517  00645C  6E1F               	movwf	(___fldiv@a+2)^0,c
  3518  00645E  0E46               	movlw	70
  3519  006460  6E20               	movwf	(___fldiv@a+3)^0,c
  3520  006462  ECD5  F026         	call	_temperatureHex	;wreg free
  3521  006466  C003  F00B         	movff	?_temperatureHex,___xxtofl@val
  3522  00646A  C004  F00C         	movff	?_temperatureHex+1,___xxtofl@val+1
  3523  00646E  6A0D               	clrf	(___xxtofl@val+2)^0,c
  3524  006470  6A0E               	clrf	(___xxtofl@val+3)^0,c
  3525  006472  0E00               	movlw	0
  3526  006474  ECE5  F032         	call	___xxtofl
  3527  006478  C00B  F019         	movff	?___xxtofl,___fldiv@b
  3528  00647C  C00C  F01A         	movff	?___xxtofl+1,___fldiv@b+1
  3529  006480  C00D  F01B         	movff	?___xxtofl+2,___fldiv@b+2
  3530  006484  C00E  F01C         	movff	?___xxtofl+3,___fldiv@b+3
  3531  006488  EC0E  F035         	call	___fldiv	;wreg free
  3532  00648C  C019  F032         	movff	?___fldiv,___flmul@b
  3533  006490  C01A  F033         	movff	?___fldiv+1,___flmul@b+1
  3534  006494  C01B  F034         	movff	?___fldiv+2,___flmul@b+2
  3535  006498  C01C  F035         	movff	?___fldiv+3,___flmul@b+3
  3536  00649C  ECDB  F036         	call	___flmul	;wreg free
  3537  0064A0  C032  F04B         	movff	?___flmul,___fladd@b
  3538  0064A4  C033  F04C         	movff	?___flmul+1,___fladd@b+1
  3539  0064A8  C034  F04D         	movff	?___flmul+2,___fladd@b+2
  3540  0064AC  C035  F04E         	movff	?___flmul+3,___fladd@b+3
  3541  0064B0  ECF0  F038         	call	___fladd	;wreg free
  3542  0064B4  C04B  F0D0         	movff	?___fladd,_sendMeanTemp$2035
  3543  0064B8  C04C  F0D1         	movff	?___fladd+1,_sendMeanTemp$2035+1
  3544  0064BC  C04D  F0D2         	movff	?___fladd+2,_sendMeanTemp$2035+2
  3545  0064C0  C04E  F0D3         	movff	?___fladd+3,_sendMeanTemp$2035+3
  3546                           
  3547                           ;sensor.c: 181:         integer = (uint16_t)((temperatureHex() / (16384.0 - 2) * 165 - 4
      +                          0) * 100);
  3548  0064C4  0E00               	movlw	0
  3549  0064C6  6E36               	movwf	___flmul@a^0,c
  3550  0064C8  0E00               	movlw	0
  3551  0064CA  6E37               	movwf	(___flmul@a+1)^0,c
  3552  0064CC  0EC8               	movlw	200
  3553  0064CE  6E38               	movwf	(___flmul@a+2)^0,c
  3554  0064D0  0E42               	movlw	66
  3555  0064D2  6E39               	movwf	(___flmul@a+3)^0,c
  3556  0064D4  C0D0  F032         	movff	_sendMeanTemp$2035,___flmul@b
  3557  0064D8  C0D1  F033         	movff	_sendMeanTemp$2035+1,___flmul@b+1
  3558  0064DC  C0D2  F034         	movff	_sendMeanTemp$2035+2,___flmul@b+2
  3559  0064E0  C0D3  F035         	movff	_sendMeanTemp$2035+3,___flmul@b+3
  3560  0064E4  ECDB  F036         	call	___flmul	;wreg free
  3561  0064E8  C032  F05B         	movff	?___flmul,___fltol@f1
  3562  0064EC  C033  F05C         	movff	?___flmul+1,___fltol@f1+1
  3563  0064F0  C034  F05D         	movff	?___flmul+2,___fltol@f1+2
  3564  0064F4  C035  F05E         	movff	?___flmul+3,___fltol@f1+3
  3565  0064F8  ECAB  F02C         	call	___fltol	;wreg free
  3566  0064FC  C05B  F0D6         	movff	?___fltol,sendMeanTemp@integer
  3567  006500  C05C  F0D7         	movff	?___fltol+1,sendMeanTemp@integer+1
  3568  006504                     
  3569                           ;sensor.c: 183:         if(integer > 5000 || integer < 500) j--;
  3570  006504  0E89               	movlw	137
  3571  006506  0100               	movlb	0	; () banked
  3572  006508  5DD6               	subwf	sendMeanTemp@integer& (0+255),w,b
  3573  00650A  0E13               	movlw	19
  3574  00650C  59D7               	subwfb	(sendMeanTemp@integer+1)& (0+255),w,b
  3575  00650E  B0D8               	btfsc	status,0,c
  3576  006510  EF8C  F032         	goto	u3091
  3577  006514  EF8E  F032         	goto	u3090
  3578  006518                     u3091:
  3579  006518  EF99  F032         	goto	l3569
  3580  00651C                     u3090:
  3581  00651C                     
  3582                           ; BSR set to: 0
  3583  00651C  0EF4               	movlw	244
  3584  00651E  5DD6               	subwf	sendMeanTemp@integer& (0+255),w,b
  3585  006520  0E01               	movlw	1
  3586  006522  59D7               	subwfb	(sendMeanTemp@integer+1)& (0+255),w,b
  3587  006524  B0D8               	btfsc	status,0,c
  3588  006526  EF97  F032         	goto	u3101
  3589  00652A  EF99  F032         	goto	u3100
  3590  00652E                     u3101:
  3591  00652E  EF9C  F032         	goto	l3571
  3592  006532                     u3100:
  3593  006532                     l3569:
  3594                           
  3595                           ; BSR set to: 0
  3596  006532  07D5               	decf	sendMeanTemp@j& (0+255),f,b
  3597  006534  EFA8  F032         	goto	l3573
  3598  006538                     l3571:
  3599                           
  3600                           ; BSR set to: 0
  3601  006538  51D5               	movf	sendMeanTemp@j& (0+255),w,b
  3602  00653A  0D02               	mullw	2
  3603  00653C  0E6C               	movlw	low sendMeanTemp@tempMoy
  3604  00653E  24F3               	addwf	243,w,c
  3605  006540  6ED9               	movwf	fsr2l,c
  3606  006542  0E00               	movlw	high sendMeanTemp@tempMoy
  3607  006544  20F4               	addwfc	prodh,w,c
  3608  006546  6EDA               	movwf	fsr2h,c
  3609  006548  C0D6  FFDE         	movff	sendMeanTemp@integer,postinc2
  3610  00654C  C0D7  FFDD         	movff	sendMeanTemp@integer+1,postdec2
  3611  006550                     l3573:
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;sensor.c: 186:         if(j == 19) {
  3615  006550  0E13               	movlw	19
  3616  006552  19D5               	xorwf	sendMeanTemp@j& (0+255),w,b
  3617  006554  A4D8               	btfss	status,2,c
  3618  006556  EFAF  F032         	goto	u3111
  3619  00655A  EFB1  F032         	goto	u3110
  3620  00655E                     u3111:
  3621  00655E  EFD7  F032         	goto	l3589
  3622  006562                     u3110:
  3623  006562                     
  3624                           ; BSR set to: 0
  3625                           ;sensor.c: 188:             integer = tempMoy[0];
  3626  006562  C06C  F0D6         	movff	sendMeanTemp@tempMoy,sendMeanTemp@integer
  3627  006566  C06D  F0D7         	movff	sendMeanTemp@tempMoy+1,sendMeanTemp@integer+1
  3628  00656A                     
  3629                           ; BSR set to: 0
  3630                           ;sensor.c: 190:             for(i = 1; i < 20; i++) {
  3631  00656A  0E01               	movlw	1
  3632  00656C  6FD4               	movwf	sendMeanTemp@i& (0+255),b
  3633  00656E                     l3583:
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;sensor.c: 191:                 integer = (integer + tempMoy[i]) / 2;
  3637  00656E  51D4               	movf	sendMeanTemp@i& (0+255),w,b
  3638  006570  0D02               	mullw	2
  3639  006572  0E6C               	movlw	low sendMeanTemp@tempMoy
  3640  006574  24F3               	addwf	243,w,c
  3641  006576  6ED9               	movwf	fsr2l,c
  3642  006578  0E00               	movlw	high sendMeanTemp@tempMoy
  3643  00657A  20F4               	addwfc	prodh,w,c
  3644  00657C  6EDA               	movwf	fsr2h,c
  3645  00657E  CFDE F068          	movff	postinc2,??_sendMeanTemp
  3646  006582  CFDD F069          	movff	postdec2,??_sendMeanTemp+1
  3647  006586  51D6               	movf	sendMeanTemp@integer& (0+255),w,b
  3648  006588  2768               	addwf	??_sendMeanTemp& (0+255),f,b
  3649  00658A  51D7               	movf	(sendMeanTemp@integer+1)& (0+255),w,b
  3650  00658C  2369               	addwfc	(??_sendMeanTemp+1)& (0+255),f,b
  3651  00658E  90D8               	bcf	status,0,c
  3652  006590  3169               	rrcf	(??_sendMeanTemp+1)& (0+255),w,b
  3653  006592  6F6A               	movwf	(??_sendMeanTemp+2)& (0+255),b
  3654  006594  3168               	rrcf	??_sendMeanTemp& (0+255),w,b
  3655  006596  6FD6               	movwf	sendMeanTemp@integer& (0+255),b
  3656  006598  C06A  F0D7         	movff	??_sendMeanTemp+2,sendMeanTemp@integer+1
  3657  00659C                     
  3658                           ; BSR set to: 0
  3659                           ;sensor.c: 192:             }
  3660  00659C  2BD4               	incf	sendMeanTemp@i& (0+255),f,b
  3661  00659E                     
  3662                           ; BSR set to: 0
  3663  00659E  0E13               	movlw	19
  3664  0065A0  65D4               	cpfsgt	sendMeanTemp@i& (0+255),b
  3665  0065A2  EFD5  F032         	goto	u3121
  3666  0065A6  EFD7  F032         	goto	u3120
  3667  0065AA                     u3121:
  3668  0065AA  EFB7  F032         	goto	l3583
  3669  0065AE                     u3120:
  3670  0065AE                     l3589:
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;sensor.c: 205:     }
  3674  0065AE  2BD5               	incf	sendMeanTemp@j& (0+255),f,b
  3675  0065B0                     
  3676                           ; BSR set to: 0
  3677  0065B0  0E13               	movlw	19
  3678  0065B2  65D5               	cpfsgt	sendMeanTemp@j& (0+255),b
  3679  0065B4  EFDE  F032         	goto	u3131
  3680  0065B8  EFE0  F032         	goto	u3130
  3681  0065BC                     u3131:
  3682  0065BC  EF19  F032         	goto	l3563
  3683  0065C0                     u3130:
  3684  0065C0                     
  3685                           ; BSR set to: 0
  3686                           ;sensor.c: 206:     return integer;
  3687  0065C0  C0D6  F066         	movff	sendMeanTemp@integer,?_sendMeanTemp
  3688  0065C4  C0D7  F067         	movff	sendMeanTemp@integer+1,?_sendMeanTemp+1
  3689  0065C8                     
  3690                           ; BSR set to: 0
  3691  0065C8  0012               	return		;funcret
  3692  0065CA                     __end_of_sendMeanTemp:
  3693                           	callstack 0
  3694                           
  3695 ;; *************** function _temperatureHex *****************
  3696 ;; Defined at:
  3697 ;;		line 36 in file "sensor.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;		None
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;  value           2    7[COMRAM] unsigned short 
  3702 ;;  trash           1    9[COMRAM] unsigned char 
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  2    2[COMRAM] unsigned short 
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0, cstack
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3712 ;;      Params:         2       0       0       0       0       0       0       0       0
  3713 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3714 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3715 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3716 ;;Total ram usage:        8 bytes
  3717 ;; Hardware stack levels used: 1
  3718 ;; Hardware stack levels required when called: 1
  3719 ;; This function calls:
  3720 ;;		_SPIReceive
  3721 ;; This function is called by:
  3722 ;;		_sendMeanTemp
  3723 ;;		_temperatureDec
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           	psect	text10
  3728  004DAA                     __ptext10:
  3729                           	callstack 0
  3730  004DAA                     _temperatureHex:
  3731                           	callstack 28
  3732  004DAA                     
  3733                           ;sensor.c: 38:     uint16_t value;;sensor.c: 39:     uint8_t trash;;sensor.c: 41:     LA
      +                          TCbits.LATC0 = 0;
  3734  004DAA  9085               	bcf	133,0,c	;volatile
  3735  004DAC                     l2873:
  3736                           
  3737                           ;sensor.c: 45:         trash = SPIReceive(0x00);
  3738  004DAC  0E00               	movlw	0
  3739  004DAE  ECC6  F025         	call	_SPIReceive
  3740  004DB2  6E0A               	movwf	temperatureHex@trash^0,c
  3741  004DB4                     
  3742                           ;sensor.c: 46:     } while ((trash & 0xC0) == 0x00);
  3743  004DB4  C00A  F005         	movff	temperatureHex@trash,??_temperatureHex
  3744  004DB8  0EC0               	movlw	192
  3745  004DBA  1605               	andwf	??_temperatureHex^0,f,c
  3746  004DBC  B4D8               	btfsc	status,2,c
  3747  004DBE  EFE3  F026         	goto	u1971
  3748  004DC2  EFE5  F026         	goto	u1970
  3749  004DC6                     u1971:
  3750  004DC6  EFD6  F026         	goto	l2873
  3751  004DCA                     u1970:
  3752  004DCA  0E00               	movlw	0
  3753  004DCC  ECC6  F025         	call	_SPIReceive
  3754  004DD0                     
  3755                           ;sensor.c: 49:     value = ((uint16_t)SPIReceive(0x00) << 6) | (uint16_t)SPIReceive(0x00
      +                          ) >> 2;
  3756  004DD0  0E00               	movlw	0
  3757  004DD2  ECC6  F025         	call	_SPIReceive
  3758  004DD6  6E05               	movwf	??_temperatureHex^0,c
  3759  004DD8  6A06               	clrf	(??_temperatureHex+1)^0,c
  3760  004DDA  0E06               	movlw	6
  3761  004DDC                     u1985:
  3762  004DDC  90D8               	bcf	status,0,c
  3763  004DDE  3605               	rlcf	??_temperatureHex^0,f,c
  3764  004DE0  3606               	rlcf	(??_temperatureHex+1)^0,f,c
  3765  004DE2  2EE8               	decfsz	wreg,f,c
  3766  004DE4  EFEE  F026         	goto	u1985
  3767  004DE8  0E00               	movlw	0
  3768  004DEA  ECC6  F025         	call	_SPIReceive
  3769  004DEE  6E07               	movwf	(??_temperatureHex+2)^0,c
  3770  004DF0  90D8               	bcf	status,0,c
  3771  004DF2  3207               	rrcf	(??_temperatureHex+2)^0,f,c
  3772  004DF4  90D8               	bcf	status,0,c
  3773  004DF6  3207               	rrcf	(??_temperatureHex+2)^0,f,c
  3774  004DF8  5007               	movf	(??_temperatureHex+2)^0,w,c
  3775  004DFA  1005               	iorwf	??_temperatureHex^0,w,c
  3776  004DFC  6E08               	movwf	temperatureHex@value^0,c
  3777  004DFE  5006               	movf	(??_temperatureHex+1)^0,w,c
  3778  004E00  6E09               	movwf	(temperatureHex@value+1)^0,c
  3779  004E02                     
  3780                           ;sensor.c: 51:     LATCbits.LATC0 = 1;
  3781  004E02  8085               	bsf	133,0,c	;volatile
  3782  004E04                     
  3783                           ;sensor.c: 52:     return value;
  3784  004E04  C008  F003         	movff	temperatureHex@value,?_temperatureHex
  3785  004E08  C009  F004         	movff	temperatureHex@value+1,?_temperatureHex+1
  3786  004E0C  0012               	return		;funcret
  3787  004E0E                     __end_of_temperatureHex:
  3788                           	callstack 0
  3789                           
  3790 ;; *************** function _printHumidityLevel *****************
  3791 ;; Defined at:
  3792 ;;		line 69 in file "sensor.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;		None
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;  string          6   16[BANK0 ] unsigned char [6]
  3797 ;;  humidite        4   10[BANK0 ] float 
  3798 ;;  integer         2   22[BANK0 ] unsigned short 
  3799 ;;  value           2   14[BANK0 ] unsigned short 
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  1    wreg      void 
  3802 ;; Registers used:
  3803 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3809 ;;      Params:         0       0       0       0       0       0       0       0       0
  3810 ;;      Locals:         0      14       0       0       0       0       0       0       0
  3811 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3812 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3813 ;;Total ram usage:       14 bytes
  3814 ;; Hardware stack levels used: 1
  3815 ;; Hardware stack levels required when called: 2
  3816 ;; This function calls:
  3817 ;;		_UARTWriteStr
  3818 ;;		_UARTWriteStrLn
  3819 ;;		___fldiv
  3820 ;;		___flmul
  3821 ;;		___fltol
  3822 ;;		___lwdiv
  3823 ;;		___lwmod
  3824 ;;		___xxtofl
  3825 ;;		_humidityHex
  3826 ;; This function is called by:
  3827 ;;		_main
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831                           	psect	text11
  3832  006128                     __ptext11:
  3833                           	callstack 0
  3834  006128                     _printHumidityLevel:
  3835                           	callstack 28
  3836  006128                     
  3837                           ;sensor.c: 71:     uint16_t value = humidityHex();
  3838  006128  EC3A  F027         	call	_humidityHex	;wreg free
  3839  00612C  C003  F06E         	movff	?_humidityHex,printHumidityLevel@value
  3840  006130  C004  F06F         	movff	?_humidityHex+1,printHumidityLevel@value+1
  3841  006134                     
  3842                           ;sensor.c: 72:     float humidite = (float)(value / (16384.0 - 2) * 100);
  3843  006134  0E00               	movlw	0
  3844  006136  6E1D               	movwf	___fldiv@a^0,c
  3845  006138  0EF8               	movlw	248
  3846  00613A  6E1E               	movwf	(___fldiv@a+1)^0,c
  3847  00613C  0E7F               	movlw	127
  3848  00613E  6E1F               	movwf	(___fldiv@a+2)^0,c
  3849  006140  0E46               	movlw	70
  3850  006142  6E20               	movwf	(___fldiv@a+3)^0,c
  3851  006144  C06E  F00B         	movff	printHumidityLevel@value,___xxtofl@val
  3852  006148  C06F  F00C         	movff	printHumidityLevel@value+1,___xxtofl@val+1
  3853  00614C  6A0D               	clrf	(___xxtofl@val+2)^0,c
  3854  00614E  6A0E               	clrf	(___xxtofl@val+3)^0,c
  3855  006150  0E00               	movlw	0
  3856  006152  ECE5  F032         	call	___xxtofl
  3857  006156  C00B  F019         	movff	?___xxtofl,___fldiv@b
  3858  00615A  C00C  F01A         	movff	?___xxtofl+1,___fldiv@b+1
  3859  00615E  C00D  F01B         	movff	?___xxtofl+2,___fldiv@b+2
  3860  006162  C00E  F01C         	movff	?___xxtofl+3,___fldiv@b+3
  3861  006166  EC0E  F035         	call	___fldiv	;wreg free
  3862  00616A  C019  F032         	movff	?___fldiv,___flmul@b
  3863  00616E  C01A  F033         	movff	?___fldiv+1,___flmul@b+1
  3864  006172  C01B  F034         	movff	?___fldiv+2,___flmul@b+2
  3865  006176  C01C  F035         	movff	?___fldiv+3,___flmul@b+3
  3866  00617A  0E00               	movlw	0
  3867  00617C  6E36               	movwf	___flmul@a^0,c
  3868  00617E  0E00               	movlw	0
  3869  006180  6E37               	movwf	(___flmul@a+1)^0,c
  3870  006182  0EC8               	movlw	200
  3871  006184  6E38               	movwf	(___flmul@a+2)^0,c
  3872  006186  0E42               	movlw	66
  3873  006188  6E39               	movwf	(___flmul@a+3)^0,c
  3874  00618A  ECDB  F036         	call	___flmul	;wreg free
  3875  00618E  C032  F06A         	movff	?___flmul,printHumidityLevel@humidite
  3876  006192  C033  F06B         	movff	?___flmul+1,printHumidityLevel@humidite+1
  3877  006196  C034  F06C         	movff	?___flmul+2,printHumidityLevel@humidite+2
  3878  00619A  C035  F06D         	movff	?___flmul+3,printHumidityLevel@humidite+3
  3879  00619E                     
  3880                           ;sensor.c: 73:     uint16_t integer = (uint16_t)(humidite * 10);
  3881  00619E  0E00               	movlw	0
  3882  0061A0  6E36               	movwf	___flmul@a^0,c
  3883  0061A2  0E00               	movlw	0
  3884  0061A4  6E37               	movwf	(___flmul@a+1)^0,c
  3885  0061A6  0E20               	movlw	32
  3886  0061A8  6E38               	movwf	(___flmul@a+2)^0,c
  3887  0061AA  0E41               	movlw	65
  3888  0061AC  6E39               	movwf	(___flmul@a+3)^0,c
  3889  0061AE  C06A  F032         	movff	printHumidityLevel@humidite,___flmul@b
  3890  0061B2  C06B  F033         	movff	printHumidityLevel@humidite+1,___flmul@b+1
  3891  0061B6  C06C  F034         	movff	printHumidityLevel@humidite+2,___flmul@b+2
  3892  0061BA  C06D  F035         	movff	printHumidityLevel@humidite+3,___flmul@b+3
  3893  0061BE  ECDB  F036         	call	___flmul	;wreg free
  3894  0061C2  C032  F05B         	movff	?___flmul,___fltol@f1
  3895  0061C6  C033  F05C         	movff	?___flmul+1,___fltol@f1+1
  3896  0061CA  C034  F05D         	movff	?___flmul+2,___fltol@f1+2
  3897  0061CE  C035  F05E         	movff	?___flmul+3,___fltol@f1+3
  3898  0061D2  ECAB  F02C         	call	___fltol	;wreg free
  3899  0061D6  C05B  F076         	movff	?___fltol,printHumidityLevel@integer
  3900  0061DA  C05C  F077         	movff	?___fltol+1,printHumidityLevel@integer+1
  3901                           
  3902                           ;sensor.c: 74:     char string[6];;sensor.c: 76:     string[0] = (integer / 1000) + '0';
  3903  0061DE  C076  F001         	movff	printHumidityLevel@integer,___lwdiv@dividend
  3904  0061E2  C077  F002         	movff	printHumidityLevel@integer+1,___lwdiv@dividend+1
  3905  0061E6  0E03               	movlw	3
  3906  0061E8  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  3907  0061EA  0EE8               	movlw	232
  3908  0061EC  6E03               	movwf	___lwdiv@divisor^0,c
  3909  0061EE  ECA6  F027         	call	___lwdiv	;wreg free
  3910  0061F2  5001               	movf	?___lwdiv^0,w,c
  3911  0061F4  0F30               	addlw	48
  3912  0061F6  0100               	movlb	0	; () banked
  3913  0061F8  6F70               	movwf	printHumidityLevel@string& (0+255),b
  3914                           
  3915                           ;sensor.c: 77:     string[1] = (integer / 100) % 10 + '0';
  3916  0061FA  0E00               	movlw	0
  3917  0061FC  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  3918  0061FE  0E64               	movlw	100
  3919  006200  6E03               	movwf	___lwdiv@divisor^0,c
  3920  006202  C076  F001         	movff	printHumidityLevel@integer,___lwdiv@dividend
  3921  006206  C077  F002         	movff	printHumidityLevel@integer+1,___lwdiv@dividend+1
  3922  00620A  ECA6  F027         	call	___lwdiv	;wreg free
  3923  00620E  C001  F066         	movff	?___lwdiv,___lwmod@dividend
  3924  006212  C002  F067         	movff	?___lwdiv+1,___lwmod@dividend+1
  3925  006216  0E00               	movlw	0
  3926  006218  0100               	movlb	0	; () banked
  3927  00621A  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  3928  00621C  0E0A               	movlw	10
  3929  00621E  6F68               	movwf	___lwmod@divisor& (0+255),b
  3930  006220  EC07  F027         	call	___lwmod	;wreg free
  3931  006224  0100               	movlb	0	; () banked
  3932  006226  5166               	movf	?___lwmod& (0+255),w,b
  3933  006228  0F30               	addlw	48
  3934  00622A  6F71               	movwf	(printHumidityLevel@string+1)& (0+255),b
  3935                           
  3936                           ;sensor.c: 78:     string[2] = (integer / 10) % 10 + '0';
  3937  00622C  0E00               	movlw	0
  3938  00622E  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  3939  006230  0E0A               	movlw	10
  3940  006232  6E03               	movwf	___lwdiv@divisor^0,c
  3941  006234  C076  F001         	movff	printHumidityLevel@integer,___lwdiv@dividend
  3942  006238  C077  F002         	movff	printHumidityLevel@integer+1,___lwdiv@dividend+1
  3943  00623C  ECA6  F027         	call	___lwdiv	;wreg free
  3944  006240  C001  F066         	movff	?___lwdiv,___lwmod@dividend
  3945  006244  C002  F067         	movff	?___lwdiv+1,___lwmod@dividend+1
  3946  006248  0E00               	movlw	0
  3947  00624A  0100               	movlb	0	; () banked
  3948  00624C  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  3949  00624E  0E0A               	movlw	10
  3950  006250  6F68               	movwf	___lwmod@divisor& (0+255),b
  3951  006252  EC07  F027         	call	___lwmod	;wreg free
  3952  006256  0100               	movlb	0	; () banked
  3953  006258  5166               	movf	?___lwmod& (0+255),w,b
  3954  00625A  0F30               	addlw	48
  3955  00625C  6F72               	movwf	(printHumidityLevel@string+2)& (0+255),b
  3956  00625E                     
  3957                           ; BSR set to: 0
  3958                           ;sensor.c: 79:     string[3] = '.';
  3959  00625E  0E2E               	movlw	46
  3960  006260  6F73               	movwf	(printHumidityLevel@string+3)& (0+255),b
  3961  006262                     
  3962                           ; BSR set to: 0
  3963                           ;sensor.c: 80:     string[4] = integer % 10 + '0';
  3964  006262  C076  F066         	movff	printHumidityLevel@integer,___lwmod@dividend
  3965  006266  C077  F067         	movff	printHumidityLevel@integer+1,___lwmod@dividend+1
  3966  00626A  0E00               	movlw	0
  3967  00626C  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  3968  00626E  0E0A               	movlw	10
  3969  006270  6F68               	movwf	___lwmod@divisor& (0+255),b
  3970  006272  EC07  F027         	call	___lwmod	;wreg free
  3971  006276  0100               	movlb	0	; () banked
  3972  006278  5166               	movf	?___lwmod& (0+255),w,b
  3973  00627A  0F30               	addlw	48
  3974  00627C  6F74               	movwf	(printHumidityLevel@string+4)& (0+255),b
  3975                           
  3976                           ;sensor.c: 81:     string[5] = '\0';
  3977  00627E  0E00               	movlw	0
  3978  006280  6F75               	movwf	(printHumidityLevel@string+5)& (0+255),b
  3979  006282                     
  3980                           ; BSR set to: 0
  3981                           ;sensor.c: 83:     UARTWriteStrLn(" ");
  3982  006282  0E94               	movlw	low (STR_27+9)
  3983  006284  6E02               	movwf	UARTWriteStrLn@string^0,c
  3984  006286  0E7F               	movlw	high (STR_27+9)
  3985  006288  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  3986  00628A  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  3987  00628E                     
  3988                           ;sensor.c: 84:     UARTWriteStr("Humidite : ");
  3989  00628E  0E52               	movlw	low STR_52
  3990  006290  6E02               	movwf	UARTWriteStr@string^0,c
  3991  006292  0E7F               	movlw	high STR_52
  3992  006294  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  3993  006296  EC1A  F028         	call	_UARTWriteStr	;wreg free
  3994  00629A                     
  3995                           ;sensor.c: 85:     UARTWriteStrLn(string);
  3996  00629A  0E70               	movlw	low printHumidityLevel@string
  3997  00629C  6E02               	movwf	UARTWriteStrLn@string^0,c
  3998  00629E  0E00               	movlw	high printHumidityLevel@string
  3999  0062A0  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  4000  0062A2  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  4001  0062A6  0012               	return		;funcret
  4002  0062A8                     __end_of_printHumidityLevel:
  4003                           	callstack 0
  4004                           
  4005 ;; *************** function _printBatteryLevel *****************
  4006 ;; Defined at:
  4007 ;;		line 74 in file "voltmeter.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;		None
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;  string          6   24[BANK0 ] unsigned char [6]
  4012 ;;  volts           4   10[BANK0 ] float 
  4013 ;;  pourcentBatt    2   30[BANK0 ] unsigned short 
  4014 ;;  vBatt           2   22[BANK0 ] unsigned short 
  4015 ;;  integer         2   20[BANK0 ] unsigned short 
  4016 ;;  value           2   18[BANK0 ] unsigned short 
  4017 ;; Return value:  Size  Location     Type
  4018 ;;                  1    wreg      void 
  4019 ;; Registers used:
  4020 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4021 ;; Tracked objects:
  4022 ;;		On entry : 0/0
  4023 ;;		On exit  : 0/0
  4024 ;;		Unchanged: 0/0
  4025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4026 ;;      Params:         0       0       0       0       0       0       0       0       0
  4027 ;;      Locals:         0      22       0       0       0       0       0       0       0
  4028 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4029 ;;      Totals:         0      22       0       0       0       0       0       0       0
  4030 ;;Total ram usage:       22 bytes
  4031 ;; Hardware stack levels used: 1
  4032 ;; Hardware stack levels required when called: 2
  4033 ;; This function calls:
  4034 ;;		_UARTWriteStr
  4035 ;;		_UARTWriteStrLn
  4036 ;;		___fladd
  4037 ;;		___fldiv
  4038 ;;		___flmul
  4039 ;;		___fltol
  4040 ;;		___lwdiv
  4041 ;;		___lwmod
  4042 ;;		___xxtofl
  4043 ;;		_voltmeterHex
  4044 ;; This function is called by:
  4045 ;;		_main
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text12
  4050  00677E                     __ptext12:
  4051                           	callstack 0
  4052  00677E                     _printBatteryLevel:
  4053                           	callstack 28
  4054  00677E                     
  4055                           ;voltmeter.c: 76:     uint16_t value = voltmeterHex();
  4056  00677E  ECB1  F026         	call	_voltmeterHex	;wreg free
  4057  006782  C001  F072         	movff	?_voltmeterHex,printBatteryLevel@value
  4058  006786  C002  F073         	movff	?_voltmeterHex+1,printBatteryLevel@value+1
  4059  00678A                     
  4060                           ;voltmeter.c: 78:     float volts = (float)((3.2 / 1023) * value);
  4061  00678A  C072  F00B         	movff	printBatteryLevel@value,___xxtofl@val
  4062  00678E  C073  F00C         	movff	printBatteryLevel@value+1,___xxtofl@val+1
  4063  006792  6A0D               	clrf	(___xxtofl@val+2)^0,c
  4064  006794  6A0E               	clrf	(___xxtofl@val+3)^0,c
  4065  006796  0E00               	movlw	0
  4066  006798  ECE5  F032         	call	___xxtofl
  4067  00679C  C00B  F032         	movff	?___xxtofl,___flmul@b
  4068  0067A0  C00C  F033         	movff	?___xxtofl+1,___flmul@b+1
  4069  0067A4  C00D  F034         	movff	?___xxtofl+2,___flmul@b+2
  4070  0067A8  C00E  F035         	movff	?___xxtofl+3,___flmul@b+3
  4071  0067AC  0E0D               	movlw	13
  4072  0067AE  6E36               	movwf	___flmul@a^0,c
  4073  0067B0  0E00               	movlw	0
  4074  0067B2  6E37               	movwf	(___flmul@a+1)^0,c
  4075  0067B4  0E4D               	movlw	77
  4076  0067B6  6E38               	movwf	(___flmul@a+2)^0,c
  4077  0067B8  0E3B               	movlw	59
  4078  0067BA  6E39               	movwf	(___flmul@a+3)^0,c
  4079  0067BC  ECDB  F036         	call	___flmul	;wreg free
  4080  0067C0  C032  F06A         	movff	?___flmul,printBatteryLevel@volts
  4081  0067C4  C033  F06B         	movff	?___flmul+1,printBatteryLevel@volts+1
  4082  0067C8  C034  F06C         	movff	?___flmul+2,printBatteryLevel@volts+2
  4083  0067CC  C035  F06D         	movff	?___flmul+3,printBatteryLevel@volts+3
  4084  0067D0                     
  4085                           ;voltmeter.c: 79:     uint16_t integer = (uint16_t)(volts * 1000) % 10000;
  4086  0067D0  0E00               	movlw	0
  4087  0067D2  6E36               	movwf	___flmul@a^0,c
  4088  0067D4  0E00               	movlw	0
  4089  0067D6  6E37               	movwf	(___flmul@a+1)^0,c
  4090  0067D8  0E7A               	movlw	122
  4091  0067DA  6E38               	movwf	(___flmul@a+2)^0,c
  4092  0067DC  0E44               	movlw	68
  4093  0067DE  6E39               	movwf	(___flmul@a+3)^0,c
  4094  0067E0  C06A  F032         	movff	printBatteryLevel@volts,___flmul@b
  4095  0067E4  C06B  F033         	movff	printBatteryLevel@volts+1,___flmul@b+1
  4096  0067E8  C06C  F034         	movff	printBatteryLevel@volts+2,___flmul@b+2
  4097  0067EC  C06D  F035         	movff	printBatteryLevel@volts+3,___flmul@b+3
  4098  0067F0  ECDB  F036         	call	___flmul	;wreg free
  4099  0067F4  C032  F05B         	movff	?___flmul,___fltol@f1
  4100  0067F8  C033  F05C         	movff	?___flmul+1,___fltol@f1+1
  4101  0067FC  C034  F05D         	movff	?___flmul+2,___fltol@f1+2
  4102  006800  C035  F05E         	movff	?___flmul+3,___fltol@f1+3
  4103  006804  ECAB  F02C         	call	___fltol	;wreg free
  4104  006808  C05B  F066         	movff	?___fltol,___lwmod@dividend
  4105  00680C  C05C  F067         	movff	?___fltol+1,___lwmod@dividend+1
  4106  006810  0E27               	movlw	39
  4107  006812  0100               	movlb	0	; () banked
  4108  006814  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  4109  006816  0E10               	movlw	16
  4110  006818  6F68               	movwf	___lwmod@divisor& (0+255),b
  4111  00681A  EC07  F027         	call	___lwmod	;wreg free
  4112  00681E  C066  F074         	movff	?___lwmod,printBatteryLevel@integer
  4113  006822  C067  F075         	movff	?___lwmod+1,printBatteryLevel@integer+1
  4114  006826                     
  4115                           ;voltmeter.c: 80:     uint16_t vBatt = (uint16_t)(integer * 2.765);
  4116  006826  0EC3               	movlw	195
  4117  006828  6E36               	movwf	___flmul@a^0,c
  4118  00682A  0EF5               	movlw	245
  4119  00682C  6E37               	movwf	(___flmul@a+1)^0,c
  4120  00682E  0E30               	movlw	48
  4121  006830  6E38               	movwf	(___flmul@a+2)^0,c
  4122  006832  0E40               	movlw	64
  4123  006834  6E39               	movwf	(___flmul@a+3)^0,c
  4124  006836  C074  F00B         	movff	printBatteryLevel@integer,___xxtofl@val
  4125  00683A  C075  F00C         	movff	printBatteryLevel@integer+1,___xxtofl@val+1
  4126  00683E  6A0D               	clrf	(___xxtofl@val+2)^0,c
  4127  006840  6A0E               	clrf	(___xxtofl@val+3)^0,c
  4128  006842  0E00               	movlw	0
  4129  006844  ECE5  F032         	call	___xxtofl
  4130  006848  C00B  F032         	movff	?___xxtofl,___flmul@b
  4131  00684C  C00C  F033         	movff	?___xxtofl+1,___flmul@b+1
  4132  006850  C00D  F034         	movff	?___xxtofl+2,___flmul@b+2
  4133  006854  C00E  F035         	movff	?___xxtofl+3,___flmul@b+3
  4134  006858  ECDB  F036         	call	___flmul	;wreg free
  4135  00685C  C032  F05B         	movff	?___flmul,___fltol@f1
  4136  006860  C033  F05C         	movff	?___flmul+1,___fltol@f1+1
  4137  006864  C034  F05D         	movff	?___flmul+2,___fltol@f1+2
  4138  006868  C035  F05E         	movff	?___flmul+3,___fltol@f1+3
  4139  00686C  ECAB  F02C         	call	___fltol	;wreg free
  4140  006870  C05B  F076         	movff	?___fltol,printBatteryLevel@vBatt
  4141  006874  C05C  F077         	movff	?___fltol+1,printBatteryLevel@vBatt+1
  4142  006878                     
  4143                           ;voltmeter.c: 81:     uint16_t pourcentBatt = (uint16_t)(((float)vBatt / 10.0 - 700.0) /
      +                           (840.0 - 700.0) * 10000);
  4144  006878  0E00               	movlw	0
  4145  00687A  6E4F               	movwf	___fladd@a^0,c
  4146  00687C  0E00               	movlw	0
  4147  00687E  6E50               	movwf	(___fladd@a+1)^0,c
  4148  006880  0E2F               	movlw	47
  4149  006882  6E51               	movwf	(___fladd@a+2)^0,c
  4150  006884  0EC4               	movlw	196
  4151  006886  6E52               	movwf	(___fladd@a+3)^0,c
  4152  006888  0E00               	movlw	0
  4153  00688A  6E1D               	movwf	___fldiv@a^0,c
  4154  00688C  0E00               	movlw	0
  4155  00688E  6E1E               	movwf	(___fldiv@a+1)^0,c
  4156  006890  0E20               	movlw	32
  4157  006892  6E1F               	movwf	(___fldiv@a+2)^0,c
  4158  006894  0E41               	movlw	65
  4159  006896  6E20               	movwf	(___fldiv@a+3)^0,c
  4160  006898  C076  F00B         	movff	printBatteryLevel@vBatt,___xxtofl@val
  4161  00689C  C077  F00C         	movff	printBatteryLevel@vBatt+1,___xxtofl@val+1
  4162  0068A0  6A0D               	clrf	(___xxtofl@val+2)^0,c
  4163  0068A2  6A0E               	clrf	(___xxtofl@val+3)^0,c
  4164  0068A4  0E00               	movlw	0
  4165  0068A6  ECE5  F032         	call	___xxtofl
  4166  0068AA  C00B  F019         	movff	?___xxtofl,___fldiv@b
  4167  0068AE  C00C  F01A         	movff	?___xxtofl+1,___fldiv@b+1
  4168  0068B2  C00D  F01B         	movff	?___xxtofl+2,___fldiv@b+2
  4169  0068B6  C00E  F01C         	movff	?___xxtofl+3,___fldiv@b+3
  4170  0068BA  EC0E  F035         	call	___fldiv	;wreg free
  4171  0068BE  C019  F04B         	movff	?___fldiv,___fladd@b
  4172  0068C2  C01A  F04C         	movff	?___fldiv+1,___fladd@b+1
  4173  0068C6  C01B  F04D         	movff	?___fldiv+2,___fladd@b+2
  4174  0068CA  C01C  F04E         	movff	?___fldiv+3,___fladd@b+3
  4175  0068CE  ECF0  F038         	call	___fladd	;wreg free
  4176  0068D2  C04B  F06E         	movff	?___fladd,_printBatteryLevel$2033
  4177  0068D6  C04C  F06F         	movff	?___fladd+1,_printBatteryLevel$2033+1
  4178  0068DA  C04D  F070         	movff	?___fladd+2,_printBatteryLevel$2033+2
  4179  0068DE  C04E  F071         	movff	?___fladd+3,_printBatteryLevel$2033+3
  4180                           
  4181                           ;voltmeter.c: 81:     uint16_t pourcentBatt = (uint16_t)(((float)vBatt / 10.0 - 700.0) /
      +                           (840.0 - 700.0) * 10000);
  4182  0068E2  0E00               	movlw	0
  4183  0068E4  6E36               	movwf	___flmul@a^0,c
  4184  0068E6  0E40               	movlw	64
  4185  0068E8  6E37               	movwf	(___flmul@a+1)^0,c
  4186  0068EA  0E1C               	movlw	28
  4187  0068EC  6E38               	movwf	(___flmul@a+2)^0,c
  4188  0068EE  0E46               	movlw	70
  4189  0068F0  6E39               	movwf	(___flmul@a+3)^0,c
  4190  0068F2  0E00               	movlw	0
  4191  0068F4  6E1D               	movwf	___fldiv@a^0,c
  4192  0068F6  0E00               	movlw	0
  4193  0068F8  6E1E               	movwf	(___fldiv@a+1)^0,c
  4194  0068FA  0E0C               	movlw	12
  4195  0068FC  6E1F               	movwf	(___fldiv@a+2)^0,c
  4196  0068FE  0E43               	movlw	67
  4197  006900  6E20               	movwf	(___fldiv@a+3)^0,c
  4198  006902  C06E  F019         	movff	_printBatteryLevel$2033,___fldiv@b
  4199  006906  C06F  F01A         	movff	_printBatteryLevel$2033+1,___fldiv@b+1
  4200  00690A  C070  F01B         	movff	_printBatteryLevel$2033+2,___fldiv@b+2
  4201  00690E  C071  F01C         	movff	_printBatteryLevel$2033+3,___fldiv@b+3
  4202  006912  EC0E  F035         	call	___fldiv	;wreg free
  4203  006916  C019  F032         	movff	?___fldiv,___flmul@b
  4204  00691A  C01A  F033         	movff	?___fldiv+1,___flmul@b+1
  4205  00691E  C01B  F034         	movff	?___fldiv+2,___flmul@b+2
  4206  006922  C01C  F035         	movff	?___fldiv+3,___flmul@b+3
  4207  006926  ECDB  F036         	call	___flmul	;wreg free
  4208  00692A  C032  F05B         	movff	?___flmul,___fltol@f1
  4209  00692E  C033  F05C         	movff	?___flmul+1,___fltol@f1+1
  4210  006932  C034  F05D         	movff	?___flmul+2,___fltol@f1+2
  4211  006936  C035  F05E         	movff	?___flmul+3,___fltol@f1+3
  4212  00693A  ECAB  F02C         	call	___fltol	;wreg free
  4213  00693E  C05B  F07E         	movff	?___fltol,printBatteryLevel@pourcentBatt
  4214  006942  C05C  F07F         	movff	?___fltol+1,printBatteryLevel@pourcentBatt+1
  4215  006946                     
  4216                           ;voltmeter.c: 83:     char string[6];;voltmeter.c: 85:     string[0] = (pourcentBatt / 1
      +                          000) + '0';
  4217  006946  C07E  F001         	movff	printBatteryLevel@pourcentBatt,___lwdiv@dividend
  4218  00694A  C07F  F002         	movff	printBatteryLevel@pourcentBatt+1,___lwdiv@dividend+1
  4219  00694E  0E03               	movlw	3
  4220  006950  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  4221  006952  0EE8               	movlw	232
  4222  006954  6E03               	movwf	___lwdiv@divisor^0,c
  4223  006956  ECA6  F027         	call	___lwdiv	;wreg free
  4224  00695A  5001               	movf	?___lwdiv^0,w,c
  4225  00695C  0F30               	addlw	48
  4226  00695E  0100               	movlb	0	; () banked
  4227  006960  6F78               	movwf	printBatteryLevel@string& (0+255),b
  4228  006962                     
  4229                           ; BSR set to: 0
  4230                           ;voltmeter.c: 86:     string[1] = (pourcentBatt / 100) % 10 + '0';
  4231  006962  0E00               	movlw	0
  4232  006964  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  4233  006966  0E64               	movlw	100
  4234  006968  6E03               	movwf	___lwdiv@divisor^0,c
  4235  00696A  C07E  F001         	movff	printBatteryLevel@pourcentBatt,___lwdiv@dividend
  4236  00696E  C07F  F002         	movff	printBatteryLevel@pourcentBatt+1,___lwdiv@dividend+1
  4237  006972  ECA6  F027         	call	___lwdiv	;wreg free
  4238  006976  C001  F066         	movff	?___lwdiv,___lwmod@dividend
  4239  00697A  C002  F067         	movff	?___lwdiv+1,___lwmod@dividend+1
  4240  00697E  0E00               	movlw	0
  4241  006980  0100               	movlb	0	; () banked
  4242  006982  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  4243  006984  0E0A               	movlw	10
  4244  006986  6F68               	movwf	___lwmod@divisor& (0+255),b
  4245  006988  EC07  F027         	call	___lwmod	;wreg free
  4246  00698C  0100               	movlb	0	; () banked
  4247  00698E  5166               	movf	?___lwmod& (0+255),w,b
  4248  006990  0F30               	addlw	48
  4249  006992  6F79               	movwf	(printBatteryLevel@string+1)& (0+255),b
  4250  006994                     
  4251                           ; BSR set to: 0
  4252                           ;voltmeter.c: 87:     string[2] = '.';
  4253  006994  0E2E               	movlw	46
  4254  006996  6F7A               	movwf	(printBatteryLevel@string+2)& (0+255),b
  4255  006998                     
  4256                           ; BSR set to: 0
  4257                           ;voltmeter.c: 88:     string[3] = (pourcentBatt / 10) % 10 + '0';
  4258  006998  0E00               	movlw	0
  4259  00699A  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  4260  00699C  0E0A               	movlw	10
  4261  00699E  6E03               	movwf	___lwdiv@divisor^0,c
  4262  0069A0  C07E  F001         	movff	printBatteryLevel@pourcentBatt,___lwdiv@dividend
  4263  0069A4  C07F  F002         	movff	printBatteryLevel@pourcentBatt+1,___lwdiv@dividend+1
  4264  0069A8  ECA6  F027         	call	___lwdiv	;wreg free
  4265  0069AC  C001  F066         	movff	?___lwdiv,___lwmod@dividend
  4266  0069B0  C002  F067         	movff	?___lwdiv+1,___lwmod@dividend+1
  4267  0069B4  0E00               	movlw	0
  4268  0069B6  0100               	movlb	0	; () banked
  4269  0069B8  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  4270  0069BA  0E0A               	movlw	10
  4271  0069BC  6F68               	movwf	___lwmod@divisor& (0+255),b
  4272  0069BE  EC07  F027         	call	___lwmod	;wreg free
  4273  0069C2  0100               	movlb	0	; () banked
  4274  0069C4  5166               	movf	?___lwmod& (0+255),w,b
  4275  0069C6  0F30               	addlw	48
  4276  0069C8  6F7B               	movwf	(printBatteryLevel@string+3)& (0+255),b
  4277  0069CA                     
  4278                           ; BSR set to: 0
  4279                           ;voltmeter.c: 89:     string[4] = pourcentBatt % 10 + '0';
  4280  0069CA  C07E  F066         	movff	printBatteryLevel@pourcentBatt,___lwmod@dividend
  4281  0069CE  C07F  F067         	movff	printBatteryLevel@pourcentBatt+1,___lwmod@dividend+1
  4282  0069D2  0E00               	movlw	0
  4283  0069D4  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  4284  0069D6  0E0A               	movlw	10
  4285  0069D8  6F68               	movwf	___lwmod@divisor& (0+255),b
  4286  0069DA  EC07  F027         	call	___lwmod	;wreg free
  4287  0069DE  0100               	movlb	0	; () banked
  4288  0069E0  5166               	movf	?___lwmod& (0+255),w,b
  4289  0069E2  0F30               	addlw	48
  4290  0069E4  6F7C               	movwf	(printBatteryLevel@string+4)& (0+255),b
  4291  0069E6                     
  4292                           ; BSR set to: 0
  4293                           ;voltmeter.c: 90:     string[5] = '\0';
  4294  0069E6  0E00               	movlw	0
  4295  0069E8  6F7D               	movwf	(printBatteryLevel@string+5)& (0+255),b
  4296  0069EA                     
  4297                           ; BSR set to: 0
  4298                           ;voltmeter.c: 92:     UARTWriteStrLn(" ");
  4299  0069EA  0E94               	movlw	low (STR_27+9)
  4300  0069EC  6E02               	movwf	UARTWriteStrLn@string^0,c
  4301  0069EE  0E7F               	movlw	high (STR_27+9)
  4302  0069F0  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  4303  0069F2  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  4304  0069F6                     
  4305                           ;voltmeter.c: 93:     UARTWriteStr("Pourcentage de batterie : ");
  4306  0069F6  0E43               	movlw	low STR_49
  4307  0069F8  6E02               	movwf	UARTWriteStr@string^0,c
  4308  0069FA  0E7D               	movlw	high STR_49
  4309  0069FC  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  4310  0069FE  EC1A  F028         	call	_UARTWriteStr	;wreg free
  4311  006A02                     
  4312                           ;voltmeter.c: 94:     UARTWriteStr(string);
  4313  006A02  0E78               	movlw	low printBatteryLevel@string
  4314  006A04  6E02               	movwf	UARTWriteStr@string^0,c
  4315  006A06  0E00               	movlw	high printBatteryLevel@string
  4316  006A08  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  4317  006A0A  EC1A  F028         	call	_UARTWriteStr	;wreg free
  4318  006A0E                     
  4319                           ;voltmeter.c: 95:     UARTWriteStrLn("%");
  4320  006A0E  0EFC               	movlw	low STR_50
  4321  006A10  6E02               	movwf	UARTWriteStrLn@string^0,c
  4322  006A12  0E7F               	movlw	high STR_50
  4323  006A14  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  4324  006A16  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  4325  006A1A  0012               	return		;funcret
  4326  006A1C                     __end_of_printBatteryLevel:
  4327                           	callstack 0
  4328                           
  4329 ;; *************** function _pourcentBatt *****************
  4330 ;; Defined at:
  4331 ;;		line 67 in file "voltmeter.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;		None
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;  pourcentBatt    2   16[BANK0 ] unsigned short 
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  2    6[BANK0 ] unsigned short 
  4338 ;; Registers used:
  4339 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4345 ;;      Params:         0       2       0       0       0       0       0       0       0
  4346 ;;      Locals:         0      10       0       0       0       0       0       0       0
  4347 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4348 ;;      Totals:         0      12       0       0       0       0       0       0       0
  4349 ;;Total ram usage:       12 bytes
  4350 ;; Hardware stack levels used: 1
  4351 ;; Hardware stack levels required when called: 1
  4352 ;; This function calls:
  4353 ;;		___fladd
  4354 ;;		___fldiv
  4355 ;;		___flmul
  4356 ;;		___fltol
  4357 ;;		___xxtofl
  4358 ;;		_voltmeterHex
  4359 ;; This function is called by:
  4360 ;;		_main
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           	psect	text13
  4365  005C7A                     __ptext13:
  4366                           	callstack 0
  4367  005C7A                     _pourcentBatt:
  4368                           	callstack 29
  4369  005C7A                     
  4370                           ;voltmeter.c: 69:     uint16_t pourcentBattDec = (uint16_t)(((((3.2 / 1023) * voltmeterH
      +                          ex()) * 100) - 253.16) / (303.8 - 253.16) * 10000);
  4371  005C7A  0E0D               	movlw	13
  4372  005C7C  6E36               	movwf	___flmul@a^0,c
  4373  005C7E  0E00               	movlw	0
  4374  005C80  6E37               	movwf	(___flmul@a+1)^0,c
  4375  005C82  0E4D               	movlw	77
  4376  005C84  6E38               	movwf	(___flmul@a+2)^0,c
  4377  005C86  0E3B               	movlw	59
  4378  005C88  6E39               	movwf	(___flmul@a+3)^0,c
  4379  005C8A  ECB1  F026         	call	_voltmeterHex	;wreg free
  4380  005C8E  C001  F00B         	movff	?_voltmeterHex,___xxtofl@val
  4381  005C92  C002  F00C         	movff	?_voltmeterHex+1,___xxtofl@val+1
  4382  005C96  6A0D               	clrf	(___xxtofl@val+2)^0,c
  4383  005C98  6A0E               	clrf	(___xxtofl@val+3)^0,c
  4384  005C9A  0E00               	movlw	0
  4385  005C9C  ECE5  F032         	call	___xxtofl
  4386  005CA0  C00B  F032         	movff	?___xxtofl,___flmul@b
  4387  005CA4  C00C  F033         	movff	?___xxtofl+1,___flmul@b+1
  4388  005CA8  C00D  F034         	movff	?___xxtofl+2,___flmul@b+2
  4389  005CAC  C00E  F035         	movff	?___xxtofl+3,___flmul@b+3
  4390  005CB0  ECDB  F036         	call	___flmul	;wreg free
  4391  005CB4  C032  F068         	movff	?___flmul,_pourcentBatt$2031
  4392  005CB8  C033  F069         	movff	?___flmul+1,_pourcentBatt$2031+1
  4393  005CBC  C034  F06A         	movff	?___flmul+2,_pourcentBatt$2031+2
  4394  005CC0  C035  F06B         	movff	?___flmul+3,_pourcentBatt$2031+3
  4395                           
  4396                           ;voltmeter.c: 69:     uint16_t pourcentBattDec = (uint16_t)(((((3.2 / 1023) * voltmeterH
      +                          ex()) * 100) - 253.16) / (303.8 - 253.16) * 10000);
  4397  005CC4  0E5C               	movlw	92
  4398  005CC6  6E1D               	movwf	___fldiv@a^0,c
  4399  005CC8  0E8F               	movlw	143
  4400  005CCA  6E1E               	movwf	(___fldiv@a+1)^0,c
  4401  005CCC  0E4A               	movlw	74
  4402  005CCE  6E1F               	movwf	(___fldiv@a+2)^0,c
  4403  005CD0  0E42               	movlw	66
  4404  005CD2  6E20               	movwf	(___fldiv@a+3)^0,c
  4405  005CD4  0EF6               	movlw	246
  4406  005CD6  6E4F               	movwf	___fladd@a^0,c
  4407  005CD8  0E28               	movlw	40
  4408  005CDA  6E50               	movwf	(___fladd@a+1)^0,c
  4409  005CDC  0E7D               	movlw	125
  4410  005CDE  6E51               	movwf	(___fladd@a+2)^0,c
  4411  005CE0  0EC3               	movlw	195
  4412  005CE2  6E52               	movwf	(___fladd@a+3)^0,c
  4413  005CE4  0E00               	movlw	0
  4414  005CE6  6E36               	movwf	___flmul@a^0,c
  4415  005CE8  0E00               	movlw	0
  4416  005CEA  6E37               	movwf	(___flmul@a+1)^0,c
  4417  005CEC  0EC8               	movlw	200
  4418  005CEE  6E38               	movwf	(___flmul@a+2)^0,c
  4419  005CF0  0E42               	movlw	66
  4420  005CF2  6E39               	movwf	(___flmul@a+3)^0,c
  4421  005CF4  C068  F032         	movff	_pourcentBatt$2031,___flmul@b
  4422  005CF8  C069  F033         	movff	_pourcentBatt$2031+1,___flmul@b+1
  4423  005CFC  C06A  F034         	movff	_pourcentBatt$2031+2,___flmul@b+2
  4424  005D00  C06B  F035         	movff	_pourcentBatt$2031+3,___flmul@b+3
  4425  005D04  ECDB  F036         	call	___flmul	;wreg free
  4426  005D08  C032  F04B         	movff	?___flmul,___fladd@b
  4427  005D0C  C033  F04C         	movff	?___flmul+1,___fladd@b+1
  4428  005D10  C034  F04D         	movff	?___flmul+2,___fladd@b+2
  4429  005D14  C035  F04E         	movff	?___flmul+3,___fladd@b+3
  4430  005D18  ECF0  F038         	call	___fladd	;wreg free
  4431  005D1C  C04B  F019         	movff	?___fladd,___fldiv@b
  4432  005D20  C04C  F01A         	movff	?___fladd+1,___fldiv@b+1
  4433  005D24  C04D  F01B         	movff	?___fladd+2,___fldiv@b+2
  4434  005D28  C04E  F01C         	movff	?___fladd+3,___fldiv@b+3
  4435  005D2C  EC0E  F035         	call	___fldiv	;wreg free
  4436  005D30  C019  F06C         	movff	?___fldiv,_pourcentBatt$2032
  4437  005D34  C01A  F06D         	movff	?___fldiv+1,_pourcentBatt$2032+1
  4438  005D38  C01B  F06E         	movff	?___fldiv+2,_pourcentBatt$2032+2
  4439  005D3C  C01C  F06F         	movff	?___fldiv+3,_pourcentBatt$2032+3
  4440                           
  4441                           ;voltmeter.c: 69:     uint16_t pourcentBattDec = (uint16_t)(((((3.2 / 1023) * voltmeterH
      +                          ex()) * 100) - 253.16) / (303.8 - 253.16) * 10000);
  4442  005D40  0E00               	movlw	0
  4443  005D42  6E36               	movwf	___flmul@a^0,c
  4444  005D44  0E40               	movlw	64
  4445  005D46  6E37               	movwf	(___flmul@a+1)^0,c
  4446  005D48  0E1C               	movlw	28
  4447  005D4A  6E38               	movwf	(___flmul@a+2)^0,c
  4448  005D4C  0E46               	movlw	70
  4449  005D4E  6E39               	movwf	(___flmul@a+3)^0,c
  4450  005D50  C06C  F032         	movff	_pourcentBatt$2032,___flmul@b
  4451  005D54  C06D  F033         	movff	_pourcentBatt$2032+1,___flmul@b+1
  4452  005D58  C06E  F034         	movff	_pourcentBatt$2032+2,___flmul@b+2
  4453  005D5C  C06F  F035         	movff	_pourcentBatt$2032+3,___flmul@b+3
  4454  005D60  ECDB  F036         	call	___flmul	;wreg free
  4455  005D64  C032  F05B         	movff	?___flmul,___fltol@f1
  4456  005D68  C033  F05C         	movff	?___flmul+1,___fltol@f1+1
  4457  005D6C  C034  F05D         	movff	?___flmul+2,___fltol@f1+2
  4458  005D70  C035  F05E         	movff	?___flmul+3,___fltol@f1+3
  4459  005D74  ECAB  F02C         	call	___fltol	;wreg free
  4460  005D78  C05B  F070         	movff	?___fltol,pourcentBatt@pourcentBattDec
  4461  005D7C  C05C  F071         	movff	?___fltol+1,pourcentBatt@pourcentBattDec+1
  4462  005D80                     
  4463                           ;voltmeter.c: 71:     return pourcentBattDec;
  4464  005D80  C070  F066         	movff	pourcentBatt@pourcentBattDec,?_pourcentBatt
  4465  005D84  C071  F067         	movff	pourcentBatt@pourcentBattDec+1,?_pourcentBatt+1
  4466  005D88  0012               	return		;funcret
  4467  005D8A                     __end_of_pourcentBatt:
  4468                           	callstack 0
  4469                           
  4470 ;; *************** function _voltmeterHex *****************
  4471 ;; Defined at:
  4472 ;;		line 47 in file "voltmeter.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;		None
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;  value           2    6[COMRAM] unsigned short 
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  2    0[COMRAM] unsigned short 
  4479 ;; Registers used:
  4480 ;;		wreg, status,2, status,0
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4486 ;;      Params:         2       0       0       0       0       0       0       0       0
  4487 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4488 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4489 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4490 ;;Total ram usage:        8 bytes
  4491 ;; Hardware stack levels used: 1
  4492 ;; This function calls:
  4493 ;;		Nothing
  4494 ;; This function is called by:
  4495 ;;		_voltmeterDec
  4496 ;;		_pourcentBatt
  4497 ;;		_printBatteryLevel
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           	psect	text14
  4502  004D62                     __ptext14:
  4503                           	callstack 0
  4504  004D62                     _voltmeterHex:
  4505                           	callstack 29
  4506  004D62                     
  4507                           ;voltmeter.c: 49:     uint16_t value;;voltmeter.c: 52:     ADCON0bits.ADGO = 1;
  4508  004D62  8060               	bsf	96,0,c	;volatile
  4509  004D64                     l277:
  4510  004D64  B060               	btfsc	96,0,c	;volatile
  4511  004D66  EFB7  F026         	goto	u3201
  4512  004D6A  EFB9  F026         	goto	u3200
  4513  004D6E                     u3201:
  4514  004D6E  EFB2  F026         	goto	l277
  4515  004D72                     u3200:
  4516  004D72                     
  4517                           ;voltmeter.c: 54:     value = ((uint16_t)ADRESH << 2) | ((uint16_t)ADRESL >> 6);
  4518  004D72  CF63 F003          	movff	3939,??_voltmeterHex	;volatile
  4519  004D76  0E06               	movlw	6
  4520  004D78  6E04               	movwf	(??_voltmeterHex+1)^0,c
  4521  004D7A                     u3215:
  4522  004D7A  90D8               	bcf	status,0,c
  4523  004D7C  3203               	rrcf	??_voltmeterHex^0,f,c
  4524  004D7E  2E04               	decfsz	(??_voltmeterHex+1)^0,f,c
  4525  004D80  EFBD  F026         	goto	u3215
  4526  004D84  5003               	movf	??_voltmeterHex^0,w,c
  4527  004D86  CF64 F005          	movff	3940,??_voltmeterHex+2	;volatile
  4528  004D8A  6A06               	clrf	(??_voltmeterHex+3)^0,c
  4529  004D8C  90D8               	bcf	status,0,c
  4530  004D8E  3605               	rlcf	(??_voltmeterHex+2)^0,f,c
  4531  004D90  3606               	rlcf	(??_voltmeterHex+3)^0,f,c
  4532  004D92  90D8               	bcf	status,0,c
  4533  004D94  3605               	rlcf	(??_voltmeterHex+2)^0,f,c
  4534  004D96  3606               	rlcf	(??_voltmeterHex+3)^0,f,c
  4535  004D98  1005               	iorwf	(??_voltmeterHex+2)^0,w,c
  4536  004D9A  6E07               	movwf	voltmeterHex@value^0,c
  4537  004D9C  5006               	movf	(??_voltmeterHex+3)^0,w,c
  4538  004D9E  6E08               	movwf	(voltmeterHex@value+1)^0,c
  4539  004DA0                     
  4540                           ;voltmeter.c: 56:     return value;
  4541  004DA0  C007  F001         	movff	voltmeterHex@value,?_voltmeterHex
  4542  004DA4  C008  F002         	movff	voltmeterHex@value+1,?_voltmeterHex+1
  4543  004DA8  0012               	return		;funcret
  4544  004DAA                     __end_of_voltmeterHex:
  4545                           	callstack 0
  4546                           
  4547 ;; *************** function ___fladd *****************
  4548 ;; Defined at:
  4549 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sprcadd.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  b               4   74[COMRAM] unsigned short 
  4552 ;;  a               4   78[COMRAM] unsigned short 
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;  grs             1   89[COMRAM] unsigned char 
  4555 ;;  bexp            1   88[COMRAM] unsigned char 
  4556 ;;  aexp            1   87[COMRAM] unsigned char 
  4557 ;;  signs           1   86[COMRAM] unsigned char 
  4558 ;; Return value:  Size  Location     Type
  4559 ;;                  4   74[COMRAM] unsigned char 
  4560 ;; Registers used:
  4561 ;;		wreg, status,2, status,0
  4562 ;; Tracked objects:
  4563 ;;		On entry : 0/0
  4564 ;;		On exit  : 0/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4567 ;;      Params:         8       0       0       0       0       0       0       0       0
  4568 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4569 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4570 ;;      Totals:        16       0       0       0       0       0       0       0       0
  4571 ;;Total ram usage:       16 bytes
  4572 ;; Hardware stack levels used: 1
  4573 ;; This function calls:
  4574 ;;		Nothing
  4575 ;; This function is called by:
  4576 ;;		_pourcentBatt
  4577 ;;		_printBatteryLevel
  4578 ;;		_sendMeanTemp
  4579 ;;		_temperatureDec
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text15
  4584  0071E0                     __ptext15:
  4585                           	callstack 0
  4586  0071E0                     ___fladd:
  4587                           	callstack 29
  4588  0071E0  504E               	movf	(___fladd@b+3)^0,w,c
  4589  0071E2  0B80               	andlw	128
  4590  0071E4  6E57               	movwf	___fladd@signs^0,c
  4591  0071E6  504E               	movf	(___fladd@b+3)^0,w,c
  4592  0071E8  244E               	addwf	(___fladd@b+3)^0,w,c
  4593  0071EA  6E59               	movwf	___fladd@bexp^0,c
  4594  0071EC  AE4D               	btfss	(___fladd@b+2)^0,7,c
  4595  0071EE  EFFB  F038         	goto	u1991
  4596  0071F2  EFFD  F038         	goto	u1990
  4597  0071F6                     u1991:
  4598  0071F6  EFFE  F038         	goto	l2911
  4599  0071FA                     u1990:
  4600  0071FA  8059               	bsf	___fladd@bexp^0,0,c
  4601  0071FC                     l2911:
  4602  0071FC  5059               	movf	___fladd@bexp^0,w,c
  4603  0071FE  B4D8               	btfsc	status,2,c
  4604  007200  EF04  F039         	goto	u2001
  4605  007204  EF06  F039         	goto	u2000
  4606  007208                     u2001:
  4607  007208  EF1B  F039         	goto	l2921
  4608  00720C                     u2000:
  4609  00720C  2859               	incf	___fladd@bexp^0,w,c
  4610  00720E  A4D8               	btfss	status,2,c
  4611  007210  EF0C  F039         	goto	u2011
  4612  007214  EF0E  F039         	goto	u2010
  4613  007218                     u2011:
  4614  007218  EF16  F039         	goto	l2917
  4615  00721C                     u2010:
  4616  00721C  0E00               	movlw	0
  4617  00721E  6E4B               	movwf	___fladd@b^0,c
  4618  007220  0E00               	movlw	0
  4619  007222  6E4C               	movwf	(___fladd@b+1)^0,c
  4620  007224  0E00               	movlw	0
  4621  007226  6E4D               	movwf	(___fladd@b+2)^0,c
  4622  007228  0E00               	movlw	0
  4623  00722A  6E4E               	movwf	(___fladd@b+3)^0,c
  4624  00722C                     l2917:
  4625  00722C  8E4D               	bsf	(___fladd@b+2)^0,7,c
  4626  00722E  0E00               	movlw	0
  4627  007230  6E4E               	movwf	(___fladd@b+3)^0,c
  4628  007232  EF23  F039         	goto	l2923
  4629  007236                     l2921:
  4630  007236  0E00               	movlw	0
  4631  007238  6E4B               	movwf	___fladd@b^0,c
  4632  00723A  0E00               	movlw	0
  4633  00723C  6E4C               	movwf	(___fladd@b+1)^0,c
  4634  00723E  0E00               	movlw	0
  4635  007240  6E4D               	movwf	(___fladd@b+2)^0,c
  4636  007242  0E00               	movlw	0
  4637  007244  6E4E               	movwf	(___fladd@b+3)^0,c
  4638  007246                     l2923:
  4639  007246  5052               	movf	(___fladd@a+3)^0,w,c
  4640  007248  0B80               	andlw	128
  4641  00724A  6E58               	movwf	___fladd@aexp^0,c
  4642  00724C  5057               	movf	___fladd@signs^0,w,c
  4643  00724E  1858               	xorwf	___fladd@aexp^0,w,c
  4644  007250  B4D8               	btfsc	status,2,c
  4645  007252  EF2D  F039         	goto	u2021
  4646  007256  EF2F  F039         	goto	u2020
  4647  00725A                     u2021:
  4648  00725A  EF30  F039         	goto	l2929
  4649  00725E                     u2020:
  4650  00725E  8C57               	bsf	___fladd@signs^0,6,c
  4651  007260                     l2929:
  4652  007260  5052               	movf	(___fladd@a+3)^0,w,c
  4653  007262  2452               	addwf	(___fladd@a+3)^0,w,c
  4654  007264  6E58               	movwf	___fladd@aexp^0,c
  4655  007266  AE51               	btfss	(___fladd@a+2)^0,7,c
  4656  007268  EF38  F039         	goto	u2031
  4657  00726C  EF3A  F039         	goto	u2030
  4658  007270                     u2031:
  4659  007270  EF3B  F039         	goto	l2935
  4660  007274                     u2030:
  4661  007274  8058               	bsf	___fladd@aexp^0,0,c
  4662  007276                     l2935:
  4663  007276  5058               	movf	___fladd@aexp^0,w,c
  4664  007278  B4D8               	btfsc	status,2,c
  4665  00727A  EF41  F039         	goto	u2041
  4666  00727E  EF43  F039         	goto	u2040
  4667  007282                     u2041:
  4668  007282  EF58  F039         	goto	l2945
  4669  007286                     u2040:
  4670  007286  2858               	incf	___fladd@aexp^0,w,c
  4671  007288  A4D8               	btfss	status,2,c
  4672  00728A  EF49  F039         	goto	u2051
  4673  00728E  EF4B  F039         	goto	u2050
  4674  007292                     u2051:
  4675  007292  EF53  F039         	goto	l2941
  4676  007296                     u2050:
  4677  007296  0E00               	movlw	0
  4678  007298  6E4F               	movwf	___fladd@a^0,c
  4679  00729A  0E00               	movlw	0
  4680  00729C  6E50               	movwf	(___fladd@a+1)^0,c
  4681  00729E  0E00               	movlw	0
  4682  0072A0  6E51               	movwf	(___fladd@a+2)^0,c
  4683  0072A2  0E00               	movlw	0
  4684  0072A4  6E52               	movwf	(___fladd@a+3)^0,c
  4685  0072A6                     l2941:
  4686  0072A6  8E51               	bsf	(___fladd@a+2)^0,7,c
  4687  0072A8  0E00               	movlw	0
  4688  0072AA  6E52               	movwf	(___fladd@a+3)^0,c
  4689  0072AC  EF60  F039         	goto	l2947
  4690  0072B0                     l2945:
  4691  0072B0  0E00               	movlw	0
  4692  0072B2  6E4F               	movwf	___fladd@a^0,c
  4693  0072B4  0E00               	movlw	0
  4694  0072B6  6E50               	movwf	(___fladd@a+1)^0,c
  4695  0072B8  0E00               	movlw	0
  4696  0072BA  6E51               	movwf	(___fladd@a+2)^0,c
  4697  0072BC  0E00               	movlw	0
  4698  0072BE  6E52               	movwf	(___fladd@a+3)^0,c
  4699  0072C0                     l2947:
  4700  0072C0  5059               	movf	___fladd@bexp^0,w,c
  4701  0072C2  5C58               	subwf	___fladd@aexp^0,w,c
  4702  0072C4  B0D8               	btfsc	status,0,c
  4703  0072C6  EF67  F039         	goto	u2061
  4704  0072CA  EF69  F039         	goto	u2060
  4705  0072CE                     u2061:
  4706  0072CE  EF90  F039         	goto	l2983
  4707  0072D2                     u2060:
  4708  0072D2  AC57               	btfss	___fladd@signs^0,6,c
  4709  0072D4  EF6E  F039         	goto	u2071
  4710  0072D8  EF70  F039         	goto	u2070
  4711  0072DC                     u2071:
  4712  0072DC  EF72  F039         	goto	l2953
  4713  0072E0                     u2070:
  4714  0072E0  0E80               	movlw	128
  4715  0072E2  1A57               	xorwf	___fladd@signs^0,f,c
  4716  0072E4                     l2953:
  4717  0072E4  C059  F05A         	movff	___fladd@bexp,___fladd@grs
  4718  0072E8  C058  F059         	movff	___fladd@aexp,___fladd@bexp
  4719  0072EC  C05A  F058         	movff	___fladd@grs,___fladd@aexp
  4720  0072F0  C04B  F05A         	movff	___fladd@b,___fladd@grs
  4721  0072F4  C04F  F04B         	movff	___fladd@a,___fladd@b
  4722  0072F8  C05A  F04F         	movff	___fladd@grs,___fladd@a
  4723  0072FC  C04C  F05A         	movff	___fladd@b+1,___fladd@grs
  4724  007300  C050  F04C         	movff	___fladd@a+1,___fladd@b+1
  4725  007304  C05A  F050         	movff	___fladd@grs,___fladd@a+1
  4726  007308  C04D  F05A         	movff	___fladd@b+2,___fladd@grs
  4727  00730C  C051  F04D         	movff	___fladd@a+2,___fladd@b+2
  4728  007310  C05A  F051         	movff	___fladd@grs,___fladd@a+2
  4729  007314  C04E  F05A         	movff	___fladd@b+3,___fladd@grs
  4730  007318  C052  F04E         	movff	___fladd@a+3,___fladd@b+3
  4731  00731C  C05A  F052         	movff	___fladd@grs,___fladd@a+3
  4732  007320                     l2983:
  4733  007320  0E00               	movlw	0
  4734  007322  6E5A               	movwf	___fladd@grs^0,c
  4735  007324  5059               	movf	___fladd@bexp^0,w,c
  4736  007326  C058  F053         	movff	___fladd@aexp,??___fladd
  4737  00732A  6A54               	clrf	(??___fladd+1)^0,c
  4738  00732C  5E53               	subwf	??___fladd^0,f,c
  4739  00732E  0E00               	movlw	0
  4740  007330  5A54               	subwfb	(??___fladd+1)^0,f,c
  4741  007332  BE54               	btfsc	(??___fladd+1)^0,7,c
  4742  007334  EFA5  F039         	goto	u2081
  4743  007338  5054               	movf	(??___fladd+1)^0,w,c
  4744  00733A  E109               	bnz	u2080
  4745  00733C  0E1A               	movlw	26
  4746  00733E  5C53               	subwf	??___fladd^0,w,c
  4747  007340  A0D8               	btfss	status,0,c
  4748  007342  EFA5  F039         	goto	u2081
  4749  007346  EFA7  F039         	goto	u2080
  4750  00734A                     u2081:
  4751  00734A  EFDE  F039         	goto	l1009
  4752  00734E                     u2080:
  4753  00734E  504B               	movf	___fladd@b^0,w,c
  4754  007350  104C               	iorwf	(___fladd@b+1)^0,w,c
  4755  007352  104D               	iorwf	(___fladd@b+2)^0,w,c
  4756  007354  104E               	iorwf	(___fladd@b+3)^0,w,c
  4757  007356  A4D8               	btfss	status,2,c
  4758  007358  EFB0  F039         	goto	u2091
  4759  00735C  EFB3  F039         	goto	u2090
  4760  007360                     u2091:
  4761  007360  0E01               	movlw	1
  4762  007362  EFB4  F039         	goto	u2100
  4763  007366                     u2090:
  4764  007366  0E00               	movlw	0
  4765  007368                     u2100:
  4766  007368  6E5A               	movwf	___fladd@grs^0,c
  4767  00736A  0E00               	movlw	0
  4768  00736C  6E4B               	movwf	___fladd@b^0,c
  4769  00736E  0E00               	movlw	0
  4770  007370  6E4C               	movwf	(___fladd@b+1)^0,c
  4771  007372  0E00               	movlw	0
  4772  007374  6E4D               	movwf	(___fladd@b+2)^0,c
  4773  007376  0E00               	movlw	0
  4774  007378  6E4E               	movwf	(___fladd@b+3)^0,c
  4775  00737A  C058  F059         	movff	___fladd@aexp,___fladd@bexp
  4776  00737E  EFE7  F039         	goto	l1008
  4777  007382                     l1010:
  4778  007382  A05A               	btfss	___fladd@grs^0,0,c
  4779  007384  EFC6  F039         	goto	u2111
  4780  007388  EFC8  F039         	goto	u2110
  4781  00738C                     u2111:
  4782  00738C  EFCE  F039         	goto	l2995
  4783  007390                     u2110:
  4784  007390  90D8               	bcf	status,0,c
  4785  007392  305A               	rrcf	___fladd@grs^0,w,c
  4786  007394  0901               	iorlw	1
  4787  007396  6E5A               	movwf	___fladd@grs^0,c
  4788  007398  EFD0  F039         	goto	l2997
  4789  00739C                     l2995:
  4790  00739C  90D8               	bcf	status,0,c
  4791  00739E  325A               	rrcf	___fladd@grs^0,f,c
  4792  0073A0                     l2997:
  4793  0073A0  A04B               	btfss	___fladd@b^0,0,c
  4794  0073A2  EFD5  F039         	goto	u2121
  4795  0073A6  EFD7  F039         	goto	u2120
  4796  0073AA                     u2121:
  4797  0073AA  EFD8  F039         	goto	l3001
  4798  0073AE                     u2120:
  4799  0073AE  8E5A               	bsf	___fladd@grs^0,7,c
  4800  0073B0                     l3001:
  4801  0073B0  344E               	rlcf	(___fladd@b+3)^0,w,c
  4802  0073B2  324E               	rrcf	(___fladd@b+3)^0,f,c
  4803  0073B4  324D               	rrcf	(___fladd@b+2)^0,f,c
  4804  0073B6  324C               	rrcf	(___fladd@b+1)^0,f,c
  4805  0073B8  324B               	rrcf	___fladd@b^0,f,c
  4806  0073BA  2A59               	incf	___fladd@bexp^0,f,c
  4807  0073BC                     l1009:
  4808  0073BC  5058               	movf	___fladd@aexp^0,w,c
  4809  0073BE  5C59               	subwf	___fladd@bexp^0,w,c
  4810  0073C0  A0D8               	btfss	status,0,c
  4811  0073C2  EFE5  F039         	goto	u2131
  4812  0073C6  EFE7  F039         	goto	u2130
  4813  0073CA                     u2131:
  4814  0073CA  EFC1  F039         	goto	l1010
  4815  0073CE                     u2130:
  4816  0073CE                     l1008:
  4817  0073CE  BC57               	btfsc	___fladd@signs^0,6,c
  4818  0073D0  EFEC  F039         	goto	u2141
  4819  0073D4  EFEE  F039         	goto	u2140
  4820  0073D8                     u2141:
  4821  0073D8  EF2E  F03A         	goto	l3029
  4822  0073DC                     u2140:
  4823  0073DC  5059               	movf	___fladd@bexp^0,w,c
  4824  0073DE  A4D8               	btfss	status,2,c
  4825  0073E0  EFF4  F039         	goto	u2151
  4826  0073E4  EFF6  F039         	goto	u2150
  4827  0073E8                     u2151:
  4828  0073E8  EF00  F03A         	goto	l3011
  4829  0073EC                     u2150:
  4830  0073EC  0E00               	movlw	0
  4831  0073EE  6E4B               	movwf	?___fladd^0,c
  4832  0073F0  0E00               	movlw	0
  4833  0073F2  6E4C               	movwf	(?___fladd+1)^0,c
  4834  0073F4  0E00               	movlw	0
  4835  0073F6  6E4D               	movwf	(?___fladd+2)^0,c
  4836  0073F8  0E00               	movlw	0
  4837  0073FA  6E4E               	movwf	(?___fladd+3)^0,c
  4838  0073FC  EF4F  F03B         	goto	l1017
  4839  007400                     l3011:
  4840  007400  504F               	movf	___fladd@a^0,w,c
  4841  007402  264B               	addwf	___fladd@b^0,f,c
  4842  007404  5050               	movf	(___fladd@a+1)^0,w,c
  4843  007406  224C               	addwfc	(___fladd@b+1)^0,f,c
  4844  007408  5051               	movf	(___fladd@a+2)^0,w,c
  4845  00740A  224D               	addwfc	(___fladd@b+2)^0,f,c
  4846  00740C  5052               	movf	(___fladd@a+3)^0,w,c
  4847  00740E  224E               	addwfc	(___fladd@b+3)^0,f,c
  4848  007410  A04E               	btfss	(___fladd@b+3)^0,0,c
  4849  007412  EF0D  F03A         	goto	u2161
  4850  007416  EF0F  F03A         	goto	u2160
  4851  00741A                     u2161:
  4852  00741A  EFBB  F03A         	goto	l3065
  4853  00741E                     u2160:
  4854  00741E  A05A               	btfss	___fladd@grs^0,0,c
  4855  007420  EF14  F03A         	goto	u2171
  4856  007424  EF16  F03A         	goto	u2170
  4857  007428                     u2171:
  4858  007428  EF1C  F03A         	goto	l3019
  4859  00742C                     u2170:
  4860  00742C  90D8               	bcf	status,0,c
  4861  00742E  305A               	rrcf	___fladd@grs^0,w,c
  4862  007430  0901               	iorlw	1
  4863  007432  6E5A               	movwf	___fladd@grs^0,c
  4864  007434  EF1E  F03A         	goto	l3021
  4865  007438                     l3019:
  4866  007438  90D8               	bcf	status,0,c
  4867  00743A  325A               	rrcf	___fladd@grs^0,f,c
  4868  00743C                     l3021:
  4869  00743C  A04B               	btfss	___fladd@b^0,0,c
  4870  00743E  EF23  F03A         	goto	u2181
  4871  007442  EF25  F03A         	goto	u2180
  4872  007446                     u2181:
  4873  007446  EF26  F03A         	goto	l3025
  4874  00744A                     u2180:
  4875  00744A  8E5A               	bsf	___fladd@grs^0,7,c
  4876  00744C                     l3025:
  4877  00744C  344E               	rlcf	(___fladd@b+3)^0,w,c
  4878  00744E  324E               	rrcf	(___fladd@b+3)^0,f,c
  4879  007450  324D               	rrcf	(___fladd@b+2)^0,f,c
  4880  007452  324C               	rrcf	(___fladd@b+1)^0,f,c
  4881  007454  324B               	rrcf	___fladd@b^0,f,c
  4882  007456  2A59               	incf	___fladd@bexp^0,f,c
  4883  007458  EFBB  F03A         	goto	l3065
  4884  00745C                     l3029:
  4885  00745C  504F               	movf	___fladd@a^0,w,c
  4886  00745E  5C4B               	subwf	___fladd@b^0,w,c
  4887  007460  5050               	movf	(___fladd@a+1)^0,w,c
  4888  007462  584C               	subwfb	(___fladd@b+1)^0,w,c
  4889  007464  5051               	movf	(___fladd@a+2)^0,w,c
  4890  007466  584D               	subwfb	(___fladd@b+2)^0,w,c
  4891  007468  504E               	movf	(___fladd@b+3)^0,w,c
  4892  00746A  0A80               	xorlw	128
  4893  00746C  6E53               	movwf	??___fladd^0,c
  4894  00746E  5052               	movf	(___fladd@a+3)^0,w,c
  4895  007470  0A80               	xorlw	128
  4896  007472  5853               	subwfb	??___fladd^0,w,c
  4897  007474  B0D8               	btfsc	status,0,c
  4898  007476  EF3F  F03A         	goto	u2191
  4899  00747A  EF41  F03A         	goto	u2190
  4900  00747E                     u2191:
  4901  00747E  EF6C  F03A         	goto	l3039
  4902  007482                     u2190:
  4903  007482  504B               	movf	___fladd@b^0,w,c
  4904  007484  5C4F               	subwf	___fladd@a^0,w,c
  4905  007486  6E53               	movwf	??___fladd^0,c
  4906  007488  504C               	movf	(___fladd@b+1)^0,w,c
  4907  00748A  5850               	subwfb	(___fladd@a+1)^0,w,c
  4908  00748C  6E54               	movwf	(??___fladd+1)^0,c
  4909  00748E  504D               	movf	(___fladd@b+2)^0,w,c
  4910  007490  5851               	subwfb	(___fladd@a+2)^0,w,c
  4911  007492  6E55               	movwf	(??___fladd+2)^0,c
  4912  007494  504E               	movf	(___fladd@b+3)^0,w,c
  4913  007496  5852               	subwfb	(___fladd@a+3)^0,w,c
  4914  007498  6E56               	movwf	(??___fladd+3)^0,c
  4915  00749A  0EFF               	movlw	255
  4916  00749C  2453               	addwf	??___fladd^0,w,c
  4917  00749E  6E4B               	movwf	___fladd@b^0,c
  4918  0074A0  0EFF               	movlw	255
  4919  0074A2  2054               	addwfc	(??___fladd+1)^0,w,c
  4920  0074A4  6E4C               	movwf	(___fladd@b+1)^0,c
  4921  0074A6  0EFF               	movlw	255
  4922  0074A8  2055               	addwfc	(??___fladd+2)^0,w,c
  4923  0074AA  6E4D               	movwf	(___fladd@b+2)^0,c
  4924  0074AC  0EFF               	movlw	255
  4925  0074AE  2056               	addwfc	(??___fladd+3)^0,w,c
  4926  0074B0  6E4E               	movwf	(___fladd@b+3)^0,c
  4927  0074B2  0E80               	movlw	128
  4928  0074B4  1A57               	xorwf	___fladd@signs^0,f,c
  4929  0074B6  6C5A               	negf	___fladd@grs^0,c
  4930  0074B8  505A               	movf	___fladd@grs^0,w,c
  4931  0074BA  A4D8               	btfss	status,2,c
  4932  0074BC  EF62  F03A         	goto	u2201
  4933  0074C0  EF64  F03A         	goto	u2200
  4934  0074C4                     u2201:
  4935  0074C4  EF74  F03A         	goto	l1025
  4936  0074C8                     u2200:
  4937  0074C8  0E01               	movlw	1
  4938  0074CA  264B               	addwf	___fladd@b^0,f,c
  4939  0074CC  0E00               	movlw	0
  4940  0074CE  224C               	addwfc	(___fladd@b+1)^0,f,c
  4941  0074D0  224D               	addwfc	(___fladd@b+2)^0,f,c
  4942  0074D2  224E               	addwfc	(___fladd@b+3)^0,f,c
  4943  0074D4  EF74  F03A         	goto	l1025
  4944  0074D8                     l3039:
  4945  0074D8  504F               	movf	___fladd@a^0,w,c
  4946  0074DA  5E4B               	subwf	___fladd@b^0,f,c
  4947  0074DC  5050               	movf	(___fladd@a+1)^0,w,c
  4948  0074DE  5A4C               	subwfb	(___fladd@b+1)^0,f,c
  4949  0074E0  5051               	movf	(___fladd@a+2)^0,w,c
  4950  0074E2  5A4D               	subwfb	(___fladd@b+2)^0,f,c
  4951  0074E4  5052               	movf	(___fladd@a+3)^0,w,c
  4952  0074E6  5A4E               	subwfb	(___fladd@b+3)^0,f,c
  4953  0074E8                     l1025:
  4954  0074E8  504B               	movf	___fladd@b^0,w,c
  4955  0074EA  104C               	iorwf	(___fladd@b+1)^0,w,c
  4956  0074EC  104D               	iorwf	(___fladd@b+2)^0,w,c
  4957  0074EE  104E               	iorwf	(___fladd@b+3)^0,w,c
  4958  0074F0  A4D8               	btfss	status,2,c
  4959  0074F2  EF7D  F03A         	goto	u2211
  4960  0074F6  EF7F  F03A         	goto	u2210
  4961  0074FA                     u2211:
  4962  0074FA  EFB4  F03A         	goto	l3063
  4963  0074FE                     u2210:
  4964  0074FE  505A               	movf	___fladd@grs^0,w,c
  4965  007500  A4D8               	btfss	status,2,c
  4966  007502  EF85  F03A         	goto	u2221
  4967  007506  EF87  F03A         	goto	u2220
  4968  00750A                     u2221:
  4969  00750A  EFB4  F03A         	goto	l3063
  4970  00750E                     u2220:
  4971  00750E  0E00               	movlw	0
  4972  007510  6E4B               	movwf	?___fladd^0,c
  4973  007512  0E00               	movlw	0
  4974  007514  6E4C               	movwf	(?___fladd+1)^0,c
  4975  007516  0E00               	movlw	0
  4976  007518  6E4D               	movwf	(?___fladd+2)^0,c
  4977  00751A  0E00               	movlw	0
  4978  00751C  6E4E               	movwf	(?___fladd+3)^0,c
  4979  00751E  EF4F  F03B         	goto	l1017
  4980  007522                     l3047:
  4981  007522  90D8               	bcf	status,0,c
  4982  007524  364B               	rlcf	___fladd@b^0,f,c
  4983  007526  364C               	rlcf	(___fladd@b+1)^0,f,c
  4984  007528  364D               	rlcf	(___fladd@b+2)^0,f,c
  4985  00752A  364E               	rlcf	(___fladd@b+3)^0,f,c
  4986  00752C  AE5A               	btfss	___fladd@grs^0,7,c
  4987  00752E  EF9B  F03A         	goto	u2231
  4988  007532  EF9D  F03A         	goto	u2230
  4989  007536                     u2231:
  4990  007536  EF9E  F03A         	goto	l3053
  4991  00753A                     u2230:
  4992  00753A  804B               	bsf	___fladd@b^0,0,c
  4993  00753C                     l3053:
  4994  00753C  A05A               	btfss	___fladd@grs^0,0,c
  4995  00753E  EFA3  F03A         	goto	u2241
  4996  007542  EFA5  F03A         	goto	u2240
  4997  007546                     u2241:
  4998  007546  EFA9  F03A         	goto	l3057
  4999  00754A                     u2240:
  5000  00754A  80D8               	bsf	status,0,c
  5001  00754C  365A               	rlcf	___fladd@grs^0,f,c
  5002  00754E  EFAB  F03A         	goto	l3059
  5003  007552                     l3057:
  5004  007552  90D8               	bcf	status,0,c
  5005  007554  365A               	rlcf	___fladd@grs^0,f,c
  5006  007556                     l3059:
  5007  007556  5059               	movf	___fladd@bexp^0,w,c
  5008  007558  B4D8               	btfsc	status,2,c
  5009  00755A  EFB1  F03A         	goto	u2251
  5010  00755E  EFB3  F03A         	goto	u2250
  5011  007562                     u2251:
  5012  007562  EFB4  F03A         	goto	l3063
  5013  007566                     u2250:
  5014  007566  0659               	decf	___fladd@bexp^0,f,c
  5015  007568                     l3063:
  5016  007568  AE4D               	btfss	(___fladd@b+2)^0,7,c
  5017  00756A  EFB9  F03A         	goto	u2261
  5018  00756E  EFBB  F03A         	goto	u2260
  5019  007572                     u2261:
  5020  007572  EF91  F03A         	goto	l3047
  5021  007576                     u2260:
  5022  007576                     l3065:
  5023  007576  0E00               	movlw	0
  5024  007578  6E58               	movwf	___fladd@aexp^0,c
  5025  00757A  AE5A               	btfss	___fladd@grs^0,7,c
  5026  00757C  EFC2  F03A         	goto	u2271
  5027  007580  EFC4  F03A         	goto	u2270
  5028  007584                     u2271:
  5029  007584  EFDC  F03A         	goto	l1034
  5030  007588                     u2270:
  5031  007588  C05A  F053         	movff	___fladd@grs,??___fladd
  5032  00758C  0E7F               	movlw	127
  5033  00758E  1653               	andwf	??___fladd^0,f,c
  5034  007590  B4D8               	btfsc	status,2,c
  5035  007592  EFCD  F03A         	goto	u2281
  5036  007596  EFCF  F03A         	goto	u2280
  5037  00759A                     u2281:
  5038  00759A  EFD3  F03A         	goto	l1035
  5039  00759E                     u2280:
  5040  00759E                     l3071:
  5041  00759E  0E01               	movlw	1
  5042  0075A0  6E58               	movwf	___fladd@aexp^0,c
  5043  0075A2  EFDC  F03A         	goto	l1034
  5044  0075A6                     l1035:
  5045  0075A6  A04B               	btfss	___fladd@b^0,0,c
  5046  0075A8  EFD8  F03A         	goto	u2291
  5047  0075AC  EFDA  F03A         	goto	u2290
  5048  0075B0                     u2291:
  5049  0075B0  EFDC  F03A         	goto	l1034
  5050  0075B4                     u2290:
  5051  0075B4  EFCF  F03A         	goto	l3071
  5052  0075B8                     l1034:
  5053  0075B8  5058               	movf	___fladd@aexp^0,w,c
  5054  0075BA  B4D8               	btfsc	status,2,c
  5055  0075BC  EFE2  F03A         	goto	u2301
  5056  0075C0  EFE4  F03A         	goto	u2300
  5057  0075C4                     u2301:
  5058  0075C4  EF0F  F03B         	goto	l3083
  5059  0075C8                     u2300:
  5060  0075C8  0E01               	movlw	1
  5061  0075CA  264B               	addwf	___fladd@b^0,f,c
  5062  0075CC  0E00               	movlw	0
  5063  0075CE  224C               	addwfc	(___fladd@b+1)^0,f,c
  5064  0075D0  224D               	addwfc	(___fladd@b+2)^0,f,c
  5065  0075D2  224E               	addwfc	(___fladd@b+3)^0,f,c
  5066  0075D4  A04E               	btfss	(___fladd@b+3)^0,0,c
  5067  0075D6  EFEF  F03A         	goto	u2311
  5068  0075DA  EFF1  F03A         	goto	u2310
  5069  0075DE                     u2311:
  5070  0075DE  EF0F  F03B         	goto	l3083
  5071  0075E2                     u2310:
  5072  0075E2  C04B  F053         	movff	___fladd@b,??___fladd
  5073  0075E6  C04C  F054         	movff	___fladd@b+1,??___fladd+1
  5074  0075EA  C04D  F055         	movff	___fladd@b+2,??___fladd+2
  5075  0075EE  C04E  F056         	movff	___fladd@b+3,??___fladd+3
  5076  0075F2  3456               	rlcf	(??___fladd+3)^0,w,c
  5077  0075F4  3256               	rrcf	(??___fladd+3)^0,f,c
  5078  0075F6  3255               	rrcf	(??___fladd+2)^0,f,c
  5079  0075F8  3254               	rrcf	(??___fladd+1)^0,f,c
  5080  0075FA  3253               	rrcf	??___fladd^0,f,c
  5081  0075FC  C053  F04B         	movff	??___fladd,___fladd@b
  5082  007600  C054  F04C         	movff	??___fladd+1,___fladd@b+1
  5083  007604  C055  F04D         	movff	??___fladd+2,___fladd@b+2
  5084  007608  C056  F04E         	movff	??___fladd+3,___fladd@b+3
  5085  00760C  2859               	incf	___fladd@bexp^0,w,c
  5086  00760E  B4D8               	btfsc	status,2,c
  5087  007610  EF0C  F03B         	goto	u2321
  5088  007614  EF0E  F03B         	goto	u2320
  5089  007618                     u2321:
  5090  007618  EF0F  F03B         	goto	l3083
  5091  00761C                     u2320:
  5092  00761C  2A59               	incf	___fladd@bexp^0,f,c
  5093  00761E                     l3083:
  5094  00761E  2859               	incf	___fladd@bexp^0,w,c
  5095  007620  B4D8               	btfsc	status,2,c
  5096  007622  EF15  F03B         	goto	u2331
  5097  007626  EF17  F03B         	goto	u2330
  5098  00762A                     u2331:
  5099  00762A  EF1F  F03B         	goto	l3087
  5100  00762E                     u2330:
  5101  00762E  5059               	movf	___fladd@bexp^0,w,c
  5102  007630  A4D8               	btfss	status,2,c
  5103  007632  EF1D  F03B         	goto	u2341
  5104  007636  EF1F  F03B         	goto	u2340
  5105  00763A                     u2341:
  5106  00763A  EF31  F03B         	goto	l3091
  5107  00763E                     u2340:
  5108  00763E                     l3087:
  5109  00763E  0E00               	movlw	0
  5110  007640  6E4B               	movwf	___fladd@b^0,c
  5111  007642  0E00               	movlw	0
  5112  007644  6E4C               	movwf	(___fladd@b+1)^0,c
  5113  007646  0E00               	movlw	0
  5114  007648  6E4D               	movwf	(___fladd@b+2)^0,c
  5115  00764A  0E00               	movlw	0
  5116  00764C  6E4E               	movwf	(___fladd@b+3)^0,c
  5117  00764E  5059               	movf	___fladd@bexp^0,w,c
  5118  007650  A4D8               	btfss	status,2,c
  5119  007652  EF2D  F03B         	goto	u2351
  5120  007656  EF2F  F03B         	goto	u2350
  5121  00765A                     u2351:
  5122  00765A  EF31  F03B         	goto	l3091
  5123  00765E                     u2350:
  5124  00765E  0E00               	movlw	0
  5125  007660  6E57               	movwf	___fladd@signs^0,c
  5126  007662                     l3091:
  5127  007662  A059               	btfss	___fladd@bexp^0,0,c
  5128  007664  EF36  F03B         	goto	u2361
  5129  007668  EF38  F03B         	goto	u2360
  5130  00766C                     u2361:
  5131  00766C  EF3B  F03B         	goto	l3095
  5132  007670                     u2360:
  5133  007670  8E4D               	bsf	(___fladd@b+2)^0,7,c
  5134  007672  EF3C  F03B         	goto	l3097
  5135  007676                     l3095:
  5136  007676  9E4D               	bcf	(___fladd@b+2)^0,7,c
  5137  007678                     l3097:
  5138  007678  90D8               	bcf	status,0,c
  5139  00767A  3059               	rrcf	___fladd@bexp^0,w,c
  5140  00767C  6E4E               	movwf	(___fladd@b+3)^0,c
  5141  00767E  AE57               	btfss	___fladd@signs^0,7,c
  5142  007680  EF44  F03B         	goto	u2371
  5143  007684  EF46  F03B         	goto	u2370
  5144  007688                     u2371:
  5145  007688  EF47  F03B         	goto	l3103
  5146  00768C                     u2370:
  5147  00768C  8E4E               	bsf	(___fladd@b+3)^0,7,c
  5148  00768E                     l3103:
  5149  00768E  C04B  F04B         	movff	___fladd@b,?___fladd
  5150  007692  C04C  F04C         	movff	___fladd@b+1,?___fladd+1
  5151  007696  C04D  F04D         	movff	___fladd@b+2,?___fladd+2
  5152  00769A  C04E  F04E         	movff	___fladd@b+3,?___fladd+3
  5153  00769E                     l1017:
  5154  00769E  0012               	return		;funcret
  5155  0076A0                     __end_of___fladd:
  5156                           	callstack 0
  5157                           
  5158 ;; *************** function _init_ecran *****************
  5159 ;; Defined at:
  5160 ;;		line 47 in file "affichage.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;		None
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;		None
  5165 ;; Return value:  Size  Location     Type
  5166 ;;                  1    wreg      void 
  5167 ;; Registers used:
  5168 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5169 ;; Tracked objects:
  5170 ;;		On entry : 0/0
  5171 ;;		On exit  : 0/0
  5172 ;;		Unchanged: 0/0
  5173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5174 ;;      Params:         0       0       0       0       0       0       0       0       0
  5175 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5176 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5177 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5178 ;;Total ram usage:        1 bytes
  5179 ;; Hardware stack levels used: 1
  5180 ;; Hardware stack levels required when called: 2
  5181 ;; This function calls:
  5182 ;;		_ecrire_ecran_data
  5183 ;;		_ecrire_ecran_start_byte
  5184 ;; This function is called by:
  5185 ;;		_main
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           	psect	text16
  5190  004EDE                     __ptext16:
  5191                           	callstack 0
  5192  004EDE                     _init_ecran:
  5193                           	callstack 28
  5194  004EDE                     
  5195                           ;affichage.c: 49:     TRISBbits.TRISB5 = 0;
  5196  004EDE  9A89               	bcf	137,5,c	;volatile
  5197                           
  5198                           ;affichage.c: 50:     LATBbits.LATB5 = 1;
  5199  004EE0  8A84               	bsf	132,5,c	;volatile
  5200  004EE2                     
  5201                           ;affichage.c: 51:     _delay((unsigned long)((50)*(1000000UL/4000.0)));
  5202  004EE2  0E11               	movlw	17
  5203  004EE4  6E0C               	movwf	??_init_ecran^0,c
  5204  004EE6  0E3A               	movlw	58
  5205  004EE8                     u3817:
  5206  004EE8  2EE8               	decfsz	wreg,f,c
  5207  004EEA  D7FE               	bra	u3817
  5208  004EEC  2E0C               	decfsz	??_init_ecran^0,f,c
  5209  004EEE  D7FC               	bra	u3817
  5210  004EF0  D000               	nop2	
  5211  004EF2                     
  5212                           ;affichage.c: 52:     LATBbits.LATB5 = 0;
  5213  004EF2  9A84               	bcf	132,5,c	;volatile
  5214                           
  5215                           ;affichage.c: 53:     _delay((unsigned long)((200)*(1000000UL/4000000.0)));
  5216  004EF4  0E10               	movlw	16
  5217  004EF6                     u3827:
  5218  004EF6  2EE8               	decfsz	wreg,f,c
  5219  004EF8  D7FE               	bra	u3827
  5220  004EFA  D000               	nop2	
  5221  004EFC                     
  5222                           ;affichage.c: 54:     LATBbits.LATB5 = 1;
  5223  004EFC  8A84               	bsf	132,5,c	;volatile
  5224  004EFE                     
  5225                           ;affichage.c: 56:     LATCbits.LATC1 = 0;
  5226  004EFE  9285               	bcf	133,1,c	;volatile
  5227  004F00                     
  5228                           ;affichage.c: 57:     ecrire_ecran_start_byte(0xF8);
  5229  004F00  0EF8               	movlw	248
  5230  004F02  EC5D  F025         	call	_ecrire_ecran_start_byte
  5231  004F06                     
  5232                           ;affichage.c: 60:     ecrire_ecran_data(0x3A);
  5233  004F06  0E3A               	movlw	58
  5234  004F08  EC17  F026         	call	_ecrire_ecran_data
  5235  004F0C                     
  5236                           ;affichage.c: 61:     ecrire_ecran_data(0x09);
  5237  004F0C  0E09               	movlw	9
  5238  004F0E  EC17  F026         	call	_ecrire_ecran_data
  5239  004F12                     
  5240                           ;affichage.c: 62:     ecrire_ecran_data(0x06);
  5241  004F12  0E06               	movlw	6
  5242  004F14  EC17  F026         	call	_ecrire_ecran_data
  5243  004F18                     
  5244                           ;affichage.c: 63:     ecrire_ecran_data(0x1E);
  5245  004F18  0E1E               	movlw	30
  5246  004F1A  EC17  F026         	call	_ecrire_ecran_data
  5247  004F1E                     
  5248                           ;affichage.c: 65:     ecrire_ecran_data(0x39);
  5249  004F1E  0E39               	movlw	57
  5250  004F20  EC17  F026         	call	_ecrire_ecran_data
  5251  004F24                     
  5252                           ;affichage.c: 66:     ecrire_ecran_data(0x1B);
  5253  004F24  0E1B               	movlw	27
  5254  004F26  EC17  F026         	call	_ecrire_ecran_data
  5255  004F2A                     
  5256                           ;affichage.c: 67:     ecrire_ecran_data(0x6E);
  5257  004F2A  0E6E               	movlw	110
  5258  004F2C  EC17  F026         	call	_ecrire_ecran_data
  5259  004F30                     
  5260                           ;affichage.c: 68:     ecrire_ecran_data(0x56);
  5261  004F30  0E56               	movlw	86
  5262  004F32  EC17  F026         	call	_ecrire_ecran_data
  5263  004F36                     
  5264                           ;affichage.c: 69:     ecrire_ecran_data(0x7A);
  5265  004F36  0E7A               	movlw	122
  5266  004F38  EC17  F026         	call	_ecrire_ecran_data
  5267  004F3C                     
  5268                           ;affichage.c: 70:     ecrire_ecran_data(0x38);
  5269  004F3C  0E38               	movlw	56
  5270  004F3E  EC17  F026         	call	_ecrire_ecran_data
  5271  004F42                     
  5272                           ;affichage.c: 72:     ecrire_ecran_data(0x0F);
  5273  004F42  0E0F               	movlw	15
  5274  004F44  EC17  F026         	call	_ecrire_ecran_data
  5275  004F48                     
  5276                           ;affichage.c: 74:     LATCbits.LATC1 = 1;
  5277  004F48  8285               	bsf	133,1,c	;volatile
  5278  004F4A  0012               	return		;funcret
  5279  004F4C                     __end_of_init_ecran:
  5280                           	callstack 0
  5281                           
  5282 ;; *************** function _initVoltmeter *****************
  5283 ;; Defined at:
  5284 ;;		line 15 in file "voltmeter.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;		None
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;		None
  5289 ;; Return value:  Size  Location     Type
  5290 ;;                  1    wreg      void 
  5291 ;; Registers used:
  5292 ;;		wreg, status,2
  5293 ;; Tracked objects:
  5294 ;;		On entry : 0/0
  5295 ;;		On exit  : 0/0
  5296 ;;		Unchanged: 0/0
  5297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5298 ;;      Params:         0       0       0       0       0       0       0       0       0
  5299 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5300 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5301 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5302 ;;Total ram usage:        0 bytes
  5303 ;; Hardware stack levels used: 1
  5304 ;; This function calls:
  5305 ;;		Nothing
  5306 ;; This function is called by:
  5307 ;;		_main
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           	psect	text17
  5312  004B22                     __ptext17:
  5313                           	callstack 0
  5314  004B22                     _initVoltmeter:
  5315                           	callstack 30
  5316  004B22                     
  5317                           ;voltmeter.c: 36:     ADCLK = 0b00011111;
  5318  004B22  0E1F               	movlw	31
  5319  004B24  010F               	movlb	15	; () banked
  5320  004B26  6F57               	movwf	87,b	;volatile
  5321                           
  5322                           ;voltmeter.c: 37:     ADPCH = 0b00000011;
  5323  004B28  0E03               	movlw	3
  5324  004B2A  6F5F               	movwf	95,b	;volatile
  5325                           
  5326                           ;voltmeter.c: 38:     ADACQ = 0x014;
  5327  004B2C  0E14               	movlw	20
  5328  004B2E  6F5C               	movwf	92,b	;volatile
  5329  004B30                     
  5330                           ; BSR set to: 15
  5331                           ;voltmeter.c: 39:     ADCON0bits.ADON = 1;
  5332  004B30  8E60               	bsf	96,7,c	;volatile
  5333  004B32                     
  5334                           ; BSR set to: 15
  5335                           ;voltmeter.c: 41:     TRISAbits.TRISA3 = 1;
  5336  004B32  8688               	bsf	136,3,c	;volatile
  5337  004B34                     
  5338                           ; BSR set to: 15
  5339                           ;voltmeter.c: 42:     ANSELAbits.ANSELA3 = 1;
  5340  004B34  8711               	bsf	17,3,b	;volatile
  5341  004B36                     
  5342                           ; BSR set to: 15
  5343  004B36  0012               	return		;funcret
  5344  004B38                     __end_of_initVoltmeter:
  5345                           	callstack 0
  5346                           
  5347 ;; *************** function _initLeds *****************
  5348 ;; Defined at:
  5349 ;;		line 13 in file "leds.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;		None
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;		None
  5354 ;; Return value:  Size  Location     Type
  5355 ;;                  1    wreg      void 
  5356 ;; Registers used:
  5357 ;;		cstack
  5358 ;; Tracked objects:
  5359 ;;		On entry : 0/0
  5360 ;;		On exit  : 0/0
  5361 ;;		Unchanged: 0/0
  5362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5363 ;;      Params:         0       0       0       0       0       0       0       0       0
  5364 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5365 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5366 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5367 ;;Total ram usage:        0 bytes
  5368 ;; Hardware stack levels used: 1
  5369 ;; Hardware stack levels required when called: 1
  5370 ;; This function calls:
  5371 ;;		_eteindre_rouge_solo
  5372 ;; This function is called by:
  5373 ;;		_main
  5374 ;; This function uses a non-reentrant model
  5375 ;;
  5376                           
  5377                           	psect	text18
  5378  004ACC                     __ptext18:
  5379                           	callstack 0
  5380  004ACC                     _initLeds:
  5381                           	callstack 29
  5382  004ACC                     
  5383                           ;leds.c: 14:     TRISAbits.TRISA6 = 0;
  5384  004ACC  9C88               	bcf	136,6,c	;volatile
  5385                           
  5386                           ;leds.c: 15:     TRISAbits.TRISA7 = 0;
  5387  004ACE  9E88               	bcf	136,7,c	;volatile
  5388                           
  5389                           ;leds.c: 16:     TRISAbits.TRISA5 = 0;
  5390  004AD0  9A88               	bcf	136,5,c	;volatile
  5391                           
  5392                           ;leds.c: 17:     TRISAbits.TRISA4 = 0;
  5393  004AD2  9888               	bcf	136,4,c	;volatile
  5394                           
  5395                           ;leds.c: 19:     LATAbits.LATA6 = 0;
  5396  004AD4  9C83               	bcf	131,6,c	;volatile
  5397                           
  5398                           ;leds.c: 20:     LATAbits.LATA7 = 0;
  5399  004AD6  9E83               	bcf	131,7,c	;volatile
  5400                           
  5401                           ;leds.c: 21:     LATAbits.LATA5 = 0;
  5402  004AD8  9A83               	bcf	131,5,c	;volatile
  5403  004ADA                     
  5404                           ;leds.c: 22:     eteindre_rouge_solo();
  5405  004ADA  EC3B  F025         	call	_eteindre_rouge_solo	;wreg free
  5406  004ADE  0012               	return		;funcret
  5407  004AE0                     __end_of_initLeds:
  5408                           	callstack 0
  5409                           
  5410 ;; *************** function _eteindre_rouge_solo *****************
  5411 ;; Defined at:
  5412 ;;		line 56 in file "leds.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;		None
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;		None
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  1    wreg      void 
  5419 ;; Registers used:
  5420 ;;		None
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5426 ;;      Params:         0       0       0       0       0       0       0       0       0
  5427 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5428 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5429 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5430 ;;Total ram usage:        0 bytes
  5431 ;; Hardware stack levels used: 1
  5432 ;; This function calls:
  5433 ;;		Nothing
  5434 ;; This function is called by:
  5435 ;;		_initLeds
  5436 ;; This function uses a non-reentrant model
  5437 ;;
  5438                           
  5439                           	psect	text19
  5440  004A76                     __ptext19:
  5441                           	callstack 0
  5442  004A76                     _eteindre_rouge_solo:
  5443                           	callstack 29
  5444  004A76                     
  5445                           ;leds.c: 57:     LATAbits.LATA4 = 0;
  5446  004A76  9883               	bcf	131,4,c	;volatile
  5447  004A78  0012               	return		;funcret
  5448  004A7A                     __end_of_eteindre_rouge_solo:
  5449                           	callstack 0
  5450                           
  5451 ;; *************** function _humidityDec *****************
  5452 ;; Defined at:
  5453 ;;		line 55 in file "sensor.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;		None
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;  humidite        2    8[BANK0 ] unsigned short 
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  2    6[BANK0 ] unsigned short 
  5460 ;; Registers used:
  5461 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5467 ;;      Params:         0       2       0       0       0       0       0       0       0
  5468 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5469 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5470 ;;      Totals:         0       4       0       0       0       0       0       0       0
  5471 ;;Total ram usage:        4 bytes
  5472 ;; Hardware stack levels used: 1
  5473 ;; Hardware stack levels required when called: 2
  5474 ;; This function calls:
  5475 ;;		___fldiv
  5476 ;;		___flmul
  5477 ;;		___fltol
  5478 ;;		___xxtofl
  5479 ;;		_humidityHex
  5480 ;; This function is called by:
  5481 ;;		_main
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           	psect	text20
  5486  005130                     __ptext20:
  5487                           	callstack 0
  5488  005130                     _humidityDec:
  5489                           	callstack 28
  5490  005130                     
  5491                           ;sensor.c: 57:     uint16_t humidite = (uint16_t)(humidityHex() / (16384.0 - 2) * 10000)
      +                          ;
  5492  005130  0E00               	movlw	0
  5493  005132  6E36               	movwf	___flmul@a^0,c
  5494  005134  0E40               	movlw	64
  5495  005136  6E37               	movwf	(___flmul@a+1)^0,c
  5496  005138  0E1C               	movlw	28
  5497  00513A  6E38               	movwf	(___flmul@a+2)^0,c
  5498  00513C  0E46               	movlw	70
  5499  00513E  6E39               	movwf	(___flmul@a+3)^0,c
  5500  005140  0E00               	movlw	0
  5501  005142  6E1D               	movwf	___fldiv@a^0,c
  5502  005144  0EF8               	movlw	248
  5503  005146  6E1E               	movwf	(___fldiv@a+1)^0,c
  5504  005148  0E7F               	movlw	127
  5505  00514A  6E1F               	movwf	(___fldiv@a+2)^0,c
  5506  00514C  0E46               	movlw	70
  5507  00514E  6E20               	movwf	(___fldiv@a+3)^0,c
  5508  005150  EC3A  F027         	call	_humidityHex	;wreg free
  5509  005154  C003  F00B         	movff	?_humidityHex,___xxtofl@val
  5510  005158  C004  F00C         	movff	?_humidityHex+1,___xxtofl@val+1
  5511  00515C  6A0D               	clrf	(___xxtofl@val+2)^0,c
  5512  00515E  6A0E               	clrf	(___xxtofl@val+3)^0,c
  5513  005160  0E00               	movlw	0
  5514  005162  ECE5  F032         	call	___xxtofl
  5515  005166  C00B  F019         	movff	?___xxtofl,___fldiv@b
  5516  00516A  C00C  F01A         	movff	?___xxtofl+1,___fldiv@b+1
  5517  00516E  C00D  F01B         	movff	?___xxtofl+2,___fldiv@b+2
  5518  005172  C00E  F01C         	movff	?___xxtofl+3,___fldiv@b+3
  5519  005176  EC0E  F035         	call	___fldiv	;wreg free
  5520  00517A  C019  F032         	movff	?___fldiv,___flmul@b
  5521  00517E  C01A  F033         	movff	?___fldiv+1,___flmul@b+1
  5522  005182  C01B  F034         	movff	?___fldiv+2,___flmul@b+2
  5523  005186  C01C  F035         	movff	?___fldiv+3,___flmul@b+3
  5524  00518A  ECDB  F036         	call	___flmul	;wreg free
  5525  00518E  C032  F05B         	movff	?___flmul,___fltol@f1
  5526  005192  C033  F05C         	movff	?___flmul+1,___fltol@f1+1
  5527  005196  C034  F05D         	movff	?___flmul+2,___fltol@f1+2
  5528  00519A  C035  F05E         	movff	?___flmul+3,___fltol@f1+3
  5529  00519E  ECAB  F02C         	call	___fltol	;wreg free
  5530  0051A2  C05B  F068         	movff	?___fltol,humidityDec@humidite
  5531  0051A6  C05C  F069         	movff	?___fltol+1,humidityDec@humidite+1
  5532  0051AA                     
  5533                           ;sensor.c: 59:     return humidite;
  5534  0051AA  C068  F066         	movff	humidityDec@humidite,?_humidityDec
  5535  0051AE  C069  F067         	movff	humidityDec@humidite+1,?_humidityDec+1
  5536  0051B2  0012               	return		;funcret
  5537  0051B4                     __end_of_humidityDec:
  5538                           	callstack 0
  5539                           
  5540 ;; *************** function _humidityHex *****************
  5541 ;; Defined at:
  5542 ;;		line 19 in file "sensor.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;		None
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;  value           2    7[COMRAM] unsigned short 
  5547 ;; Return value:  Size  Location     Type
  5548 ;;                  2    2[COMRAM] unsigned short 
  5549 ;; Registers used:
  5550 ;;		wreg, status,2, status,0, cstack
  5551 ;; Tracked objects:
  5552 ;;		On entry : 0/0
  5553 ;;		On exit  : 0/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5556 ;;      Params:         2       0       0       0       0       0       0       0       0
  5557 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5558 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5559 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5560 ;;Total ram usage:        7 bytes
  5561 ;; Hardware stack levels used: 1
  5562 ;; Hardware stack levels required when called: 1
  5563 ;; This function calls:
  5564 ;;		_SPIReceive
  5565 ;; This function is called by:
  5566 ;;		_main
  5567 ;;		_humidityDec
  5568 ;;		_printHumidityLevel
  5569 ;;		_sendMeanHumi
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           	psect	text21
  5574  004E74                     __ptext21:
  5575                           	callstack 0
  5576  004E74                     _humidityHex:
  5577                           	callstack 28
  5578  004E74                     
  5579                           ;sensor.c: 21:     uint16_t value;;sensor.c: 23:     LATCbits.LATC0 = 0;
  5580  004E74  9085               	bcf	133,0,c	;volatile
  5581  004E76                     l3545:
  5582                           
  5583                           ;sensor.c: 27:         value = (uint16_t)SPIReceive(0x00);
  5584  004E76  0E00               	movlw	0
  5585  004E78  ECC6  F025         	call	_SPIReceive
  5586  004E7C  6E05               	movwf	??_humidityHex^0,c
  5587  004E7E  5005               	movf	??_humidityHex^0,w,c
  5588  004E80  6E08               	movwf	humidityHex@value^0,c
  5589  004E82  6A09               	clrf	(humidityHex@value+1)^0,c
  5590  004E84                     
  5591                           ;sensor.c: 28:     } while ((value & 0x00C0) == 0x00);
  5592  004E84  0EC0               	movlw	192
  5593  004E86  1408               	andwf	humidityHex@value^0,w,c
  5594  004E88  6E05               	movwf	??_humidityHex^0,c
  5595  004E8A  0E00               	movlw	0
  5596  004E8C  1409               	andwf	(humidityHex@value+1)^0,w,c
  5597  004E8E  6E06               	movwf	(??_humidityHex+1)^0,c
  5598  004E90  5005               	movf	??_humidityHex^0,w,c
  5599  004E92  1006               	iorwf	(??_humidityHex+1)^0,w,c
  5600  004E94  B4D8               	btfsc	status,2,c
  5601  004E96  EF4F  F027         	goto	u3071
  5602  004E9A  EF51  F027         	goto	u3070
  5603  004E9E                     u3071:
  5604  004E9E  EF3B  F027         	goto	l3545
  5605  004EA2                     u3070:
  5606  004EA2                     
  5607                           ;sensor.c: 30:     value = (value << 6) | (uint16_t)SPIReceive(0x00) >> 2;
  5608  004EA2  C008  F005         	movff	humidityHex@value,??_humidityHex
  5609  004EA6  C009  F006         	movff	humidityHex@value+1,??_humidityHex+1
  5610  004EAA  0E06               	movlw	6
  5611  004EAC                     u3085:
  5612  004EAC  90D8               	bcf	status,0,c
  5613  004EAE  3605               	rlcf	??_humidityHex^0,f,c
  5614  004EB0  3606               	rlcf	(??_humidityHex+1)^0,f,c
  5615  004EB2  2EE8               	decfsz	wreg,f,c
  5616  004EB4  EF56  F027         	goto	u3085
  5617  004EB8  0E00               	movlw	0
  5618  004EBA  ECC6  F025         	call	_SPIReceive
  5619  004EBE  6E07               	movwf	(??_humidityHex+2)^0,c
  5620  004EC0  90D8               	bcf	status,0,c
  5621  004EC2  3207               	rrcf	(??_humidityHex+2)^0,f,c
  5622  004EC4  90D8               	bcf	status,0,c
  5623  004EC6  3207               	rrcf	(??_humidityHex+2)^0,f,c
  5624  004EC8  5007               	movf	(??_humidityHex+2)^0,w,c
  5625  004ECA  1005               	iorwf	??_humidityHex^0,w,c
  5626  004ECC  6E08               	movwf	humidityHex@value^0,c
  5627  004ECE  5006               	movf	(??_humidityHex+1)^0,w,c
  5628  004ED0  6E09               	movwf	(humidityHex@value+1)^0,c
  5629  004ED2                     
  5630                           ;sensor.c: 32:     LATCbits.LATC0 = 1;
  5631  004ED2  8085               	bsf	133,0,c	;volatile
  5632  004ED4                     
  5633                           ;sensor.c: 33:     return value;
  5634  004ED4  C008  F003         	movff	humidityHex@value,?_humidityHex
  5635  004ED8  C009  F004         	movff	humidityHex@value+1,?_humidityHex+1
  5636  004EDC  0012               	return		;funcret
  5637  004EDE                     __end_of_humidityHex:
  5638                           	callstack 0
  5639                           
  5640 ;; *************** function ___xxtofl *****************
  5641 ;; Defined at:
  5642 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\xxtofl.c"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;  sign            1    wreg     unsigned char 
  5645 ;;  val             4   10[COMRAM] long 
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;  sign            1   18[COMRAM] unsigned char 
  5648 ;;  arg             4   20[COMRAM] unsigned long 
  5649 ;;  exp             1   19[COMRAM] unsigned char 
  5650 ;; Return value:  Size  Location     Type
  5651 ;;                  4   10[COMRAM] unsigned char 
  5652 ;; Registers used:
  5653 ;;		wreg, status,2, status,0
  5654 ;; Tracked objects:
  5655 ;;		On entry : 0/0
  5656 ;;		On exit  : 0/0
  5657 ;;		Unchanged: 0/0
  5658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5659 ;;      Params:         4       0       0       0       0       0       0       0       0
  5660 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5661 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5662 ;;      Totals:        14       0       0       0       0       0       0       0       0
  5663 ;;Total ram usage:       14 bytes
  5664 ;; Hardware stack levels used: 1
  5665 ;; This function calls:
  5666 ;;		Nothing
  5667 ;; This function is called by:
  5668 ;;		_voltmeterDec
  5669 ;;		_pourcentBatt
  5670 ;;		_printBatteryLevel
  5671 ;;		_humidityDec
  5672 ;;		_printHumidityLevel
  5673 ;;		_sendMeanHumi
  5674 ;;		_sendMeanTemp
  5675 ;;		_temperatureDec
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679                           	psect	text22
  5680  0065CA                     __ptext22:
  5681                           	callstack 0
  5682  0065CA                     ___xxtofl:
  5683                           	callstack 29
  5684                           
  5685                           ;incstack = 0
  5686                           ;___xxtofl@sign stored from wreg
  5687  0065CA  6E13               	movwf	___xxtofl@sign^0,c
  5688  0065CC  5013               	movf	___xxtofl@sign^0,w,c
  5689  0065CE  B4D8               	btfsc	status,2,c
  5690  0065D0  EFEC  F032         	goto	u2931
  5691  0065D4  EFEE  F032         	goto	u2930
  5692  0065D8                     u2931:
  5693  0065D8  EF10  F033         	goto	l1135
  5694  0065DC                     u2930:
  5695  0065DC  BE0E               	btfsc	(___xxtofl@val+3)^0,7,c
  5696  0065DE  EFF5  F032         	goto	u2940
  5697  0065E2  EFF3  F032         	goto	u2941
  5698  0065E6                     u2941:
  5699  0065E6  EF10  F033         	goto	l1135
  5700  0065EA                     u2940:
  5701  0065EA  C00B  F00F         	movff	___xxtofl@val,??___xxtofl
  5702  0065EE  C00C  F010         	movff	___xxtofl@val+1,??___xxtofl+1
  5703  0065F2  C00D  F011         	movff	___xxtofl@val+2,??___xxtofl+2
  5704  0065F6  C00E  F012         	movff	___xxtofl@val+3,??___xxtofl+3
  5705  0065FA  1E0F               	comf	??___xxtofl^0,f,c
  5706  0065FC  1E10               	comf	(??___xxtofl+1)^0,f,c
  5707  0065FE  1E11               	comf	(??___xxtofl+2)^0,f,c
  5708  006600  1E12               	comf	(??___xxtofl+3)^0,f,c
  5709  006602  2A0F               	incf	??___xxtofl^0,f,c
  5710  006604  0E00               	movlw	0
  5711  006606  2210               	addwfc	(??___xxtofl+1)^0,f,c
  5712  006608  2211               	addwfc	(??___xxtofl+2)^0,f,c
  5713  00660A  2212               	addwfc	(??___xxtofl+3)^0,f,c
  5714  00660C  C00F  F015         	movff	??___xxtofl,___xxtofl@arg
  5715  006610  C010  F016         	movff	??___xxtofl+1,___xxtofl@arg+1
  5716  006614  C011  F017         	movff	??___xxtofl+2,___xxtofl@arg+2
  5717  006618  C012  F018         	movff	??___xxtofl+3,___xxtofl@arg+3
  5718  00661C  EF18  F033         	goto	l3463
  5719  006620                     l1135:
  5720  006620  C00B  F015         	movff	___xxtofl@val,___xxtofl@arg
  5721  006624  C00C  F016         	movff	___xxtofl@val+1,___xxtofl@arg+1
  5722  006628  C00D  F017         	movff	___xxtofl@val+2,___xxtofl@arg+2
  5723  00662C  C00E  F018         	movff	___xxtofl@val+3,___xxtofl@arg+3
  5724  006630                     l3463:
  5725  006630  500B               	movf	___xxtofl@val^0,w,c
  5726  006632  100C               	iorwf	(___xxtofl@val+1)^0,w,c
  5727  006634  100D               	iorwf	(___xxtofl@val+2)^0,w,c
  5728  006636  100E               	iorwf	(___xxtofl@val+3)^0,w,c
  5729  006638  A4D8               	btfss	status,2,c
  5730  00663A  EF21  F033         	goto	u2951
  5731  00663E  EF23  F033         	goto	u2950
  5732  006642                     u2951:
  5733  006642  EF2D  F033         	goto	l3469
  5734  006646                     u2950:
  5735  006646  0E00               	movlw	0
  5736  006648  6E0B               	movwf	?___xxtofl^0,c
  5737  00664A  0E00               	movlw	0
  5738  00664C  6E0C               	movwf	(?___xxtofl+1)^0,c
  5739  00664E  0E00               	movlw	0
  5740  006650  6E0D               	movwf	(?___xxtofl+2)^0,c
  5741  006652  0E00               	movlw	0
  5742  006654  6E0E               	movwf	(?___xxtofl+3)^0,c
  5743  006656  EFBE  F033         	goto	l1138
  5744  00665A                     l3469:
  5745  00665A  0E96               	movlw	150
  5746  00665C  6E14               	movwf	___xxtofl@exp^0,c
  5747  00665E  EF37  F033         	goto	l3473
  5748  006662                     l3471:
  5749  006662  2A14               	incf	___xxtofl@exp^0,f,c
  5750  006664  90D8               	bcf	status,0,c
  5751  006666  3218               	rrcf	(___xxtofl@arg+3)^0,f,c
  5752  006668  3217               	rrcf	(___xxtofl@arg+2)^0,f,c
  5753  00666A  3216               	rrcf	(___xxtofl@arg+1)^0,f,c
  5754  00666C  3215               	rrcf	___xxtofl@arg^0,f,c
  5755  00666E                     l3473:
  5756  00666E  0E00               	movlw	0
  5757  006670  1415               	andwf	___xxtofl@arg^0,w,c
  5758  006672  6E0F               	movwf	??___xxtofl^0,c
  5759  006674  0E00               	movlw	0
  5760  006676  1416               	andwf	(___xxtofl@arg+1)^0,w,c
  5761  006678  6E10               	movwf	(??___xxtofl+1)^0,c
  5762  00667A  0E00               	movlw	0
  5763  00667C  1417               	andwf	(___xxtofl@arg+2)^0,w,c
  5764  00667E  6E11               	movwf	(??___xxtofl+2)^0,c
  5765  006680  0EFE               	movlw	254
  5766  006682  1418               	andwf	(___xxtofl@arg+3)^0,w,c
  5767  006684  6E12               	movwf	(??___xxtofl+3)^0,c
  5768  006686  500F               	movf	??___xxtofl^0,w,c
  5769  006688  1010               	iorwf	(??___xxtofl+1)^0,w,c
  5770  00668A  1011               	iorwf	(??___xxtofl+2)^0,w,c
  5771  00668C  1012               	iorwf	(??___xxtofl+3)^0,w,c
  5772  00668E  A4D8               	btfss	status,2,c
  5773  006690  EF4C  F033         	goto	u2961
  5774  006694  EF4E  F033         	goto	u2960
  5775  006698                     u2961:
  5776  006698  EF31  F033         	goto	l3471
  5777  00669C                     u2960:
  5778  00669C  EF5C  F033         	goto	l1142
  5779  0066A0                     l3475:
  5780  0066A0  2A14               	incf	___xxtofl@exp^0,f,c
  5781  0066A2  0E01               	movlw	1
  5782  0066A4  2615               	addwf	___xxtofl@arg^0,f,c
  5783  0066A6  0E00               	movlw	0
  5784  0066A8  2216               	addwfc	(___xxtofl@arg+1)^0,f,c
  5785  0066AA  2217               	addwfc	(___xxtofl@arg+2)^0,f,c
  5786  0066AC  2218               	addwfc	(___xxtofl@arg+3)^0,f,c
  5787  0066AE  90D8               	bcf	status,0,c
  5788  0066B0  3218               	rrcf	(___xxtofl@arg+3)^0,f,c
  5789  0066B2  3217               	rrcf	(___xxtofl@arg+2)^0,f,c
  5790  0066B4  3216               	rrcf	(___xxtofl@arg+1)^0,f,c
  5791  0066B6  3215               	rrcf	___xxtofl@arg^0,f,c
  5792  0066B8                     l1142:
  5793  0066B8  0E00               	movlw	0
  5794  0066BA  1415               	andwf	___xxtofl@arg^0,w,c
  5795  0066BC  6E0F               	movwf	??___xxtofl^0,c
  5796  0066BE  0E00               	movlw	0
  5797  0066C0  1416               	andwf	(___xxtofl@arg+1)^0,w,c
  5798  0066C2  6E10               	movwf	(??___xxtofl+1)^0,c
  5799  0066C4  0E00               	movlw	0
  5800  0066C6  1417               	andwf	(___xxtofl@arg+2)^0,w,c
  5801  0066C8  6E11               	movwf	(??___xxtofl+2)^0,c
  5802  0066CA  0EFF               	movlw	255
  5803  0066CC  1418               	andwf	(___xxtofl@arg+3)^0,w,c
  5804  0066CE  6E12               	movwf	(??___xxtofl+3)^0,c
  5805  0066D0  500F               	movf	??___xxtofl^0,w,c
  5806  0066D2  1010               	iorwf	(??___xxtofl+1)^0,w,c
  5807  0066D4  1011               	iorwf	(??___xxtofl+2)^0,w,c
  5808  0066D6  1012               	iorwf	(??___xxtofl+3)^0,w,c
  5809  0066D8  A4D8               	btfss	status,2,c
  5810  0066DA  EF71  F033         	goto	u2971
  5811  0066DE  EF73  F033         	goto	u2970
  5812  0066E2                     u2971:
  5813  0066E2  EF50  F033         	goto	l3475
  5814  0066E6                     u2970:
  5815  0066E6  EF7B  F033         	goto	l3483
  5816  0066EA                     l3481:
  5817  0066EA  0614               	decf	___xxtofl@exp^0,f,c
  5818  0066EC  90D8               	bcf	status,0,c
  5819  0066EE  3615               	rlcf	___xxtofl@arg^0,f,c
  5820  0066F0  3616               	rlcf	(___xxtofl@arg+1)^0,f,c
  5821  0066F2  3617               	rlcf	(___xxtofl@arg+2)^0,f,c
  5822  0066F4  3618               	rlcf	(___xxtofl@arg+3)^0,f,c
  5823  0066F6                     l3483:
  5824  0066F6  BE17               	btfsc	(___xxtofl@arg+2)^0,7,c
  5825  0066F8  EF80  F033         	goto	u2981
  5826  0066FC  EF82  F033         	goto	u2980
  5827  006700                     u2981:
  5828  006700  EF8A  F033         	goto	l1149
  5829  006704                     u2980:
  5830  006704  0E02               	movlw	2
  5831  006706  6014               	cpfslt	___xxtofl@exp^0,c
  5832  006708  EF88  F033         	goto	u2991
  5833  00670C  EF8A  F033         	goto	u2990
  5834  006710                     u2991:
  5835  006710  EF75  F033         	goto	l3481
  5836  006714                     u2990:
  5837  006714                     l1149:
  5838  006714  B014               	btfsc	___xxtofl@exp^0,0,c
  5839  006716  EF8F  F033         	goto	u3001
  5840  00671A  EF91  F033         	goto	u3000
  5841  00671E                     u3001:
  5842  00671E  EF92  F033         	goto	l3489
  5843  006722                     u3000:
  5844  006722  9E17               	bcf	(___xxtofl@arg+2)^0,7,c
  5845  006724                     l3489:
  5846  006724  90D8               	bcf	status,0,c
  5847  006726  3214               	rrcf	___xxtofl@exp^0,f,c
  5848  006728  C014  F00F         	movff	___xxtofl@exp,??___xxtofl
  5849  00672C  6A10               	clrf	(??___xxtofl+1)^0,c
  5850  00672E  6A11               	clrf	(??___xxtofl+2)^0,c
  5851  006730  6A12               	clrf	(??___xxtofl+3)^0,c
  5852  006732  C00F  F012         	movff	??___xxtofl,??___xxtofl+3
  5853  006736  6A11               	clrf	(??___xxtofl+2)^0,c
  5854  006738  6A10               	clrf	(??___xxtofl+1)^0,c
  5855  00673A  6A0F               	clrf	??___xxtofl^0,c
  5856  00673C  500F               	movf	??___xxtofl^0,w,c
  5857  00673E  1215               	iorwf	___xxtofl@arg^0,f,c
  5858  006740  5010               	movf	(??___xxtofl+1)^0,w,c
  5859  006742  1216               	iorwf	(___xxtofl@arg+1)^0,f,c
  5860  006744  5011               	movf	(??___xxtofl+2)^0,w,c
  5861  006746  1217               	iorwf	(___xxtofl@arg+2)^0,f,c
  5862  006748  5012               	movf	(??___xxtofl+3)^0,w,c
  5863  00674A  1218               	iorwf	(___xxtofl@arg+3)^0,f,c
  5864  00674C  5013               	movf	___xxtofl@sign^0,w,c
  5865  00674E  B4D8               	btfsc	status,2,c
  5866  006750  EFAC  F033         	goto	u3011
  5867  006754  EFAE  F033         	goto	u3010
  5868  006758                     u3011:
  5869  006758  EFB6  F033         	goto	l3499
  5870  00675C                     u3010:
  5871  00675C  BE0E               	btfsc	(___xxtofl@val+3)^0,7,c
  5872  00675E  EFB5  F033         	goto	u3020
  5873  006762  EFB3  F033         	goto	u3021
  5874  006766                     u3021:
  5875  006766  EFB6  F033         	goto	l3499
  5876  00676A                     u3020:
  5877  00676A  8E18               	bsf	(___xxtofl@arg+3)^0,7,c
  5878  00676C                     l3499:
  5879  00676C  C015  F00B         	movff	___xxtofl@arg,?___xxtofl
  5880  006770  C016  F00C         	movff	___xxtofl@arg+1,?___xxtofl+1
  5881  006774  C017  F00D         	movff	___xxtofl@arg+2,?___xxtofl+2
  5882  006778  C018  F00E         	movff	___xxtofl@arg+3,?___xxtofl+3
  5883  00677C                     l1138:
  5884  00677C  0012               	return		;funcret
  5885  00677E                     __end_of___xxtofl:
  5886                           	callstack 0
  5887                           
  5888 ;; *************** function ___fltol *****************
  5889 ;; Defined at:
  5890 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\fltol.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;  f1              4   90[COMRAM] unsigned char 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  exp1            1    5[BANK0 ] unsigned char 
  5895 ;;  sign1           1    4[BANK0 ] unsigned char 
  5896 ;; Return value:  Size  Location     Type
  5897 ;;                  4   90[COMRAM] long 
  5898 ;; Registers used:
  5899 ;;		wreg, status,2, status,0
  5900 ;; Tracked objects:
  5901 ;;		On entry : 0/0
  5902 ;;		On exit  : 0/0
  5903 ;;		Unchanged: 0/0
  5904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5905 ;;      Params:         4       0       0       0       0       0       0       0       0
  5906 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5907 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5908 ;;      Totals:         4       6       0       0       0       0       0       0       0
  5909 ;;Total ram usage:       10 bytes
  5910 ;; Hardware stack levels used: 1
  5911 ;; This function calls:
  5912 ;;		Nothing
  5913 ;; This function is called by:
  5914 ;;		_voltmeterDec
  5915 ;;		_pourcentBatt
  5916 ;;		_printBatteryLevel
  5917 ;;		_humidityDec
  5918 ;;		_printHumidityLevel
  5919 ;;		_sendMeanHumi
  5920 ;;		_sendMeanTemp
  5921 ;;		_temperatureDec
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           	psect	text23
  5926  005956                     __ptext23:
  5927                           	callstack 0
  5928  005956                     ___fltol:
  5929                           	callstack 29
  5930  005956  345D               	rlcf	(___fltol@f1+2)^0,w,c
  5931  005958  345E               	rlcf	(___fltol@f1+3)^0,w,c
  5932  00595A  0100               	movlb	0	; () banked
  5933  00595C  6F65               	movwf	___fltol@exp1& (0+255),b
  5934  00595E  5165               	movf	___fltol@exp1& (0+255),w,b
  5935  005960  A4D8               	btfss	status,2,c
  5936  005962  EFB5  F02C         	goto	u2801
  5937  005966  EFB7  F02C         	goto	u2800
  5938  00596A                     u2801:
  5939  00596A  EFC1  F02C         	goto	l3381
  5940  00596E                     u2800:
  5941  00596E                     l3377:
  5942                           
  5943                           ; BSR set to: 0
  5944  00596E  0E00               	movlw	0
  5945  005970  6E5B               	movwf	?___fltol^0,c
  5946  005972  0E00               	movlw	0
  5947  005974  6E5C               	movwf	(?___fltol+1)^0,c
  5948  005976  0E00               	movlw	0
  5949  005978  6E5D               	movwf	(?___fltol+2)^0,c
  5950  00597A  0E00               	movlw	0
  5951  00597C  6E5E               	movwf	(?___fltol+3)^0,c
  5952  00597E  EF2E  F02D         	goto	l777
  5953  005982                     l3381:
  5954                           
  5955                           ; BSR set to: 0
  5956  005982  C05B  F060         	movff	___fltol@f1,??___fltol
  5957  005986  C05C  F061         	movff	___fltol@f1+1,??___fltol+1
  5958  00598A  C05D  F062         	movff	___fltol@f1+2,??___fltol+2
  5959  00598E  C05E  F063         	movff	___fltol@f1+3,??___fltol+3
  5960  005992  0E20               	movlw	32
  5961  005994  EFD1  F02C         	goto	u2810
  5962  005998                     u2815:
  5963  005998  90D8               	bcf	status,0,c
  5964  00599A  3363               	rrcf	(??___fltol+3)& (0+255),f,b
  5965  00599C  3362               	rrcf	(??___fltol+2)& (0+255),f,b
  5966  00599E  3361               	rrcf	(??___fltol+1)& (0+255),f,b
  5967  0059A0  3360               	rrcf	??___fltol& (0+255),f,b
  5968  0059A2                     u2810:
  5969  0059A2  2EE8               	decfsz	wreg,f,c
  5970  0059A4  EFCC  F02C         	goto	u2815
  5971  0059A8  5160               	movf	??___fltol& (0+255),w,b
  5972  0059AA  6F64               	movwf	___fltol@sign1& (0+255),b
  5973  0059AC                     
  5974                           ; BSR set to: 0
  5975  0059AC  8E5D               	bsf	(___fltol@f1+2)^0,7,c
  5976  0059AE                     
  5977                           ; BSR set to: 0
  5978  0059AE  0EFF               	movlw	255
  5979  0059B0  165B               	andwf	___fltol@f1^0,f,c
  5980  0059B2  0EFF               	movlw	255
  5981  0059B4  165C               	andwf	(___fltol@f1+1)^0,f,c
  5982  0059B6  0EFF               	movlw	255
  5983  0059B8  165D               	andwf	(___fltol@f1+2)^0,f,c
  5984  0059BA  0E00               	movlw	0
  5985  0059BC  165E               	andwf	(___fltol@f1+3)^0,f,c
  5986  0059BE                     
  5987                           ; BSR set to: 0
  5988  0059BE  0E96               	movlw	150
  5989  0059C0  5F65               	subwf	___fltol@exp1& (0+255),f,b
  5990  0059C2                     
  5991                           ; BSR set to: 0
  5992  0059C2  BF65               	btfsc	___fltol@exp1& (0+255),7,b
  5993  0059C4  EFE8  F02C         	goto	u2820
  5994  0059C8  EFE6  F02C         	goto	u2821
  5995  0059CC                     u2821:
  5996  0059CC  EFFE  F02C         	goto	l3401
  5997  0059D0                     u2820:
  5998  0059D0                     
  5999                           ; BSR set to: 0
  6000  0059D0  5165               	movf	___fltol@exp1& (0+255),w,b
  6001  0059D2  0A80               	xorlw	128
  6002  0059D4  0F97               	addlw	151
  6003  0059D6  B0D8               	btfsc	status,0,c
  6004  0059D8  EFF0  F02C         	goto	u2831
  6005  0059DC  EFF2  F02C         	goto	u2830
  6006  0059E0                     u2831:
  6007  0059E0  EFF4  F02C         	goto	l3397
  6008  0059E4                     u2830:
  6009  0059E4  EFB7  F02C         	goto	l3377
  6010  0059E8                     l3397:
  6011                           
  6012                           ; BSR set to: 0
  6013  0059E8  90D8               	bcf	status,0,c
  6014  0059EA  325E               	rrcf	(___fltol@f1+3)^0,f,c
  6015  0059EC  325D               	rrcf	(___fltol@f1+2)^0,f,c
  6016  0059EE  325C               	rrcf	(___fltol@f1+1)^0,f,c
  6017  0059F0  325B               	rrcf	___fltol@f1^0,f,c
  6018  0059F2                     
  6019                           ; BSR set to: 0
  6020  0059F2  3F65               	incfsz	___fltol@exp1& (0+255),f,b
  6021  0059F4  EFF4  F02C         	goto	l3397
  6022  0059F8  EF16  F02D         	goto	l3411
  6023  0059FC                     l3401:
  6024                           
  6025                           ; BSR set to: 0
  6026  0059FC  0E1F               	movlw	31
  6027  0059FE  6565               	cpfsgt	___fltol@exp1& (0+255),b
  6028  005A00  EF04  F02D         	goto	u2841
  6029  005A04  EF06  F02D         	goto	u2840
  6030  005A08                     u2841:
  6031  005A08  EF0E  F02D         	goto	l3409
  6032  005A0C                     u2840:
  6033  005A0C  EFB7  F02C         	goto	l3377
  6034  005A10                     l3407:
  6035                           
  6036                           ; BSR set to: 0
  6037  005A10  90D8               	bcf	status,0,c
  6038  005A12  365B               	rlcf	___fltol@f1^0,f,c
  6039  005A14  365C               	rlcf	(___fltol@f1+1)^0,f,c
  6040  005A16  365D               	rlcf	(___fltol@f1+2)^0,f,c
  6041  005A18  365E               	rlcf	(___fltol@f1+3)^0,f,c
  6042  005A1A  0765               	decf	___fltol@exp1& (0+255),f,b
  6043  005A1C                     l3409:
  6044                           
  6045                           ; BSR set to: 0
  6046  005A1C  5165               	movf	___fltol@exp1& (0+255),w,b
  6047  005A1E  A4D8               	btfss	status,2,c
  6048  005A20  EF14  F02D         	goto	u2851
  6049  005A24  EF16  F02D         	goto	u2850
  6050  005A28                     u2851:
  6051  005A28  EF08  F02D         	goto	l3407
  6052  005A2C                     u2850:
  6053  005A2C                     l3411:
  6054                           
  6055                           ; BSR set to: 0
  6056  005A2C  5164               	movf	___fltol@sign1& (0+255),w,b
  6057  005A2E  B4D8               	btfsc	status,2,c
  6058  005A30  EF1C  F02D         	goto	u2861
  6059  005A34  EF1E  F02D         	goto	u2860
  6060  005A38                     u2861:
  6061  005A38  EF26  F02D         	goto	l3415
  6062  005A3C                     u2860:
  6063  005A3C                     
  6064                           ; BSR set to: 0
  6065  005A3C  1E5E               	comf	(___fltol@f1+3)^0,f,c
  6066  005A3E  1E5D               	comf	(___fltol@f1+2)^0,f,c
  6067  005A40  1E5C               	comf	(___fltol@f1+1)^0,f,c
  6068  005A42  6C5B               	negf	___fltol@f1^0,c
  6069  005A44  0E00               	movlw	0
  6070  005A46  225C               	addwfc	(___fltol@f1+1)^0,f,c
  6071  005A48  225D               	addwfc	(___fltol@f1+2)^0,f,c
  6072  005A4A  225E               	addwfc	(___fltol@f1+3)^0,f,c
  6073  005A4C                     l3415:
  6074                           
  6075                           ; BSR set to: 0
  6076  005A4C  C05B  F05B         	movff	___fltol@f1,?___fltol
  6077  005A50  C05C  F05C         	movff	___fltol@f1+1,?___fltol+1
  6078  005A54  C05D  F05D         	movff	___fltol@f1+2,?___fltol+2
  6079  005A58  C05E  F05E         	movff	___fltol@f1+3,?___fltol+3
  6080  005A5C                     l777:
  6081                           
  6082                           ; BSR set to: 0
  6083  005A5C  0012               	return		;funcret
  6084  005A5E                     __end_of___fltol:
  6085                           	callstack 0
  6086                           
  6087 ;; *************** function ___flmul *****************
  6088 ;; Defined at:
  6089 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sprcmul.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;  b               4   49[COMRAM] long 
  6092 ;;  a               4   53[COMRAM] long 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  prod            4   68[COMRAM] struct .
  6095 ;;  grs             4   62[COMRAM] unsigned long 
  6096 ;;  temp            2   72[COMRAM] struct .
  6097 ;;  bexp            1   67[COMRAM] unsigned char 
  6098 ;;  aexp            1   66[COMRAM] unsigned char 
  6099 ;;  sign            1   61[COMRAM] unsigned char 
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  4   49[COMRAM] unsigned char 
  6102 ;; Registers used:
  6103 ;;		wreg, status,2, status,0, prodl, prodh
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6109 ;;      Params:         8       0       0       0       0       0       0       0       0
  6110 ;;      Locals:        13       0       0       0       0       0       0       0       0
  6111 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6112 ;;      Totals:        25       0       0       0       0       0       0       0       0
  6113 ;;Total ram usage:       25 bytes
  6114 ;; Hardware stack levels used: 1
  6115 ;; This function calls:
  6116 ;;		Nothing
  6117 ;; This function is called by:
  6118 ;;		_voltmeterDec
  6119 ;;		_pourcentBatt
  6120 ;;		_printBatteryLevel
  6121 ;;		_humidityDec
  6122 ;;		_printHumidityLevel
  6123 ;;		_sendMeanHumi
  6124 ;;		_sendMeanTemp
  6125 ;;		_temperatureDec
  6126 ;; This function uses a non-reentrant model
  6127 ;;
  6128                           
  6129                           	psect	text24
  6130  006DB6                     __ptext24:
  6131                           	callstack 0
  6132  006DB6                     ___flmul:
  6133                           	callstack 29
  6134  006DB6  5035               	movf	(___flmul@b+3)^0,w,c
  6135  006DB8  0B80               	andlw	128
  6136  006DBA  6E3E               	movwf	___flmul@sign^0,c
  6137  006DBC  5035               	movf	(___flmul@b+3)^0,w,c
  6138  006DBE  2435               	addwf	(___flmul@b+3)^0,w,c
  6139  006DC0  6E44               	movwf	___flmul@bexp^0,c
  6140  006DC2  AE34               	btfss	(___flmul@b+2)^0,7,c
  6141  006DC4  EFE6  F036         	goto	u2611
  6142  006DC8  EFE8  F036         	goto	u2610
  6143  006DCC                     u2611:
  6144  006DCC  EFE9  F036         	goto	l3251
  6145  006DD0                     u2610:
  6146  006DD0  8044               	bsf	___flmul@bexp^0,0,c
  6147  006DD2                     l3251:
  6148  006DD2  5044               	movf	___flmul@bexp^0,w,c
  6149  006DD4  B4D8               	btfsc	status,2,c
  6150  006DD6  EFEF  F036         	goto	u2621
  6151  006DDA  EFF1  F036         	goto	u2620
  6152  006DDE                     u2621:
  6153  006DDE  EF04  F037         	goto	l3259
  6154  006DE2                     u2620:
  6155  006DE2  2844               	incf	___flmul@bexp^0,w,c
  6156  006DE4  A4D8               	btfss	status,2,c
  6157  006DE6  EFF7  F036         	goto	u2631
  6158  006DEA  EFF9  F036         	goto	u2630
  6159  006DEE                     u2631:
  6160  006DEE  EF01  F037         	goto	l3257
  6161  006DF2                     u2630:
  6162  006DF2  0E00               	movlw	0
  6163  006DF4  6E32               	movwf	___flmul@b^0,c
  6164  006DF6  0E00               	movlw	0
  6165  006DF8  6E33               	movwf	(___flmul@b+1)^0,c
  6166  006DFA  0E00               	movlw	0
  6167  006DFC  6E34               	movwf	(___flmul@b+2)^0,c
  6168  006DFE  0E00               	movlw	0
  6169  006E00  6E35               	movwf	(___flmul@b+3)^0,c
  6170  006E02                     l3257:
  6171  006E02  8E34               	bsf	(___flmul@b+2)^0,7,c
  6172  006E04  EF0C  F037         	goto	l3261
  6173  006E08                     l3259:
  6174  006E08  0E00               	movlw	0
  6175  006E0A  6E32               	movwf	___flmul@b^0,c
  6176  006E0C  0E00               	movlw	0
  6177  006E0E  6E33               	movwf	(___flmul@b+1)^0,c
  6178  006E10  0E00               	movlw	0
  6179  006E12  6E34               	movwf	(___flmul@b+2)^0,c
  6180  006E14  0E00               	movlw	0
  6181  006E16  6E35               	movwf	(___flmul@b+3)^0,c
  6182  006E18                     l3261:
  6183  006E18  5039               	movf	(___flmul@a+3)^0,w,c
  6184  006E1A  0B80               	andlw	128
  6185  006E1C  1A3E               	xorwf	___flmul@sign^0,f,c
  6186  006E1E  5039               	movf	(___flmul@a+3)^0,w,c
  6187  006E20  2439               	addwf	(___flmul@a+3)^0,w,c
  6188  006E22  6E43               	movwf	___flmul@aexp^0,c
  6189  006E24  AE38               	btfss	(___flmul@a+2)^0,7,c
  6190  006E26  EF17  F037         	goto	u2641
  6191  006E2A  EF19  F037         	goto	u2640
  6192  006E2E                     u2641:
  6193  006E2E  EF1A  F037         	goto	l3269
  6194  006E32                     u2640:
  6195  006E32  8043               	bsf	___flmul@aexp^0,0,c
  6196  006E34                     l3269:
  6197  006E34  5043               	movf	___flmul@aexp^0,w,c
  6198  006E36  B4D8               	btfsc	status,2,c
  6199  006E38  EF20  F037         	goto	u2651
  6200  006E3C  EF22  F037         	goto	u2650
  6201  006E40                     u2651:
  6202  006E40  EF35  F037         	goto	l3277
  6203  006E44                     u2650:
  6204  006E44  2843               	incf	___flmul@aexp^0,w,c
  6205  006E46  A4D8               	btfss	status,2,c
  6206  006E48  EF28  F037         	goto	u2661
  6207  006E4C  EF2A  F037         	goto	u2660
  6208  006E50                     u2661:
  6209  006E50  EF32  F037         	goto	l3275
  6210  006E54                     u2660:
  6211  006E54  0E00               	movlw	0
  6212  006E56  6E36               	movwf	___flmul@a^0,c
  6213  006E58  0E00               	movlw	0
  6214  006E5A  6E37               	movwf	(___flmul@a+1)^0,c
  6215  006E5C  0E00               	movlw	0
  6216  006E5E  6E38               	movwf	(___flmul@a+2)^0,c
  6217  006E60  0E00               	movlw	0
  6218  006E62  6E39               	movwf	(___flmul@a+3)^0,c
  6219  006E64                     l3275:
  6220  006E64  8E38               	bsf	(___flmul@a+2)^0,7,c
  6221  006E66  EF3D  F037         	goto	l1094
  6222  006E6A                     l3277:
  6223  006E6A  0E00               	movlw	0
  6224  006E6C  6E36               	movwf	___flmul@a^0,c
  6225  006E6E  0E00               	movlw	0
  6226  006E70  6E37               	movwf	(___flmul@a+1)^0,c
  6227  006E72  0E00               	movlw	0
  6228  006E74  6E38               	movwf	(___flmul@a+2)^0,c
  6229  006E76  0E00               	movlw	0
  6230  006E78  6E39               	movwf	(___flmul@a+3)^0,c
  6231  006E7A                     l1094:
  6232  006E7A  5043               	movf	___flmul@aexp^0,w,c
  6233  006E7C  B4D8               	btfsc	status,2,c
  6234  006E7E  EF43  F037         	goto	u2671
  6235  006E82  EF45  F037         	goto	u2670
  6236  006E86                     u2671:
  6237  006E86  EF4D  F037         	goto	l3281
  6238  006E8A                     u2670:
  6239  006E8A  5044               	movf	___flmul@bexp^0,w,c
  6240  006E8C  A4D8               	btfss	status,2,c
  6241  006E8E  EF4B  F037         	goto	u2681
  6242  006E92  EF4D  F037         	goto	u2680
  6243  006E96                     u2681:
  6244  006E96  EF57  F037         	goto	l3285
  6245  006E9A                     u2680:
  6246  006E9A                     l3281:
  6247  006E9A  0E00               	movlw	0
  6248  006E9C  6E32               	movwf	?___flmul^0,c
  6249  006E9E  0E00               	movlw	0
  6250  006EA0  6E33               	movwf	(?___flmul+1)^0,c
  6251  006EA2  0E00               	movlw	0
  6252  006EA4  6E34               	movwf	(?___flmul+2)^0,c
  6253  006EA6  0E00               	movlw	0
  6254  006EA8  6E35               	movwf	(?___flmul+3)^0,c
  6255  006EAA  EFEF  F038         	goto	l1098
  6256  006EAE                     l3285:
  6257  006EAE  5038               	movf	(___flmul@a+2)^0,w,c
  6258  006EB0  0232               	mulwf	___flmul@b^0,c
  6259  006EB2  CFF3 F049          	movff	prodl,___flmul@temp
  6260  006EB6  CFF4 F04A          	movff	prodh,___flmul@temp+1
  6261  006EBA  5049               	movf	___flmul@temp^0,w,c
  6262  006EBC  6E3F               	movwf	___flmul@grs^0,c
  6263  006EBE  6A40               	clrf	(___flmul@grs+1)^0,c
  6264  006EC0  6A41               	clrf	(___flmul@grs+2)^0,c
  6265  006EC2  6A42               	clrf	(___flmul@grs+3)^0,c
  6266  006EC4  504A               	movf	(___flmul@temp+1)^0,w,c
  6267  006EC6  6E45               	movwf	___flmul@prod^0,c
  6268  006EC8  6A46               	clrf	(___flmul@prod+1)^0,c
  6269  006ECA  6A47               	clrf	(___flmul@prod+2)^0,c
  6270  006ECC  6A48               	clrf	(___flmul@prod+3)^0,c
  6271  006ECE  5037               	movf	(___flmul@a+1)^0,w,c
  6272  006ED0  0233               	mulwf	(___flmul@b+1)^0,c
  6273  006ED2  CFF3 F049          	movff	prodl,___flmul@temp
  6274  006ED6  CFF4 F04A          	movff	prodh,___flmul@temp+1
  6275  006EDA  5049               	movf	___flmul@temp^0,w,c
  6276  006EDC  263F               	addwf	___flmul@grs^0,f,c
  6277  006EDE  0E00               	movlw	0
  6278  006EE0  2240               	addwfc	(___flmul@grs+1)^0,f,c
  6279  006EE2  2241               	addwfc	(___flmul@grs+2)^0,f,c
  6280  006EE4  2242               	addwfc	(___flmul@grs+3)^0,f,c
  6281  006EE6  504A               	movf	(___flmul@temp+1)^0,w,c
  6282  006EE8  2645               	addwf	___flmul@prod^0,f,c
  6283  006EEA  0E00               	movlw	0
  6284  006EEC  2246               	addwfc	(___flmul@prod+1)^0,f,c
  6285  006EEE  2247               	addwfc	(___flmul@prod+2)^0,f,c
  6286  006EF0  2248               	addwfc	(___flmul@prod+3)^0,f,c
  6287  006EF2  5036               	movf	___flmul@a^0,w,c
  6288  006EF4  0234               	mulwf	(___flmul@b+2)^0,c
  6289  006EF6  CFF3 F049          	movff	prodl,___flmul@temp
  6290  006EFA  CFF4 F04A          	movff	prodh,___flmul@temp+1
  6291  006EFE  5049               	movf	___flmul@temp^0,w,c
  6292  006F00  263F               	addwf	___flmul@grs^0,f,c
  6293  006F02  0E00               	movlw	0
  6294  006F04  2240               	addwfc	(___flmul@grs+1)^0,f,c
  6295  006F06  2241               	addwfc	(___flmul@grs+2)^0,f,c
  6296  006F08  2242               	addwfc	(___flmul@grs+3)^0,f,c
  6297  006F0A  504A               	movf	(___flmul@temp+1)^0,w,c
  6298  006F0C  2645               	addwf	___flmul@prod^0,f,c
  6299  006F0E  0E00               	movlw	0
  6300  006F10  2246               	addwfc	(___flmul@prod+1)^0,f,c
  6301  006F12  2247               	addwfc	(___flmul@prod+2)^0,f,c
  6302  006F14  2248               	addwfc	(___flmul@prod+3)^0,f,c
  6303  006F16  C041  F042         	movff	___flmul@grs+2,___flmul@grs+3
  6304  006F1A  C040  F041         	movff	___flmul@grs+1,___flmul@grs+2
  6305  006F1E  C03F  F040         	movff	___flmul@grs,___flmul@grs+1
  6306  006F22  6A3F               	clrf	___flmul@grs^0,c
  6307  006F24  5036               	movf	___flmul@a^0,w,c
  6308  006F26  0233               	mulwf	(___flmul@b+1)^0,c
  6309  006F28  CFF3 F049          	movff	prodl,___flmul@temp
  6310  006F2C  CFF4 F04A          	movff	prodh,___flmul@temp+1
  6311  006F30  5049               	movf	___flmul@temp^0,w,c
  6312  006F32  263F               	addwf	___flmul@grs^0,f,c
  6313  006F34  504A               	movf	(___flmul@temp+1)^0,w,c
  6314  006F36  2240               	addwfc	(___flmul@grs+1)^0,f,c
  6315  006F38  0E00               	movlw	0
  6316  006F3A  2241               	addwfc	(___flmul@grs+2)^0,f,c
  6317  006F3C  0E00               	movlw	0
  6318  006F3E  2242               	addwfc	(___flmul@grs+3)^0,f,c
  6319  006F40  5037               	movf	(___flmul@a+1)^0,w,c
  6320  006F42  0232               	mulwf	___flmul@b^0,c
  6321  006F44  CFF3 F049          	movff	prodl,___flmul@temp
  6322  006F48  CFF4 F04A          	movff	prodh,___flmul@temp+1
  6323  006F4C  5049               	movf	___flmul@temp^0,w,c
  6324  006F4E  263F               	addwf	___flmul@grs^0,f,c
  6325  006F50  504A               	movf	(___flmul@temp+1)^0,w,c
  6326  006F52  2240               	addwfc	(___flmul@grs+1)^0,f,c
  6327  006F54  0E00               	movlw	0
  6328  006F56  2241               	addwfc	(___flmul@grs+2)^0,f,c
  6329  006F58  0E00               	movlw	0
  6330  006F5A  2242               	addwfc	(___flmul@grs+3)^0,f,c
  6331  006F5C  C041  F042         	movff	___flmul@grs+2,___flmul@grs+3
  6332  006F60  C040  F041         	movff	___flmul@grs+1,___flmul@grs+2
  6333  006F64  C03F  F040         	movff	___flmul@grs,___flmul@grs+1
  6334  006F68  6A3F               	clrf	___flmul@grs^0,c
  6335  006F6A  5036               	movf	___flmul@a^0,w,c
  6336  006F6C  0232               	mulwf	___flmul@b^0,c
  6337  006F6E  CFF3 F049          	movff	prodl,___flmul@temp
  6338  006F72  CFF4 F04A          	movff	prodh,___flmul@temp+1
  6339  006F76  5049               	movf	___flmul@temp^0,w,c
  6340  006F78  263F               	addwf	___flmul@grs^0,f,c
  6341  006F7A  504A               	movf	(___flmul@temp+1)^0,w,c
  6342  006F7C  2240               	addwfc	(___flmul@grs+1)^0,f,c
  6343  006F7E  0E00               	movlw	0
  6344  006F80  2241               	addwfc	(___flmul@grs+2)^0,f,c
  6345  006F82  0E00               	movlw	0
  6346  006F84  2242               	addwfc	(___flmul@grs+3)^0,f,c
  6347  006F86  5038               	movf	(___flmul@a+2)^0,w,c
  6348  006F88  0233               	mulwf	(___flmul@b+1)^0,c
  6349  006F8A  CFF3 F049          	movff	prodl,___flmul@temp
  6350  006F8E  CFF4 F04A          	movff	prodh,___flmul@temp+1
  6351  006F92  5049               	movf	___flmul@temp^0,w,c
  6352  006F94  2645               	addwf	___flmul@prod^0,f,c
  6353  006F96  504A               	movf	(___flmul@temp+1)^0,w,c
  6354  006F98  2246               	addwfc	(___flmul@prod+1)^0,f,c
  6355  006F9A  0E00               	movlw	0
  6356  006F9C  2247               	addwfc	(___flmul@prod+2)^0,f,c
  6357  006F9E  0E00               	movlw	0
  6358  006FA0  2248               	addwfc	(___flmul@prod+3)^0,f,c
  6359  006FA2  5037               	movf	(___flmul@a+1)^0,w,c
  6360  006FA4  0234               	mulwf	(___flmul@b+2)^0,c
  6361  006FA6  CFF3 F049          	movff	prodl,___flmul@temp
  6362  006FAA  CFF4 F04A          	movff	prodh,___flmul@temp+1
  6363  006FAE  5049               	movf	___flmul@temp^0,w,c
  6364  006FB0  2645               	addwf	___flmul@prod^0,f,c
  6365  006FB2  504A               	movf	(___flmul@temp+1)^0,w,c
  6366  006FB4  2246               	addwfc	(___flmul@prod+1)^0,f,c
  6367  006FB6  0E00               	movlw	0
  6368  006FB8  2247               	addwfc	(___flmul@prod+2)^0,f,c
  6369  006FBA  0E00               	movlw	0
  6370  006FBC  2248               	addwfc	(___flmul@prod+3)^0,f,c
  6371  006FBE  5038               	movf	(___flmul@a+2)^0,w,c
  6372  006FC0  0234               	mulwf	(___flmul@b+2)^0,c
  6373  006FC2  CFF3 F049          	movff	prodl,___flmul@temp
  6374  006FC6  CFF4 F04A          	movff	prodh,___flmul@temp+1
  6375  006FCA  5049               	movf	___flmul@temp^0,w,c
  6376  006FCC  6E3A               	movwf	??___flmul^0,c
  6377  006FCE  504A               	movf	(___flmul@temp+1)^0,w,c
  6378  006FD0  6E3B               	movwf	(??___flmul+1)^0,c
  6379  006FD2  6A3C               	clrf	(??___flmul+2)^0,c
  6380  006FD4  6A3D               	clrf	(??___flmul+3)^0,c
  6381  006FD6  C03C  F03D         	movff	??___flmul+2,??___flmul+3
  6382  006FDA  C03B  F03C         	movff	??___flmul+1,??___flmul+2
  6383  006FDE  C03A  F03B         	movff	??___flmul,??___flmul+1
  6384  006FE2  6A3A               	clrf	??___flmul^0,c
  6385  006FE4  503A               	movf	??___flmul^0,w,c
  6386  006FE6  2645               	addwf	___flmul@prod^0,f,c
  6387  006FE8  503B               	movf	(??___flmul+1)^0,w,c
  6388  006FEA  2246               	addwfc	(___flmul@prod+1)^0,f,c
  6389  006FEC  503C               	movf	(??___flmul+2)^0,w,c
  6390  006FEE  2247               	addwfc	(___flmul@prod+2)^0,f,c
  6391  006FF0  503D               	movf	(??___flmul+3)^0,w,c
  6392  006FF2  2248               	addwfc	(___flmul@prod+3)^0,f,c
  6393  006FF4  C03F  F03A         	movff	___flmul@grs,??___flmul
  6394  006FF8  C040  F03B         	movff	___flmul@grs+1,??___flmul+1
  6395  006FFC  C041  F03C         	movff	___flmul@grs+2,??___flmul+2
  6396  007000  C042  F03D         	movff	___flmul@grs+3,??___flmul+3
  6397  007004  0E19               	movlw	25
  6398  007006  EF0A  F038         	goto	u2690
  6399  00700A                     u2695:
  6400  00700A  90D8               	bcf	status,0,c
  6401  00700C  323D               	rrcf	(??___flmul+3)^0,f,c
  6402  00700E  323C               	rrcf	(??___flmul+2)^0,f,c
  6403  007010  323B               	rrcf	(??___flmul+1)^0,f,c
  6404  007012  323A               	rrcf	??___flmul^0,f,c
  6405  007014                     u2690:
  6406  007014  2EE8               	decfsz	wreg,f,c
  6407  007016  EF05  F038         	goto	u2695
  6408  00701A  503A               	movf	??___flmul^0,w,c
  6409  00701C  2645               	addwf	___flmul@prod^0,f,c
  6410  00701E  503B               	movf	(??___flmul+1)^0,w,c
  6411  007020  2246               	addwfc	(___flmul@prod+1)^0,f,c
  6412  007022  503C               	movf	(??___flmul+2)^0,w,c
  6413  007024  2247               	addwfc	(___flmul@prod+2)^0,f,c
  6414  007026  503D               	movf	(??___flmul+3)^0,w,c
  6415  007028  2248               	addwfc	(___flmul@prod+3)^0,f,c
  6416  00702A  C041  F042         	movff	___flmul@grs+2,___flmul@grs+3
  6417  00702E  C040  F041         	movff	___flmul@grs+1,___flmul@grs+2
  6418  007032  C03F  F040         	movff	___flmul@grs,___flmul@grs+1
  6419  007036  6A3F               	clrf	___flmul@grs^0,c
  6420  007038  5043               	movf	___flmul@aexp^0,w,c
  6421  00703A  C044  F03A         	movff	___flmul@bexp,??___flmul
  6422  00703E  6A3B               	clrf	(??___flmul+1)^0,c
  6423  007040  263A               	addwf	??___flmul^0,f,c
  6424  007042  0E00               	movlw	0
  6425  007044  223B               	addwfc	(??___flmul+1)^0,f,c
  6426  007046  0E82               	movlw	130
  6427  007048  243A               	addwf	??___flmul^0,w,c
  6428  00704A  6E49               	movwf	___flmul@temp^0,c
  6429  00704C  0EFF               	movlw	255
  6430  00704E  203B               	addwfc	(??___flmul+1)^0,w,c
  6431  007050  6E4A               	movwf	(___flmul@temp+1)^0,c
  6432  007052  EF40  F038         	goto	l3333
  6433  007056                     l3327:
  6434  007056  90D8               	bcf	status,0,c
  6435  007058  3645               	rlcf	___flmul@prod^0,f,c
  6436  00705A  3646               	rlcf	(___flmul@prod+1)^0,f,c
  6437  00705C  3647               	rlcf	(___flmul@prod+2)^0,f,c
  6438  00705E  3648               	rlcf	(___flmul@prod+3)^0,f,c
  6439  007060  AE42               	btfss	(___flmul@grs+3)^0,7,c
  6440  007062  EF35  F038         	goto	u2701
  6441  007066  EF37  F038         	goto	u2700
  6442  00706A                     u2701:
  6443  00706A  EF38  F038         	goto	l1101
  6444  00706E                     u2700:
  6445  00706E  8045               	bsf	___flmul@prod^0,0,c
  6446  007070                     l1101:
  6447  007070  90D8               	bcf	status,0,c
  6448  007072  363F               	rlcf	___flmul@grs^0,f,c
  6449  007074  3640               	rlcf	(___flmul@grs+1)^0,f,c
  6450  007076  3641               	rlcf	(___flmul@grs+2)^0,f,c
  6451  007078  3642               	rlcf	(___flmul@grs+3)^0,f,c
  6452  00707A  0649               	decf	___flmul@temp^0,f,c
  6453  00707C  A0D8               	btfss	status,0,c
  6454  00707E  064A               	decf	(___flmul@temp+1)^0,f,c
  6455  007080                     l3333:
  6456  007080  AE47               	btfss	(___flmul@prod+2)^0,7,c
  6457  007082  EF45  F038         	goto	u2711
  6458  007086  EF47  F038         	goto	u2710
  6459  00708A                     u2711:
  6460  00708A  EF2B  F038         	goto	l3327
  6461  00708E                     u2710:
  6462  00708E  0E00               	movlw	0
  6463  007090  6E43               	movwf	___flmul@aexp^0,c
  6464  007092  AE42               	btfss	(___flmul@grs+3)^0,7,c
  6465  007094  EF4E  F038         	goto	u2721
  6466  007098  EF50  F038         	goto	u2720
  6467  00709C                     u2721:
  6468  00709C  EF74  F038         	goto	l1103
  6469  0070A0                     u2720:
  6470  0070A0  0EFF               	movlw	255
  6471  0070A2  143F               	andwf	___flmul@grs^0,w,c
  6472  0070A4  6E3A               	movwf	??___flmul^0,c
  6473  0070A6  0EFF               	movlw	255
  6474  0070A8  1440               	andwf	(___flmul@grs+1)^0,w,c
  6475  0070AA  6E3B               	movwf	(??___flmul+1)^0,c
  6476  0070AC  0EFF               	movlw	255
  6477  0070AE  1441               	andwf	(___flmul@grs+2)^0,w,c
  6478  0070B0  6E3C               	movwf	(??___flmul+2)^0,c
  6479  0070B2  0E7F               	movlw	127
  6480  0070B4  1442               	andwf	(___flmul@grs+3)^0,w,c
  6481  0070B6  6E3D               	movwf	(??___flmul+3)^0,c
  6482  0070B8  503A               	movf	??___flmul^0,w,c
  6483  0070BA  103B               	iorwf	(??___flmul+1)^0,w,c
  6484  0070BC  103C               	iorwf	(??___flmul+2)^0,w,c
  6485  0070BE  103D               	iorwf	(??___flmul+3)^0,w,c
  6486  0070C0  B4D8               	btfsc	status,2,c
  6487  0070C2  EF65  F038         	goto	u2731
  6488  0070C6  EF67  F038         	goto	u2730
  6489  0070CA                     u2731:
  6490  0070CA  EF6B  F038         	goto	l1104
  6491  0070CE                     u2730:
  6492  0070CE                     l3341:
  6493  0070CE  0E01               	movlw	1
  6494  0070D0  6E43               	movwf	___flmul@aexp^0,c
  6495  0070D2  EF74  F038         	goto	l1103
  6496  0070D6                     l1104:
  6497  0070D6  A045               	btfss	___flmul@prod^0,0,c
  6498  0070D8  EF70  F038         	goto	u2741
  6499  0070DC  EF72  F038         	goto	u2740
  6500  0070E0                     u2741:
  6501  0070E0  EF74  F038         	goto	l1103
  6502  0070E4                     u2740:
  6503  0070E4  EF67  F038         	goto	l3341
  6504  0070E8                     l1103:
  6505  0070E8  5043               	movf	___flmul@aexp^0,w,c
  6506  0070EA  B4D8               	btfsc	status,2,c
  6507  0070EC  EF7A  F038         	goto	u2751
  6508  0070F0  EF7C  F038         	goto	u2750
  6509  0070F4                     u2751:
  6510  0070F4  EFA0  F038         	goto	l3353
  6511  0070F8                     u2750:
  6512  0070F8  0E01               	movlw	1
  6513  0070FA  2645               	addwf	___flmul@prod^0,f,c
  6514  0070FC  0E00               	movlw	0
  6515  0070FE  2246               	addwfc	(___flmul@prod+1)^0,f,c
  6516  007100  2247               	addwfc	(___flmul@prod+2)^0,f,c
  6517  007102  2248               	addwfc	(___flmul@prod+3)^0,f,c
  6518  007104  A048               	btfss	(___flmul@prod+3)^0,0,c
  6519  007106  EF87  F038         	goto	u2761
  6520  00710A  EF89  F038         	goto	u2760
  6521  00710E                     u2761:
  6522  00710E  EFA0  F038         	goto	l3353
  6523  007112                     u2760:
  6524  007112  C045  F03A         	movff	___flmul@prod,??___flmul
  6525  007116  C046  F03B         	movff	___flmul@prod+1,??___flmul+1
  6526  00711A  C047  F03C         	movff	___flmul@prod+2,??___flmul+2
  6527  00711E  C048  F03D         	movff	___flmul@prod+3,??___flmul+3
  6528  007122  343D               	rlcf	(??___flmul+3)^0,w,c
  6529  007124  323D               	rrcf	(??___flmul+3)^0,f,c
  6530  007126  323C               	rrcf	(??___flmul+2)^0,f,c
  6531  007128  323B               	rrcf	(??___flmul+1)^0,f,c
  6532  00712A  323A               	rrcf	??___flmul^0,f,c
  6533  00712C  C03A  F045         	movff	??___flmul,___flmul@prod
  6534  007130  C03B  F046         	movff	??___flmul+1,___flmul@prod+1
  6535  007134  C03C  F047         	movff	??___flmul+2,___flmul@prod+2
  6536  007138  C03D  F048         	movff	??___flmul+3,___flmul@prod+3
  6537  00713C  4A49               	infsnz	___flmul@temp^0,f,c
  6538  00713E  2A4A               	incf	(___flmul@temp+1)^0,f,c
  6539  007140                     l3353:
  6540  007140  BE4A               	btfsc	(___flmul@temp+1)^0,7,c
  6541  007142  EFAB  F038         	goto	u2771
  6542  007146  504A               	movf	(___flmul@temp+1)^0,w,c
  6543  007148  E108               	bnz	u2770
  6544  00714A  2849               	incf	___flmul@temp^0,w,c
  6545  00714C  A0D8               	btfss	status,0,c
  6546  00714E  EFAB  F038         	goto	u2771
  6547  007152  EFAD  F038         	goto	u2770
  6548  007156                     u2771:
  6549  007156  EFB7  F038         	goto	l3357
  6550  00715A                     u2770:
  6551  00715A  0E00               	movlw	0
  6552  00715C  6E45               	movwf	___flmul@prod^0,c
  6553  00715E  0E00               	movlw	0
  6554  007160  6E46               	movwf	(___flmul@prod+1)^0,c
  6555  007162  0E80               	movlw	128
  6556  007164  6E47               	movwf	(___flmul@prod+2)^0,c
  6557  007166  0E7F               	movlw	127
  6558  007168  6E48               	movwf	(___flmul@prod+3)^0,c
  6559  00716A  EFE5  F038         	goto	l3369
  6560  00716E                     l3357:
  6561  00716E  BE4A               	btfsc	(___flmul@temp+1)^0,7,c
  6562  007170  EFC4  F038         	goto	u2780
  6563  007174  504A               	movf	(___flmul@temp+1)^0,w,c
  6564  007176  E106               	bnz	u2781
  6565  007178  0449               	decf	___flmul@temp^0,w,c
  6566  00717A  B0D8               	btfsc	status,0,c
  6567  00717C  EFC2  F038         	goto	u2781
  6568  007180  EFC4  F038         	goto	u2780
  6569  007184                     u2781:
  6570  007184  EFD0  F038         	goto	l1111
  6571  007188                     u2780:
  6572  007188  0E00               	movlw	0
  6573  00718A  6E45               	movwf	___flmul@prod^0,c
  6574  00718C  0E00               	movlw	0
  6575  00718E  6E46               	movwf	(___flmul@prod+1)^0,c
  6576  007190  0E00               	movlw	0
  6577  007192  6E47               	movwf	(___flmul@prod+2)^0,c
  6578  007194  0E00               	movlw	0
  6579  007196  6E48               	movwf	(___flmul@prod+3)^0,c
  6580  007198  0E00               	movlw	0
  6581  00719A  6E3E               	movwf	___flmul@sign^0,c
  6582  00719C  EFE5  F038         	goto	l3369
  6583  0071A0                     l1111:
  6584  0071A0  C049  F044         	movff	___flmul@temp,___flmul@bexp
  6585  0071A4  0EFF               	movlw	255
  6586  0071A6  1645               	andwf	___flmul@prod^0,f,c
  6587  0071A8  0EFF               	movlw	255
  6588  0071AA  1646               	andwf	(___flmul@prod+1)^0,f,c
  6589  0071AC  0E7F               	movlw	127
  6590  0071AE  1647               	andwf	(___flmul@prod+2)^0,f,c
  6591  0071B0  0E00               	movlw	0
  6592  0071B2  1648               	andwf	(___flmul@prod+3)^0,f,c
  6593  0071B4  A044               	btfss	___flmul@bexp^0,0,c
  6594  0071B6  EFDF  F038         	goto	u2791
  6595  0071BA  EFE1  F038         	goto	u2790
  6596  0071BE                     u2791:
  6597  0071BE  EFE2  F038         	goto	l3367
  6598  0071C2                     u2790:
  6599  0071C2  8E47               	bsf	(___flmul@prod+2)^0,7,c
  6600  0071C4                     l3367:
  6601  0071C4  90D8               	bcf	status,0,c
  6602  0071C6  3044               	rrcf	___flmul@bexp^0,w,c
  6603  0071C8  6E48               	movwf	(___flmul@prod+3)^0,c
  6604  0071CA                     l3369:
  6605  0071CA  503E               	movf	___flmul@sign^0,w,c
  6606  0071CC  1248               	iorwf	(___flmul@prod+3)^0,f,c
  6607  0071CE  C045  F032         	movff	___flmul@prod,?___flmul
  6608  0071D2  C046  F033         	movff	___flmul@prod+1,?___flmul+1
  6609  0071D6  C047  F034         	movff	___flmul@prod+2,?___flmul+2
  6610  0071DA  C048  F035         	movff	___flmul@prod+3,?___flmul+3
  6611  0071DE                     l1098:
  6612  0071DE  0012               	return		;funcret
  6613  0071E0                     __end_of___flmul:
  6614                           	callstack 0
  6615                           
  6616 ;; *************** function ___fldiv *****************
  6617 ;; Defined at:
  6618 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sprcdiv.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;  b               4   24[COMRAM] unsigned char 
  6621 ;;  a               4   28[COMRAM] unsigned char 
  6622 ;; Auto vars:     Size  Location     Type
  6623 ;;  grs             4   43[COMRAM] unsigned long 
  6624 ;;  rem             4   36[COMRAM] unsigned long 
  6625 ;;  new_exp         2   41[COMRAM] short 
  6626 ;;  aexp            1   48[COMRAM] unsigned char 
  6627 ;;  bexp            1   47[COMRAM] unsigned char 
  6628 ;;  sign            1   40[COMRAM] unsigned char 
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  4   24[COMRAM] unsigned char 
  6631 ;; Registers used:
  6632 ;;		wreg, status,2, status,0
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6638 ;;      Params:         8       0       0       0       0       0       0       0       0
  6639 ;;      Locals:        13       0       0       0       0       0       0       0       0
  6640 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6641 ;;      Totals:        25       0       0       0       0       0       0       0       0
  6642 ;;Total ram usage:       25 bytes
  6643 ;; Hardware stack levels used: 1
  6644 ;; This function calls:
  6645 ;;		Nothing
  6646 ;; This function is called by:
  6647 ;;		_pourcentBatt
  6648 ;;		_printBatteryLevel
  6649 ;;		_humidityDec
  6650 ;;		_printHumidityLevel
  6651 ;;		_sendMeanHumi
  6652 ;;		_sendMeanTemp
  6653 ;;		_temperatureDec
  6654 ;; This function uses a non-reentrant model
  6655 ;;
  6656                           
  6657                           	psect	text25
  6658  006A1C                     __ptext25:
  6659                           	callstack 0
  6660  006A1C                     ___fldiv:
  6661                           	callstack 29
  6662  006A1C  501C               	movf	(___fldiv@b+3)^0,w,c
  6663  006A1E  0B80               	andlw	128
  6664  006A20  6E29               	movwf	___fldiv@sign^0,c
  6665  006A22  501C               	movf	(___fldiv@b+3)^0,w,c
  6666  006A24  241C               	addwf	(___fldiv@b+3)^0,w,c
  6667  006A26  6E30               	movwf	___fldiv@bexp^0,c
  6668  006A28  AE1B               	btfss	(___fldiv@b+2)^0,7,c
  6669  006A2A  EF19  F035         	goto	u2381
  6670  006A2E  EF1B  F035         	goto	u2380
  6671  006A32                     u2381:
  6672  006A32  EF1C  F035         	goto	l3113
  6673  006A36                     u2380:
  6674  006A36  8030               	bsf	___fldiv@bexp^0,0,c
  6675  006A38                     l3113:
  6676  006A38  5030               	movf	___fldiv@bexp^0,w,c
  6677  006A3A  B4D8               	btfsc	status,2,c
  6678  006A3C  EF22  F035         	goto	u2391
  6679  006A40  EF24  F035         	goto	u2390
  6680  006A44                     u2391:
  6681  006A44  EF39  F035         	goto	l3123
  6682  006A48                     u2390:
  6683  006A48  2830               	incf	___fldiv@bexp^0,w,c
  6684  006A4A  A4D8               	btfss	status,2,c
  6685  006A4C  EF2A  F035         	goto	u2401
  6686  006A50  EF2C  F035         	goto	u2400
  6687  006A54                     u2401:
  6688  006A54  EF34  F035         	goto	l3119
  6689  006A58                     u2400:
  6690  006A58  0E00               	movlw	0
  6691  006A5A  6E19               	movwf	___fldiv@b^0,c
  6692  006A5C  0E00               	movlw	0
  6693  006A5E  6E1A               	movwf	(___fldiv@b+1)^0,c
  6694  006A60  0E00               	movlw	0
  6695  006A62  6E1B               	movwf	(___fldiv@b+2)^0,c
  6696  006A64  0E00               	movlw	0
  6697  006A66  6E1C               	movwf	(___fldiv@b+3)^0,c
  6698  006A68                     l3119:
  6699  006A68  8E1B               	bsf	(___fldiv@b+2)^0,7,c
  6700  006A6A  0E00               	movlw	0
  6701  006A6C  6E1C               	movwf	(___fldiv@b+3)^0,c
  6702  006A6E  EF41  F035         	goto	l3125
  6703  006A72                     l3123:
  6704  006A72  0E00               	movlw	0
  6705  006A74  6E19               	movwf	___fldiv@b^0,c
  6706  006A76  0E00               	movlw	0
  6707  006A78  6E1A               	movwf	(___fldiv@b+1)^0,c
  6708  006A7A  0E00               	movlw	0
  6709  006A7C  6E1B               	movwf	(___fldiv@b+2)^0,c
  6710  006A7E  0E00               	movlw	0
  6711  006A80  6E1C               	movwf	(___fldiv@b+3)^0,c
  6712  006A82                     l3125:
  6713  006A82  5020               	movf	(___fldiv@a+3)^0,w,c
  6714  006A84  0B80               	andlw	128
  6715  006A86  1A29               	xorwf	___fldiv@sign^0,f,c
  6716  006A88  5020               	movf	(___fldiv@a+3)^0,w,c
  6717  006A8A  2420               	addwf	(___fldiv@a+3)^0,w,c
  6718  006A8C  6E31               	movwf	___fldiv@aexp^0,c
  6719  006A8E  AE1F               	btfss	(___fldiv@a+2)^0,7,c
  6720  006A90  EF4C  F035         	goto	u2411
  6721  006A94  EF4E  F035         	goto	u2410
  6722  006A98                     u2411:
  6723  006A98  EF4F  F035         	goto	l3133
  6724  006A9C                     u2410:
  6725  006A9C  8031               	bsf	___fldiv@aexp^0,0,c
  6726  006A9E                     l3133:
  6727  006A9E  5031               	movf	___fldiv@aexp^0,w,c
  6728  006AA0  B4D8               	btfsc	status,2,c
  6729  006AA2  EF55  F035         	goto	u2421
  6730  006AA6  EF57  F035         	goto	u2420
  6731  006AAA                     u2421:
  6732  006AAA  EF6C  F035         	goto	l3143
  6733  006AAE                     u2420:
  6734  006AAE  2831               	incf	___fldiv@aexp^0,w,c
  6735  006AB0  A4D8               	btfss	status,2,c
  6736  006AB2  EF5D  F035         	goto	u2431
  6737  006AB6  EF5F  F035         	goto	u2430
  6738  006ABA                     u2431:
  6739  006ABA  EF67  F035         	goto	l3139
  6740  006ABE                     u2430:
  6741  006ABE  0E00               	movlw	0
  6742  006AC0  6E1D               	movwf	___fldiv@a^0,c
  6743  006AC2  0E00               	movlw	0
  6744  006AC4  6E1E               	movwf	(___fldiv@a+1)^0,c
  6745  006AC6  0E00               	movlw	0
  6746  006AC8  6E1F               	movwf	(___fldiv@a+2)^0,c
  6747  006ACA  0E00               	movlw	0
  6748  006ACC  6E20               	movwf	(___fldiv@a+3)^0,c
  6749  006ACE                     l3139:
  6750  006ACE  8E1F               	bsf	(___fldiv@a+2)^0,7,c
  6751  006AD0  0E00               	movlw	0
  6752  006AD2  6E20               	movwf	(___fldiv@a+3)^0,c
  6753  006AD4  EF74  F035         	goto	l3145
  6754  006AD8                     l3143:
  6755  006AD8  0E00               	movlw	0
  6756  006ADA  6E1D               	movwf	___fldiv@a^0,c
  6757  006ADC  0E00               	movlw	0
  6758  006ADE  6E1E               	movwf	(___fldiv@a+1)^0,c
  6759  006AE0  0E00               	movlw	0
  6760  006AE2  6E1F               	movwf	(___fldiv@a+2)^0,c
  6761  006AE4  0E00               	movlw	0
  6762  006AE6  6E20               	movwf	(___fldiv@a+3)^0,c
  6763  006AE8                     l3145:
  6764  006AE8  501D               	movf	___fldiv@a^0,w,c
  6765  006AEA  101E               	iorwf	(___fldiv@a+1)^0,w,c
  6766  006AEC  101F               	iorwf	(___fldiv@a+2)^0,w,c
  6767  006AEE  1020               	iorwf	(___fldiv@a+3)^0,w,c
  6768  006AF0  A4D8               	btfss	status,2,c
  6769  006AF2  EF7D  F035         	goto	u2441
  6770  006AF6  EF7F  F035         	goto	u2440
  6771  006AFA                     u2441:
  6772  006AFA  EF97  F035         	goto	l3157
  6773  006AFE                     u2440:
  6774  006AFE  0E00               	movlw	0
  6775  006B00  6E19               	movwf	___fldiv@b^0,c
  6776  006B02  0E00               	movlw	0
  6777  006B04  6E1A               	movwf	(___fldiv@b+1)^0,c
  6778  006B06  0E00               	movlw	0
  6779  006B08  6E1B               	movwf	(___fldiv@b+2)^0,c
  6780  006B0A  0E00               	movlw	0
  6781  006B0C  6E1C               	movwf	(___fldiv@b+3)^0,c
  6782  006B0E  0E80               	movlw	128
  6783  006B10  121B               	iorwf	(___fldiv@b+2)^0,f,c
  6784  006B12  0E7F               	movlw	127
  6785  006B14  121C               	iorwf	(___fldiv@b+3)^0,f,c
  6786  006B16                     l3151:
  6787  006B16  5029               	movf	___fldiv@sign^0,w,c
  6788  006B18  121C               	iorwf	(___fldiv@b+3)^0,f,c
  6789  006B1A  C019  F019         	movff	___fldiv@b,?___fldiv
  6790  006B1E  C01A  F01A         	movff	___fldiv@b+1,?___fldiv+1
  6791  006B22  C01B  F01B         	movff	___fldiv@b+2,?___fldiv+2
  6792  006B26  C01C  F01C         	movff	___fldiv@b+3,?___fldiv+3
  6793  006B2A  EFDA  F036         	goto	l1062
  6794  006B2E                     l3157:
  6795  006B2E  5030               	movf	___fldiv@bexp^0,w,c
  6796  006B30  A4D8               	btfss	status,2,c
  6797  006B32  EF9D  F035         	goto	u2451
  6798  006B36  EF9F  F035         	goto	u2450
  6799  006B3A                     u2451:
  6800  006B3A  EFA9  F035         	goto	l3165
  6801  006B3E                     u2450:
  6802  006B3E  0E00               	movlw	0
  6803  006B40  6E19               	movwf	?___fldiv^0,c
  6804  006B42  0E00               	movlw	0
  6805  006B44  6E1A               	movwf	(?___fldiv+1)^0,c
  6806  006B46  0E00               	movlw	0
  6807  006B48  6E1B               	movwf	(?___fldiv+2)^0,c
  6808  006B4A  0E00               	movlw	0
  6809  006B4C  6E1C               	movwf	(?___fldiv+3)^0,c
  6810  006B4E  EFDA  F036         	goto	l1062
  6811  006B52                     l3165:
  6812  006B52  5031               	movf	___fldiv@aexp^0,w,c
  6813  006B54  C030  F021         	movff	___fldiv@bexp,??___fldiv
  6814  006B58  6A22               	clrf	(??___fldiv+1)^0,c
  6815  006B5A  5E21               	subwf	??___fldiv^0,f,c
  6816  006B5C  0E00               	movlw	0
  6817  006B5E  5A22               	subwfb	(??___fldiv+1)^0,f,c
  6818  006B60  0E7F               	movlw	127
  6819  006B62  2421               	addwf	??___fldiv^0,w,c
  6820  006B64  6E2A               	movwf	___fldiv@new_exp^0,c
  6821  006B66  0E00               	movlw	0
  6822  006B68  2022               	addwfc	(??___fldiv+1)^0,w,c
  6823  006B6A  6E2B               	movwf	(___fldiv@new_exp+1)^0,c
  6824  006B6C  C019  F025         	movff	___fldiv@b,___fldiv@rem
  6825  006B70  C01A  F026         	movff	___fldiv@b+1,___fldiv@rem+1
  6826  006B74  C01B  F027         	movff	___fldiv@b+2,___fldiv@rem+2
  6827  006B78  C01C  F028         	movff	___fldiv@b+3,___fldiv@rem+3
  6828  006B7C  0E00               	movlw	0
  6829  006B7E  6E19               	movwf	___fldiv@b^0,c
  6830  006B80  0E00               	movlw	0
  6831  006B82  6E1A               	movwf	(___fldiv@b+1)^0,c
  6832  006B84  0E00               	movlw	0
  6833  006B86  6E1B               	movwf	(___fldiv@b+2)^0,c
  6834  006B88  0E00               	movlw	0
  6835  006B8A  6E1C               	movwf	(___fldiv@b+3)^0,c
  6836  006B8C  0E00               	movlw	0
  6837  006B8E  6E2C               	movwf	___fldiv@grs^0,c
  6838  006B90  0E00               	movlw	0
  6839  006B92  6E2D               	movwf	(___fldiv@grs+1)^0,c
  6840  006B94  0E00               	movlw	0
  6841  006B96  6E2E               	movwf	(___fldiv@grs+2)^0,c
  6842  006B98  0E00               	movlw	0
  6843  006B9A  6E2F               	movwf	(___fldiv@grs+3)^0,c
  6844  006B9C  0E00               	movlw	0
  6845  006B9E  6E31               	movwf	___fldiv@aexp^0,c
  6846  006BA0  EF0A  F036         	goto	l1064
  6847  006BA4                     l3175:
  6848  006BA4  5031               	movf	___fldiv@aexp^0,w,c
  6849  006BA6  B4D8               	btfsc	status,2,c
  6850  006BA8  EFD8  F035         	goto	u2461
  6851  006BAC  EFDA  F035         	goto	u2460
  6852  006BB0                     u2461:
  6853  006BB0  EFF1  F035         	goto	l3183
  6854  006BB4                     u2460:
  6855  006BB4  90D8               	bcf	status,0,c
  6856  006BB6  3625               	rlcf	___fldiv@rem^0,f,c
  6857  006BB8  3626               	rlcf	(___fldiv@rem+1)^0,f,c
  6858  006BBA  3627               	rlcf	(___fldiv@rem+2)^0,f,c
  6859  006BBC  3628               	rlcf	(___fldiv@rem+3)^0,f,c
  6860  006BBE  90D8               	bcf	status,0,c
  6861  006BC0  3619               	rlcf	___fldiv@b^0,f,c
  6862  006BC2  361A               	rlcf	(___fldiv@b+1)^0,f,c
  6863  006BC4  361B               	rlcf	(___fldiv@b+2)^0,f,c
  6864  006BC6  361C               	rlcf	(___fldiv@b+3)^0,f,c
  6865  006BC8  AE2F               	btfss	(___fldiv@grs+3)^0,7,c
  6866  006BCA  EFE9  F035         	goto	u2471
  6867  006BCE  EFEB  F035         	goto	u2470
  6868  006BD2                     u2471:
  6869  006BD2  EFEC  F035         	goto	l1067
  6870  006BD6                     u2470:
  6871  006BD6  8019               	bsf	___fldiv@b^0,0,c
  6872  006BD8                     l1067:
  6873  006BD8  90D8               	bcf	status,0,c
  6874  006BDA  362C               	rlcf	___fldiv@grs^0,f,c
  6875  006BDC  362D               	rlcf	(___fldiv@grs+1)^0,f,c
  6876  006BDE  362E               	rlcf	(___fldiv@grs+2)^0,f,c
  6877  006BE0  362F               	rlcf	(___fldiv@grs+3)^0,f,c
  6878  006BE2                     l3183:
  6879  006BE2  501D               	movf	___fldiv@a^0,w,c
  6880  006BE4  5C25               	subwf	___fldiv@rem^0,w,c
  6881  006BE6  501E               	movf	(___fldiv@a+1)^0,w,c
  6882  006BE8  5826               	subwfb	(___fldiv@rem+1)^0,w,c
  6883  006BEA  501F               	movf	(___fldiv@a+2)^0,w,c
  6884  006BEC  5827               	subwfb	(___fldiv@rem+2)^0,w,c
  6885  006BEE  5020               	movf	(___fldiv@a+3)^0,w,c
  6886  006BF0  5828               	subwfb	(___fldiv@rem+3)^0,w,c
  6887  006BF2  A0D8               	btfss	status,0,c
  6888  006BF4  EFFE  F035         	goto	u2481
  6889  006BF8  EF00  F036         	goto	u2480
  6890  006BFC                     u2481:
  6891  006BFC  EF09  F036         	goto	l3189
  6892  006C00                     u2480:
  6893  006C00  8C2F               	bsf	(___fldiv@grs+3)^0,6,c
  6894  006C02  501D               	movf	___fldiv@a^0,w,c
  6895  006C04  5E25               	subwf	___fldiv@rem^0,f,c
  6896  006C06  501E               	movf	(___fldiv@a+1)^0,w,c
  6897  006C08  5A26               	subwfb	(___fldiv@rem+1)^0,f,c
  6898  006C0A  501F               	movf	(___fldiv@a+2)^0,w,c
  6899  006C0C  5A27               	subwfb	(___fldiv@rem+2)^0,f,c
  6900  006C0E  5020               	movf	(___fldiv@a+3)^0,w,c
  6901  006C10  5A28               	subwfb	(___fldiv@rem+3)^0,f,c
  6902  006C12                     l3189:
  6903  006C12  2A31               	incf	___fldiv@aexp^0,f,c
  6904  006C14                     l1064:
  6905  006C14  0E19               	movlw	25
  6906  006C16  6431               	cpfsgt	___fldiv@aexp^0,c
  6907  006C18  EF10  F036         	goto	u2491
  6908  006C1C  EF12  F036         	goto	u2490
  6909  006C20                     u2491:
  6910  006C20  EFD2  F035         	goto	l3175
  6911  006C24                     u2490:
  6912  006C24  5025               	movf	___fldiv@rem^0,w,c
  6913  006C26  1026               	iorwf	(___fldiv@rem+1)^0,w,c
  6914  006C28  1027               	iorwf	(___fldiv@rem+2)^0,w,c
  6915  006C2A  1028               	iorwf	(___fldiv@rem+3)^0,w,c
  6916  006C2C  B4D8               	btfsc	status,2,c
  6917  006C2E  EF1B  F036         	goto	u2501
  6918  006C32  EF1D  F036         	goto	u2500
  6919  006C36                     u2501:
  6920  006C36  EF35  F036         	goto	l3201
  6921  006C3A                     u2500:
  6922  006C3A  802C               	bsf	___fldiv@grs^0,0,c
  6923  006C3C  EF35  F036         	goto	l3201
  6924  006C40                     l3195:
  6925  006C40  90D8               	bcf	status,0,c
  6926  006C42  3619               	rlcf	___fldiv@b^0,f,c
  6927  006C44  361A               	rlcf	(___fldiv@b+1)^0,f,c
  6928  006C46  361B               	rlcf	(___fldiv@b+2)^0,f,c
  6929  006C48  361C               	rlcf	(___fldiv@b+3)^0,f,c
  6930  006C4A  AE2F               	btfss	(___fldiv@grs+3)^0,7,c
  6931  006C4C  EF2A  F036         	goto	u2511
  6932  006C50  EF2C  F036         	goto	u2510
  6933  006C54                     u2511:
  6934  006C54  EF2D  F036         	goto	l1073
  6935  006C58                     u2510:
  6936  006C58  8019               	bsf	___fldiv@b^0,0,c
  6937  006C5A                     l1073:
  6938  006C5A  90D8               	bcf	status,0,c
  6939  006C5C  362C               	rlcf	___fldiv@grs^0,f,c
  6940  006C5E  362D               	rlcf	(___fldiv@grs+1)^0,f,c
  6941  006C60  362E               	rlcf	(___fldiv@grs+2)^0,f,c
  6942  006C62  362F               	rlcf	(___fldiv@grs+3)^0,f,c
  6943  006C64  062A               	decf	___fldiv@new_exp^0,f,c
  6944  006C66  A0D8               	btfss	status,0,c
  6945  006C68  062B               	decf	(___fldiv@new_exp+1)^0,f,c
  6946  006C6A                     l3201:
  6947  006C6A  AE1B               	btfss	(___fldiv@b+2)^0,7,c
  6948  006C6C  EF3A  F036         	goto	u2521
  6949  006C70  EF3C  F036         	goto	u2520
  6950  006C74                     u2521:
  6951  006C74  EF20  F036         	goto	l3195
  6952  006C78                     u2520:
  6953  006C78  0E00               	movlw	0
  6954  006C7A  6E31               	movwf	___fldiv@aexp^0,c
  6955  006C7C  AE2F               	btfss	(___fldiv@grs+3)^0,7,c
  6956  006C7E  EF43  F036         	goto	u2531
  6957  006C82  EF45  F036         	goto	u2530
  6958  006C86                     u2531:
  6959  006C86  EF69  F036         	goto	l1075
  6960  006C8A                     u2530:
  6961  006C8A  0EFF               	movlw	255
  6962  006C8C  142C               	andwf	___fldiv@grs^0,w,c
  6963  006C8E  6E21               	movwf	??___fldiv^0,c
  6964  006C90  0EFF               	movlw	255
  6965  006C92  142D               	andwf	(___fldiv@grs+1)^0,w,c
  6966  006C94  6E22               	movwf	(??___fldiv+1)^0,c
  6967  006C96  0EFF               	movlw	255
  6968  006C98  142E               	andwf	(___fldiv@grs+2)^0,w,c
  6969  006C9A  6E23               	movwf	(??___fldiv+2)^0,c
  6970  006C9C  0E7F               	movlw	127
  6971  006C9E  142F               	andwf	(___fldiv@grs+3)^0,w,c
  6972  006CA0  6E24               	movwf	(??___fldiv+3)^0,c
  6973  006CA2  5021               	movf	??___fldiv^0,w,c
  6974  006CA4  1022               	iorwf	(??___fldiv+1)^0,w,c
  6975  006CA6  1023               	iorwf	(??___fldiv+2)^0,w,c
  6976  006CA8  1024               	iorwf	(??___fldiv+3)^0,w,c
  6977  006CAA  B4D8               	btfsc	status,2,c
  6978  006CAC  EF5A  F036         	goto	u2541
  6979  006CB0  EF5C  F036         	goto	u2540
  6980  006CB4                     u2541:
  6981  006CB4  EF60  F036         	goto	l1076
  6982  006CB8                     u2540:
  6983  006CB8                     l3209:
  6984  006CB8  0E01               	movlw	1
  6985  006CBA  6E31               	movwf	___fldiv@aexp^0,c
  6986  006CBC  EF69  F036         	goto	l1075
  6987  006CC0                     l1076:
  6988  006CC0  A019               	btfss	___fldiv@b^0,0,c
  6989  006CC2  EF65  F036         	goto	u2551
  6990  006CC6  EF67  F036         	goto	u2550
  6991  006CCA                     u2551:
  6992  006CCA  EF69  F036         	goto	l1075
  6993  006CCE                     u2550:
  6994  006CCE  EF5C  F036         	goto	l3209
  6995  006CD2                     l1075:
  6996  006CD2  5031               	movf	___fldiv@aexp^0,w,c
  6997  006CD4  B4D8               	btfsc	status,2,c
  6998  006CD6  EF6F  F036         	goto	u2561
  6999  006CDA  EF71  F036         	goto	u2560
  7000  006CDE                     u2561:
  7001  006CDE  EF95  F036         	goto	l3221
  7002  006CE2                     u2560:
  7003  006CE2  0E01               	movlw	1
  7004  006CE4  2619               	addwf	___fldiv@b^0,f,c
  7005  006CE6  0E00               	movlw	0
  7006  006CE8  221A               	addwfc	(___fldiv@b+1)^0,f,c
  7007  006CEA  221B               	addwfc	(___fldiv@b+2)^0,f,c
  7008  006CEC  221C               	addwfc	(___fldiv@b+3)^0,f,c
  7009  006CEE  A01C               	btfss	(___fldiv@b+3)^0,0,c
  7010  006CF0  EF7C  F036         	goto	u2571
  7011  006CF4  EF7E  F036         	goto	u2570
  7012  006CF8                     u2571:
  7013  006CF8  EF95  F036         	goto	l3221
  7014  006CFC                     u2570:
  7015  006CFC  C019  F021         	movff	___fldiv@b,??___fldiv
  7016  006D00  C01A  F022         	movff	___fldiv@b+1,??___fldiv+1
  7017  006D04  C01B  F023         	movff	___fldiv@b+2,??___fldiv+2
  7018  006D08  C01C  F024         	movff	___fldiv@b+3,??___fldiv+3
  7019  006D0C  3424               	rlcf	(??___fldiv+3)^0,w,c
  7020  006D0E  3224               	rrcf	(??___fldiv+3)^0,f,c
  7021  006D10  3223               	rrcf	(??___fldiv+2)^0,f,c
  7022  006D12  3222               	rrcf	(??___fldiv+1)^0,f,c
  7023  006D14  3221               	rrcf	??___fldiv^0,f,c
  7024  006D16  C021  F019         	movff	??___fldiv,___fldiv@b
  7025  006D1A  C022  F01A         	movff	??___fldiv+1,___fldiv@b+1
  7026  006D1E  C023  F01B         	movff	??___fldiv+2,___fldiv@b+2
  7027  006D22  C024  F01C         	movff	??___fldiv+3,___fldiv@b+3
  7028  006D26  4A2A               	infsnz	___fldiv@new_exp^0,f,c
  7029  006D28  2A2B               	incf	(___fldiv@new_exp+1)^0,f,c
  7030  006D2A                     l3221:
  7031  006D2A  BE2B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  7032  006D2C  EFA0  F036         	goto	u2581
  7033  006D30  502B               	movf	(___fldiv@new_exp+1)^0,w,c
  7034  006D32  E108               	bnz	u2580
  7035  006D34  282A               	incf	___fldiv@new_exp^0,w,c
  7036  006D36  A0D8               	btfss	status,0,c
  7037  006D38  EFA0  F036         	goto	u2581
  7038  006D3C  EFA2  F036         	goto	u2580
  7039  006D40                     u2581:
  7040  006D40  EFAD  F036         	goto	l3225
  7041  006D44                     u2580:
  7042  006D44  0E00               	movlw	0
  7043  006D46  6E2B               	movwf	(___fldiv@new_exp+1)^0,c
  7044  006D48  682A               	setf	___fldiv@new_exp^0,c
  7045  006D4A  0E00               	movlw	0
  7046  006D4C  6E19               	movwf	___fldiv@b^0,c
  7047  006D4E  0E00               	movlw	0
  7048  006D50  6E1A               	movwf	(___fldiv@b+1)^0,c
  7049  006D52  0E00               	movlw	0
  7050  006D54  6E1B               	movwf	(___fldiv@b+2)^0,c
  7051  006D56  0E00               	movlw	0
  7052  006D58  6E1C               	movwf	(___fldiv@b+3)^0,c
  7053  006D5A                     l3225:
  7054  006D5A  BE2B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  7055  006D5C  EFBA  F036         	goto	u2590
  7056  006D60  502B               	movf	(___fldiv@new_exp+1)^0,w,c
  7057  006D62  E106               	bnz	u2591
  7058  006D64  042A               	decf	___fldiv@new_exp^0,w,c
  7059  006D66  B0D8               	btfsc	status,0,c
  7060  006D68  EFB8  F036         	goto	u2591
  7061  006D6C  EFBA  F036         	goto	u2590
  7062  006D70                     u2591:
  7063  006D70  EFC8  F036         	goto	l3229
  7064  006D74                     u2590:
  7065  006D74  0E00               	movlw	0
  7066  006D76  6E2B               	movwf	(___fldiv@new_exp+1)^0,c
  7067  006D78  0E00               	movlw	0
  7068  006D7A  6E2A               	movwf	___fldiv@new_exp^0,c
  7069  006D7C  0E00               	movlw	0
  7070  006D7E  6E19               	movwf	___fldiv@b^0,c
  7071  006D80  0E00               	movlw	0
  7072  006D82  6E1A               	movwf	(___fldiv@b+1)^0,c
  7073  006D84  0E00               	movlw	0
  7074  006D86  6E1B               	movwf	(___fldiv@b+2)^0,c
  7075  006D88  0E00               	movlw	0
  7076  006D8A  6E1C               	movwf	(___fldiv@b+3)^0,c
  7077  006D8C  0E00               	movlw	0
  7078  006D8E  6E29               	movwf	___fldiv@sign^0,c
  7079  006D90                     l3229:
  7080  006D90  C02A  F030         	movff	___fldiv@new_exp,___fldiv@bexp
  7081  006D94  A030               	btfss	___fldiv@bexp^0,0,c
  7082  006D96  EFCF  F036         	goto	u2601
  7083  006D9A  EFD1  F036         	goto	u2600
  7084  006D9E                     u2601:
  7085  006D9E  EFD4  F036         	goto	l3235
  7086  006DA2                     u2600:
  7087  006DA2  8E1B               	bsf	(___fldiv@b+2)^0,7,c
  7088  006DA4  EFD5  F036         	goto	l3237
  7089  006DA8                     l3235:
  7090  006DA8  9E1B               	bcf	(___fldiv@b+2)^0,7,c
  7091  006DAA                     l3237:
  7092  006DAA  90D8               	bcf	status,0,c
  7093  006DAC  3030               	rrcf	___fldiv@bexp^0,w,c
  7094  006DAE  6E1C               	movwf	(___fldiv@b+3)^0,c
  7095  006DB0  EF8B  F035         	goto	l3151
  7096  006DB4                     l1062:
  7097  006DB4  0012               	return		;funcret
  7098  006DB6                     __end_of___fldiv:
  7099                           	callstack 0
  7100                           
  7101 ;; *************** function _hexToDec *****************
  7102 ;; Defined at:
  7103 ;;		line 198 in file "sendRecept.c"
  7104 ;; Parameters:    Size  Location     Type
  7105 ;;  data            1    wreg     unsigned char 
  7106 ;; Auto vars:     Size  Location     Type
  7107 ;;  data            1   10[COMRAM] unsigned char 
  7108 ;;  lowerHex        1    9[COMRAM] unsigned char 
  7109 ;;  upperHex        1    8[COMRAM] unsigned char 
  7110 ;; Return value:  Size  Location     Type
  7111 ;;                  1    wreg      unsigned char 
  7112 ;; Registers used:
  7113 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7114 ;; Tracked objects:
  7115 ;;		On entry : 0/0
  7116 ;;		On exit  : 0/0
  7117 ;;		Unchanged: 0/0
  7118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7119 ;;      Params:         0       0       0       0       0       0       0       0       0
  7120 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7121 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7122 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7123 ;;Total ram usage:        3 bytes
  7124 ;; Hardware stack levels used: 1
  7125 ;; Hardware stack levels required when called: 1
  7126 ;; This function calls:
  7127 ;;		___awdiv
  7128 ;;		___awmod
  7129 ;; This function is called by:
  7130 ;;		_main
  7131 ;; This function uses a non-reentrant model
  7132 ;;
  7133                           
  7134                           	psect	text26
  7135  004C9A                     __ptext26:
  7136                           	callstack 0
  7137  004C9A                     _hexToDec:
  7138                           	callstack 29
  7139                           
  7140                           ;incstack = 0
  7141                           ;hexToDec@data stored from wreg
  7142  004C9A  6E0B               	movwf	hexToDec@data^0,c
  7143  004C9C                     
  7144                           ;sendRecept.c: 200:     uint8_t upperHex = data / 10;
  7145  004C9C  C00B  F001         	movff	hexToDec@data,___awdiv@dividend
  7146  004CA0  6A02               	clrf	(___awdiv@dividend+1)^0,c
  7147  004CA2  0E00               	movlw	0
  7148  004CA4  6E04               	movwf	(___awdiv@divisor+1)^0,c
  7149  004CA6  0E0A               	movlw	10
  7150  004CA8  6E03               	movwf	___awdiv@divisor^0,c
  7151  004CAA  EC92  F029         	call	___awdiv	;wreg free
  7152  004CAE  5001               	movf	?___awdiv^0,w,c
  7153  004CB0  6E09               	movwf	hexToDec@upperHex^0,c
  7154                           
  7155                           ;sendRecept.c: 201:     uint8_t lowerHex = data % 10;
  7156  004CB2  C00B  F001         	movff	hexToDec@data,___awmod@dividend
  7157  004CB6  6A02               	clrf	(___awmod@dividend+1)^0,c
  7158  004CB8  0E00               	movlw	0
  7159  004CBA  6E04               	movwf	(___awmod@divisor+1)^0,c
  7160  004CBC  0E0A               	movlw	10
  7161  004CBE  6E03               	movwf	___awmod@divisor^0,c
  7162  004CC0  ECDA  F028         	call	___awmod	;wreg free
  7163  004CC4  5001               	movf	?___awmod^0,w,c
  7164  004CC6  6E0A               	movwf	hexToDec@lowerHex^0,c
  7165  004CC8                     
  7166                           ;sendRecept.c: 203:     data = 0x10 * upperHex + 0x01 * lowerHex;
  7167  004CC8  5009               	movf	hexToDec@upperHex^0,w,c
  7168  004CCA  0D10               	mullw	16
  7169  004CCC  50F3               	movf	243,w,c
  7170  004CCE  240A               	addwf	hexToDec@lowerHex^0,w,c
  7171  004CD0  6E0B               	movwf	hexToDec@data^0,c
  7172  004CD2                     
  7173                           ;sendRecept.c: 205:     return data;
  7174  004CD2  500B               	movf	hexToDec@data^0,w,c
  7175  004CD4  0012               	return		;funcret
  7176  004CD6                     __end_of_hexToDec:
  7177                           	callstack 0
  7178                           
  7179 ;; *************** function ___awmod *****************
  7180 ;; Defined at:
  7181 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
  7182 ;; Parameters:    Size  Location     Type
  7183 ;;  dividend        2    0[COMRAM] int 
  7184 ;;  divisor         2    2[COMRAM] int 
  7185 ;; Auto vars:     Size  Location     Type
  7186 ;;  sign            1    5[COMRAM] unsigned char 
  7187 ;;  counter         1    4[COMRAM] unsigned char 
  7188 ;; Return value:  Size  Location     Type
  7189 ;;                  2    0[COMRAM] int 
  7190 ;; Registers used:
  7191 ;;		wreg, status,2, status,0
  7192 ;; Tracked objects:
  7193 ;;		On entry : 0/0
  7194 ;;		On exit  : 0/0
  7195 ;;		Unchanged: 0/0
  7196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7197 ;;      Params:         4       0       0       0       0       0       0       0       0
  7198 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7199 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7200 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7201 ;;Total ram usage:        6 bytes
  7202 ;; Hardware stack levels used: 1
  7203 ;; This function calls:
  7204 ;;		Nothing
  7205 ;; This function is called by:
  7206 ;;		_hexToDec
  7207 ;; This function uses a non-reentrant model
  7208 ;;
  7209                           
  7210                           	psect	text27
  7211  0051B4                     __ptext27:
  7212                           	callstack 0
  7213  0051B4                     ___awmod:
  7214                           	callstack 29
  7215  0051B4  0E00               	movlw	0
  7216  0051B6  6E06               	movwf	___awmod@sign^0,c
  7217  0051B8  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  7218  0051BA  EFE3  F028         	goto	u3310
  7219  0051BE  EFE1  F028         	goto	u3311
  7220  0051C2                     u3311:
  7221  0051C2  EFE9  F028         	goto	l3747
  7222  0051C6                     u3310:
  7223  0051C6  6C01               	negf	___awmod@dividend^0,c
  7224  0051C8  1E02               	comf	(___awmod@dividend+1)^0,f,c
  7225  0051CA  B0D8               	btfsc	status,0,c
  7226  0051CC  2A02               	incf	(___awmod@dividend+1)^0,f,c
  7227  0051CE  0E01               	movlw	1
  7228  0051D0  6E06               	movwf	___awmod@sign^0,c
  7229  0051D2                     l3747:
  7230  0051D2  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  7231  0051D4  EFF0  F028         	goto	u3320
  7232  0051D8  EFEE  F028         	goto	u3321
  7233  0051DC                     u3321:
  7234  0051DC  EFF4  F028         	goto	l3751
  7235  0051E0                     u3320:
  7236  0051E0  6C03               	negf	___awmod@divisor^0,c
  7237  0051E2  1E04               	comf	(___awmod@divisor+1)^0,f,c
  7238  0051E4  B0D8               	btfsc	status,0,c
  7239  0051E6  2A04               	incf	(___awmod@divisor+1)^0,f,c
  7240  0051E8                     l3751:
  7241  0051E8  5003               	movf	___awmod@divisor^0,w,c
  7242  0051EA  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  7243  0051EC  B4D8               	btfsc	status,2,c
  7244  0051EE  EFFB  F028         	goto	u3331
  7245  0051F2  EFFD  F028         	goto	u3330
  7246  0051F6                     u3331:
  7247  0051F6  EF21  F029         	goto	l3767
  7248  0051FA                     u3330:
  7249  0051FA  0E01               	movlw	1
  7250  0051FC  6E05               	movwf	___awmod@counter^0,c
  7251  0051FE  EF05  F029         	goto	l3757
  7252  005202                     l3755:
  7253  005202  90D8               	bcf	status,0,c
  7254  005204  3603               	rlcf	___awmod@divisor^0,f,c
  7255  005206  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  7256  005208  2A05               	incf	___awmod@counter^0,f,c
  7257  00520A                     l3757:
  7258  00520A  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  7259  00520C  EF0A  F029         	goto	u3341
  7260  005210  EF0C  F029         	goto	u3340
  7261  005214                     u3341:
  7262  005214  EF01  F029         	goto	l3755
  7263  005218                     u3340:
  7264  005218                     l3759:
  7265  005218  5003               	movf	___awmod@divisor^0,w,c
  7266  00521A  5C01               	subwf	___awmod@dividend^0,w,c
  7267  00521C  5004               	movf	(___awmod@divisor+1)^0,w,c
  7268  00521E  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  7269  005220  A0D8               	btfss	status,0,c
  7270  005222  EF15  F029         	goto	u3351
  7271  005226  EF17  F029         	goto	u3350
  7272  00522A                     u3351:
  7273  00522A  EF1B  F029         	goto	l3763
  7274  00522E                     u3350:
  7275  00522E  5003               	movf	___awmod@divisor^0,w,c
  7276  005230  5E01               	subwf	___awmod@dividend^0,f,c
  7277  005232  5004               	movf	(___awmod@divisor+1)^0,w,c
  7278  005234  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  7279  005236                     l3763:
  7280  005236  90D8               	bcf	status,0,c
  7281  005238  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  7282  00523A  3203               	rrcf	___awmod@divisor^0,f,c
  7283  00523C  2E05               	decfsz	___awmod@counter^0,f,c
  7284  00523E  EF0C  F029         	goto	l3759
  7285  005242                     l3767:
  7286  005242  5006               	movf	___awmod@sign^0,w,c
  7287  005244  B4D8               	btfsc	status,2,c
  7288  005246  EF27  F029         	goto	u3361
  7289  00524A  EF29  F029         	goto	u3360
  7290  00524E                     u3361:
  7291  00524E  EF2D  F029         	goto	l3771
  7292  005252                     u3360:
  7293  005252  6C01               	negf	___awmod@dividend^0,c
  7294  005254  1E02               	comf	(___awmod@dividend+1)^0,f,c
  7295  005256  B0D8               	btfsc	status,0,c
  7296  005258  2A02               	incf	(___awmod@dividend+1)^0,f,c
  7297  00525A                     l3771:
  7298  00525A  C001  F001         	movff	___awmod@dividend,?___awmod
  7299  00525E  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  7300  005262  0012               	return		;funcret
  7301  005264                     __end_of___awmod:
  7302                           	callstack 0
  7303                           
  7304 ;; *************** function ___awdiv *****************
  7305 ;; Defined at:
  7306 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  7307 ;; Parameters:    Size  Location     Type
  7308 ;;  dividend        2    0[COMRAM] int 
  7309 ;;  divisor         2    2[COMRAM] int 
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;  quotient        2    6[COMRAM] int 
  7312 ;;  sign            1    5[COMRAM] unsigned char 
  7313 ;;  counter         1    4[COMRAM] unsigned char 
  7314 ;; Return value:  Size  Location     Type
  7315 ;;                  2    0[COMRAM] int 
  7316 ;; Registers used:
  7317 ;;		wreg, status,2, status,0
  7318 ;; Tracked objects:
  7319 ;;		On entry : 0/0
  7320 ;;		On exit  : 0/0
  7321 ;;		Unchanged: 0/0
  7322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7323 ;;      Params:         4       0       0       0       0       0       0       0       0
  7324 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7325 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7326 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7327 ;;Total ram usage:        8 bytes
  7328 ;; Hardware stack levels used: 1
  7329 ;; This function calls:
  7330 ;;		Nothing
  7331 ;; This function is called by:
  7332 ;;		_hexToDec
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           	psect	text28
  7337  005324                     __ptext28:
  7338                           	callstack 0
  7339  005324                     ___awdiv:
  7340                           	callstack 29
  7341  005324  0E00               	movlw	0
  7342  005326  6E06               	movwf	___awdiv@sign^0,c
  7343  005328  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  7344  00532A  EF9B  F029         	goto	u3250
  7345  00532E  EF99  F029         	goto	u3251
  7346  005332                     u3251:
  7347  005332  EFA1  F029         	goto	l3703
  7348  005336                     u3250:
  7349  005336  6C03               	negf	___awdiv@divisor^0,c
  7350  005338  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  7351  00533A  B0D8               	btfsc	status,0,c
  7352  00533C  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  7353  00533E  0E01               	movlw	1
  7354  005340  6E06               	movwf	___awdiv@sign^0,c
  7355  005342                     l3703:
  7356  005342  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  7357  005344  EFA8  F029         	goto	u3260
  7358  005348  EFA6  F029         	goto	u3261
  7359  00534C                     u3261:
  7360  00534C  EFAE  F029         	goto	l3709
  7361  005350                     u3260:
  7362  005350  6C01               	negf	___awdiv@dividend^0,c
  7363  005352  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  7364  005354  B0D8               	btfsc	status,0,c
  7365  005356  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  7366  005358  0E01               	movlw	1
  7367  00535A  1A06               	xorwf	___awdiv@sign^0,f,c
  7368  00535C                     l3709:
  7369  00535C  0E00               	movlw	0
  7370  00535E  6E08               	movwf	(___awdiv@quotient+1)^0,c
  7371  005360  0E00               	movlw	0
  7372  005362  6E07               	movwf	___awdiv@quotient^0,c
  7373  005364  5003               	movf	___awdiv@divisor^0,w,c
  7374  005366  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  7375  005368  B4D8               	btfsc	status,2,c
  7376  00536A  EFB9  F029         	goto	u3271
  7377  00536E  EFBB  F029         	goto	u3270
  7378  005372                     u3271:
  7379  005372  EFE3  F029         	goto	l3731
  7380  005376                     u3270:
  7381  005376  0E01               	movlw	1
  7382  005378  6E05               	movwf	___awdiv@counter^0,c
  7383  00537A  EFC3  F029         	goto	l3717
  7384  00537E                     l3715:
  7385  00537E  90D8               	bcf	status,0,c
  7386  005380  3603               	rlcf	___awdiv@divisor^0,f,c
  7387  005382  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  7388  005384  2A05               	incf	___awdiv@counter^0,f,c
  7389  005386                     l3717:
  7390  005386  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  7391  005388  EFC8  F029         	goto	u3281
  7392  00538C  EFCA  F029         	goto	u3280
  7393  005390                     u3281:
  7394  005390  EFBF  F029         	goto	l3715
  7395  005394                     u3280:
  7396  005394                     l3719:
  7397  005394  90D8               	bcf	status,0,c
  7398  005396  3607               	rlcf	___awdiv@quotient^0,f,c
  7399  005398  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  7400  00539A  5003               	movf	___awdiv@divisor^0,w,c
  7401  00539C  5C01               	subwf	___awdiv@dividend^0,w,c
  7402  00539E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  7403  0053A0  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  7404  0053A2  A0D8               	btfss	status,0,c
  7405  0053A4  EFD6  F029         	goto	u3291
  7406  0053A8  EFD8  F029         	goto	u3290
  7407  0053AC                     u3291:
  7408  0053AC  EFDD  F029         	goto	l3727
  7409  0053B0                     u3290:
  7410  0053B0  5003               	movf	___awdiv@divisor^0,w,c
  7411  0053B2  5E01               	subwf	___awdiv@dividend^0,f,c
  7412  0053B4  5004               	movf	(___awdiv@divisor+1)^0,w,c
  7413  0053B6  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  7414  0053B8  8007               	bsf	___awdiv@quotient^0,0,c
  7415  0053BA                     l3727:
  7416  0053BA  90D8               	bcf	status,0,c
  7417  0053BC  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  7418  0053BE  3203               	rrcf	___awdiv@divisor^0,f,c
  7419  0053C0  2E05               	decfsz	___awdiv@counter^0,f,c
  7420  0053C2  EFCA  F029         	goto	l3719
  7421  0053C6                     l3731:
  7422  0053C6  5006               	movf	___awdiv@sign^0,w,c
  7423  0053C8  B4D8               	btfsc	status,2,c
  7424  0053CA  EFE9  F029         	goto	u3301
  7425  0053CE  EFEB  F029         	goto	u3300
  7426  0053D2                     u3301:
  7427  0053D2  EFEF  F029         	goto	l3735
  7428  0053D6                     u3300:
  7429  0053D6  6C07               	negf	___awdiv@quotient^0,c
  7430  0053D8  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  7431  0053DA  B0D8               	btfsc	status,0,c
  7432  0053DC  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  7433  0053DE                     l3735:
  7434  0053DE  C007  F001         	movff	___awdiv@quotient,?___awdiv
  7435  0053E2  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  7436  0053E6  0012               	return		;funcret
  7437  0053E8                     __end_of___awdiv:
  7438                           	callstack 0
  7439                           
  7440 ;; *************** function _afficher_string_hex *****************
  7441 ;; Defined at:
  7442 ;;		line 202 in file "affichage.c"
  7443 ;; Parameters:    Size  Location     Type
  7444 ;;  data            2   11[COMRAM] unsigned short 
  7445 ;; Auto vars:     Size  Location     Type
  7446 ;;  hexa            2   18[COMRAM] PTR unsigned char 
  7447 ;;		 -> STR_65(17), 
  7448 ;; Return value:  Size  Location     Type
  7449 ;;                  1    wreg      void 
  7450 ;; Registers used:
  7451 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7452 ;; Tracked objects:
  7453 ;;		On entry : 0/0
  7454 ;;		On exit  : 0/0
  7455 ;;		Unchanged: 0/0
  7456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7457 ;;      Params:         2       0       0       0       0       0       0       0       0
  7458 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7459 ;;      Temps:          5       0       0       0       0       0       0       0       0
  7460 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7461 ;;Total ram usage:        9 bytes
  7462 ;; Hardware stack levels used: 1
  7463 ;; Hardware stack levels required when called: 2
  7464 ;; This function calls:
  7465 ;;		_ecrire_ecran_data
  7466 ;;		_ecrire_ecran_start_byte
  7467 ;; This function is called by:
  7468 ;;		_main
  7469 ;; This function uses a non-reentrant model
  7470 ;;
  7471                           
  7472                           	psect	text29
  7473  005A5E                     __ptext29:
  7474                           	callstack 0
  7475  005A5E                     _afficher_string_hex:
  7476                           	callstack 28
  7477  005A5E                     
  7478                           ;affichage.c: 203:     LATCbits.LATC1 = 0;
  7479  005A5E  9285               	bcf	133,1,c	;volatile
  7480  005A60                     
  7481                           ;affichage.c: 205:     char *hexa = "0123456789ABCDEF";
  7482  005A60  0EB4               	movlw	low STR_47
  7483  005A62  6E13               	movwf	afficher_string_hex@hexa^0,c
  7484  005A64  0E7E               	movlw	high STR_47
  7485  005A66  6E14               	movwf	(afficher_string_hex@hexa+1)^0,c
  7486  005A68                     
  7487                           ;affichage.c: 207:     ecrire_ecran_start_byte(0xFA);
  7488  005A68  0EFA               	movlw	250
  7489  005A6A  EC5D  F025         	call	_ecrire_ecran_start_byte
  7490  005A6E                     
  7491                           ;affichage.c: 209:     if (data > 4095) ecrire_ecran_data(hexa[data / 4096]);
  7492  005A6E  0E10               	movlw	16
  7493  005A70  5C0D               	subwf	(afficher_string_hex@data+1)^0,w,c
  7494  005A72  A0D8               	btfss	status,0,c
  7495  005A74  EF3E  F02D         	goto	u3481
  7496  005A78  EF40  F02D         	goto	u3480
  7497  005A7C                     u3481:
  7498  005A7C  EF4F  F02D         	goto	l4139
  7499  005A80                     u3480:
  7500  005A80  380D               	swapf	(afficher_string_hex@data+1)^0,w,c
  7501  005A82  0B0F               	andlw	15
  7502  005A84  2413               	addwf	afficher_string_hex@hexa^0,w,c
  7503  005A86  6E0E               	movwf	??_afficher_string_hex^0,c
  7504  005A88  0E00               	movlw	0
  7505  005A8A  2014               	addwfc	(afficher_string_hex@hexa+1)^0,w,c
  7506  005A8C  6E0F               	movwf	(??_afficher_string_hex+1)^0,c
  7507  005A8E  C00E  FFF6         	movff	??_afficher_string_hex,tblptrl
  7508  005A92  C00F  FFF7         	movff	??_afficher_string_hex+1,tblptrh
  7509  005A96                     	if	0	;tblptru may be non-zero
  7510  005A96                     	endif
  7511  005A96                     	if	0	;tblptru may be non-zero
  7512  005A96                     	endif
  7513  005A96  0008               	tblrd		*
  7514  005A98  50F5               	movf	tablat,w,c
  7515  005A9A  EC17  F026         	call	_ecrire_ecran_data
  7516  005A9E                     l4139:
  7517                           
  7518                           ;affichage.c: 210:     if (data > 255) ecrire_ecran_data(hexa[data / 256 % 16]);
  7519  005A9E  040D               	decf	(afficher_string_hex@data+1)^0,w,c
  7520  005AA0  A0D8               	btfss	status,0,c
  7521  005AA2  EF55  F02D         	goto	u3491
  7522  005AA6  EF57  F02D         	goto	u3490
  7523  005AAA                     u3491:
  7524  005AAA  EF72  F02D         	goto	l4143
  7525  005AAE                     u3490:
  7526  005AAE  C00C  F00E         	movff	afficher_string_hex@data,??_afficher_string_hex
  7527  005AB2  C00D  F00F         	movff	afficher_string_hex@data+1,??_afficher_string_hex+1
  7528  005AB6  C00F  F00E         	movff	??_afficher_string_hex+1,??_afficher_string_hex
  7529  005ABA  6A0F               	clrf	(??_afficher_string_hex+1)^0,c
  7530  005ABC  0E0F               	movlw	15
  7531  005ABE  160E               	andwf	??_afficher_string_hex^0,f,c
  7532  005AC0  0E00               	movlw	0
  7533  005AC2  160F               	andwf	(??_afficher_string_hex+1)^0,f,c
  7534  005AC4  C013  F010         	movff	afficher_string_hex@hexa,??_afficher_string_hex+2
  7535  005AC8  C014  F011         	movff	afficher_string_hex@hexa+1,??_afficher_string_hex+3
  7536  005ACC  500E               	movf	??_afficher_string_hex^0,w,c
  7537  005ACE  2610               	addwf	(??_afficher_string_hex+2)^0,f,c
  7538  005AD0  500F               	movf	(??_afficher_string_hex+1)^0,w,c
  7539  005AD2  2211               	addwfc	(??_afficher_string_hex+3)^0,f,c
  7540  005AD4  C010  FFF6         	movff	??_afficher_string_hex+2,tblptrl
  7541  005AD8  C011  FFF7         	movff	??_afficher_string_hex+3,tblptrh
  7542  005ADC                     	if	0	;tblptru may be non-zero
  7543  005ADC                     	endif
  7544  005ADC                     	if	0	;tblptru may be non-zero
  7545  005ADC                     	endif
  7546  005ADC  0008               	tblrd		*
  7547  005ADE  50F5               	movf	tablat,w,c
  7548  005AE0  EC17  F026         	call	_ecrire_ecran_data
  7549  005AE4                     l4143:
  7550                           
  7551                           ;affichage.c: 211:     if (data > 15) ecrire_ecran_data(hexa[data / 16 % 16]);
  7552  005AE4  500D               	movf	(afficher_string_hex@data+1)^0,w,c
  7553  005AE6  E109               	bnz	u3500
  7554  005AE8  0E10               	movlw	16
  7555  005AEA  5C0C               	subwf	afficher_string_hex@data^0,w,c
  7556  005AEC  A0D8               	btfss	status,0,c
  7557  005AEE  EF7B  F02D         	goto	u3501
  7558  005AF2  EF7D  F02D         	goto	u3500
  7559  005AF6                     u3501:
  7560  005AF6  EF9D  F02D         	goto	l443
  7561  005AFA                     u3500:
  7562  005AFA  C00C  F00E         	movff	afficher_string_hex@data,??_afficher_string_hex
  7563  005AFE  C00D  F00F         	movff	afficher_string_hex@data+1,??_afficher_string_hex+1
  7564  005B02  0E04               	movlw	4
  7565  005B04  6E10               	movwf	(??_afficher_string_hex+2)^0,c
  7566  005B06                     u3515:
  7567  005B06  90D8               	bcf	status,0,c
  7568  005B08  320F               	rrcf	(??_afficher_string_hex+1)^0,f,c
  7569  005B0A  320E               	rrcf	??_afficher_string_hex^0,f,c
  7570  005B0C  2E10               	decfsz	(??_afficher_string_hex+2)^0,f,c
  7571  005B0E  EF83  F02D         	goto	u3515
  7572  005B12  0E0F               	movlw	15
  7573  005B14  160E               	andwf	??_afficher_string_hex^0,f,c
  7574  005B16  0E00               	movlw	0
  7575  005B18  160F               	andwf	(??_afficher_string_hex+1)^0,f,c
  7576  005B1A  C013  F011         	movff	afficher_string_hex@hexa,??_afficher_string_hex+3
  7577  005B1E  C014  F012         	movff	afficher_string_hex@hexa+1,??_afficher_string_hex+4
  7578  005B22  500E               	movf	??_afficher_string_hex^0,w,c
  7579  005B24  2611               	addwf	(??_afficher_string_hex+3)^0,f,c
  7580  005B26  500F               	movf	(??_afficher_string_hex+1)^0,w,c
  7581  005B28  2212               	addwfc	(??_afficher_string_hex+4)^0,f,c
  7582  005B2A  C011  FFF6         	movff	??_afficher_string_hex+3,tblptrl
  7583  005B2E  C012  FFF7         	movff	??_afficher_string_hex+4,tblptrh
  7584  005B32                     	if	0	;tblptru may be non-zero
  7585  005B32                     	endif
  7586  005B32                     	if	0	;tblptru may be non-zero
  7587  005B32                     	endif
  7588  005B32  0008               	tblrd		*
  7589  005B34  50F5               	movf	tablat,w,c
  7590  005B36  EC17  F026         	call	_ecrire_ecran_data
  7591  005B3A                     l443:
  7592                           
  7593                           ;affichage.c: 212:     ecrire_ecran_data(hexa[data % 16]);
  7594  005B3A  0E0F               	movlw	15
  7595  005B3C  140C               	andwf	afficher_string_hex@data^0,w,c
  7596  005B3E  6E0E               	movwf	??_afficher_string_hex^0,c
  7597  005B40  0E00               	movlw	0
  7598  005B42  140D               	andwf	(afficher_string_hex@data+1)^0,w,c
  7599  005B44  6E0F               	movwf	(??_afficher_string_hex+1)^0,c
  7600  005B46  C013  F010         	movff	afficher_string_hex@hexa,??_afficher_string_hex+2
  7601  005B4A  C014  F011         	movff	afficher_string_hex@hexa+1,??_afficher_string_hex+3
  7602  005B4E  500E               	movf	??_afficher_string_hex^0,w,c
  7603  005B50  2610               	addwf	(??_afficher_string_hex+2)^0,f,c
  7604  005B52  500F               	movf	(??_afficher_string_hex+1)^0,w,c
  7605  005B54  2211               	addwfc	(??_afficher_string_hex+3)^0,f,c
  7606  005B56  C010  FFF6         	movff	??_afficher_string_hex+2,tblptrl
  7607  005B5A  C011  FFF7         	movff	??_afficher_string_hex+3,tblptrh
  7608  005B5E                     	if	0	;tblptru may be non-zero
  7609  005B5E                     	endif
  7610  005B5E                     	if	0	;tblptru may be non-zero
  7611  005B5E                     	endif
  7612  005B5E  0008               	tblrd		*
  7613  005B60  50F5               	movf	tablat,w,c
  7614  005B62  EC17  F026         	call	_ecrire_ecran_data
  7615  005B66                     
  7616                           ;affichage.c: 214:     LATCbits.LATC1 = 1;
  7617  005B66  8285               	bsf	133,1,c	;volatile
  7618  005B68  0012               	return		;funcret
  7619  005B6A                     __end_of_afficher_string_hex:
  7620                           	callstack 0
  7621                           
  7622 ;; *************** function _afficher_donnees *****************
  7623 ;; Defined at:
  7624 ;;		line 162 in file "affichage.c"
  7625 ;; Parameters:    Size  Location     Type
  7626 ;;  tem             2   12[BANK0 ] unsigned short 
  7627 ;;  hum             2   14[BANK0 ] unsigned short 
  7628 ;;  bat             2   16[BANK0 ] unsigned short 
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;		None
  7631 ;; Return value:  Size  Location     Type
  7632 ;;                  1    wreg      void 
  7633 ;; Registers used:
  7634 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7640 ;;      Params:         0       6       0       0       0       0       0       0       0
  7641 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7642 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7643 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7644 ;;Total ram usage:        6 bytes
  7645 ;; Hardware stack levels used: 1
  7646 ;; Hardware stack levels required when called: 3
  7647 ;; This function calls:
  7648 ;;		_afficher_batterie
  7649 ;;		_afficher_humidite
  7650 ;;		_afficher_temperature
  7651 ;;		_clear_ecran
  7652 ;; This function is called by:
  7653 ;;		_main
  7654 ;; This function uses a non-reentrant model
  7655 ;;
  7656                           
  7657                           	psect	text30
  7658  004C00                     __ptext30:
  7659                           	callstack 0
  7660  004C00                     _afficher_donnees:
  7661                           	callstack 27
  7662  004C00                     
  7663                           ;affichage.c: 163:     LATCbits.LATC1 = 0;
  7664  004C00  9285               	bcf	133,1,c	;volatile
  7665  004C02                     
  7666                           ;affichage.c: 165:     clear_ecran();
  7667  004C02  EC56  F025         	call	_clear_ecran	;wreg free
  7668                           
  7669                           ;affichage.c: 171:     afficher_temperature(tem);
  7670  004C06  C06C  F06A         	movff	afficher_donnees@tem,afficher_temperature@data
  7671  004C0A  C06D  F06B         	movff	afficher_donnees@tem+1,afficher_temperature@data+1
  7672  004C0E  EC4F  F02F         	call	_afficher_temperature	;wreg free
  7673                           
  7674                           ;affichage.c: 172:     afficher_humidite(hum);
  7675  004C12  C06E  F06A         	movff	afficher_donnees@hum,afficher_humidite@data
  7676  004C16  C06F  F06B         	movff	afficher_donnees@hum+1,afficher_humidite@data+1
  7677  004C1A  EC2D  F02C         	call	_afficher_humidite	;wreg free
  7678                           
  7679                           ;affichage.c: 173:     afficher_batterie(bat);
  7680  004C1E  C070  F06A         	movff	afficher_donnees@bat,afficher_batterie@data
  7681  004C22  C071  F06B         	movff	afficher_donnees@bat+1,afficher_batterie@data+1
  7682  004C26  ECAF  F02B         	call	_afficher_batterie	;wreg free
  7683  004C2A                     
  7684                           ;affichage.c: 175:     LATCbits.LATC1 = 1;
  7685  004C2A  8285               	bsf	133,1,c	;volatile
  7686  004C2C  0012               	return		;funcret
  7687  004C2E                     __end_of_afficher_donnees:
  7688                           	callstack 0
  7689                           
  7690 ;; *************** function _clear_ecran *****************
  7691 ;; Defined at:
  7692 ;;		line 79 in file "affichage.c"
  7693 ;; Parameters:    Size  Location     Type
  7694 ;;		None
  7695 ;; Auto vars:     Size  Location     Type
  7696 ;;		None
  7697 ;; Return value:  Size  Location     Type
  7698 ;;                  1    wreg      void 
  7699 ;; Registers used:
  7700 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7701 ;; Tracked objects:
  7702 ;;		On entry : 0/0
  7703 ;;		On exit  : 0/0
  7704 ;;		Unchanged: 0/0
  7705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7706 ;;      Params:         0       0       0       0       0       0       0       0       0
  7707 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7708 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7709 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7710 ;;Total ram usage:        0 bytes
  7711 ;; Hardware stack levels used: 1
  7712 ;; Hardware stack levels required when called: 2
  7713 ;; This function calls:
  7714 ;;		_ecrire_ecran_data
  7715 ;;		_ecrire_ecran_start_byte
  7716 ;; This function is called by:
  7717 ;;		_main
  7718 ;;		_afficher_donnees
  7719 ;; This function uses a non-reentrant model
  7720 ;;
  7721                           
  7722                           	psect	text31
  7723  004AAC                     __ptext31:
  7724                           	callstack 0
  7725  004AAC                     _clear_ecran:
  7726                           	callstack 28
  7727  004AAC                     
  7728                           ;affichage.c: 80:     ecrire_ecran_start_byte(0xF8);
  7729  004AAC  0EF8               	movlw	248
  7730  004AAE  EC5D  F025         	call	_ecrire_ecran_start_byte
  7731  004AB2                     
  7732                           ;affichage.c: 81:     ecrire_ecran_data(0x01);
  7733  004AB2  0E01               	movlw	1
  7734  004AB4  EC17  F026         	call	_ecrire_ecran_data
  7735  004AB8  0012               	return		;funcret
  7736  004ABA                     __end_of_clear_ecran:
  7737                           	callstack 0
  7738                           
  7739 ;; *************** function _afficher_temperature *****************
  7740 ;; Defined at:
  7741 ;;		line 86 in file "affichage.c"
  7742 ;; Parameters:    Size  Location     Type
  7743 ;;  data            2   10[BANK0 ] unsigned short 
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;		None
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  1    wreg      void 
  7748 ;; Registers used:
  7749 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7750 ;; Tracked objects:
  7751 ;;		On entry : 0/0
  7752 ;;		On exit  : 0/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7755 ;;      Params:         0       2       0       0       0       0       0       0       0
  7756 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7757 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7758 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7759 ;;Total ram usage:        2 bytes
  7760 ;; Hardware stack levels used: 1
  7761 ;; Hardware stack levels required when called: 2
  7762 ;; This function calls:
  7763 ;;		___lwdiv
  7764 ;;		___lwmod
  7765 ;;		_ecrire_ecran_data
  7766 ;;		_ecrire_ecran_start_byte
  7767 ;; This function is called by:
  7768 ;;		_afficher_donnees
  7769 ;; This function uses a non-reentrant model
  7770 ;;
  7771                           
  7772                           	psect	text32
  7773  005E9E                     __ptext32:
  7774                           	callstack 0
  7775  005E9E                     _afficher_temperature:
  7776                           	callstack 27
  7777  005E9E                     
  7778                           ;affichage.c: 88:     ecrire_ecran_start_byte(0xF8);
  7779  005E9E  0EF8               	movlw	248
  7780  005EA0  EC5D  F025         	call	_ecrire_ecran_start_byte
  7781  005EA4                     
  7782                           ;affichage.c: 89:     ecrire_ecran_data(0x80);
  7783  005EA4  0E80               	movlw	128
  7784  005EA6  EC17  F026         	call	_ecrire_ecran_data
  7785  005EAA                     
  7786                           ;affichage.c: 92:     ecrire_ecran_start_byte(0xFA);
  7787  005EAA  0EFA               	movlw	250
  7788  005EAC  EC5D  F025         	call	_ecrire_ecran_start_byte
  7789                           
  7790                           ;affichage.c: 93:     ecrire_ecran_data('T');
  7791  005EB0  0E54               	movlw	84
  7792  005EB2  EC17  F026         	call	_ecrire_ecran_data
  7793                           
  7794                           ;affichage.c: 94:     ecrire_ecran_data('e');
  7795  005EB6  0E65               	movlw	101
  7796  005EB8  EC17  F026         	call	_ecrire_ecran_data
  7797                           
  7798                           ;affichage.c: 95:     ecrire_ecran_data('m');
  7799  005EBC  0E6D               	movlw	109
  7800  005EBE  EC17  F026         	call	_ecrire_ecran_data
  7801                           
  7802                           ;affichage.c: 96:     ecrire_ecran_data(':');
  7803  005EC2  0E3A               	movlw	58
  7804  005EC4  EC17  F026         	call	_ecrire_ecran_data
  7805  005EC8                     
  7806                           ;affichage.c: 99:     if(data >= 1000) ecrire_ecran_data((data / 1000) % 10 + '0');
  7807  005EC8  0EE8               	movlw	232
  7808  005ECA  0100               	movlb	0	; () banked
  7809  005ECC  5D6A               	subwf	afficher_temperature@data& (0+255),w,b
  7810  005ECE  0E03               	movlw	3
  7811  005ED0  596B               	subwfb	(afficher_temperature@data+1)& (0+255),w,b
  7812  005ED2  A0D8               	btfss	status,0,c
  7813  005ED4  EF6E  F02F         	goto	u3221
  7814  005ED8  EF70  F02F         	goto	u3220
  7815  005EDC                     u3221:
  7816  005EDC  EF8C  F02F         	goto	l3653
  7817  005EE0                     u3220:
  7818  005EE0                     
  7819                           ; BSR set to: 0
  7820  005EE0  0E03               	movlw	3
  7821  005EE2  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  7822  005EE4  0EE8               	movlw	232
  7823  005EE6  6E03               	movwf	___lwdiv@divisor^0,c
  7824  005EE8  C06A  F001         	movff	afficher_temperature@data,___lwdiv@dividend
  7825  005EEC  C06B  F002         	movff	afficher_temperature@data+1,___lwdiv@dividend+1
  7826  005EF0  ECA6  F027         	call	___lwdiv	;wreg free
  7827  005EF4  C001  F066         	movff	?___lwdiv,___lwmod@dividend
  7828  005EF8  C002  F067         	movff	?___lwdiv+1,___lwmod@dividend+1
  7829  005EFC  0E00               	movlw	0
  7830  005EFE  0100               	movlb	0	; () banked
  7831  005F00  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  7832  005F02  0E0A               	movlw	10
  7833  005F04  6F68               	movwf	___lwmod@divisor& (0+255),b
  7834  005F06  EC07  F027         	call	___lwmod	;wreg free
  7835  005F0A  0100               	movlb	0	; () banked
  7836  005F0C  5166               	movf	?___lwmod& (0+255),w,b
  7837  005F0E  0F30               	addlw	48
  7838  005F10  EC17  F026         	call	_ecrire_ecran_data
  7839  005F14  EF8F  F02F         	goto	l419
  7840  005F18                     l3653:
  7841                           
  7842                           ; BSR set to: 0
  7843  005F18  0E20               	movlw	32
  7844  005F1A  EC17  F026         	call	_ecrire_ecran_data
  7845  005F1E                     l419:
  7846                           
  7847                           ;affichage.c: 101:     ecrire_ecran_data((data / 100) % 10 + '0');
  7848  005F1E  0E00               	movlw	0
  7849  005F20  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  7850  005F22  0E64               	movlw	100
  7851  005F24  6E03               	movwf	___lwdiv@divisor^0,c
  7852  005F26  C06A  F001         	movff	afficher_temperature@data,___lwdiv@dividend
  7853  005F2A  C06B  F002         	movff	afficher_temperature@data+1,___lwdiv@dividend+1
  7854  005F2E  ECA6  F027         	call	___lwdiv	;wreg free
  7855  005F32  C001  F066         	movff	?___lwdiv,___lwmod@dividend
  7856  005F36  C002  F067         	movff	?___lwdiv+1,___lwmod@dividend+1
  7857  005F3A  0E00               	movlw	0
  7858  005F3C  0100               	movlb	0	; () banked
  7859  005F3E  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  7860  005F40  0E0A               	movlw	10
  7861  005F42  6F68               	movwf	___lwmod@divisor& (0+255),b
  7862  005F44  EC07  F027         	call	___lwmod	;wreg free
  7863  005F48  0100               	movlb	0	; () banked
  7864  005F4A  5166               	movf	?___lwmod& (0+255),w,b
  7865  005F4C  0F30               	addlw	48
  7866  005F4E  EC17  F026         	call	_ecrire_ecran_data
  7867                           
  7868                           ;affichage.c: 102:     ecrire_ecran_data('.');
  7869  005F52  0E2E               	movlw	46
  7870  005F54  EC17  F026         	call	_ecrire_ecran_data
  7871                           
  7872                           ;affichage.c: 103:     ecrire_ecran_data((data / 10) % 10 +'0');
  7873  005F58  0E00               	movlw	0
  7874  005F5A  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  7875  005F5C  0E0A               	movlw	10
  7876  005F5E  6E03               	movwf	___lwdiv@divisor^0,c
  7877  005F60  C06A  F001         	movff	afficher_temperature@data,___lwdiv@dividend
  7878  005F64  C06B  F002         	movff	afficher_temperature@data+1,___lwdiv@dividend+1
  7879  005F68  ECA6  F027         	call	___lwdiv	;wreg free
  7880  005F6C  C001  F066         	movff	?___lwdiv,___lwmod@dividend
  7881  005F70  C002  F067         	movff	?___lwdiv+1,___lwmod@dividend+1
  7882  005F74  0E00               	movlw	0
  7883  005F76  0100               	movlb	0	; () banked
  7884  005F78  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  7885  005F7A  0E0A               	movlw	10
  7886  005F7C  6F68               	movwf	___lwmod@divisor& (0+255),b
  7887  005F7E  EC07  F027         	call	___lwmod	;wreg free
  7888  005F82  0100               	movlb	0	; () banked
  7889  005F84  5166               	movf	?___lwmod& (0+255),w,b
  7890  005F86  0F30               	addlw	48
  7891  005F88  EC17  F026         	call	_ecrire_ecran_data
  7892                           
  7893                           ;affichage.c: 104:     ecrire_ecran_data(data % 10 +'0');
  7894  005F8C  C06A  F066         	movff	afficher_temperature@data,___lwmod@dividend
  7895  005F90  C06B  F067         	movff	afficher_temperature@data+1,___lwmod@dividend+1
  7896  005F94  0E00               	movlw	0
  7897  005F96  0100               	movlb	0	; () banked
  7898  005F98  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  7899  005F9A  0E0A               	movlw	10
  7900  005F9C  6F68               	movwf	___lwmod@divisor& (0+255),b
  7901  005F9E  EC07  F027         	call	___lwmod	;wreg free
  7902  005FA2  0100               	movlb	0	; () banked
  7903  005FA4  5166               	movf	?___lwmod& (0+255),w,b
  7904  005FA6  0F30               	addlw	48
  7905  005FA8  EC17  F026         	call	_ecrire_ecran_data
  7906                           
  7907                           ;affichage.c: 106:     ecrire_ecran_data(0xDF);
  7908  005FAC  0EDF               	movlw	223
  7909  005FAE  EC17  F026         	call	_ecrire_ecran_data
  7910  005FB2  0012               	return		;funcret
  7911  005FB4                     __end_of_afficher_temperature:
  7912                           	callstack 0
  7913                           
  7914 ;; *************** function _afficher_humidite *****************
  7915 ;; Defined at:
  7916 ;;		line 111 in file "affichage.c"
  7917 ;; Parameters:    Size  Location     Type
  7918 ;;  data            2   10[BANK0 ] unsigned short 
  7919 ;; Auto vars:     Size  Location     Type
  7920 ;;		None
  7921 ;; Return value:  Size  Location     Type
  7922 ;;                  1    wreg      void 
  7923 ;; Registers used:
  7924 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7925 ;; Tracked objects:
  7926 ;;		On entry : 0/0
  7927 ;;		On exit  : 0/0
  7928 ;;		Unchanged: 0/0
  7929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7930 ;;      Params:         0       2       0       0       0       0       0       0       0
  7931 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7932 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7933 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7934 ;;Total ram usage:        2 bytes
  7935 ;; Hardware stack levels used: 1
  7936 ;; Hardware stack levels required when called: 2
  7937 ;; This function calls:
  7938 ;;		___lwdiv
  7939 ;;		___lwmod
  7940 ;;		_ecrire_ecran_data
  7941 ;;		_ecrire_ecran_start_byte
  7942 ;; This function is called by:
  7943 ;;		_afficher_donnees
  7944 ;; This function uses a non-reentrant model
  7945 ;;
  7946                           
  7947                           	psect	text33
  7948  00585A                     __ptext33:
  7949                           	callstack 0
  7950  00585A                     _afficher_humidite:
  7951                           	callstack 27
  7952  00585A                     
  7953                           ;affichage.c: 113:     ecrire_ecran_start_byte(0xF8);
  7954  00585A  0EF8               	movlw	248
  7955  00585C  EC5D  F025         	call	_ecrire_ecran_start_byte
  7956  005860                     
  7957                           ;affichage.c: 114:     ecrire_ecran_data(0xA0);
  7958  005860  0EA0               	movlw	160
  7959  005862  EC17  F026         	call	_ecrire_ecran_data
  7960  005866                     
  7961                           ;affichage.c: 117:     ecrire_ecran_start_byte(0xFA);
  7962  005866  0EFA               	movlw	250
  7963  005868  EC5D  F025         	call	_ecrire_ecran_start_byte
  7964                           
  7965                           ;affichage.c: 118:     ecrire_ecran_data('H');
  7966  00586C  0E48               	movlw	72
  7967  00586E  EC17  F026         	call	_ecrire_ecran_data
  7968                           
  7969                           ;affichage.c: 119:     ecrire_ecran_data('u');
  7970  005872  0E75               	movlw	117
  7971  005874  EC17  F026         	call	_ecrire_ecran_data
  7972                           
  7973                           ;affichage.c: 120:     ecrire_ecran_data('m');
  7974  005878  0E6D               	movlw	109
  7975  00587A  EC17  F026         	call	_ecrire_ecran_data
  7976                           
  7977                           ;affichage.c: 121:     ecrire_ecran_data(':');
  7978  00587E  0E3A               	movlw	58
  7979  005880  EC17  F026         	call	_ecrire_ecran_data
  7980                           
  7981                           ;affichage.c: 122:     ecrire_ecran_data(' ');
  7982  005884  0E20               	movlw	32
  7983  005886  EC17  F026         	call	_ecrire_ecran_data
  7984  00588A                     
  7985                           ;affichage.c: 124:     if(data >= 1000) ecrire_ecran_data((data / 1000) % 10 + '0');
  7986  00588A  0EE8               	movlw	232
  7987  00588C  0100               	movlb	0	; () banked
  7988  00588E  5D6A               	subwf	afficher_humidite@data& (0+255),w,b
  7989  005890  0E03               	movlw	3
  7990  005892  596B               	subwfb	(afficher_humidite@data+1)& (0+255),w,b
  7991  005894  A0D8               	btfss	status,0,c
  7992  005896  EF4F  F02C         	goto	u3231
  7993  00589A  EF51  F02C         	goto	u3230
  7994  00589E                     u3231:
  7995  00589E  EF6D  F02C         	goto	l3667
  7996  0058A2                     u3230:
  7997  0058A2                     
  7998                           ; BSR set to: 0
  7999  0058A2  0E03               	movlw	3
  8000  0058A4  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  8001  0058A6  0EE8               	movlw	232
  8002  0058A8  6E03               	movwf	___lwdiv@divisor^0,c
  8003  0058AA  C06A  F001         	movff	afficher_humidite@data,___lwdiv@dividend
  8004  0058AE  C06B  F002         	movff	afficher_humidite@data+1,___lwdiv@dividend+1
  8005  0058B2  ECA6  F027         	call	___lwdiv	;wreg free
  8006  0058B6  C001  F066         	movff	?___lwdiv,___lwmod@dividend
  8007  0058BA  C002  F067         	movff	?___lwdiv+1,___lwmod@dividend+1
  8008  0058BE  0E00               	movlw	0
  8009  0058C0  0100               	movlb	0	; () banked
  8010  0058C2  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  8011  0058C4  0E0A               	movlw	10
  8012  0058C6  6F68               	movwf	___lwmod@divisor& (0+255),b
  8013  0058C8  EC07  F027         	call	___lwmod	;wreg free
  8014  0058CC  0100               	movlb	0	; () banked
  8015  0058CE  5166               	movf	?___lwmod& (0+255),w,b
  8016  0058D0  0F30               	addlw	48
  8017  0058D2  EC17  F026         	call	_ecrire_ecran_data
  8018  0058D6  EF70  F02C         	goto	l424
  8019  0058DA                     l3667:
  8020                           
  8021                           ; BSR set to: 0
  8022  0058DA  0E20               	movlw	32
  8023  0058DC  EC17  F026         	call	_ecrire_ecran_data
  8024  0058E0                     l424:
  8025                           
  8026                           ;affichage.c: 126:     ecrire_ecran_data((data / 100) % 10 + '0');
  8027  0058E0  0E00               	movlw	0
  8028  0058E2  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  8029  0058E4  0E64               	movlw	100
  8030  0058E6  6E03               	movwf	___lwdiv@divisor^0,c
  8031  0058E8  C06A  F001         	movff	afficher_humidite@data,___lwdiv@dividend
  8032  0058EC  C06B  F002         	movff	afficher_humidite@data+1,___lwdiv@dividend+1
  8033  0058F0  ECA6  F027         	call	___lwdiv	;wreg free
  8034  0058F4  C001  F066         	movff	?___lwdiv,___lwmod@dividend
  8035  0058F8  C002  F067         	movff	?___lwdiv+1,___lwmod@dividend+1
  8036  0058FC  0E00               	movlw	0
  8037  0058FE  0100               	movlb	0	; () banked
  8038  005900  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  8039  005902  0E0A               	movlw	10
  8040  005904  6F68               	movwf	___lwmod@divisor& (0+255),b
  8041  005906  EC07  F027         	call	___lwmod	;wreg free
  8042  00590A  0100               	movlb	0	; () banked
  8043  00590C  5166               	movf	?___lwmod& (0+255),w,b
  8044  00590E  0F30               	addlw	48
  8045  005910  EC17  F026         	call	_ecrire_ecran_data
  8046                           
  8047                           ;affichage.c: 127:     ecrire_ecran_data('.');
  8048  005914  0E2E               	movlw	46
  8049  005916  EC17  F026         	call	_ecrire_ecran_data
  8050                           
  8051                           ;affichage.c: 128:     ecrire_ecran_data((data / 10) % 10 +'0');
  8052  00591A  0E00               	movlw	0
  8053  00591C  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  8054  00591E  0E0A               	movlw	10
  8055  005920  6E03               	movwf	___lwdiv@divisor^0,c
  8056  005922  C06A  F001         	movff	afficher_humidite@data,___lwdiv@dividend
  8057  005926  C06B  F002         	movff	afficher_humidite@data+1,___lwdiv@dividend+1
  8058  00592A  ECA6  F027         	call	___lwdiv	;wreg free
  8059  00592E  C001  F066         	movff	?___lwdiv,___lwmod@dividend
  8060  005932  C002  F067         	movff	?___lwdiv+1,___lwmod@dividend+1
  8061  005936  0E00               	movlw	0
  8062  005938  0100               	movlb	0	; () banked
  8063  00593A  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  8064  00593C  0E0A               	movlw	10
  8065  00593E  6F68               	movwf	___lwmod@divisor& (0+255),b
  8066  005940  EC07  F027         	call	___lwmod	;wreg free
  8067  005944  0100               	movlb	0	; () banked
  8068  005946  5166               	movf	?___lwmod& (0+255),w,b
  8069  005948  0F30               	addlw	48
  8070  00594A  EC17  F026         	call	_ecrire_ecran_data
  8071                           
  8072                           ;affichage.c: 131:     ecrire_ecran_data('%');
  8073  00594E  0E25               	movlw	37
  8074  005950  EC17  F026         	call	_ecrire_ecran_data
  8075  005954  0012               	return		;funcret
  8076  005956                     __end_of_afficher_humidite:
  8077                           	callstack 0
  8078                           
  8079 ;; *************** function _afficher_batterie *****************
  8080 ;; Defined at:
  8081 ;;		line 136 in file "affichage.c"
  8082 ;; Parameters:    Size  Location     Type
  8083 ;;  data            2   10[BANK0 ] unsigned short 
  8084 ;; Auto vars:     Size  Location     Type
  8085 ;;		None
  8086 ;; Return value:  Size  Location     Type
  8087 ;;                  1    wreg      void 
  8088 ;; Registers used:
  8089 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8090 ;; Tracked objects:
  8091 ;;		On entry : 0/0
  8092 ;;		On exit  : 0/0
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8095 ;;      Params:         0       2       0       0       0       0       0       0       0
  8096 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8097 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8098 ;;      Totals:         0       2       0       0       0       0       0       0       0
  8099 ;;Total ram usage:        2 bytes
  8100 ;; Hardware stack levels used: 1
  8101 ;; Hardware stack levels required when called: 2
  8102 ;; This function calls:
  8103 ;;		___lwdiv
  8104 ;;		___lwmod
  8105 ;;		_ecrire_ecran_data
  8106 ;;		_ecrire_ecran_start_byte
  8107 ;; This function is called by:
  8108 ;;		_afficher_donnees
  8109 ;; This function uses a non-reentrant model
  8110 ;;
  8111                           
  8112                           	psect	text34
  8113  00575E                     __ptext34:
  8114                           	callstack 0
  8115  00575E                     _afficher_batterie:
  8116                           	callstack 27
  8117  00575E                     
  8118                           ;affichage.c: 138:     ecrire_ecran_start_byte(0xF8);
  8119  00575E  0EF8               	movlw	248
  8120  005760  EC5D  F025         	call	_ecrire_ecran_start_byte
  8121  005764                     
  8122                           ;affichage.c: 139:     ecrire_ecran_data(0xC0);
  8123  005764  0EC0               	movlw	192
  8124  005766  EC17  F026         	call	_ecrire_ecran_data
  8125  00576A                     
  8126                           ;affichage.c: 142:     ecrire_ecran_start_byte(0xFA);
  8127  00576A  0EFA               	movlw	250
  8128  00576C  EC5D  F025         	call	_ecrire_ecran_start_byte
  8129                           
  8130                           ;affichage.c: 143:     ecrire_ecran_data('B');
  8131  005770  0E42               	movlw	66
  8132  005772  EC17  F026         	call	_ecrire_ecran_data
  8133                           
  8134                           ;affichage.c: 144:     ecrire_ecran_data('a');
  8135  005776  0E61               	movlw	97
  8136  005778  EC17  F026         	call	_ecrire_ecran_data
  8137                           
  8138                           ;affichage.c: 145:     ecrire_ecran_data('t');
  8139  00577C  0E74               	movlw	116
  8140  00577E  EC17  F026         	call	_ecrire_ecran_data
  8141                           
  8142                           ;affichage.c: 146:     ecrire_ecran_data(':');
  8143  005782  0E3A               	movlw	58
  8144  005784  EC17  F026         	call	_ecrire_ecran_data
  8145                           
  8146                           ;affichage.c: 147:     ecrire_ecran_data(' ');
  8147  005788  0E20               	movlw	32
  8148  00578A  EC17  F026         	call	_ecrire_ecran_data
  8149  00578E                     
  8150                           ;affichage.c: 149:     if(data >= 1000) ecrire_ecran_data((data / 1000) % 10 + '0');
  8151  00578E  0EE8               	movlw	232
  8152  005790  0100               	movlb	0	; () banked
  8153  005792  5D6A               	subwf	afficher_batterie@data& (0+255),w,b
  8154  005794  0E03               	movlw	3
  8155  005796  596B               	subwfb	(afficher_batterie@data+1)& (0+255),w,b
  8156  005798  A0D8               	btfss	status,0,c
  8157  00579A  EFD1  F02B         	goto	u3241
  8158  00579E  EFD3  F02B         	goto	u3240
  8159  0057A2                     u3241:
  8160  0057A2  EFEF  F02B         	goto	l3681
  8161  0057A6                     u3240:
  8162  0057A6                     
  8163                           ; BSR set to: 0
  8164  0057A6  0E03               	movlw	3
  8165  0057A8  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  8166  0057AA  0EE8               	movlw	232
  8167  0057AC  6E03               	movwf	___lwdiv@divisor^0,c
  8168  0057AE  C06A  F001         	movff	afficher_batterie@data,___lwdiv@dividend
  8169  0057B2  C06B  F002         	movff	afficher_batterie@data+1,___lwdiv@dividend+1
  8170  0057B6  ECA6  F027         	call	___lwdiv	;wreg free
  8171  0057BA  C001  F066         	movff	?___lwdiv,___lwmod@dividend
  8172  0057BE  C002  F067         	movff	?___lwdiv+1,___lwmod@dividend+1
  8173  0057C2  0E00               	movlw	0
  8174  0057C4  0100               	movlb	0	; () banked
  8175  0057C6  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  8176  0057C8  0E0A               	movlw	10
  8177  0057CA  6F68               	movwf	___lwmod@divisor& (0+255),b
  8178  0057CC  EC07  F027         	call	___lwmod	;wreg free
  8179  0057D0  0100               	movlb	0	; () banked
  8180  0057D2  5166               	movf	?___lwmod& (0+255),w,b
  8181  0057D4  0F30               	addlw	48
  8182  0057D6  EC17  F026         	call	_ecrire_ecran_data
  8183  0057DA  EFF2  F02B         	goto	l429
  8184  0057DE                     l3681:
  8185                           
  8186                           ; BSR set to: 0
  8187  0057DE  0E20               	movlw	32
  8188  0057E0  EC17  F026         	call	_ecrire_ecran_data
  8189  0057E4                     l429:
  8190                           
  8191                           ;affichage.c: 151:     ecrire_ecran_data((data / 100) % 10 + '0');
  8192  0057E4  0E00               	movlw	0
  8193  0057E6  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  8194  0057E8  0E64               	movlw	100
  8195  0057EA  6E03               	movwf	___lwdiv@divisor^0,c
  8196  0057EC  C06A  F001         	movff	afficher_batterie@data,___lwdiv@dividend
  8197  0057F0  C06B  F002         	movff	afficher_batterie@data+1,___lwdiv@dividend+1
  8198  0057F4  ECA6  F027         	call	___lwdiv	;wreg free
  8199  0057F8  C001  F066         	movff	?___lwdiv,___lwmod@dividend
  8200  0057FC  C002  F067         	movff	?___lwdiv+1,___lwmod@dividend+1
  8201  005800  0E00               	movlw	0
  8202  005802  0100               	movlb	0	; () banked
  8203  005804  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  8204  005806  0E0A               	movlw	10
  8205  005808  6F68               	movwf	___lwmod@divisor& (0+255),b
  8206  00580A  EC07  F027         	call	___lwmod	;wreg free
  8207  00580E  0100               	movlb	0	; () banked
  8208  005810  5166               	movf	?___lwmod& (0+255),w,b
  8209  005812  0F30               	addlw	48
  8210  005814  EC17  F026         	call	_ecrire_ecran_data
  8211                           
  8212                           ;affichage.c: 152:     ecrire_ecran_data('.');
  8213  005818  0E2E               	movlw	46
  8214  00581A  EC17  F026         	call	_ecrire_ecran_data
  8215                           
  8216                           ;affichage.c: 153:     ecrire_ecran_data((data / 10) % 10 +'0');
  8217  00581E  0E00               	movlw	0
  8218  005820  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  8219  005822  0E0A               	movlw	10
  8220  005824  6E03               	movwf	___lwdiv@divisor^0,c
  8221  005826  C06A  F001         	movff	afficher_batterie@data,___lwdiv@dividend
  8222  00582A  C06B  F002         	movff	afficher_batterie@data+1,___lwdiv@dividend+1
  8223  00582E  ECA6  F027         	call	___lwdiv	;wreg free
  8224  005832  C001  F066         	movff	?___lwdiv,___lwmod@dividend
  8225  005836  C002  F067         	movff	?___lwdiv+1,___lwmod@dividend+1
  8226  00583A  0E00               	movlw	0
  8227  00583C  0100               	movlb	0	; () banked
  8228  00583E  6F69               	movwf	(___lwmod@divisor+1)& (0+255),b
  8229  005840  0E0A               	movlw	10
  8230  005842  6F68               	movwf	___lwmod@divisor& (0+255),b
  8231  005844  EC07  F027         	call	___lwmod	;wreg free
  8232  005848  0100               	movlb	0	; () banked
  8233  00584A  5166               	movf	?___lwmod& (0+255),w,b
  8234  00584C  0F30               	addlw	48
  8235  00584E  EC17  F026         	call	_ecrire_ecran_data
  8236                           
  8237                           ;affichage.c: 157:     ecrire_ecran_data('%');
  8238  005852  0E25               	movlw	37
  8239  005854  EC17  F026         	call	_ecrire_ecran_data
  8240  005858  0012               	return		;funcret
  8241  00585A                     __end_of_afficher_batterie:
  8242                           	callstack 0
  8243                           
  8244 ;; *************** function ___lwmod *****************
  8245 ;; Defined at:
  8246 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwmod.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;  dividend        2    6[BANK0 ] unsigned int 
  8249 ;;  divisor         2    8[BANK0 ] unsigned int 
  8250 ;; Auto vars:     Size  Location     Type
  8251 ;;  counter         1   94[COMRAM] unsigned char 
  8252 ;; Return value:  Size  Location     Type
  8253 ;;                  2    6[BANK0 ] unsigned int 
  8254 ;; Registers used:
  8255 ;;		wreg, status,2, status,0
  8256 ;; Tracked objects:
  8257 ;;		On entry : 0/0
  8258 ;;		On exit  : 0/0
  8259 ;;		Unchanged: 0/0
  8260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8261 ;;      Params:         0       4       0       0       0       0       0       0       0
  8262 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8263 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8264 ;;      Totals:         1       4       0       0       0       0       0       0       0
  8265 ;;Total ram usage:        5 bytes
  8266 ;; Hardware stack levels used: 1
  8267 ;; This function calls:
  8268 ;;		Nothing
  8269 ;; This function is called by:
  8270 ;;		_main
  8271 ;;		_printBatteryLevel
  8272 ;;		_printHumidityLevel
  8273 ;;		_printTemperatureLevel
  8274 ;;		_afficher_temperature
  8275 ;;		_afficher_humidite
  8276 ;;		_afficher_batterie
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280                           	psect	text35
  8281  004E0E                     __ptext35:
  8282                           	callstack 0
  8283  004E0E                     ___lwmod:
  8284                           	callstack 29
  8285  004E0E  0100               	movlb	0	; () banked
  8286  004E10  5168               	movf	___lwmod@divisor& (0+255),w,b
  8287  004E12  1169               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  8288  004E14  B4D8               	btfsc	status,2,c
  8289  004E16  EF0F  F027         	goto	u2901
  8290  004E1A  EF11  F027         	goto	u2900
  8291  004E1E                     u2901:
  8292  004E1E  EF35  F027         	goto	l981
  8293  004E22                     u2900:
  8294  004E22                     
  8295                           ; BSR set to: 0
  8296  004E22  0E01               	movlw	1
  8297  004E24  6E5F               	movwf	___lwmod@counter^0,c
  8298  004E26  EF19  F027         	goto	l3447
  8299  004E2A                     l3445:
  8300                           
  8301                           ; BSR set to: 0
  8302  004E2A  90D8               	bcf	status,0,c
  8303  004E2C  3768               	rlcf	___lwmod@divisor& (0+255),f,b
  8304  004E2E  3769               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  8305  004E30  2A5F               	incf	___lwmod@counter^0,f,c
  8306  004E32                     l3447:
  8307                           
  8308                           ; BSR set to: 0
  8309  004E32  AF69               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  8310  004E34  EF1E  F027         	goto	u2911
  8311  004E38  EF20  F027         	goto	u2910
  8312  004E3C                     u2911:
  8313  004E3C  EF15  F027         	goto	l3445
  8314  004E40                     u2910:
  8315  004E40                     l3449:
  8316                           
  8317                           ; BSR set to: 0
  8318  004E40  5168               	movf	___lwmod@divisor& (0+255),w,b
  8319  004E42  5D66               	subwf	___lwmod@dividend& (0+255),w,b
  8320  004E44  5169               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8321  004E46  5967               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  8322  004E48  A0D8               	btfss	status,0,c
  8323  004E4A  EF29  F027         	goto	u2921
  8324  004E4E  EF2B  F027         	goto	u2920
  8325  004E52                     u2921:
  8326  004E52  EF2F  F027         	goto	l3453
  8327  004E56                     u2920:
  8328  004E56                     
  8329                           ; BSR set to: 0
  8330  004E56  5168               	movf	___lwmod@divisor& (0+255),w,b
  8331  004E58  5F66               	subwf	___lwmod@dividend& (0+255),f,b
  8332  004E5A  5169               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8333  004E5C  5B67               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  8334  004E5E                     l3453:
  8335                           
  8336                           ; BSR set to: 0
  8337  004E5E  90D8               	bcf	status,0,c
  8338  004E60  3369               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  8339  004E62  3368               	rrcf	___lwmod@divisor& (0+255),f,b
  8340  004E64                     
  8341                           ; BSR set to: 0
  8342  004E64  2E5F               	decfsz	___lwmod@counter^0,f,c
  8343  004E66  EF20  F027         	goto	l3449
  8344  004E6A                     l981:
  8345                           
  8346                           ; BSR set to: 0
  8347  004E6A  C066  F066         	movff	___lwmod@dividend,?___lwmod
  8348  004E6E  C067  F067         	movff	___lwmod@dividend+1,?___lwmod+1
  8349  004E72                     
  8350                           ; BSR set to: 0
  8351  004E72  0012               	return		;funcret
  8352  004E74                     __end_of___lwmod:
  8353                           	callstack 0
  8354                           
  8355 ;; *************** function ___lwdiv *****************
  8356 ;; Defined at:
  8357 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
  8358 ;; Parameters:    Size  Location     Type
  8359 ;;  dividend        2    0[COMRAM] unsigned int 
  8360 ;;  divisor         2    2[COMRAM] unsigned int 
  8361 ;; Auto vars:     Size  Location     Type
  8362 ;;  quotient        2    4[COMRAM] unsigned int 
  8363 ;;  counter         1    6[COMRAM] unsigned char 
  8364 ;; Return value:  Size  Location     Type
  8365 ;;                  2    0[COMRAM] unsigned int 
  8366 ;; Registers used:
  8367 ;;		wreg, status,2, status,0
  8368 ;; Tracked objects:
  8369 ;;		On entry : 0/0
  8370 ;;		On exit  : 0/0
  8371 ;;		Unchanged: 0/0
  8372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8373 ;;      Params:         4       0       0       0       0       0       0       0       0
  8374 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8375 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8376 ;;      Totals:         7       0       0       0       0       0       0       0       0
  8377 ;;Total ram usage:        7 bytes
  8378 ;; Hardware stack levels used: 1
  8379 ;; This function calls:
  8380 ;;		Nothing
  8381 ;; This function is called by:
  8382 ;;		_main
  8383 ;;		_printBatteryLevel
  8384 ;;		_printHumidityLevel
  8385 ;;		_printTemperatureLevel
  8386 ;;		_afficher_temperature
  8387 ;;		_afficher_humidite
  8388 ;;		_afficher_batterie
  8389 ;; This function uses a non-reentrant model
  8390 ;;
  8391                           
  8392                           	psect	text36
  8393  004F4C                     __ptext36:
  8394                           	callstack 0
  8395  004F4C                     ___lwdiv:
  8396                           	callstack 29
  8397  004F4C  0E00               	movlw	0
  8398  004F4E  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  8399  004F50  0E00               	movlw	0
  8400  004F52  6E05               	movwf	___lwdiv@quotient^0,c
  8401  004F54  5003               	movf	___lwdiv@divisor^0,w,c
  8402  004F56  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8403  004F58  B4D8               	btfsc	status,2,c
  8404  004F5A  EFB1  F027         	goto	u2871
  8405  004F5E  EFB3  F027         	goto	u2870
  8406  004F62                     u2871:
  8407  004F62  EFDB  F027         	goto	l971
  8408  004F66                     u2870:
  8409  004F66  0E01               	movlw	1
  8410  004F68  6E07               	movwf	___lwdiv@counter^0,c
  8411  004F6A  EFBB  F027         	goto	l3427
  8412  004F6E                     l3425:
  8413  004F6E  90D8               	bcf	status,0,c
  8414  004F70  3603               	rlcf	___lwdiv@divisor^0,f,c
  8415  004F72  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8416  004F74  2A07               	incf	___lwdiv@counter^0,f,c
  8417  004F76                     l3427:
  8418  004F76  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  8419  004F78  EFC0  F027         	goto	u2881
  8420  004F7C  EFC2  F027         	goto	u2880
  8421  004F80                     u2881:
  8422  004F80  EFB7  F027         	goto	l3425
  8423  004F84                     u2880:
  8424  004F84                     l3429:
  8425  004F84  90D8               	bcf	status,0,c
  8426  004F86  3605               	rlcf	___lwdiv@quotient^0,f,c
  8427  004F88  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8428  004F8A  5003               	movf	___lwdiv@divisor^0,w,c
  8429  004F8C  5C01               	subwf	___lwdiv@dividend^0,w,c
  8430  004F8E  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  8431  004F90  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8432  004F92  A0D8               	btfss	status,0,c
  8433  004F94  EFCE  F027         	goto	u2891
  8434  004F98  EFD0  F027         	goto	u2890
  8435  004F9C                     u2891:
  8436  004F9C  EFD5  F027         	goto	l3437
  8437  004FA0                     u2890:
  8438  004FA0  5003               	movf	___lwdiv@divisor^0,w,c
  8439  004FA2  5E01               	subwf	___lwdiv@dividend^0,f,c
  8440  004FA4  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  8441  004FA6  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8442  004FA8  8005               	bsf	___lwdiv@quotient^0,0,c
  8443  004FAA                     l3437:
  8444  004FAA  90D8               	bcf	status,0,c
  8445  004FAC  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8446  004FAE  3203               	rrcf	___lwdiv@divisor^0,f,c
  8447  004FB0  2E07               	decfsz	___lwdiv@counter^0,f,c
  8448  004FB2  EFC2  F027         	goto	l3429
  8449  004FB6                     l971:
  8450  004FB6  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  8451  004FBA  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8452  004FBE  0012               	return		;funcret
  8453  004FC0                     __end_of___lwdiv:
  8454                           	callstack 0
  8455                           
  8456 ;; *************** function _UARTInit *****************
  8457 ;; Defined at:
  8458 ;;		line 16 in file "uart.c"
  8459 ;; Parameters:    Size  Location     Type
  8460 ;;  baudRate        2    0[COMRAM] unsigned short 
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;		None
  8463 ;; Return value:  Size  Location     Type
  8464 ;;                  1    wreg      void 
  8465 ;; Registers used:
  8466 ;;		wreg, status,2
  8467 ;; Tracked objects:
  8468 ;;		On entry : 0/0
  8469 ;;		On exit  : 0/0
  8470 ;;		Unchanged: 0/0
  8471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8472 ;;      Params:         2       0       0       0       0       0       0       0       0
  8473 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8474 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8475 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8476 ;;Total ram usage:        2 bytes
  8477 ;; Hardware stack levels used: 1
  8478 ;; This function calls:
  8479 ;;		Nothing
  8480 ;; This function is called by:
  8481 ;;		_main
  8482 ;; This function uses a non-reentrant model
  8483 ;;
  8484                           
  8485                           	psect	text37
  8486  004CD6                     __ptext37:
  8487                           	callstack 0
  8488  004CD6                     _UARTInit:
  8489                           	callstack 30
  8490  004CD6                     
  8491                           ;uart.c: 19:     TRISCbits.TRISC6 = 1;
  8492  004CD6  8C8A               	bsf	138,6,c	;volatile
  8493                           
  8494                           ;uart.c: 20:     TRISCbits.TRISC7 = 1;
  8495  004CD8  8E8A               	bsf	138,7,c	;volatile
  8496                           
  8497                           ;uart.c: 21:     ANSELCbits.ANSELC7 = 0;
  8498  004CDA  010F               	movlb	15	; () banked
  8499  004CDC  9F21               	bcf	33,7,b	;volatile
  8500                           
  8501                           ;uart.c: 23:     TRISAbits.TRISA0 = 0;
  8502  004CDE  9088               	bcf	136,0,c	;volatile
  8503                           
  8504                           ;uart.c: 24:     LATAbits.LATA0 = 0;
  8505  004CE0  9083               	bcf	131,0,c	;volatile
  8506  004CE2                     
  8507                           ; BSR set to: 15
  8508                           ;uart.c: 27:     TX1STA = 0;
  8509  004CE2  0E00               	movlw	0
  8510  004CE4  6E9E               	movwf	158,c	;volatile
  8511                           
  8512                           ;uart.c: 28:     RC1STA = 0;
  8513  004CE6  0E00               	movlw	0
  8514  004CE8  6E9D               	movwf	157,c	;volatile
  8515                           
  8516                           ;uart.c: 29:     RC6PPS = 0x09;
  8517  004CEA  0E09               	movlw	9
  8518  004CEC  010E               	movlb	14	; () banked
  8519  004CEE  6FFD               	movwf	253,b	;volatile
  8520  004CF0                     
  8521                           ; BSR set to: 14
  8522                           ;uart.c: 31:     TX1STAbits.SYNC = 0;
  8523  004CF0  989E               	bcf	158,4,c	;volatile
  8524  004CF2                     
  8525                           ; BSR set to: 14
  8526                           ;uart.c: 32:     TX1STAbits.TX9 = 0;
  8527  004CF2  9C9E               	bcf	158,6,c	;volatile
  8528  004CF4                     
  8529                           ; BSR set to: 14
  8530                           ;uart.c: 33:     RC1STAbits.RX9 = 0;
  8531  004CF4  9C9D               	bcf	157,6,c	;volatile
  8532  004CF6                     
  8533                           ; BSR set to: 14
  8534                           ;uart.c: 34:     RC1STAbits.CREN = 1;
  8535  004CF6  889D               	bsf	157,4,c	;volatile
  8536  004CF8                     
  8537                           ; BSR set to: 14
  8538                           ;uart.c: 35:     RC1STAbits.ADDEN = 0;
  8539  004CF8  969D               	bcf	157,3,c	;volatile
  8540  004CFA                     
  8541                           ; BSR set to: 14
  8542                           ;uart.c: 37:     PIE3bits.RC1IE = 1;
  8543  004CFA  8BC5               	bsf	197,5,b	;volatile
  8544  004CFC                     
  8545                           ; BSR set to: 14
  8546                           ;uart.c: 38:     PIE3bits.TX1IE = 0;
  8547  004CFC  99C5               	bcf	197,4,b	;volatile
  8548  004CFE                     
  8549                           ; BSR set to: 14
  8550                           ;uart.c: 40:     TX1STAbits.BRGH = 1;
  8551  004CFE  849E               	bsf	158,2,c	;volatile
  8552  004D00                     
  8553                           ; BSR set to: 14
  8554                           ;uart.c: 41:     BAUD1CONbits.BRG16 = 1;
  8555  004D00  869F               	bsf	159,3,c	;volatile
  8556                           
  8557                           ;uart.c: 45:     SP1BRG = 12;
  8558  004D02  0E00               	movlw	0
  8559  004D04  6E9C               	movwf	156,c	;volatile
  8560  004D06  0E0C               	movlw	12
  8561  004D08  6E9B               	movwf	155,c	;volatile
  8562                           
  8563                           ;uart.c: 46:     SP1BRGH = 0;
  8564  004D0A  0E00               	movlw	0
  8565  004D0C  6E9C               	movwf	156,c	;volatile
  8566  004D0E                     
  8567                           ; BSR set to: 14
  8568                           ;uart.c: 50:     TX1STAbits.TXEN = 1;
  8569  004D0E  8A9E               	bsf	158,5,c	;volatile
  8570  004D10                     
  8571                           ; BSR set to: 14
  8572                           ;uart.c: 51:     RC1STAbits.SPEN = 1;
  8573  004D10  8E9D               	bsf	157,7,c	;volatile
  8574  004D12                     
  8575                           ; BSR set to: 14
  8576                           ;uart.c: 53:     PIR3bits.RC1IF = 0;
  8577  004D12  9BCD               	bcf	205,5,b	;volatile
  8578  004D14                     
  8579                           ; BSR set to: 14
  8580                           ;uart.c: 55:     PIE3bits.RC1IE = 1;
  8581  004D14  8BC5               	bsf	197,5,b	;volatile
  8582  004D16                     
  8583                           ; BSR set to: 14
  8584                           ;uart.c: 56:     INTCONbits.PEIE = 1;
  8585  004D16  8CF2               	bsf	242,6,c	;volatile
  8586  004D18                     
  8587                           ; BSR set to: 14
  8588  004D18  0012               	return		;funcret
  8589  004D1A                     __end_of_UARTInit:
  8590                           	callstack 0
  8591                           
  8592 ;; *************** function _Transmit *****************
  8593 ;; Defined at:
  8594 ;;		line 16 in file "sendRecept.c"
  8595 ;; Parameters:    Size  Location     Type
  8596 ;;  data            2   10[COMRAM] PTR const unsigned char 
  8597 ;;		 -> main@txMsg(9), 
  8598 ;;  data_long       1   12[COMRAM] const unsigned char 
  8599 ;; Auto vars:     Size  Location     Type
  8600 ;;  i               1   15[COMRAM] unsigned char 
  8601 ;;  reg_val         1   14[COMRAM] unsigned char 
  8602 ;; Return value:  Size  Location     Type
  8603 ;;                  1    wreg      void 
  8604 ;; Registers used:
  8605 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8606 ;; Tracked objects:
  8607 ;;		On entry : 0/0
  8608 ;;		On exit  : 0/0
  8609 ;;		Unchanged: 0/0
  8610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8611 ;;      Params:         3       0       0       0       0       0       0       0       0
  8612 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8613 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8614 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8615 ;;Total ram usage:        6 bytes
  8616 ;; Hardware stack levels used: 1
  8617 ;; Hardware stack levels required when called: 2
  8618 ;; This function calls:
  8619 ;;		_AntennaTX
  8620 ;;		_ReadSXRegister
  8621 ;;		_UARTWriteByteHex
  8622 ;;		_UARTWriteStr
  8623 ;;		_UARTWriteStrLn
  8624 ;;		_WriteSXRegister
  8625 ;; This function is called by:
  8626 ;;		_main
  8627 ;; This function uses a non-reentrant model
  8628 ;;
  8629                           
  8630                           	psect	text38
  8631  005B6A                     __ptext38:
  8632                           	callstack 0
  8633  005B6A                     _Transmit:
  8634                           	callstack 28
  8635  005B6A                     
  8636                           ;sendRecept.c: 19:     uint8_t reg_val;;sendRecept.c: 20:     uint8_t i;;sendRecept.c: 2
      +                          6:     AntennaTX();
  8637  005B6A  EC86  F025         	call	_AntennaTX	;wreg free
  8638  005B6E                     
  8639                           ;sendRecept.c: 31:     WriteSXRegister(0x0D, ReadSXRegister(0x0E));
  8640  005B6E  0E0E               	movlw	14
  8641  005B70  ECB7  F025         	call	_ReadSXRegister
  8642  005B74  6E05               	movwf	WriteSXRegister@data^0,c
  8643  005B76  0E0D               	movlw	13
  8644  005B78  EC9C  F025         	call	_WriteSXRegister
  8645  005B7C                     
  8646                           ;sendRecept.c: 32:     WriteSXRegister(0x22, data_long);
  8647  005B7C  C00D  F005         	movff	Transmit@data_long,WriteSXRegister@data
  8648  005B80  0E22               	movlw	34
  8649  005B82  EC9C  F025         	call	_WriteSXRegister
  8650  005B86                     
  8651                           ;sendRecept.c: 34:     for (i = 0; i < data_long; i++) {
  8652  005B86  0E00               	movlw	0
  8653  005B88  6E10               	movwf	Transmit@i^0,c
  8654  005B8A  500D               	movf	Transmit@data_long^0,w,c
  8655  005B8C  A4D8               	btfss	status,2,c
  8656  005B8E  EFCB  F02D         	goto	u3521
  8657  005B92  EFCD  F02D         	goto	u3520
  8658  005B96                     u3521:
  8659  005B96  EFCF  F02D         	goto	l4163
  8660  005B9A                     u3520:
  8661  005B9A  EFE4  F02D         	goto	l4169
  8662  005B9E                     l4163:
  8663                           
  8664                           ;sendRecept.c: 35:         WriteSXRegister(0x00, data[i]);
  8665  005B9E  5010               	movf	Transmit@i^0,w,c
  8666  005BA0  240B               	addwf	Transmit@data^0,w,c
  8667  005BA2  6ED9               	movwf	fsr2l,c
  8668  005BA4  0E00               	movlw	0
  8669  005BA6  200C               	addwfc	(Transmit@data+1)^0,w,c
  8670  005BA8  6EDA               	movwf	fsr2h,c
  8671  005BAA  50DF               	movf	indf2,w,c
  8672  005BAC  6E05               	movwf	WriteSXRegister@data^0,c
  8673  005BAE  0E00               	movlw	0
  8674  005BB0  EC9C  F025         	call	_WriteSXRegister
  8675  005BB4                     
  8676                           ;sendRecept.c: 36:     }
  8677  005BB4  2A10               	incf	Transmit@i^0,f,c
  8678  005BB6  500D               	movf	Transmit@data_long^0,w,c
  8679  005BB8  5C10               	subwf	Transmit@i^0,w,c
  8680  005BBA  A0D8               	btfss	status,0,c
  8681  005BBC  EFE2  F02D         	goto	u3531
  8682  005BC0  EFE4  F02D         	goto	u3530
  8683  005BC4                     u3531:
  8684  005BC4  EFCF  F02D         	goto	l4163
  8685  005BC8                     u3530:
  8686  005BC8                     l4169:
  8687                           
  8688                           ;sendRecept.c: 41:     WriteSXRegister(0x01, 0x83);
  8689  005BC8  0E83               	movlw	131
  8690  005BCA  6E05               	movwf	WriteSXRegister@data^0,c
  8691  005BCC  0E01               	movlw	1
  8692  005BCE  EC9C  F025         	call	_WriteSXRegister
  8693  005BD2                     
  8694                           ;sendRecept.c: 42:     _delay((unsigned long)((100)*(1000000UL/4000.0)));
  8695  005BD2  0E21               	movlw	33
  8696  005BD4  6E0E               	movwf	??_Transmit^0,c
  8697  005BD6  0E76               	movlw	118
  8698  005BD8                     u3837:
  8699  005BD8  2EE8               	decfsz	wreg,f,c
  8700  005BDA  D7FE               	bra	u3837
  8701  005BDC  2E0E               	decfsz	??_Transmit^0,f,c
  8702  005BDE  D7FC               	bra	u3837
  8703  005BE0  D000               	nop2	
  8704  005BE2                     
  8705                           ;sendRecept.c: 46:     reg_val = ReadSXRegister(0x12);
  8706  005BE2  0E12               	movlw	18
  8707  005BE4  ECB7  F025         	call	_ReadSXRegister
  8708  005BE8  6E0F               	movwf	Transmit@reg_val^0,c
  8709                           
  8710                           ;sendRecept.c: 47:     while ((reg_val & 0x08) == 0x00) {
  8711  005BEA  EFFB  F02D         	goto	l4177
  8712  005BEE                     l4175:
  8713                           
  8714                           ;sendRecept.c: 48:         reg_val = ReadSXRegister(0x12);
  8715  005BEE  0E12               	movlw	18
  8716  005BF0  ECB7  F025         	call	_ReadSXRegister
  8717  005BF4  6E0F               	movwf	Transmit@reg_val^0,c
  8718  005BF6                     l4177:
  8719                           
  8720                           ;sendRecept.c: 47:     while ((reg_val & 0x08) == 0x00) {
  8721  005BF6  A60F               	btfss	Transmit@reg_val^0,3,c
  8722  005BF8  EF00  F02E         	goto	u3541
  8723  005BFC  EF02  F02E         	goto	u3540
  8724  005C00                     u3541:
  8725  005C00  EFF7  F02D         	goto	l4175
  8726  005C04                     u3540:
  8727  005C04                     
  8728                           ;sendRecept.c: 64:     WriteSXRegister(0x12, 0xFF);
  8729  005C04  0EFF               	movlw	255
  8730  005C06  6E05               	movwf	WriteSXRegister@data^0,c
  8731  005C08  0E12               	movlw	18
  8732  005C0A  EC9C  F025         	call	_WriteSXRegister
  8733  005C0E                     
  8734                           ;sendRecept.c: 73:     UARTWriteStr("Message envoye : ");
  8735  005C0E  0E5A               	movlw	low STR_54
  8736  005C10  6E02               	movwf	UARTWriteStr@string^0,c
  8737  005C12  0E7E               	movlw	high STR_54
  8738  005C14  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  8739  005C16  EC1A  F028         	call	_UARTWriteStr	;wreg free
  8740  005C1A                     
  8741                           ;sendRecept.c: 74:     for(i = 0; i < data_long; i++) {
  8742  005C1A  0E00               	movlw	0
  8743  005C1C  6E10               	movwf	Transmit@i^0,c
  8744  005C1E  500D               	movf	Transmit@data_long^0,w,c
  8745  005C20  A4D8               	btfss	status,2,c
  8746  005C22  EF15  F02E         	goto	u3551
  8747  005C26  EF17  F02E         	goto	u3550
  8748  005C2A                     u3551:
  8749  005C2A  EF19  F02E         	goto	l4189
  8750  005C2E                     u3550:
  8751  005C2E  EF36  F02E         	goto	l4197
  8752  005C32                     l4189:
  8753                           
  8754                           ;sendRecept.c: 75:             UARTWriteByteHex(data[i]);
  8755  005C32  5010               	movf	Transmit@i^0,w,c
  8756  005C34  240B               	addwf	Transmit@data^0,w,c
  8757  005C36  6ED9               	movwf	fsr2l,c
  8758  005C38  0E00               	movlw	0
  8759  005C3A  200C               	addwfc	(Transmit@data+1)^0,w,c
  8760  005C3C  6EDA               	movwf	fsr2h,c
  8761  005C3E  50DF               	movf	indf2,w,c
  8762  005C40  6E0E               	movwf	??_Transmit^0,c
  8763  005C42  500E               	movf	??_Transmit^0,w,c
  8764  005C44  6E02               	movwf	UARTWriteByteHex@data^0,c
  8765  005C46  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  8766  005C48  ECC0  F02A         	call	_UARTWriteByteHex	;wreg free
  8767  005C4C                     
  8768                           ;sendRecept.c: 76:             UARTWriteStr(" ");
  8769  005C4C  0E94               	movlw	low (STR_27+9)
  8770  005C4E  6E02               	movwf	UARTWriteStr@string^0,c
  8771  005C50  0E7F               	movlw	high (STR_27+9)
  8772  005C52  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  8773  005C54  EC1A  F028         	call	_UARTWriteStr	;wreg free
  8774  005C58                     
  8775                           ;sendRecept.c: 77:     }
  8776  005C58  2A10               	incf	Transmit@i^0,f,c
  8777  005C5A  500D               	movf	Transmit@data_long^0,w,c
  8778  005C5C  5C10               	subwf	Transmit@i^0,w,c
  8779  005C5E  A0D8               	btfss	status,0,c
  8780  005C60  EF34  F02E         	goto	u3561
  8781  005C64  EF36  F02E         	goto	u3560
  8782  005C68                     u3561:
  8783  005C68  EF19  F02E         	goto	l4189
  8784  005C6C                     u3560:
  8785  005C6C                     l4197:
  8786                           
  8787                           ;sendRecept.c: 78:     UARTWriteStrLn(" ");
  8788  005C6C  0E94               	movlw	low (STR_27+9)
  8789  005C6E  6E02               	movwf	UARTWriteStrLn@string^0,c
  8790  005C70  0E7F               	movlw	high (STR_27+9)
  8791  005C72  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  8792  005C74  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  8793  005C78  0012               	return		;funcret
  8794  005C7A                     __end_of_Transmit:
  8795                           	callstack 0
  8796                           
  8797 ;; *************** function _AntennaTX *****************
  8798 ;; Defined at:
  8799 ;;		line 34 in file "RF_LoRa_868_SO.c"
  8800 ;; Parameters:    Size  Location     Type
  8801 ;;		None
  8802 ;; Auto vars:     Size  Location     Type
  8803 ;;		None
  8804 ;; Return value:  Size  Location     Type
  8805 ;;                  1    wreg      void 
  8806 ;; Registers used:
  8807 ;;		wreg
  8808 ;; Tracked objects:
  8809 ;;		On entry : 0/0
  8810 ;;		On exit  : 0/0
  8811 ;;		Unchanged: 0/0
  8812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8813 ;;      Params:         0       0       0       0       0       0       0       0       0
  8814 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8815 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8816 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8817 ;;Total ram usage:        1 bytes
  8818 ;; Hardware stack levels used: 1
  8819 ;; This function calls:
  8820 ;;		Nothing
  8821 ;; This function is called by:
  8822 ;;		_Transmit
  8823 ;; This function uses a non-reentrant model
  8824 ;;
  8825                           
  8826                           	psect	text39
  8827  004B0C                     __ptext39:
  8828                           	callstack 0
  8829  004B0C                     _AntennaTX:
  8830                           	callstack 29
  8831  004B0C                     
  8832                           ;RF_LoRa_868_SO.c: 35:     LATBbits.LATB4 = 0;
  8833  004B0C  9884               	bcf	132,4,c	;volatile
  8834                           
  8835                           ;RF_LoRa_868_SO.c: 36:     LATBbits.LATB3 = 0;
  8836  004B0E  9684               	bcf	132,3,c	;volatile
  8837  004B10                     
  8838                           ;RF_LoRa_868_SO.c: 37:     _delay((unsigned long)((10)*(1000000UL/4000.0)));
  8839  004B10  0E04               	movlw	4
  8840  004B12  6E01               	movwf	??_AntennaTX^0,c
  8841  004B14  0E3E               	movlw	62
  8842  004B16                     u3847:
  8843  004B16  2EE8               	decfsz	wreg,f,c
  8844  004B18  D7FE               	bra	u3847
  8845  004B1A  2E01               	decfsz	??_AntennaTX^0,f,c
  8846  004B1C  D7FC               	bra	u3847
  8847  004B1E                     
  8848                           ;RF_LoRa_868_SO.c: 38:     LATBbits.LATB3 = 1;
  8849  004B1E  8684               	bsf	132,3,c	;volatile
  8850  004B20  0012               	return		;funcret
  8851  004B22                     __end_of_AntennaTX:
  8852                           	callstack 0
  8853                           
  8854 ;; *************** function _SPIInit *****************
  8855 ;; Defined at:
  8856 ;;		line 16 in file "spi.c"
  8857 ;; Parameters:    Size  Location     Type
  8858 ;;		None
  8859 ;; Auto vars:     Size  Location     Type
  8860 ;;		None
  8861 ;; Return value:  Size  Location     Type
  8862 ;;                  1    wreg      void 
  8863 ;; Registers used:
  8864 ;;		wreg, status,2
  8865 ;; Tracked objects:
  8866 ;;		On entry : 0/0
  8867 ;;		On exit  : 0/0
  8868 ;;		Unchanged: 0/0
  8869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8870 ;;      Params:         0       0       0       0       0       0       0       0       0
  8871 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8872 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8873 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8874 ;;Total ram usage:        0 bytes
  8875 ;; Hardware stack levels used: 1
  8876 ;; This function calls:
  8877 ;;		Nothing
  8878 ;; This function is called by:
  8879 ;;		_main
  8880 ;; This function uses a non-reentrant model
  8881 ;;
  8882                           
  8883                           	psect	text40
  8884  004C62                     __ptext40:
  8885                           	callstack 0
  8886  004C62                     _SPIInit:
  8887                           	callstack 30
  8888  004C62                     
  8889                           ;spi.c: 18:     TRISCbits.TRISC3 = 0;
  8890  004C62  968A               	bcf	138,3,c	;volatile
  8891                           
  8892                           ;spi.c: 19:     ANSELCbits.ANSELC3 = 0;
  8893  004C64  010F               	movlb	15	; () banked
  8894  004C66  9721               	bcf	33,3,b	;volatile
  8895                           
  8896                           ;spi.c: 20:     TRISCbits.TRISC4 = 1;
  8897  004C68  888A               	bsf	138,4,c	;volatile
  8898                           
  8899                           ;spi.c: 21:     ANSELCbits.ANSELC4 = 0;
  8900  004C6A  9921               	bcf	33,4,b	;volatile
  8901                           
  8902                           ;spi.c: 22:     TRISCbits.TRISC5 = 0;
  8903  004C6C  9A8A               	bcf	138,5,c	;volatile
  8904                           
  8905                           ;spi.c: 24:     TRISCbits.TRISC2 = 0;
  8906  004C6E  948A               	bcf	138,2,c	;volatile
  8907                           
  8908                           ;spi.c: 25:     LATCbits.LATC2 = 1;
  8909  004C70  8485               	bsf	133,2,c	;volatile
  8910                           
  8911                           ;spi.c: 27:     TRISCbits.TRISC0 = 0;
  8912  004C72  908A               	bcf	138,0,c	;volatile
  8913                           
  8914                           ;spi.c: 28:     LATCbits.LATC0 = 1;
  8915  004C74  8085               	bsf	133,0,c	;volatile
  8916                           
  8917                           ;spi.c: 30:     TRISCbits.TRISC1 = 0;
  8918  004C76  928A               	bcf	138,1,c	;volatile
  8919                           
  8920                           ;spi.c: 31:     LATCbits.LATC1 = 1;
  8921  004C78  8285               	bsf	133,1,c	;volatile
  8922  004C7A                     
  8923                           ; BSR set to: 15
  8924                           ;spi.c: 33:     RC3PPS = 0x0D;
  8925  004C7A  0E0D               	movlw	13
  8926  004C7C  010E               	movlb	14	; () banked
  8927  004C7E  6FFA               	movwf	250,b	;volatile
  8928                           
  8929                           ;spi.c: 34:     RC5PPS = 0x0E;
  8930  004C80  0E0E               	movlw	14
  8931  004C82  6FFC               	movwf	252,b	;volatile
  8932                           
  8933                           ;spi.c: 35:     SSP1CLKPPS = 0b00010011;
  8934  004C84  0E13               	movlw	19
  8935  004C86  6FB7               	movwf	183,b	;volatile
  8936                           
  8937                           ;spi.c: 36:     SSP1DATPPS = 0b00010100;
  8938  004C88  0E14               	movlw	20
  8939  004C8A  6FB8               	movwf	184,b	;volatile
  8940                           
  8941                           ;spi.c: 37:     SSP1STAT = 0b01000000;
  8942  004C8C  0E40               	movlw	64
  8943  004C8E  6E95               	movwf	149,c	;volatile
  8944                           
  8945                           ;spi.c: 40:     SSP1CON1 = 0b00100000;
  8946  004C90  0E20               	movlw	32
  8947  004C92  6E96               	movwf	150,c	;volatile
  8948                           
  8949                           ;spi.c: 46:     SSP1CON3 = 0b00000000;
  8950  004C94  0E00               	movlw	0
  8951  004C96  6E98               	movwf	152,c	;volatile
  8952  004C98                     
  8953                           ; BSR set to: 14
  8954  004C98  0012               	return		;funcret
  8955  004C9A                     __end_of_SPIInit:
  8956                           	callstack 0
  8957                           
  8958 ;; *************** function _ResetRFModule *****************
  8959 ;; Defined at:
  8960 ;;		line 26 in file "RF_LoRa_868_SO.c"
  8961 ;; Parameters:    Size  Location     Type
  8962 ;;		None
  8963 ;; Auto vars:     Size  Location     Type
  8964 ;;		None
  8965 ;; Return value:  Size  Location     Type
  8966 ;;                  1    wreg      void 
  8967 ;; Registers used:
  8968 ;;		wreg
  8969 ;; Tracked objects:
  8970 ;;		On entry : 0/0
  8971 ;;		On exit  : 0/0
  8972 ;;		Unchanged: 0/0
  8973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8974 ;;      Params:         0       0       0       0       0       0       0       0       0
  8975 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8976 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8977 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8978 ;;Total ram usage:        1 bytes
  8979 ;; Hardware stack levels used: 1
  8980 ;; This function calls:
  8981 ;;		Nothing
  8982 ;; This function is called by:
  8983 ;;		_main
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           	psect	text41
  8988  004BAE                     __ptext41:
  8989                           	callstack 0
  8990  004BAE                     _ResetRFModule:
  8991                           	callstack 30
  8992  004BAE                     
  8993                           ;RF_LoRa_868_SO.c: 27:     LATBbits.LATB2 = 1;
  8994  004BAE  8484               	bsf	132,2,c	;volatile
  8995                           
  8996                           ;RF_LoRa_868_SO.c: 28:     TRISBbits.TRISB2 = 0;
  8997  004BB0  9489               	bcf	137,2,c	;volatile
  8998  004BB2                     
  8999                           ;RF_LoRa_868_SO.c: 29:     _delay((unsigned long)((50)*(1000000UL/4000.0)));
  9000  004BB2  0E11               	movlw	17
  9001  004BB4  6E01               	movwf	??_ResetRFModule^0,c
  9002  004BB6  0E3A               	movlw	58
  9003  004BB8                     u3857:
  9004  004BB8  2EE8               	decfsz	wreg,f,c
  9005  004BBA  D7FE               	bra	u3857
  9006  004BBC  2E01               	decfsz	??_ResetRFModule^0,f,c
  9007  004BBE  D7FC               	bra	u3857
  9008  004BC0  D000               	nop2	
  9009  004BC2                     
  9010                           ;RF_LoRa_868_SO.c: 30:     TRISBbits.TRISB2 = 1;
  9011  004BC2  8489               	bsf	137,2,c	;volatile
  9012                           
  9013                           ;RF_LoRa_868_SO.c: 31:     _delay((unsigned long)((50)*(1000000UL/4000.0)));
  9014  004BC4  0E11               	movlw	17
  9015  004BC6  6E01               	movwf	??_ResetRFModule^0,c
  9016  004BC8  0E3A               	movlw	58
  9017  004BCA                     u3867:
  9018  004BCA  2EE8               	decfsz	wreg,f,c
  9019  004BCC  D7FE               	bra	u3867
  9020  004BCE  2E01               	decfsz	??_ResetRFModule^0,f,c
  9021  004BD0  D7FC               	bra	u3867
  9022  004BD2  D000               	nop2	
  9023  004BD4  0012               	return		;funcret
  9024  004BD6                     __end_of_ResetRFModule:
  9025                           	callstack 0
  9026                           
  9027 ;; *************** function _Receive *****************
  9028 ;; Defined at:
  9029 ;;		line 83 in file "sendRecept.c"
  9030 ;; Parameters:    Size  Location     Type
  9031 ;;  data            2   10[COMRAM] PTR unsigned char 
  9032 ;;		 -> main@rxMsg(30), 
  9033 ;; Auto vars:     Size  Location     Type
  9034 ;;  reg_val         1   15[COMRAM] unsigned char 
  9035 ;;  i               1   14[COMRAM] unsigned char 
  9036 ;;  RXNumberOfBy    1   13[COMRAM] unsigned char 
  9037 ;; Return value:  Size  Location     Type
  9038 ;;                  1    wreg      void 
  9039 ;; Registers used:
  9040 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9041 ;; Tracked objects:
  9042 ;;		On entry : 0/0
  9043 ;;		On exit  : 0/0
  9044 ;;		Unchanged: 0/0
  9045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9046 ;;      Params:         2       0       0       0       0       0       0       0       0
  9047 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9048 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9049 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9050 ;;Total ram usage:        6 bytes
  9051 ;; Hardware stack levels used: 1
  9052 ;; Hardware stack levels required when called: 2
  9053 ;; This function calls:
  9054 ;;		_AntennaRX
  9055 ;;		_ReadSXRegister
  9056 ;;		_UARTWriteByteHex
  9057 ;;		_UARTWriteStr
  9058 ;;		_UARTWriteStrLn
  9059 ;;		_WriteSXRegister
  9060 ;; This function is called by:
  9061 ;;		_main
  9062 ;; This function uses a non-reentrant model
  9063 ;;
  9064                           
  9065                           	psect	text42
  9066  0062A8                     __ptext42:
  9067                           	callstack 0
  9068  0062A8                     _Receive:
  9069                           	callstack 28
  9070  0062A8                     
  9071                           ;sendRecept.c: 85:     uint8_t reg_val;;sendRecept.c: 86:     uint8_t RXNumberOfBytes;;s
      +                          endRecept.c: 87:     uint8_t i;;sendRecept.c: 89:     AntennaRX();
  9072  0062A8  EC7B  F025         	call	_AntennaRX	;wreg free
  9073  0062AC                     
  9074                           ;sendRecept.c: 92:     WriteSXRegister(0x0D, ReadSXRegister(0x0F));
  9075  0062AC  0E0F               	movlw	15
  9076  0062AE  ECB7  F025         	call	_ReadSXRegister
  9077  0062B2  6E05               	movwf	WriteSXRegister@data^0,c
  9078  0062B4  0E0D               	movlw	13
  9079  0062B6  EC9C  F025         	call	_WriteSXRegister
  9080  0062BA                     
  9081                           ;sendRecept.c: 100:     WriteSXRegister(0x01, 0x86);
  9082  0062BA  0E86               	movlw	134
  9083  0062BC  6E05               	movwf	WriteSXRegister@data^0,c
  9084  0062BE  0E01               	movlw	1
  9085  0062C0  EC9C  F025         	call	_WriteSXRegister
  9086  0062C4                     
  9087                           ;sendRecept.c: 101:     _delay((unsigned long)((100)*(1000000UL/4000.0)));
  9088  0062C4  0E21               	movlw	33
  9089  0062C6  6E0D               	movwf	??_Receive^0,c
  9090  0062C8  0E76               	movlw	118
  9091  0062CA                     u3877:
  9092  0062CA  2EE8               	decfsz	wreg,f,c
  9093  0062CC  D7FE               	bra	u3877
  9094  0062CE  2E0D               	decfsz	??_Receive^0,f,c
  9095  0062D0  D7FC               	bra	u3877
  9096  0062D2  D000               	nop2	
  9097  0062D4                     
  9098                           ;sendRecept.c: 105:     UARTWriteStrLn("-----------------------");
  9099  0062D4  0EAB               	movlw	low STR_57
  9100  0062D6  6E02               	movwf	UARTWriteStrLn@string^0,c
  9101  0062D8  0E7D               	movlw	high STR_57
  9102  0062DA  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9103  0062DC  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9104  0062E0                     
  9105                           ;sendRecept.c: 106:     UARTWriteStrLn("waiting for valid header");
  9106  0062E0  0E79               	movlw	low STR_58
  9107  0062E2  6E02               	movwf	UARTWriteStrLn@string^0,c
  9108  0062E4  0E7D               	movlw	high STR_58
  9109  0062E6  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9110  0062E8  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9111  0062EC                     l4081:
  9112                           
  9113                           ;sendRecept.c: 109:         reg_val = ReadSXRegister(0x12);
  9114  0062EC  0E12               	movlw	18
  9115  0062EE  ECB7  F025         	call	_ReadSXRegister
  9116  0062F2  6E10               	movwf	Receive@reg_val^0,c
  9117  0062F4                     
  9118                           ;sendRecept.c: 110:     } while (((reg_val & 0x10) == 0x00) && ((reg_val & 0x80) == 0x00
      +                          ));
  9119  0062F4  B810               	btfsc	Receive@reg_val^0,4,c
  9120  0062F6  EF7F  F031         	goto	u3421
  9121  0062FA  EF81  F031         	goto	u3420
  9122  0062FE                     u3421:
  9123  0062FE  EF88  F031         	goto	l4087
  9124  006302                     u3420:
  9125  006302  AE10               	btfss	Receive@reg_val^0,7,c
  9126  006304  EF86  F031         	goto	u3431
  9127  006308  EF88  F031         	goto	u3430
  9128  00630C                     u3431:
  9129  00630C  EF76  F031         	goto	l4081
  9130  006310                     u3430:
  9131  006310                     l4087:
  9132                           
  9133                           ;sendRecept.c: 112:     if ((ReadSXRegister(0x12) & 0x10) == 0x00) {
  9134  006310  0E12               	movlw	18
  9135  006312  ECB7  F025         	call	_ReadSXRegister
  9136  006316  6E0D               	movwf	??_Receive^0,c
  9137  006318  B80D               	btfsc	??_Receive^0,4,c
  9138  00631A  EF91  F031         	goto	u3441
  9139  00631E  EF93  F031         	goto	u3440
  9140  006322                     u3441:
  9141  006322  EFA2  F031         	goto	l4095
  9142  006326                     u3440:
  9143  006326                     
  9144                           ;sendRecept.c: 113:         data[4] = 0x42;
  9145  006326  EE20 F004          	lfsr	2,4
  9146  00632A  500B               	movf	Receive@data^0,w,c
  9147  00632C  26D9               	addwf	fsr2l,f,c
  9148  00632E  500C               	movf	(Receive@data+1)^0,w,c
  9149  006330  22DA               	addwfc	fsr2h,f,c
  9150  006332  0E42               	movlw	66
  9151  006334  6EDF               	movwf	indf2,c
  9152  006336                     
  9153                           ;sendRecept.c: 114:         WriteSXRegister(0x12, 0xFF);
  9154  006336  0EFF               	movlw	255
  9155  006338  6E05               	movwf	WriteSXRegister@data^0,c
  9156  00633A  0E12               	movlw	18
  9157  00633C  EC9C  F025         	call	_WriteSXRegister
  9158  006340  EF15  F032         	goto	l375
  9159  006344                     l4095:
  9160                           
  9161                           ;sendRecept.c: 119:     UARTWriteStrLn("valid header received");
  9162  006344  0E09               	movlw	low STR_59
  9163  006346  6E02               	movwf	UARTWriteStrLn@string^0,c
  9164  006348  0E7E               	movlw	high STR_59
  9165  00634A  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9166  00634C  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9167  006350                     
  9168                           ;sendRecept.c: 128:     reg_val = ReadSXRegister(0x12);
  9169  006350  0E12               	movlw	18
  9170  006352  ECB7  F025         	call	_ReadSXRegister
  9171  006356  6E10               	movwf	Receive@reg_val^0,c
  9172                           
  9173                           ;sendRecept.c: 129:     while ((reg_val & 0x40) == 0x00) {
  9174  006358  EFB2  F031         	goto	l4101
  9175  00635C                     l4099:
  9176                           
  9177                           ;sendRecept.c: 130:         reg_val = ReadSXRegister(0x12);
  9178  00635C  0E12               	movlw	18
  9179  00635E  ECB7  F025         	call	_ReadSXRegister
  9180  006362  6E10               	movwf	Receive@reg_val^0,c
  9181  006364                     l4101:
  9182                           
  9183                           ;sendRecept.c: 129:     while ((reg_val & 0x40) == 0x00) {
  9184  006364  AC10               	btfss	Receive@reg_val^0,6,c
  9185  006366  EFB7  F031         	goto	u3451
  9186  00636A  EFB9  F031         	goto	u3450
  9187  00636E                     u3451:
  9188  00636E  EFAE  F031         	goto	l4099
  9189  006372                     u3450:
  9190  006372                     
  9191                           ;sendRecept.c: 142:     if((reg_val & 0x20) != 0x00){
  9192  006372  AA10               	btfss	Receive@reg_val^0,5,c
  9193  006374  EFBE  F031         	goto	u3461
  9194  006378  EFC0  F031         	goto	u3460
  9195  00637C                     u3461:
  9196  00637C  EFCE  F031         	goto	l4105
  9197  006380                     u3460:
  9198  006380                     
  9199                           ;sendRecept.c: 143:         UARTWriteStrLn(" ");
  9200  006380  0E94               	movlw	low (STR_27+9)
  9201  006382  6E02               	movwf	UARTWriteStrLn@string^0,c
  9202  006384  0E7F               	movlw	high (STR_27+9)
  9203  006386  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9204  006388  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9205                           
  9206                           ;sendRecept.c: 144:         UARTWriteStrLn("payload CRC error");
  9207  00638C  0E6C               	movlw	low STR_61
  9208  00638E  6E02               	movwf	UARTWriteStrLn@string^0,c
  9209  006390  0E7E               	movlw	high STR_61
  9210  006392  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9211  006394  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9212                           
  9213                           ;sendRecept.c: 145:     }
  9214  006398  EF10  F032         	goto	l4125
  9215  00639C                     l4105:
  9216                           
  9217                           ;sendRecept.c: 148:         UARTWriteStr("received data: ");
  9218  00639C  0EE7               	movlw	low STR_62
  9219  00639E  6E02               	movwf	UARTWriteStr@string^0,c
  9220  0063A0  0E7E               	movlw	high STR_62
  9221  0063A2  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  9222  0063A4  EC1A  F028         	call	_UARTWriteStr	;wreg free
  9223  0063A8                     
  9224                           ;sendRecept.c: 149:         RXNumberOfBytes = ReadSXRegister(0x13);
  9225  0063A8  0E13               	movlw	19
  9226  0063AA  ECB7  F025         	call	_ReadSXRegister
  9227  0063AE  6E0E               	movwf	Receive@RXNumberOfBytes^0,c
  9228  0063B0                     
  9229                           ;sendRecept.c: 150:         WriteSXRegister(0x0D, ReadSXRegister(0x10));
  9230  0063B0  0E10               	movlw	16
  9231  0063B2  ECB7  F025         	call	_ReadSXRegister
  9232  0063B6  6E05               	movwf	WriteSXRegister@data^0,c
  9233  0063B8  0E0D               	movlw	13
  9234  0063BA  EC9C  F025         	call	_WriteSXRegister
  9235  0063BE                     
  9236                           ;sendRecept.c: 152:         for (i = 0; i < RXNumberOfBytes; i++) {
  9237  0063BE  0E00               	movlw	0
  9238  0063C0  6E0F               	movwf	Receive@i^0,c
  9239  0063C2  EF01  F032         	goto	l4121
  9240  0063C6                     l4113:
  9241                           
  9242                           ;sendRecept.c: 159:             data[i] = ReadSXRegister(0x00);
  9243  0063C6  500F               	movf	Receive@i^0,w,c
  9244  0063C8  240B               	addwf	Receive@data^0,w,c
  9245  0063CA  6ED9               	movwf	fsr2l,c
  9246  0063CC  0E00               	movlw	0
  9247  0063CE  200C               	addwfc	(Receive@data+1)^0,w,c
  9248  0063D0  6EDA               	movwf	fsr2h,c
  9249  0063D2  0E00               	movlw	0
  9250  0063D4  ECB7  F025         	call	_ReadSXRegister
  9251  0063D8  6EDF               	movwf	indf2,c
  9252  0063DA                     
  9253                           ;sendRecept.c: 160:             UARTWriteByteHex(data[i]);
  9254  0063DA  500F               	movf	Receive@i^0,w,c
  9255  0063DC  240B               	addwf	Receive@data^0,w,c
  9256  0063DE  6ED9               	movwf	fsr2l,c
  9257  0063E0  0E00               	movlw	0
  9258  0063E2  200C               	addwfc	(Receive@data+1)^0,w,c
  9259  0063E4  6EDA               	movwf	fsr2h,c
  9260  0063E6  50DF               	movf	indf2,w,c
  9261  0063E8  6E0D               	movwf	??_Receive^0,c
  9262  0063EA  500D               	movf	??_Receive^0,w,c
  9263  0063EC  6E02               	movwf	UARTWriteByteHex@data^0,c
  9264  0063EE  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  9265  0063F0  ECC0  F02A         	call	_UARTWriteByteHex	;wreg free
  9266  0063F4                     
  9267                           ;sendRecept.c: 161:             UARTWriteStr(" ");
  9268  0063F4  0E94               	movlw	low (STR_27+9)
  9269  0063F6  6E02               	movwf	UARTWriteStr@string^0,c
  9270  0063F8  0E7F               	movlw	high (STR_27+9)
  9271  0063FA  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  9272  0063FC  EC1A  F028         	call	_UARTWriteStr	;wreg free
  9273  006400                     
  9274                           ;sendRecept.c: 162:         }
  9275  006400  2A0F               	incf	Receive@i^0,f,c
  9276  006402                     l4121:
  9277  006402  500E               	movf	Receive@RXNumberOfBytes^0,w,c
  9278  006404  5C0F               	subwf	Receive@i^0,w,c
  9279  006406  A0D8               	btfss	status,0,c
  9280  006408  EF08  F032         	goto	u3471
  9281  00640C  EF0A  F032         	goto	u3470
  9282  006410                     u3471:
  9283  006410  EFE3  F031         	goto	l4113
  9284  006414                     u3470:
  9285  006414                     
  9286                           ;sendRecept.c: 163:         UARTWriteStrLn(" ");
  9287  006414  0E94               	movlw	low (STR_27+9)
  9288  006416  6E02               	movwf	UARTWriteStrLn@string^0,c
  9289  006418  0E7F               	movlw	high (STR_27+9)
  9290  00641A  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9291  00641C  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9292  006420                     l4125:
  9293                           
  9294                           ;sendRecept.c: 187:     WriteSXRegister(0x12, 0xFF);
  9295  006420  0EFF               	movlw	255
  9296  006422  6E05               	movwf	WriteSXRegister@data^0,c
  9297  006424  0E12               	movlw	18
  9298  006426  EC9C  F025         	call	_WriteSXRegister
  9299  00642A                     l375:
  9300  00642A  0012               	return		;funcret
  9301  00642C                     __end_of_Receive:
  9302                           	callstack 0
  9303                           
  9304 ;; *************** function _AntennaRX *****************
  9305 ;; Defined at:
  9306 ;;		line 41 in file "RF_LoRa_868_SO.c"
  9307 ;; Parameters:    Size  Location     Type
  9308 ;;		None
  9309 ;; Auto vars:     Size  Location     Type
  9310 ;;		None
  9311 ;; Return value:  Size  Location     Type
  9312 ;;                  1    wreg      void 
  9313 ;; Registers used:
  9314 ;;		wreg
  9315 ;; Tracked objects:
  9316 ;;		On entry : 0/0
  9317 ;;		On exit  : 0/0
  9318 ;;		Unchanged: 0/0
  9319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9320 ;;      Params:         0       0       0       0       0       0       0       0       0
  9321 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9322 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9323 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9324 ;;Total ram usage:        1 bytes
  9325 ;; Hardware stack levels used: 1
  9326 ;; This function calls:
  9327 ;;		Nothing
  9328 ;; This function is called by:
  9329 ;;		_Receive
  9330 ;; This function uses a non-reentrant model
  9331 ;;
  9332                           
  9333                           	psect	text43
  9334  004AF6                     __ptext43:
  9335                           	callstack 0
  9336  004AF6                     _AntennaRX:
  9337                           	callstack 29
  9338  004AF6                     
  9339                           ;RF_LoRa_868_SO.c: 42:     LATBbits.LATB4 = 0;
  9340  004AF6  9884               	bcf	132,4,c	;volatile
  9341                           
  9342                           ;RF_LoRa_868_SO.c: 43:     LATBbits.LATB3 = 0;
  9343  004AF8  9684               	bcf	132,3,c	;volatile
  9344  004AFA                     
  9345                           ;RF_LoRa_868_SO.c: 44:     _delay((unsigned long)((10)*(1000000UL/4000.0)));
  9346  004AFA  0E04               	movlw	4
  9347  004AFC  6E01               	movwf	??_AntennaRX^0,c
  9348  004AFE  0E3E               	movlw	62
  9349  004B00                     u3887:
  9350  004B00  2EE8               	decfsz	wreg,f,c
  9351  004B02  D7FE               	bra	u3887
  9352  004B04  2E01               	decfsz	??_AntennaRX^0,f,c
  9353  004B06  D7FC               	bra	u3887
  9354  004B08                     
  9355                           ;RF_LoRa_868_SO.c: 45:     LATBbits.LATB4 = 1;
  9356  004B08  8884               	bsf	132,4,c	;volatile
  9357  004B0A  0012               	return		;funcret
  9358  004B0C                     __end_of_AntennaRX:
  9359                           	callstack 0
  9360                           
  9361 ;; *************** function _InitRFLoRaPins *****************
  9362 ;; Defined at:
  9363 ;;		line 18 in file "RF_LoRa_868_SO.c"
  9364 ;; Parameters:    Size  Location     Type
  9365 ;;		None
  9366 ;; Auto vars:     Size  Location     Type
  9367 ;;		None
  9368 ;; Return value:  Size  Location     Type
  9369 ;;                  1    wreg      void 
  9370 ;; Registers used:
  9371 ;;		None
  9372 ;; Tracked objects:
  9373 ;;		On entry : 0/0
  9374 ;;		On exit  : 0/0
  9375 ;;		Unchanged: 0/0
  9376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9377 ;;      Params:         0       0       0       0       0       0       0       0       0
  9378 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9379 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9380 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9381 ;;Total ram usage:        0 bytes
  9382 ;; Hardware stack levels used: 1
  9383 ;; This function calls:
  9384 ;;		Nothing
  9385 ;; This function is called by:
  9386 ;;		_main
  9387 ;; This function uses a non-reentrant model
  9388 ;;
  9389                           
  9390                           	psect	text44
  9391  004AA0                     __ptext44:
  9392                           	callstack 0
  9393  004AA0                     _InitRFLoRaPins:
  9394                           	callstack 30
  9395  004AA0                     
  9396                           ;RF_LoRa_868_SO.c: 19:     TRISBbits.TRISB2 = 1;
  9397  004AA0  8489               	bsf	137,2,c	;volatile
  9398                           
  9399                           ;RF_LoRa_868_SO.c: 20:     LATBbits.LATB3 = 0;
  9400  004AA2  9684               	bcf	132,3,c	;volatile
  9401                           
  9402                           ;RF_LoRa_868_SO.c: 21:     TRISBbits.TRISB3 = 0;
  9403  004AA4  9689               	bcf	137,3,c	;volatile
  9404                           
  9405                           ;RF_LoRa_868_SO.c: 22:     LATBbits.LATB4 = 0;
  9406  004AA6  9884               	bcf	132,4,c	;volatile
  9407                           
  9408                           ;RF_LoRa_868_SO.c: 23:     TRISBbits.TRISB4 = 0;
  9409  004AA8  9889               	bcf	137,4,c	;volatile
  9410  004AAA  0012               	return		;funcret
  9411  004AAC                     __end_of_InitRFLoRaPins:
  9412                           	callstack 0
  9413                           
  9414 ;; *************** function _InitModule *****************
  9415 ;; Defined at:
  9416 ;;		line 98 in file "SX1272.c"
  9417 ;; Parameters:    Size  Location     Type
  9418 ;;		None
  9419 ;; Auto vars:     Size  Location     Type
  9420 ;;  pout            1    0        unsigned char 
  9421 ;; Return value:  Size  Location     Type
  9422 ;;                  1    wreg      void 
  9423 ;; Registers used:
  9424 ;;		wreg, status,2, status,0, cstack
  9425 ;; Tracked objects:
  9426 ;;		On entry : 0/0
  9427 ;;		On exit  : 0/0
  9428 ;;		Unchanged: 0/0
  9429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9430 ;;      Params:         0       0       0       0       0       0       0       0       0
  9431 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9432 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9433 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9434 ;;Total ram usage:        0 bytes
  9435 ;; Hardware stack levels used: 1
  9436 ;; Hardware stack levels required when called: 2
  9437 ;; This function calls:
  9438 ;;		_WriteSXRegister
  9439 ;; This function is called by:
  9440 ;;		_main
  9441 ;; This function uses a non-reentrant model
  9442 ;;
  9443                           
  9444                           	psect	text45
  9445  00566C                     __ptext45:
  9446                           	callstack 0
  9447  00566C                     _InitModule:
  9448                           	callstack 28
  9449  00566C                     
  9450                           ;SX1272.c: 99:   uint8_t pout;;SX1272.c: 101:   WriteSXRegister(0x00, 0x00);
  9451  00566C  0E00               	movlw	0
  9452  00566E  6E05               	movwf	WriteSXRegister@data^0,c
  9453  005670  0E00               	movlw	0
  9454  005672  EC9C  F025         	call	_WriteSXRegister
  9455                           
  9456                           ;SX1272.c: 103:   WriteSXRegister(0x06, 0xD9);
  9457  005676  0ED9               	movlw	217
  9458  005678  6E05               	movwf	WriteSXRegister@data^0,c
  9459  00567A  0E06               	movlw	6
  9460  00567C  EC9C  F025         	call	_WriteSXRegister
  9461                           
  9462                           ;SX1272.c: 104:   WriteSXRegister(0x07, 0x00);
  9463  005680  0E00               	movlw	0
  9464  005682  6E05               	movwf	WriteSXRegister@data^0,c
  9465  005684  0E07               	movlw	7
  9466  005686  EC9C  F025         	call	_WriteSXRegister
  9467                           
  9468                           ;SX1272.c: 105:   WriteSXRegister(0x08, 0x00);
  9469  00568A  0E00               	movlw	0
  9470  00568C  6E05               	movwf	WriteSXRegister@data^0,c
  9471  00568E  0E08               	movlw	8
  9472  005690  EC9C  F025         	call	_WriteSXRegister
  9473  005694                     
  9474                           ;SX1272.c: 109:   WriteSXRegister(0x09, 0x80 | pout);
  9475  005694  0E8C               	movlw	140
  9476  005696  6E05               	movwf	WriteSXRegister@data^0,c
  9477  005698  0E09               	movlw	9
  9478  00569A  EC9C  F025         	call	_WriteSXRegister
  9479  00569E                     
  9480                           ;SX1272.c: 111:   WriteSXRegister(0x0A, 0x19);
  9481  00569E  0E19               	movlw	25
  9482  0056A0  6E05               	movwf	WriteSXRegister@data^0,c
  9483  0056A2  0E0A               	movlw	10
  9484  0056A4  EC9C  F025         	call	_WriteSXRegister
  9485  0056A8                     
  9486                           ;SX1272.c: 113:   WriteSXRegister(0x0B, 0b00101011);
  9487  0056A8  0E2B               	movlw	43
  9488  0056AA  6E05               	movwf	WriteSXRegister@data^0,c
  9489  0056AC  0E0B               	movlw	11
  9490  0056AE  EC9C  F025         	call	_WriteSXRegister
  9491  0056B2                     
  9492                           ;SX1272.c: 115:   WriteSXRegister(0x0C, 0b00100011);
  9493  0056B2  0E23               	movlw	35
  9494  0056B4  6E05               	movwf	WriteSXRegister@data^0,c
  9495  0056B6  0E0C               	movlw	12
  9496  0056B8  EC9C  F025         	call	_WriteSXRegister
  9497  0056BC                     
  9498                           ;SX1272.c: 117:   WriteSXRegister(0x0D, 0x00);
  9499  0056BC  0E00               	movlw	0
  9500  0056BE  6E05               	movwf	WriteSXRegister@data^0,c
  9501  0056C0  0E0D               	movlw	13
  9502  0056C2  EC9C  F025         	call	_WriteSXRegister
  9503  0056C6                     
  9504                           ;SX1272.c: 118:   WriteSXRegister(0x0E, 0x80);
  9505  0056C6  0E80               	movlw	128
  9506  0056C8  6E05               	movwf	WriteSXRegister@data^0,c
  9507  0056CA  0E0E               	movlw	14
  9508  0056CC  EC9C  F025         	call	_WriteSXRegister
  9509  0056D0                     
  9510                           ;SX1272.c: 119:   WriteSXRegister(0x0F, 0x00);
  9511  0056D0  0E00               	movlw	0
  9512  0056D2  6E05               	movwf	WriteSXRegister@data^0,c
  9513  0056D4  0E0F               	movlw	15
  9514  0056D6  EC9C  F025         	call	_WriteSXRegister
  9515  0056DA                     
  9516                           ;SX1272.c: 121:   WriteSXRegister(0x11, 0x00);
  9517  0056DA  0E00               	movlw	0
  9518  0056DC  6E05               	movwf	WriteSXRegister@data^0,c
  9519  0056DE  0E11               	movlw	17
  9520  0056E0  EC9C  F025         	call	_WriteSXRegister
  9521  0056E4                     
  9522                           ;SX1272.c: 123:   WriteSXRegister(0x12, 0xFF);
  9523  0056E4  0EFF               	movlw	255
  9524  0056E6  6E05               	movwf	WriteSXRegister@data^0,c
  9525  0056E8  0E12               	movlw	18
  9526  0056EA  EC9C  F025         	call	_WriteSXRegister
  9527  0056EE                     
  9528                           ;SX1272.c: 128:   WriteSXRegister(0x1D, 0b00100011);
  9529  0056EE  0E23               	movlw	35
  9530  0056F0  6E05               	movwf	WriteSXRegister@data^0,c
  9531  0056F2  0E1D               	movlw	29
  9532  0056F4  EC9C  F025         	call	_WriteSXRegister
  9533  0056F8                     
  9534                           ;SX1272.c: 131:   WriteSXRegister(0x1E, 0b11000110);
  9535  0056F8  0EC6               	movlw	198
  9536  0056FA  6E05               	movwf	WriteSXRegister@data^0,c
  9537  0056FC  0E1E               	movlw	30
  9538  0056FE  EC9C  F025         	call	_WriteSXRegister
  9539  005702                     
  9540                           ;SX1272.c: 135:   WriteSXRegister(0x1F, 0xFF);
  9541  005702  0EFF               	movlw	255
  9542  005704  6E05               	movwf	WriteSXRegister@data^0,c
  9543  005706  0E1F               	movlw	31
  9544  005708  EC9C  F025         	call	_WriteSXRegister
  9545  00570C                     
  9546                           ;SX1272.c: 142:   WriteSXRegister(0x20, 0x00);
  9547  00570C  0E00               	movlw	0
  9548  00570E  6E05               	movwf	WriteSXRegister@data^0,c
  9549  005710  0E20               	movlw	32
  9550  005712  EC9C  F025         	call	_WriteSXRegister
  9551  005716                     
  9552                           ;SX1272.c: 143:   WriteSXRegister(0x21, 0x08);
  9553  005716  0E08               	movlw	8
  9554  005718  6E05               	movwf	WriteSXRegister@data^0,c
  9555  00571A  0E21               	movlw	33
  9556  00571C  EC9C  F025         	call	_WriteSXRegister
  9557  005720                     
  9558                           ;SX1272.c: 145:   WriteSXRegister(0x23, 0x80);
  9559  005720  0E80               	movlw	128
  9560  005722  6E05               	movwf	WriteSXRegister@data^0,c
  9561  005724  0E23               	movlw	35
  9562  005726  EC9C  F025         	call	_WriteSXRegister
  9563  00572A                     
  9564                           ;SX1272.c: 147:   WriteSXRegister(0x24, 0x00);
  9565  00572A  0E00               	movlw	0
  9566  00572C  6E05               	movwf	WriteSXRegister@data^0,c
  9567  00572E  0E24               	movlw	36
  9568  005730  EC9C  F025         	call	_WriteSXRegister
  9569  005734                     
  9570                           ;SX1272.c: 149:   WriteSXRegister(0x31, 0xC3);
  9571  005734  0EC3               	movlw	195
  9572  005736  6E05               	movwf	WriteSXRegister@data^0,c
  9573  005738  0E31               	movlw	49
  9574  00573A  EC9C  F025         	call	_WriteSXRegister
  9575  00573E                     
  9576                           ;SX1272.c: 151:   WriteSXRegister(0x33, 0x27);
  9577  00573E  0E27               	movlw	39
  9578  005740  6E05               	movwf	WriteSXRegister@data^0,c
  9579  005742  0E33               	movlw	51
  9580  005744  EC9C  F025         	call	_WriteSXRegister
  9581  005748                     
  9582                           ;SX1272.c: 153:   WriteSXRegister(0x37, 0x0A);
  9583  005748  0E0A               	movlw	10
  9584  00574A  6E05               	movwf	WriteSXRegister@data^0,c
  9585  00574C  0E37               	movlw	55
  9586  00574E  EC9C  F025         	call	_WriteSXRegister
  9587  005752                     
  9588                           ;SX1272.c: 155:   WriteSXRegister(0x39, 0x12);
  9589  005752  0E12               	movlw	18
  9590  005754  6E05               	movwf	WriteSXRegister@data^0,c
  9591  005756  0E39               	movlw	57
  9592  005758  EC9C  F025         	call	_WriteSXRegister
  9593  00575C  0012               	return		;funcret
  9594  00575E                     __end_of_InitModule:
  9595                           	callstack 0
  9596                           
  9597 ;; *************** function _WriteSXRegister *****************
  9598 ;; Defined at:
  9599 ;;		line 20 in file "SX1272.c"
  9600 ;; Parameters:    Size  Location     Type
  9601 ;;  address         1    wreg     unsigned char 
  9602 ;;  data            1    4[COMRAM] unsigned char 
  9603 ;; Auto vars:     Size  Location     Type
  9604 ;;  address         1    5[COMRAM] unsigned char 
  9605 ;; Return value:  Size  Location     Type
  9606 ;;                  1    wreg      void 
  9607 ;; Registers used:
  9608 ;;		wreg, status,2, status,0, cstack
  9609 ;; Tracked objects:
  9610 ;;		On entry : 0/0
  9611 ;;		On exit  : 0/0
  9612 ;;		Unchanged: 0/0
  9613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9614 ;;      Params:         1       0       0       0       0       0       0       0       0
  9615 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9616 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9617 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9618 ;;Total ram usage:        2 bytes
  9619 ;; Hardware stack levels used: 1
  9620 ;; Hardware stack levels required when called: 1
  9621 ;; This function calls:
  9622 ;;		_SPITransfer
  9623 ;; This function is called by:
  9624 ;;		_main
  9625 ;;		_InitModule
  9626 ;;		_Transmit
  9627 ;;		_Receive
  9628 ;; This function uses a non-reentrant model
  9629 ;;
  9630                           
  9631                           	psect	text46
  9632  004B38                     __ptext46:
  9633                           	callstack 0
  9634  004B38                     _WriteSXRegister:
  9635                           	callstack 29
  9636                           
  9637                           ;incstack = 0
  9638                           ;WriteSXRegister@address stored from wreg
  9639  004B38  6E06               	movwf	WriteSXRegister@address^0,c
  9640  004B3A                     
  9641                           ;SX1272.c: 22:     LATCbits.LATC2 = 0;
  9642  004B3A  9485               	bcf	133,2,c	;volatile
  9643  004B3C                     
  9644                           ;SX1272.c: 23:     address = address | 0x80;
  9645  004B3C  5006               	movf	WriteSXRegister@address^0,w,c
  9646  004B3E  0980               	iorlw	128
  9647  004B40  6E06               	movwf	WriteSXRegister@address^0,c
  9648  004B42                     
  9649                           ;SX1272.c: 25:     SPITransfer(address);
  9650  004B42  5006               	movf	WriteSXRegister@address^0,w,c
  9651  004B44  ECA9  F025         	call	_SPITransfer
  9652  004B48                     
  9653                           ;SX1272.c: 26:     SPITransfer(data);
  9654  004B48  5005               	movf	WriteSXRegister@data^0,w,c
  9655  004B4A  ECA9  F025         	call	_SPITransfer
  9656  004B4E                     
  9657                           ;SX1272.c: 27:     LATCbits.LATC2 = 1;
  9658  004B4E  8485               	bsf	133,2,c	;volatile
  9659  004B50  0012               	return		;funcret
  9660  004B52                     __end_of_WriteSXRegister:
  9661                           	callstack 0
  9662                           
  9663 ;; *************** function _GetMode *****************
  9664 ;; Defined at:
  9665 ;;		line 43 in file "SX1272.c"
  9666 ;; Parameters:    Size  Location     Type
  9667 ;;		None
  9668 ;; Auto vars:     Size  Location     Type
  9669 ;;  reg             1   16[COMRAM] unsigned char 
  9670 ;;  masked_reg      1   15[COMRAM] unsigned char 
  9671 ;; Return value:  Size  Location     Type
  9672 ;;                  1    wreg      void 
  9673 ;; Registers used:
  9674 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9675 ;; Tracked objects:
  9676 ;;		On entry : 0/0
  9677 ;;		On exit  : 0/0
  9678 ;;		Unchanged: 0/0
  9679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9680 ;;      Params:         0       0       0       0       0       0       0       0       0
  9681 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9682 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9683 ;;      Totals:         4       0       0       0       0       0       0       0       0
  9684 ;;Total ram usage:        4 bytes
  9685 ;; Hardware stack levels used: 1
  9686 ;; Hardware stack levels required when called: 3
  9687 ;; This function calls:
  9688 ;;		_ReadSXRegister
  9689 ;;		_UARTWriteByteHex
  9690 ;;		_UARTWriteStr
  9691 ;;		_UARTWriteStrLn
  9692 ;;		_afficher_string
  9693 ;; This function is called by:
  9694 ;;		_main
  9695 ;; This function uses a non-reentrant model
  9696 ;;
  9697                           
  9698                           	psect	text47
  9699  005FB4                     __ptext47:
  9700                           	callstack 0
  9701  005FB4                     _GetMode:
  9702                           	callstack 27
  9703  005FB4                     
  9704                           ;SX1272.c: 44:     uint8_t reg, masked_reg;;SX1272.c: 45:     reg = ReadSXRegister(0x01)
      +                          ;
  9705  005FB4  0E01               	movlw	1
  9706  005FB6  ECB7  F025         	call	_ReadSXRegister
  9707  005FBA  6E11               	movwf	GetMode@reg^0,c
  9708  005FBC                     
  9709                           ;SX1272.c: 48:         UARTWriteStr("REG_OP_MODE = 0x");
  9710  005FBC  0EC5               	movlw	low STR_33
  9711  005FBE  6E02               	movwf	UARTWriteStr@string^0,c
  9712  005FC0  0E7E               	movlw	high STR_33
  9713  005FC2  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  9714  005FC4  EC1A  F028         	call	_UARTWriteStr	;wreg free
  9715  005FC8                     
  9716                           ;SX1272.c: 49:         UARTWriteByteHex(reg);
  9717  005FC8  C011  F002         	movff	GetMode@reg,UARTWriteByteHex@data
  9718  005FCC  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  9719  005FCE  ECC0  F02A         	call	_UARTWriteByteHex	;wreg free
  9720  005FD2                     
  9721                           ;SX1272.c: 50:         UARTWriteStrLn(" ");
  9722  005FD2  0E94               	movlw	low (STR_27+9)
  9723  005FD4  6E02               	movwf	UARTWriteStrLn@string^0,c
  9724  005FD6  0E7F               	movlw	high (STR_27+9)
  9725  005FD8  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9726  005FDA  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9727  005FDE                     
  9728                           ;SX1272.c: 52:     masked_reg = reg & 0x80;
  9729  005FDE  5011               	movf	GetMode@reg^0,w,c
  9730  005FE0  0B80               	andlw	128
  9731  005FE2  6E10               	movwf	GetMode@masked_reg^0,c
  9732  005FE4                     
  9733                           ;SX1272.c: 53:     if (masked_reg)
  9734  005FE4  5010               	movf	GetMode@masked_reg^0,w,c
  9735  005FE6  B4D8               	btfsc	status,2,c
  9736  005FE8  EFF8  F02F         	goto	u3371
  9737  005FEC  EFFA  F02F         	goto	u3370
  9738  005FF0                     u3371:
  9739  005FF0  EF1B  F030         	goto	l3893
  9740  005FF4                     u3370:
  9741  005FF4                     
  9742                           ;SX1272.c: 54:         {;SX1272.c: 56:         masked_reg = reg & 0x40;
  9743  005FF4  5011               	movf	GetMode@reg^0,w,c
  9744  005FF6  0B40               	andlw	64
  9745  005FF8  6E10               	movwf	GetMode@masked_reg^0,c
  9746  005FFA                     
  9747                           ;SX1272.c: 57:         if (!masked_reg) {
  9748  005FFA  5010               	movf	GetMode@masked_reg^0,w,c
  9749  005FFC  A4D8               	btfss	status,2,c
  9750  005FFE  EF03  F030         	goto	u3381
  9751  006002  EF05  F030         	goto	u3380
  9752  006006                     u3381:
  9753  006006  EF13  F030         	goto	l3891
  9754  00600A                     u3380:
  9755  00600A                     
  9756                           ;SX1272.c: 58:             UARTWriteStrLn("mode = LoRa");
  9757  00600A  0E5E               	movlw	low STR_35
  9758  00600C  6E02               	movwf	UARTWriteStrLn@string^0,c
  9759  00600E  0E7F               	movlw	high STR_35
  9760  006010  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9761  006012  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9762  006016                     
  9763                           ;SX1272.c: 59:             afficher_string("LoRa mode ");
  9764  006016  0E6A               	movlw	low STR_36
  9765  006018  6E0C               	movwf	afficher_string@string^0,c
  9766  00601A  0E7F               	movlw	high STR_36
  9767  00601C  6E0D               	movwf	(afficher_string@string+1)^0,c
  9768  00601E  EC8D  F026         	call	_afficher_string	;wreg free
  9769                           
  9770                           ;SX1272.c: 60:         }
  9771  006022  EF21  F030         	goto	l3895
  9772  006026                     l3891:
  9773                           
  9774                           ;SX1272.c: 62:             UARTWriteStrLn("mode = LoRa with FSK registers access");
  9775  006026  0E1D               	movlw	low STR_37
  9776  006028  6E02               	movwf	UARTWriteStrLn@string^0,c
  9777  00602A  0E7D               	movlw	high STR_37
  9778  00602C  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9779  00602E  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9780  006032  EF21  F030         	goto	l3895
  9781  006036                     l3893:
  9782                           
  9783                           ;SX1272.c: 66:         UARTWriteStrLn("mode = FSK");
  9784  006036  0E75               	movlw	low STR_38
  9785  006038  6E02               	movwf	UARTWriteStrLn@string^0,c
  9786  00603A  0E7F               	movlw	high STR_38
  9787  00603C  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9788  00603E  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9789  006042                     l3895:
  9790                           
  9791                           ;SX1272.c: 68:     masked_reg = reg & 0x07;
  9792  006042  5011               	movf	GetMode@reg^0,w,c
  9793  006044  0B07               	andlw	7
  9794  006046  6E10               	movwf	GetMode@masked_reg^0,c
  9795                           
  9796                           ;SX1272.c: 69:         switch (masked_reg){
  9797  006048  EF66  F030         	goto	l3915
  9798  00604C                     l3897:
  9799                           
  9800                           ;SX1272.c: 71:             UARTWriteStrLn("sleep mode");
  9801  00604C  0E80               	movlw	low STR_39
  9802  00604E  6E02               	movwf	UARTWriteStrLn@string^0,c
  9803  006050  0E7F               	movlw	high STR_39
  9804  006052  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9805  006054  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9806                           
  9807                           ;SX1272.c: 72:             break;
  9808  006058  EF93  F030         	goto	l190
  9809  00605C                     l3899:
  9810                           
  9811                           ;SX1272.c: 74:             UARTWriteStrLn("standby mode");
  9812  00605C  0E45               	movlw	low STR_40
  9813  00605E  6E02               	movwf	UARTWriteStrLn@string^0,c
  9814  006060  0E7F               	movlw	high STR_40
  9815  006062  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9816  006064  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9817                           
  9818                           ;SX1272.c: 75:             break;
  9819  006068  EF93  F030         	goto	l190
  9820  00606C                     l3901:
  9821                           
  9822                           ;SX1272.c: 77:             UARTWriteStrLn("frequency synthesis TX");
  9823  00606C  0EF2               	movlw	low STR_41
  9824  00606E  6E02               	movwf	UARTWriteStrLn@string^0,c
  9825  006070  0E7D               	movlw	high STR_41
  9826  006072  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9827  006074  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9828                           
  9829                           ;SX1272.c: 78:             break;
  9830  006078  EF93  F030         	goto	l190
  9831  00607C                     l3903:
  9832                           
  9833                           ;SX1272.c: 80:             UARTWriteStrLn("TX mode");
  9834  00607C  0EEC               	movlw	low STR_42
  9835  00607E  6E02               	movwf	UARTWriteStrLn@string^0,c
  9836  006080  0E7F               	movlw	high STR_42
  9837  006082  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9838  006084  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9839                           
  9840                           ;SX1272.c: 81:             break;
  9841  006088  EF93  F030         	goto	l190
  9842  00608C                     l3905:
  9843                           
  9844                           ;SX1272.c: 83:             UARTWriteStrLn("frequency synthesis RX");
  9845  00608C  0EDB               	movlw	low STR_43
  9846  00608E  6E02               	movwf	UARTWriteStrLn@string^0,c
  9847  006090  0E7D               	movlw	high STR_43
  9848  006092  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9849  006094  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9850                           
  9851                           ;SX1272.c: 84:             break;
  9852  006098  EF93  F030         	goto	l190
  9853  00609C                     l3907:
  9854                           
  9855                           ;SX1272.c: 86:             UARTWriteStrLn("continuous receive mode");
  9856  00609C  0EC3               	movlw	low STR_44
  9857  00609E  6E02               	movwf	UARTWriteStrLn@string^0,c
  9858  0060A0  0E7D               	movlw	high STR_44
  9859  0060A2  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9860  0060A4  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9861                           
  9862                           ;SX1272.c: 87:             break;
  9863  0060A8  EF93  F030         	goto	l190
  9864  0060AC                     l3909:
  9865                           
  9866                           ;SX1272.c: 89:             UARTWriteStrLn("single receive mode");
  9867  0060AC  0E1F               	movlw	low STR_45
  9868  0060AE  6E02               	movwf	UARTWriteStrLn@string^0,c
  9869  0060B0  0E7E               	movlw	high STR_45
  9870  0060B2  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9871  0060B4  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9872                           
  9873                           ;SX1272.c: 90:             break;
  9874  0060B8  EF93  F030         	goto	l190
  9875  0060BC                     l3911:
  9876                           
  9877                           ;SX1272.c: 92:             UARTWriteStrLn("Channel Activity Detection");
  9878  0060BC  0E5E               	movlw	low STR_46
  9879  0060BE  6E02               	movwf	UARTWriteStrLn@string^0,c
  9880  0060C0  0E7D               	movlw	high STR_46
  9881  0060C2  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  9882  0060C4  EC56  F028         	call	_UARTWriteStrLn	;wreg free
  9883                           
  9884                           ;SX1272.c: 93:             break;
  9885  0060C8  EF93  F030         	goto	l190
  9886  0060CC                     l3915:
  9887  0060CC  5010               	movf	GetMode@masked_reg^0,w,c
  9888  0060CE  6E0E               	movwf	??_GetMode^0,c
  9889  0060D0  6A0F               	clrf	(??_GetMode+1)^0,c
  9890                           
  9891                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9892                           ; Switch size 1, requested type "simple"
  9893                           ; Number of cases is 1, Range of values is 0 to 0
  9894                           ; switch strategies available:
  9895                           ; Name         Instructions Cycles
  9896                           ; simple_byte            4     3 (average)
  9897                           ;	Chosen strategy is simple_byte
  9898  0060D2  500F               	movf	(??_GetMode+1)^0,w,c
  9899  0060D4  0A00               	xorlw	0	; case 0
  9900  0060D6  B4D8               	btfsc	status,2,c
  9901  0060D8  EF70  F030         	goto	l4539
  9902  0060DC  EF93  F030         	goto	l190
  9903  0060E0                     l4539:
  9904                           
  9905                           ; Switch size 1, requested type "simple"
  9906                           ; Number of cases is 8, Range of values is 0 to 7
  9907                           ; switch strategies available:
  9908                           ; Name         Instructions Cycles
  9909                           ; simple_byte           25    13 (average)
  9910                           ;	Chosen strategy is simple_byte
  9911  0060E0  500E               	movf	??_GetMode^0,w,c
  9912  0060E2  0A00               	xorlw	0	; case 0
  9913  0060E4  B4D8               	btfsc	status,2,c
  9914  0060E6  EF26  F030         	goto	l3897
  9915  0060EA  0A01               	xorlw	1	; case 1
  9916  0060EC  B4D8               	btfsc	status,2,c
  9917  0060EE  EF2E  F030         	goto	l3899
  9918  0060F2  0A03               	xorlw	3	; case 2
  9919  0060F4  B4D8               	btfsc	status,2,c
  9920  0060F6  EF36  F030         	goto	l3901
  9921  0060FA  0A01               	xorlw	1	; case 3
  9922  0060FC  B4D8               	btfsc	status,2,c
  9923  0060FE  EF3E  F030         	goto	l3903
  9924  006102  0A07               	xorlw	7	; case 4
  9925  006104  B4D8               	btfsc	status,2,c
  9926  006106  EF46  F030         	goto	l3905
  9927  00610A  0A01               	xorlw	1	; case 5
  9928  00610C  B4D8               	btfsc	status,2,c
  9929  00610E  EF4E  F030         	goto	l3907
  9930  006112  0A03               	xorlw	3	; case 6
  9931  006114  B4D8               	btfsc	status,2,c
  9932  006116  EF56  F030         	goto	l3909
  9933  00611A  0A01               	xorlw	1	; case 7
  9934  00611C  B4D8               	btfsc	status,2,c
  9935  00611E  EF5E  F030         	goto	l3911
  9936  006122  EF93  F030         	goto	l190
  9937  006126                     l190:
  9938  006126  0012               	return		;funcret
  9939  006128                     __end_of_GetMode:
  9940                           	callstack 0
  9941                           
  9942 ;; *************** function _afficher_string *****************
  9943 ;; Defined at:
  9944 ;;		line 180 in file "affichage.c"
  9945 ;; Parameters:    Size  Location     Type
  9946 ;;  string          2   11[COMRAM] PTR unsigned char 
  9947 ;;		 -> STR_36(11), STR_31(11), STR_29(11), STR_27(11), 
  9948 ;;		 -> STR_25(11), STR_22(11), STR_21(11), STR_16(10), 
  9949 ;;		 -> STR_14(11), STR_11(10), STR_1(11), 
  9950 ;; Auto vars:     Size  Location     Type
  9951 ;;		None
  9952 ;; Return value:  Size  Location     Type
  9953 ;;                  1    wreg      void 
  9954 ;; Registers used:
  9955 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9956 ;; Tracked objects:
  9957 ;;		On entry : 0/0
  9958 ;;		On exit  : 0/0
  9959 ;;		Unchanged: 0/0
  9960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9961 ;;      Params:         2       0       0       0       0       0       0       0       0
  9962 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9963 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9964 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9965 ;;Total ram usage:        2 bytes
  9966 ;; Hardware stack levels used: 1
  9967 ;; Hardware stack levels required when called: 2
  9968 ;; This function calls:
  9969 ;;		_ecrire_ecran_data
  9970 ;;		_ecrire_ecran_start_byte
  9971 ;; This function is called by:
  9972 ;;		_main
  9973 ;;		_GetMode
  9974 ;; This function uses a non-reentrant model
  9975 ;;
  9976                           
  9977                           	psect	text48
  9978  004D1A                     __ptext48:
  9979                           	callstack 0
  9980  004D1A                     _afficher_string:
  9981                           	callstack 28
  9982  004D1A                     
  9983                           ;affichage.c: 181:     LATCbits.LATC1 = 0;
  9984  004D1A  9285               	bcf	133,1,c	;volatile
  9985  004D1C                     
  9986                           ;affichage.c: 189:     ecrire_ecran_start_byte(0xF8);
  9987  004D1C  0EF8               	movlw	248
  9988  004D1E  EC5D  F025         	call	_ecrire_ecran_start_byte
  9989  004D22                     
  9990                           ;affichage.c: 190:     ecrire_ecran_data(0xE0);
  9991  004D22  0EE0               	movlw	224
  9992  004D24  EC17  F026         	call	_ecrire_ecran_data
  9993  004D28                     
  9994                           ;affichage.c: 192:     ecrire_ecran_start_byte(0xFA);
  9995  004D28  0EFA               	movlw	250
  9996  004D2A  EC5D  F025         	call	_ecrire_ecran_start_byte
  9997  004D2E                     l3517:
  9998  004D2E  C00C  FFF6         	movff	afficher_string@string,tblptrl
  9999  004D32  C00D  FFF7         	movff	afficher_string@string+1,tblptrh
 10000  004D36                     	if	0	;tblptru may be non-zero
 10001  004D36                     	endif
 10002  004D36                     	if	0	;tblptru may be non-zero
 10003  004D36                     	endif
 10004  004D36  0008               	tblrd		*
 10005  004D38  50F5               	movf	tablat,w,c
 10006  004D3A  EC17  F026         	call	_ecrire_ecran_data
 10007  004D3E  4A0C               	infsnz	afficher_string@string^0,f,c
 10008  004D40  2A0D               	incf	(afficher_string@string+1)^0,f,c
 10009  004D42  C00C  FFF6         	movff	afficher_string@string,tblptrl
 10010  004D46  C00D  FFF7         	movff	afficher_string@string+1,tblptrh
 10011  004D4A                     	if	0	;tblptru may be non-zero
 10012  004D4A                     	endif
 10013  004D4A                     	if	0	;tblptru may be non-zero
 10014  004D4A                     	endif
 10015  004D4A  0008               	tblrd		*
 10016  004D4C  50F5               	movf	tablat,w,c
 10017  004D4E  0900               	iorlw	0
 10018  004D50  A4D8               	btfss	status,2,c
 10019  004D52  EFAD  F026         	goto	u3031
 10020  004D56  EFAF  F026         	goto	u3030
 10021  004D5A                     u3031:
 10022  004D5A  EF97  F026         	goto	l3517
 10023  004D5E                     u3030:
 10024  004D5E                     
 10025                           ;affichage.c: 197:     LATCbits.LATC1 = 1;
 10026  004D5E  8285               	bsf	133,1,c	;volatile
 10027  004D60  0012               	return		;funcret
 10028  004D62                     __end_of_afficher_string:
 10029                           	callstack 0
 10030                           
 10031 ;; *************** function _ecrire_ecran_start_byte *****************
 10032 ;; Defined at:
 10033 ;;		line 30 in file "affichage.c"
 10034 ;; Parameters:    Size  Location     Type
 10035 ;;  RSW             1    wreg     unsigned char 
 10036 ;; Auto vars:     Size  Location     Type
 10037 ;;  RSW             1    1[COMRAM] unsigned char 
 10038 ;; Return value:  Size  Location     Type
 10039 ;;                  1    wreg      void 
 10040 ;; Registers used:
 10041 ;;		wreg, status,2, cstack
 10042 ;; Tracked objects:
 10043 ;;		On entry : 0/0
 10044 ;;		On exit  : 0/0
 10045 ;;		Unchanged: 0/0
 10046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10047 ;;      Params:         0       0       0       0       0       0       0       0       0
 10048 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10049 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10050 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10051 ;;Total ram usage:        1 bytes
 10052 ;; Hardware stack levels used: 1
 10053 ;; Hardware stack levels required when called: 1
 10054 ;; This function calls:
 10055 ;;		_SPITransfer
 10056 ;; This function is called by:
 10057 ;;		_init_ecran
 10058 ;;		_clear_ecran
 10059 ;;		_afficher_temperature
 10060 ;;		_afficher_humidite
 10061 ;;		_afficher_batterie
 10062 ;;		_afficher_string
 10063 ;;		_afficher_string_hex
 10064 ;; This function uses a non-reentrant model
 10065 ;;
 10066                           
 10067                           	psect	text49
 10068  004ABA                     __ptext49:
 10069                           	callstack 0
 10070  004ABA                     _ecrire_ecran_start_byte:
 10071                           	callstack 28
 10072                           
 10073                           ;incstack = 0
 10074                           ;ecrire_ecran_start_byte@RSW stored from wreg
 10075  004ABA  6E02               	movwf	ecrire_ecran_start_byte@RSW^0,c
 10076  004ABC                     
 10077                           ;affichage.c: 31:     _delay((unsigned long)((200)*(1000000UL/4000000.0)));
 10078  004ABC  0E10               	movlw	16
 10079  004ABE                     u3897:
 10080  004ABE  2EE8               	decfsz	wreg,f,c
 10081  004AC0  D7FE               	bra	u3897
 10082  004AC2  D000               	nop2	
 10083  004AC4                     
 10084                           ;affichage.c: 32:     SPITransfer(RSW);
 10085  004AC4  5002               	movf	ecrire_ecran_start_byte@RSW^0,w,c
 10086  004AC6  ECA9  F025         	call	_SPITransfer
 10087  004ACA  0012               	return		;funcret
 10088  004ACC                     __end_of_ecrire_ecran_start_byte:
 10089                           	callstack 0
 10090                           
 10091 ;; *************** function _ecrire_ecran_data *****************
 10092 ;; Defined at:
 10093 ;;		line 37 in file "affichage.c"
 10094 ;; Parameters:    Size  Location     Type
 10095 ;;  data            1    wreg     unsigned char 
 10096 ;; Auto vars:     Size  Location     Type
 10097 ;;  data            1    9[COMRAM] unsigned char 
 10098 ;;  data_inverse    1   10[COMRAM] unsigned char 
 10099 ;; Return value:  Size  Location     Type
 10100 ;;                  1    wreg      void 
 10101 ;; Registers used:
 10102 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10103 ;; Tracked objects:
 10104 ;;		On entry : 0/0
 10105 ;;		On exit  : 0/0
 10106 ;;		Unchanged: 0/0
 10107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10108 ;;      Params:         0       0       0       0       0       0       0       0       0
 10109 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10110 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10111 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10112 ;;Total ram usage:        3 bytes
 10113 ;; Hardware stack levels used: 1
 10114 ;; Hardware stack levels required when called: 1
 10115 ;; This function calls:
 10116 ;;		_SPITransfer
 10117 ;;		_inverser_binaire
 10118 ;; This function is called by:
 10119 ;;		_init_ecran
 10120 ;;		_clear_ecran
 10121 ;;		_afficher_temperature
 10122 ;;		_afficher_humidite
 10123 ;;		_afficher_batterie
 10124 ;;		_afficher_string
 10125 ;;		_afficher_string_hex
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           	psect	text50
 10130  004C2E                     __ptext50:
 10131                           	callstack 0
 10132  004C2E                     _ecrire_ecran_data:
 10133                           	callstack 28
 10134                           
 10135                           ;incstack = 0
 10136                           ;ecrire_ecran_data@data stored from wreg
 10137  004C2E  6E0A               	movwf	ecrire_ecran_data@data^0,c
 10138  004C30                     
 10139                           ;affichage.c: 38:     uint8_t data_inverse = inverser_binaire(data);
 10140  004C30  500A               	movf	ecrire_ecran_data@data^0,w,c
 10141  004C32  EC59  F02A         	call	_inverser_binaire
 10142  004C36  6E0B               	movwf	ecrire_ecran_data@data_inverse^0,c
 10143  004C38                     
 10144                           ;affichage.c: 39:     _delay((unsigned long)((200)*(1000000UL/4000000.0)));
 10145  004C38  0E10               	movlw	16
 10146  004C3A                     u3907:
 10147  004C3A  2EE8               	decfsz	wreg,f,c
 10148  004C3C  D7FE               	bra	u3907
 10149  004C3E  D000               	nop2	
 10150  004C40                     
 10151                           ;affichage.c: 40:     SPITransfer(data_inverse & 0xF0);
 10152  004C40  500B               	movf	ecrire_ecran_data@data_inverse^0,w,c
 10153  004C42  0BF0               	andlw	240
 10154  004C44  ECA9  F025         	call	_SPITransfer
 10155  004C48                     
 10156                           ;affichage.c: 41:     _delay((unsigned long)((200)*(1000000UL/4000000.0)));
 10157  004C48  0E10               	movlw	16
 10158  004C4A                     u3917:
 10159  004C4A  2EE8               	decfsz	wreg,f,c
 10160  004C4C  D7FE               	bra	u3917
 10161  004C4E  D000               	nop2	
 10162  004C50                     
 10163                           ;affichage.c: 42:     SPITransfer((uint8_t)((uint16_t)(data_inverse & 0x0F) << 4));
 10164  004C50  C00B  F009         	movff	ecrire_ecran_data@data_inverse,??_ecrire_ecran_data
 10165  004C54  0E0F               	movlw	15
 10166  004C56  1609               	andwf	??_ecrire_ecran_data^0,f,c
 10167  004C58  3809               	swapf	??_ecrire_ecran_data^0,w,c
 10168  004C5A  0BF0               	andlw	240
 10169  004C5C  ECA9  F025         	call	_SPITransfer
 10170  004C60  0012               	return		;funcret
 10171  004C62                     __end_of_ecrire_ecran_data:
 10172                           	callstack 0
 10173                           
 10174 ;; *************** function _inverser_binaire *****************
 10175 ;; Defined at:
 10176 ;;		line 16 in file "affichage.c"
 10177 ;; Parameters:    Size  Location     Type
 10178 ;;  data            1    wreg     unsigned char 
 10179 ;; Auto vars:     Size  Location     Type
 10180 ;;  data            1    5[COMRAM] unsigned char 
 10181 ;;  i               2    6[COMRAM] int 
 10182 ;;  data_inverse    1    4[COMRAM] unsigned char 
 10183 ;; Return value:  Size  Location     Type
 10184 ;;                  1    wreg      unsigned char 
 10185 ;; Registers used:
 10186 ;;		wreg, status,2, status,0, prodl, prodh
 10187 ;; Tracked objects:
 10188 ;;		On entry : 0/0
 10189 ;;		On exit  : 0/0
 10190 ;;		Unchanged: 0/0
 10191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10192 ;;      Params:         0       0       0       0       0       0       0       0       0
 10193 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10194 ;;      Temps:          4       0       0       0       0       0       0       0       0
 10195 ;;      Totals:         8       0       0       0       0       0       0       0       0
 10196 ;;Total ram usage:        8 bytes
 10197 ;; Hardware stack levels used: 1
 10198 ;; This function calls:
 10199 ;;		Nothing
 10200 ;; This function is called by:
 10201 ;;		_ecrire_ecran_data
 10202 ;; This function uses a non-reentrant model
 10203 ;;
 10204                           
 10205                           	psect	text51
 10206  0054B2                     __ptext51:
 10207                           	callstack 0
 10208  0054B2                     _inverser_binaire:
 10209                           	callstack 28
 10210                           
 10211                           ;incstack = 0
 10212                           ;inverser_binaire@data stored from wreg
 10213  0054B2  6E06               	movwf	inverser_binaire@data^0,c
 10214  0054B4                     
 10215                           ;affichage.c: 17:     uint8_t data_inverse = 0x00;
 10216  0054B4  0E00               	movlw	0
 10217  0054B6  6E05               	movwf	inverser_binaire@data_inverse^0,c
 10218                           
 10219                           ;affichage.c: 18:     int i;;affichage.c: 19:     for (i = 0; i < 8; i++) {
 10220  0054B8  0E00               	movlw	0
 10221  0054BA  6E08               	movwf	(inverser_binaire@i+1)^0,c
 10222  0054BC  0E00               	movlw	0
 10223  0054BE  6E07               	movwf	inverser_binaire@i^0,c
 10224  0054C0                     l2853:
 10225                           
 10226                           ;affichage.c: 20:         if (i < 4) {
 10227  0054C0  BE08               	btfsc	(inverser_binaire@i+1)^0,7,c
 10228  0054C2  EF6E  F02A         	goto	u1900
 10229  0054C6  5008               	movf	(inverser_binaire@i+1)^0,w,c
 10230  0054C8  E107               	bnz	u1901
 10231  0054CA  0E04               	movlw	4
 10232  0054CC  5C07               	subwf	inverser_binaire@i^0,w,c
 10233  0054CE  B0D8               	btfsc	status,0,c
 10234  0054D0  EF6C  F02A         	goto	u1901
 10235  0054D4  EF6E  F02A         	goto	u1900
 10236  0054D8                     u1901:
 10237  0054D8  EF8F  F02A         	goto	l2857
 10238  0054DC                     u1900:
 10239  0054DC                     
 10240                           ;affichage.c: 21:             data_inverse += ((data & (0x01 << i)) << (7-2*i));
 10241  0054DC  5007               	movf	inverser_binaire@i^0,w,c
 10242  0054DE  0DFE               	mullw	-2
 10243  0054E0  CFF3 F001          	movff	prodl,??_inverser_binaire
 10244  0054E4  0E07               	movlw	7
 10245  0054E6  2601               	addwf	??_inverser_binaire^0,f,c
 10246  0054E8  C007  F002         	movff	inverser_binaire@i,??_inverser_binaire+1
 10247  0054EC  0E01               	movlw	1
 10248  0054EE  6E03               	movwf	(??_inverser_binaire+2)^0,c
 10249  0054F0  2A02               	incf	(??_inverser_binaire+1)^0,f,c
 10250  0054F2  EF7D  F02A         	goto	u1914
 10251  0054F6                     u1915:
 10252  0054F6  90D8               	bcf	status,0,c
 10253  0054F8  3603               	rlcf	(??_inverser_binaire+2)^0,f,c
 10254  0054FA                     u1914:
 10255  0054FA  2E02               	decfsz	(??_inverser_binaire+1)^0,f,c
 10256  0054FC  EF7B  F02A         	goto	u1915
 10257  005500  5003               	movf	(??_inverser_binaire+2)^0,w,c
 10258  005502  1406               	andwf	inverser_binaire@data^0,w,c
 10259  005504  6E04               	movwf	(??_inverser_binaire+3)^0,c
 10260  005506  2A01               	incf	??_inverser_binaire^0,f,c
 10261  005508  EF88  F02A         	goto	u1924
 10262  00550C                     u1925:
 10263  00550C  90D8               	bcf	status,0,c
 10264  00550E  3604               	rlcf	(??_inverser_binaire+3)^0,f,c
 10265  005510                     u1924:
 10266  005510  2E01               	decfsz	??_inverser_binaire^0,f,c
 10267  005512  EF86  F02A         	goto	u1925
 10268  005516  5004               	movf	(??_inverser_binaire+3)^0,w,c
 10269  005518  2605               	addwf	inverser_binaire@data_inverse^0,f,c
 10270                           
 10271                           ;affichage.c: 22:         }
 10272  00551A  EFAE  F02A         	goto	l2859
 10273  00551E                     l2857:
 10274                           
 10275                           ;affichage.c: 24:             data_inverse += ((data & (0x01 << i)) >> (1+2*(i-4)));
 10276  00551E  5007               	movf	inverser_binaire@i^0,w,c
 10277  005520  0D02               	mullw	2
 10278  005522  CFF3 F001          	movff	prodl,??_inverser_binaire
 10279  005526  0EF9               	movlw	-7
 10280  005528  2601               	addwf	??_inverser_binaire^0,f,c
 10281  00552A  C007  F002         	movff	inverser_binaire@i,??_inverser_binaire+1
 10282  00552E  0E01               	movlw	1
 10283  005530  6E03               	movwf	(??_inverser_binaire+2)^0,c
 10284  005532  2A02               	incf	(??_inverser_binaire+1)^0,f,c
 10285  005534  EF9E  F02A         	goto	u1934
 10286  005538                     u1935:
 10287  005538  90D8               	bcf	status,0,c
 10288  00553A  3603               	rlcf	(??_inverser_binaire+2)^0,f,c
 10289  00553C                     u1934:
 10290  00553C  2E02               	decfsz	(??_inverser_binaire+1)^0,f,c
 10291  00553E  EF9C  F02A         	goto	u1935
 10292  005542  5003               	movf	(??_inverser_binaire+2)^0,w,c
 10293  005544  1406               	andwf	inverser_binaire@data^0,w,c
 10294  005546  6E04               	movwf	(??_inverser_binaire+3)^0,c
 10295  005548  2A01               	incf	??_inverser_binaire^0,f,c
 10296  00554A  EFA9  F02A         	goto	u1944
 10297  00554E                     u1945:
 10298  00554E  90D8               	bcf	status,0,c
 10299  005550  3204               	rrcf	(??_inverser_binaire+3)^0,f,c
 10300  005552                     u1944:
 10301  005552  2E01               	decfsz	??_inverser_binaire^0,f,c
 10302  005554  EFA7  F02A         	goto	u1945
 10303  005558  5004               	movf	(??_inverser_binaire+3)^0,w,c
 10304  00555A  2605               	addwf	inverser_binaire@data_inverse^0,f,c
 10305  00555C                     l2859:
 10306                           
 10307                           ;affichage.c: 26:     }
 10308  00555C  4A07               	infsnz	inverser_binaire@i^0,f,c
 10309  00555E  2A08               	incf	(inverser_binaire@i+1)^0,f,c
 10310  005560  BE08               	btfsc	(inverser_binaire@i+1)^0,7,c
 10311  005562  EFBC  F02A         	goto	u1951
 10312  005566  5008               	movf	(inverser_binaire@i+1)^0,w,c
 10313  005568  E109               	bnz	u1950
 10314  00556A  0E08               	movlw	8
 10315  00556C  5C07               	subwf	inverser_binaire@i^0,w,c
 10316  00556E  A0D8               	btfss	status,0,c
 10317  005570  EFBC  F02A         	goto	u1951
 10318  005574  EFBE  F02A         	goto	u1950
 10319  005578                     u1951:
 10320  005578  EF60  F02A         	goto	l2853
 10321  00557C                     u1950:
 10322  00557C                     
 10323                           ;affichage.c: 27:     return(data_inverse);
 10324  00557C  5005               	movf	inverser_binaire@data_inverse^0,w,c
 10325  00557E  0012               	return		;funcret
 10326  005580                     __end_of_inverser_binaire:
 10327                           	callstack 0
 10328                           
 10329 ;; *************** function _UARTWriteStrLn *****************
 10330 ;; Defined at:
 10331 ;;		line 77 in file "uart.c"
 10332 ;; Parameters:    Size  Location     Type
 10333 ;;  string          2    1[COMRAM] PTR unsigned char 
 10334 ;;		 -> STR_64(2), STR_61(18), STR_60(2), STR_59(22), 
 10335 ;;		 -> STR_58(25), STR_57(24), STR_56(2), printTemperatureLevel@string(6), 
 10336 ;;		 -> STR_51(2), printHumidityLevel@string(6), STR_50(2), STR_48(2), 
 10337 ;;		 -> STR_46(27), STR_45(20), STR_44(24), STR_43(23), 
 10338 ;;		 -> STR_42(8), STR_41(23), STR_40(13), STR_39(11), 
 10339 ;;		 -> STR_38(11), STR_37(38), STR_35(12), STR_34(2), 
 10340 ;;		 -> STR_32(6), STR_30(8), STR_28(20), STR_26(17), 
 10341 ;;		 -> STR_24(18), STR_23(16), STR_20(16), STR_19(2), 
 10342 ;;		 -> STR_18(16), STR_17(2), STR_15(19), STR_13(15), 
 10343 ;;		 -> STR_12(2), STR_10(2), STR_8(2), STR_5(2), 
 10344 ;;		 -> STR_4(18), STR_3(25), STR_2(2), 
 10345 ;; Auto vars:     Size  Location     Type
 10346 ;;  i               1    5[COMRAM] unsigned char 
 10347 ;; Return value:  Size  Location     Type
 10348 ;;                  1    wreg      void 
 10349 ;; Registers used:
 10350 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10351 ;; Tracked objects:
 10352 ;;		On entry : 0/0
 10353 ;;		On exit  : 0/0
 10354 ;;		Unchanged: 0/0
 10355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10356 ;;      Params:         2       0       0       0       0       0       0       0       0
 10357 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10358 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10359 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10360 ;;Total ram usage:        5 bytes
 10361 ;; Hardware stack levels used: 1
 10362 ;; Hardware stack levels required when called: 1
 10363 ;; This function calls:
 10364 ;;		_UARTWriteByte
 10365 ;; This function is called by:
 10366 ;;		_main
 10367 ;;		_GetMode
 10368 ;;		_printBatteryLevel
 10369 ;;		_printHumidityLevel
 10370 ;;		_printTemperatureLevel
 10371 ;;		_Transmit
 10372 ;;		_Receive
 10373 ;; This function uses a non-reentrant model
 10374 ;;
 10375                           
 10376                           	psect	text52
 10377  0050AC                     __ptext52:
 10378                           	callstack 0
 10379  0050AC                     _UARTWriteStrLn:
 10380                           	callstack 28
 10381  0050AC                     
 10382                           ;uart.c: 78:   uint8_t i = 0;
 10383  0050AC  0E00               	movlw	0
 10384  0050AE  6E06               	movwf	UARTWriteStrLn@i^0,c
 10385                           
 10386                           ;uart.c: 80:   while (string[i])
 10387  0050B0  EF73  F028         	goto	l3529
 10388  0050B4                     l3525:
 10389                           
 10390                           ;uart.c: 81:     UARTWriteByte(string[i++]);
 10391  0050B4  5006               	movf	UARTWriteStrLn@i^0,w,c
 10392  0050B6  2402               	addwf	UARTWriteStrLn@string^0,w,c
 10393  0050B8  6E04               	movwf	??_UARTWriteStrLn^0,c
 10394  0050BA  0E00               	movlw	0
 10395  0050BC  2003               	addwfc	(UARTWriteStrLn@string+1)^0,w,c
 10396  0050BE  6E05               	movwf	(??_UARTWriteStrLn+1)^0,c
 10397  0050C0  C004  FFF6         	movff	??_UARTWriteStrLn,tblptrl
 10398  0050C4  C005  FFF7         	movff	??_UARTWriteStrLn+1,tblptrh
 10399  0050C8  6AF8               	clrf	tblptru,c
 10400  0050CA  0E07               	movlw	(high __ramtop+-1)
 10401  0050CC  64F7               	cpfsgt	tblptrh,c
 10402  0050CE  D003               	bra	u3047
 10403  0050D0  0008               	tblrd		*
 10404  0050D2  50F5               	movf	tablat,w,c
 10405  0050D4  D005               	bra	u3040
 10406  0050D6                     u3047:
 10407  0050D6  CFF6 FFE9          	movff	tblptrl,fsr0l
 10408  0050DA  CFF7 FFEA          	movff	tblptrh,fsr0h
 10409  0050DE  50EF               	movf	indf0,w,c
 10410  0050E0                     u3040:
 10411  0050E0  EC70  F025         	call	_UARTWriteByte
 10412  0050E4  2A06               	incf	UARTWriteStrLn@i^0,f,c
 10413  0050E6                     l3529:
 10414                           
 10415                           ;uart.c: 80:   while (string[i])
 10416  0050E6  5006               	movf	UARTWriteStrLn@i^0,w,c
 10417  0050E8  2402               	addwf	UARTWriteStrLn@string^0,w,c
 10418  0050EA  6E04               	movwf	??_UARTWriteStrLn^0,c
 10419  0050EC  0E00               	movlw	0
 10420  0050EE  2003               	addwfc	(UARTWriteStrLn@string+1)^0,w,c
 10421  0050F0  6E05               	movwf	(??_UARTWriteStrLn+1)^0,c
 10422  0050F2  C004  FFF6         	movff	??_UARTWriteStrLn,tblptrl
 10423  0050F6  C005  FFF7         	movff	??_UARTWriteStrLn+1,tblptrh
 10424  0050FA  6AF8               	clrf	tblptru,c
 10425  0050FC  0E07               	movlw	(high __ramtop+-1)
 10426  0050FE  64F7               	cpfsgt	tblptrh,c
 10427  005100  D003               	bra	u3057
 10428  005102  0008               	tblrd		*
 10429  005104  50F5               	movf	tablat,w,c
 10430  005106  D005               	bra	u3050
 10431  005108                     u3057:
 10432  005108  CFF6 FFE9          	movff	tblptrl,fsr0l
 10433  00510C  CFF7 FFEA          	movff	tblptrh,fsr0h
 10434  005110  50EF               	movf	indf0,w,c
 10435  005112                     u3050:
 10436  005112  0900               	iorlw	0
 10437  005114  A4D8               	btfss	status,2,c
 10438  005116  EF8F  F028         	goto	u3061
 10439  00511A  EF91  F028         	goto	u3060
 10440  00511E                     u3061:
 10441  00511E  EF5A  F028         	goto	l3525
 10442  005122                     u3060:
 10443  005122                     
 10444                           ;uart.c: 83:   UARTWriteByte(0x0D);
 10445  005122  0E0D               	movlw	13
 10446  005124  EC70  F025         	call	_UARTWriteByte
 10447                           
 10448                           ;uart.c: 84:   UARTWriteByte(0x0A);
 10449  005128  0E0A               	movlw	10
 10450  00512A  EC70  F025         	call	_UARTWriteByte
 10451  00512E  0012               	return		;funcret
 10452  005130                     __end_of_UARTWriteStrLn:
 10453                           	callstack 0
 10454                           
 10455 ;; *************** function _UARTWriteStr *****************
 10456 ;; Defined at:
 10457 ;;		line 70 in file "uart.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;  string          2    1[COMRAM] PTR unsigned char 
 10460 ;;		 -> STR_63(2), STR_62(16), STR_55(2), STR_54(18), 
 10461 ;;		 -> STR_53(15), STR_52(12), STR_49(27), printBatteryLevel@string(6), 
 10462 ;;		 -> STR_33(17), STR_9(18), STR_7(2), STR_6(16), 
 10463 ;; Auto vars:     Size  Location     Type
 10464 ;;  i               1    5[COMRAM] unsigned char 
 10465 ;; Return value:  Size  Location     Type
 10466 ;;                  1    wreg      void 
 10467 ;; Registers used:
 10468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10469 ;; Tracked objects:
 10470 ;;		On entry : 0/0
 10471 ;;		On exit  : 0/0
 10472 ;;		Unchanged: 0/0
 10473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10474 ;;      Params:         2       0       0       0       0       0       0       0       0
 10475 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10476 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10477 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10478 ;;Total ram usage:        5 bytes
 10479 ;; Hardware stack levels used: 1
 10480 ;; Hardware stack levels required when called: 1
 10481 ;; This function calls:
 10482 ;;		_UARTWriteByte
 10483 ;; This function is called by:
 10484 ;;		_main
 10485 ;;		_GetMode
 10486 ;;		_printBatteryLevel
 10487 ;;		_printHumidityLevel
 10488 ;;		_printTemperatureLevel
 10489 ;;		_Transmit
 10490 ;;		_Receive
 10491 ;; This function uses a non-reentrant model
 10492 ;;
 10493                           
 10494                           	psect	text53
 10495  005034                     __ptext53:
 10496                           	callstack 0
 10497  005034                     _UARTWriteStr:
 10498                           	callstack 28
 10499  005034                     
 10500                           ;uart.c: 71:   uint8_t i = 0;
 10501  005034  0E00               	movlw	0
 10502  005036  6E06               	movwf	UARTWriteStr@i^0,c
 10503                           
 10504                           ;uart.c: 73:   while (string[i])
 10505  005038  EF37  F028         	goto	l3599
 10506  00503C                     l3595:
 10507                           
 10508                           ;uart.c: 74:     UARTWriteByte(string[i++]);
 10509  00503C  5006               	movf	UARTWriteStr@i^0,w,c
 10510  00503E  2402               	addwf	UARTWriteStr@string^0,w,c
 10511  005040  6E04               	movwf	??_UARTWriteStr^0,c
 10512  005042  0E00               	movlw	0
 10513  005044  2003               	addwfc	(UARTWriteStr@string+1)^0,w,c
 10514  005046  6E05               	movwf	(??_UARTWriteStr+1)^0,c
 10515  005048  C004  FFF6         	movff	??_UARTWriteStr,tblptrl
 10516  00504C  C005  FFF7         	movff	??_UARTWriteStr+1,tblptrh
 10517  005050  6AF8               	clrf	tblptru,c
 10518  005052  0E07               	movlw	(high __ramtop+-1)
 10519  005054  64F7               	cpfsgt	tblptrh,c
 10520  005056  D003               	bra	u3147
 10521  005058  0008               	tblrd		*
 10522  00505A  50F5               	movf	tablat,w,c
 10523  00505C  D005               	bra	u3140
 10524  00505E                     u3147:
 10525  00505E  CFF6 FFE9          	movff	tblptrl,fsr0l
 10526  005062  CFF7 FFEA          	movff	tblptrh,fsr0h
 10527  005066  50EF               	movf	indf0,w,c
 10528  005068                     u3140:
 10529  005068  EC70  F025         	call	_UARTWriteByte
 10530  00506C  2A06               	incf	UARTWriteStr@i^0,f,c
 10531  00506E                     l3599:
 10532                           
 10533                           ;uart.c: 73:   while (string[i])
 10534  00506E  5006               	movf	UARTWriteStr@i^0,w,c
 10535  005070  2402               	addwf	UARTWriteStr@string^0,w,c
 10536  005072  6E04               	movwf	??_UARTWriteStr^0,c
 10537  005074  0E00               	movlw	0
 10538  005076  2003               	addwfc	(UARTWriteStr@string+1)^0,w,c
 10539  005078  6E05               	movwf	(??_UARTWriteStr+1)^0,c
 10540  00507A  C004  FFF6         	movff	??_UARTWriteStr,tblptrl
 10541  00507E  C005  FFF7         	movff	??_UARTWriteStr+1,tblptrh
 10542  005082  6AF8               	clrf	tblptru,c
 10543  005084  0E07               	movlw	(high __ramtop+-1)
 10544  005086  64F7               	cpfsgt	tblptrh,c
 10545  005088  D003               	bra	u3157
 10546  00508A  0008               	tblrd		*
 10547  00508C  50F5               	movf	tablat,w,c
 10548  00508E  D005               	bra	u3150
 10549  005090                     u3157:
 10550  005090  CFF6 FFE9          	movff	tblptrl,fsr0l
 10551  005094  CFF7 FFEA          	movff	tblptrh,fsr0h
 10552  005098  50EF               	movf	indf0,w,c
 10553  00509A                     u3150:
 10554  00509A  0900               	iorlw	0
 10555  00509C  A4D8               	btfss	status,2,c
 10556  00509E  EF53  F028         	goto	u3161
 10557  0050A2  EF55  F028         	goto	u3160
 10558  0050A6                     u3161:
 10559  0050A6  EF1E  F028         	goto	l3595
 10560  0050AA                     u3160:
 10561  0050AA  0012               	return		;funcret
 10562  0050AC                     __end_of_UARTWriteStr:
 10563                           	callstack 0
 10564                           
 10565 ;; *************** function _UARTWriteByteHex *****************
 10566 ;; Defined at:
 10567 ;;		line 87 in file "uart.c"
 10568 ;; Parameters:    Size  Location     Type
 10569 ;;  data            2    1[COMRAM] unsigned short 
 10570 ;; Auto vars:     Size  Location     Type
 10571 ;;  hexa            2    8[COMRAM] PTR unsigned char 
 10572 ;;		 -> STR_47(17), 
 10573 ;; Return value:  Size  Location     Type
 10574 ;;                  1    wreg      void 
 10575 ;; Registers used:
 10576 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10577 ;; Tracked objects:
 10578 ;;		On entry : 0/0
 10579 ;;		On exit  : 0/0
 10580 ;;		Unchanged: 0/0
 10581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10582 ;;      Params:         2       0       0       0       0       0       0       0       0
 10583 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10584 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10585 ;;      Totals:         9       0       0       0       0       0       0       0       0
 10586 ;;Total ram usage:        9 bytes
 10587 ;; Hardware stack levels used: 1
 10588 ;; Hardware stack levels required when called: 1
 10589 ;; This function calls:
 10590 ;;		_UARTWriteByte
 10591 ;; This function is called by:
 10592 ;;		_main
 10593 ;;		_GetMode
 10594 ;;		_Transmit
 10595 ;;		_Receive
 10596 ;; This function uses a non-reentrant model
 10597 ;;
 10598                           
 10599                           	psect	text54
 10600  005580                     __ptext54:
 10601                           	callstack 0
 10602  005580                     _UARTWriteByteHex:
 10603                           	callstack 29
 10604  005580                     
 10605                           ;uart.c: 88:     char *hexa = "0123456789ABCDEF";
 10606  005580  0EB4               	movlw	low STR_47
 10607  005582  6E09               	movwf	UARTWriteByteHex@hexa^0,c
 10608  005584  0E7E               	movlw	high STR_47
 10609  005586  6E0A               	movwf	(UARTWriteByteHex@hexa+1)^0,c
 10610                           
 10611                           ;uart.c: 90:     if (data > 4095) UARTWriteByte(hexa[data / 4096]);
 10612  005588  0E10               	movlw	16
 10613  00558A  5C03               	subwf	(UARTWriteByteHex@data+1)^0,w,c
 10614  00558C  A0D8               	btfss	status,0,c
 10615  00558E  EFCB  F02A         	goto	u3171
 10616  005592  EFCD  F02A         	goto	u3170
 10617  005596                     u3171:
 10618  005596  EFDC  F02A         	goto	l3619
 10619  00559A                     u3170:
 10620  00559A  3803               	swapf	(UARTWriteByteHex@data+1)^0,w,c
 10621  00559C  0B0F               	andlw	15
 10622  00559E  2409               	addwf	UARTWriteByteHex@hexa^0,w,c
 10623  0055A0  6E04               	movwf	??_UARTWriteByteHex^0,c
 10624  0055A2  0E00               	movlw	0
 10625  0055A4  200A               	addwfc	(UARTWriteByteHex@hexa+1)^0,w,c
 10626  0055A6  6E05               	movwf	(??_UARTWriteByteHex+1)^0,c
 10627  0055A8  C004  FFF6         	movff	??_UARTWriteByteHex,tblptrl
 10628  0055AC  C005  FFF7         	movff	??_UARTWriteByteHex+1,tblptrh
 10629  0055B0                     	if	0	;tblptru may be non-zero
 10630  0055B0                     	endif
 10631  0055B0                     	if	0	;tblptru may be non-zero
 10632  0055B0                     	endif
 10633  0055B0  0008               	tblrd		*
 10634  0055B2  50F5               	movf	tablat,w,c
 10635  0055B4  EC70  F025         	call	_UARTWriteByte
 10636  0055B8                     l3619:
 10637                           
 10638                           ;uart.c: 91:     if (data > 255) UARTWriteByte(hexa[data / 256 % 16]);
 10639  0055B8  0403               	decf	(UARTWriteByteHex@data+1)^0,w,c
 10640  0055BA  A0D8               	btfss	status,0,c
 10641  0055BC  EFE2  F02A         	goto	u3181
 10642  0055C0  EFE4  F02A         	goto	u3180
 10643  0055C4                     u3181:
 10644  0055C4  EFFF  F02A         	goto	l250
 10645  0055C8                     u3180:
 10646  0055C8  C002  F004         	movff	UARTWriteByteHex@data,??_UARTWriteByteHex
 10647  0055CC  C003  F005         	movff	UARTWriteByteHex@data+1,??_UARTWriteByteHex+1
 10648  0055D0  C005  F004         	movff	??_UARTWriteByteHex+1,??_UARTWriteByteHex
 10649  0055D4  6A05               	clrf	(??_UARTWriteByteHex+1)^0,c
 10650  0055D6  0E0F               	movlw	15
 10651  0055D8  1604               	andwf	??_UARTWriteByteHex^0,f,c
 10652  0055DA  0E00               	movlw	0
 10653  0055DC  1605               	andwf	(??_UARTWriteByteHex+1)^0,f,c
 10654  0055DE  C009  F006         	movff	UARTWriteByteHex@hexa,??_UARTWriteByteHex+2
 10655  0055E2  C00A  F007         	movff	UARTWriteByteHex@hexa+1,??_UARTWriteByteHex+3
 10656  0055E6  5004               	movf	??_UARTWriteByteHex^0,w,c
 10657  0055E8  2606               	addwf	(??_UARTWriteByteHex+2)^0,f,c
 10658  0055EA  5005               	movf	(??_UARTWriteByteHex+1)^0,w,c
 10659  0055EC  2207               	addwfc	(??_UARTWriteByteHex+3)^0,f,c
 10660  0055EE  C006  FFF6         	movff	??_UARTWriteByteHex+2,tblptrl
 10661  0055F2  C007  FFF7         	movff	??_UARTWriteByteHex+3,tblptrh
 10662  0055F6                     	if	0	;tblptru may be non-zero
 10663  0055F6                     	endif
 10664  0055F6                     	if	0	;tblptru may be non-zero
 10665  0055F6                     	endif
 10666  0055F6  0008               	tblrd		*
 10667  0055F8  50F5               	movf	tablat,w,c
 10668  0055FA  EC70  F025         	call	_UARTWriteByte
 10669  0055FE                     l250:
 10670                           
 10671                           ;uart.c: 92:     UARTWriteByte(hexa[data / 16 % 16]);
 10672  0055FE  C002  F004         	movff	UARTWriteByteHex@data,??_UARTWriteByteHex
 10673  005602  C003  F005         	movff	UARTWriteByteHex@data+1,??_UARTWriteByteHex+1
 10674  005606  0E04               	movlw	4
 10675  005608  6E06               	movwf	(??_UARTWriteByteHex+2)^0,c
 10676  00560A                     u3195:
 10677  00560A  90D8               	bcf	status,0,c
 10678  00560C  3205               	rrcf	(??_UARTWriteByteHex+1)^0,f,c
 10679  00560E  3204               	rrcf	??_UARTWriteByteHex^0,f,c
 10680  005610  2E06               	decfsz	(??_UARTWriteByteHex+2)^0,f,c
 10681  005612  EF05  F02B         	goto	u3195
 10682  005616  0E0F               	movlw	15
 10683  005618  1604               	andwf	??_UARTWriteByteHex^0,f,c
 10684  00561A  0E00               	movlw	0
 10685  00561C  1605               	andwf	(??_UARTWriteByteHex+1)^0,f,c
 10686  00561E  C009  F007         	movff	UARTWriteByteHex@hexa,??_UARTWriteByteHex+3
 10687  005622  C00A  F008         	movff	UARTWriteByteHex@hexa+1,??_UARTWriteByteHex+4
 10688  005626  5004               	movf	??_UARTWriteByteHex^0,w,c
 10689  005628  2607               	addwf	(??_UARTWriteByteHex+3)^0,f,c
 10690  00562A  5005               	movf	(??_UARTWriteByteHex+1)^0,w,c
 10691  00562C  2208               	addwfc	(??_UARTWriteByteHex+4)^0,f,c
 10692  00562E  C007  FFF6         	movff	??_UARTWriteByteHex+3,tblptrl
 10693  005632  C008  FFF7         	movff	??_UARTWriteByteHex+4,tblptrh
 10694  005636                     	if	0	;tblptru may be non-zero
 10695  005636                     	endif
 10696  005636                     	if	0	;tblptru may be non-zero
 10697  005636                     	endif
 10698  005636  0008               	tblrd		*
 10699  005638  50F5               	movf	tablat,w,c
 10700  00563A  EC70  F025         	call	_UARTWriteByte
 10701                           
 10702                           ;uart.c: 93:     UARTWriteByte(hexa[data % 16]);
 10703  00563E  0E0F               	movlw	15
 10704  005640  1402               	andwf	UARTWriteByteHex@data^0,w,c
 10705  005642  6E04               	movwf	??_UARTWriteByteHex^0,c
 10706  005644  0E00               	movlw	0
 10707  005646  1403               	andwf	(UARTWriteByteHex@data+1)^0,w,c
 10708  005648  6E05               	movwf	(??_UARTWriteByteHex+1)^0,c
 10709  00564A  C009  F006         	movff	UARTWriteByteHex@hexa,??_UARTWriteByteHex+2
 10710  00564E  C00A  F007         	movff	UARTWriteByteHex@hexa+1,??_UARTWriteByteHex+3
 10711  005652  5004               	movf	??_UARTWriteByteHex^0,w,c
 10712  005654  2606               	addwf	(??_UARTWriteByteHex+2)^0,f,c
 10713  005656  5005               	movf	(??_UARTWriteByteHex+1)^0,w,c
 10714  005658  2207               	addwfc	(??_UARTWriteByteHex+3)^0,f,c
 10715  00565A  C006  FFF6         	movff	??_UARTWriteByteHex+2,tblptrl
 10716  00565E  C007  FFF7         	movff	??_UARTWriteByteHex+3,tblptrh
 10717  005662                     	if	0	;tblptru may be non-zero
 10718  005662                     	endif
 10719  005662                     	if	0	;tblptru may be non-zero
 10720  005662                     	endif
 10721  005662  0008               	tblrd		*
 10722  005664  50F5               	movf	tablat,w,c
 10723  005666  EC70  F025         	call	_UARTWriteByte
 10724  00566A  0012               	return		;funcret
 10725  00566C                     __end_of_UARTWriteByteHex:
 10726                           	callstack 0
 10727                           
 10728 ;; *************** function _UARTWriteByte *****************
 10729 ;; Defined at:
 10730 ;;		line 59 in file "uart.c"
 10731 ;; Parameters:    Size  Location     Type
 10732 ;;  data            1    wreg     unsigned char 
 10733 ;; Auto vars:     Size  Location     Type
 10734 ;;  data            1    0[COMRAM] unsigned char 
 10735 ;; Return value:  Size  Location     Type
 10736 ;;                  1    wreg      void 
 10737 ;; Registers used:
 10738 ;;		wreg
 10739 ;; Tracked objects:
 10740 ;;		On entry : 0/0
 10741 ;;		On exit  : 0/0
 10742 ;;		Unchanged: 0/0
 10743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10744 ;;      Params:         0       0       0       0       0       0       0       0       0
 10745 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10746 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10747 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10748 ;;Total ram usage:        1 bytes
 10749 ;; Hardware stack levels used: 1
 10750 ;; This function calls:
 10751 ;;		Nothing
 10752 ;; This function is called by:
 10753 ;;		_UARTWriteStr
 10754 ;;		_UARTWriteStrLn
 10755 ;;		_UARTWriteByteHex
 10756 ;; This function uses a non-reentrant model
 10757 ;;
 10758                           
 10759                           	psect	text55
 10760  004AE0                     __ptext55:
 10761                           	callstack 0
 10762  004AE0                     _UARTWriteByte:
 10763                           	callstack 28
 10764                           
 10765                           ;incstack = 0
 10766                           ;UARTWriteByte@data stored from wreg
 10767  004AE0  6E01               	movwf	UARTWriteByte@data^0,c
 10768  004AE2                     l231:
 10769  004AE2  A29E               	btfss	158,1,c	;volatile
 10770  004AE4  EF76  F025         	goto	u1961
 10771  004AE8  EF78  F025         	goto	u1960
 10772  004AEC                     u1961:
 10773  004AEC  EF71  F025         	goto	l231
 10774  004AF0                     u1960:
 10775  004AF0                     
 10776                           ;uart.c: 63:     TX1REG = data;
 10777  004AF0  C001  FF9A         	movff	UARTWriteByte@data,3994	;volatile
 10778  004AF4  0012               	return		;funcret
 10779  004AF6                     __end_of_UARTWriteByte:
 10780                           	callstack 0
 10781                           
 10782 ;; *************** function _ReadSXRegister *****************
 10783 ;; Defined at:
 10784 ;;		line 30 in file "SX1272.c"
 10785 ;; Parameters:    Size  Location     Type
 10786 ;;  address         1    wreg     unsigned char 
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;  address         1    3[COMRAM] unsigned char 
 10789 ;;  RegValue        1    2[COMRAM] unsigned char 
 10790 ;; Return value:  Size  Location     Type
 10791 ;;                  1    wreg      unsigned char 
 10792 ;; Registers used:
 10793 ;;		wreg, status,2, status,0, cstack
 10794 ;; Tracked objects:
 10795 ;;		On entry : 0/0
 10796 ;;		On exit  : 0/0
 10797 ;;		Unchanged: 0/0
 10798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10799 ;;      Params:         0       0       0       0       0       0       0       0       0
 10800 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10801 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10802 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10803 ;;Total ram usage:        2 bytes
 10804 ;; Hardware stack levels used: 1
 10805 ;; Hardware stack levels required when called: 1
 10806 ;; This function calls:
 10807 ;;		_SPIReceive
 10808 ;;		_SPITransfer
 10809 ;; This function is called by:
 10810 ;;		_main
 10811 ;;		_GetMode
 10812 ;;		_Transmit
 10813 ;;		_Receive
 10814 ;; This function uses a non-reentrant model
 10815 ;;
 10816                           
 10817                           	psect	text56
 10818  004B6E                     __ptext56:
 10819                           	callstack 0
 10820  004B6E                     _ReadSXRegister:
 10821                           	callstack 28
 10822                           
 10823                           ;incstack = 0
 10824                           ;ReadSXRegister@address stored from wreg
 10825  004B6E  6E04               	movwf	ReadSXRegister@address^0,c
 10826  004B70                     
 10827                           ;SX1272.c: 31:     uint8_t RegValue;;SX1272.c: 32:     LATCbits.LATC2 = 0;
 10828  004B70  9485               	bcf	133,2,c	;volatile
 10829  004B72                     
 10830                           ;SX1272.c: 33:     address = address & 0x7F;
 10831  004B72  5004               	movf	ReadSXRegister@address^0,w,c
 10832  004B74  0B7F               	andlw	127
 10833  004B76  6E04               	movwf	ReadSXRegister@address^0,c
 10834  004B78                     
 10835                           ;SX1272.c: 35:     SPITransfer(address);
 10836  004B78  5004               	movf	ReadSXRegister@address^0,w,c
 10837  004B7A  ECA9  F025         	call	_SPITransfer
 10838  004B7E                     
 10839                           ;SX1272.c: 36:     RegValue = SPIReceive(0x00);
 10840  004B7E  0E00               	movlw	0
 10841  004B80  ECC6  F025         	call	_SPIReceive
 10842  004B84  6E03               	movwf	ReadSXRegister@RegValue^0,c
 10843  004B86                     
 10844                           ;SX1272.c: 37:     LATCbits.LATC2 = 1;
 10845  004B86  8485               	bsf	133,2,c	;volatile
 10846  004B88                     
 10847                           ;SX1272.c: 38:     return RegValue;
 10848  004B88  5003               	movf	ReadSXRegister@RegValue^0,w,c
 10849  004B8A  0012               	return		;funcret
 10850  004B8C                     __end_of_ReadSXRegister:
 10851                           	callstack 0
 10852                           
 10853 ;; *************** function _SPITransfer *****************
 10854 ;; Defined at:
 10855 ;;		line 50 in file "spi.c"
 10856 ;; Parameters:    Size  Location     Type
 10857 ;;  data_out        1    wreg     unsigned char 
 10858 ;; Auto vars:     Size  Location     Type
 10859 ;;  data_out        1    0[COMRAM] unsigned char 
 10860 ;;  dummy_byte      1    0        unsigned char 
 10861 ;; Return value:  Size  Location     Type
 10862 ;;                  1    wreg      void 
 10863 ;; Registers used:
 10864 ;;		wreg
 10865 ;; Tracked objects:
 10866 ;;		On entry : 0/0
 10867 ;;		On exit  : 0/0
 10868 ;;		Unchanged: 0/0
 10869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10870 ;;      Params:         0       0       0       0       0       0       0       0       0
 10871 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10872 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10873 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10874 ;;Total ram usage:        1 bytes
 10875 ;; Hardware stack levels used: 1
 10876 ;; This function calls:
 10877 ;;		Nothing
 10878 ;; This function is called by:
 10879 ;;		_WriteSXRegister
 10880 ;;		_ReadSXRegister
 10881 ;;		_ecrire_ecran_start_byte
 10882 ;;		_ecrire_ecran_data
 10883 ;; This function uses a non-reentrant model
 10884 ;;
 10885                           
 10886                           	psect	text57
 10887  004B52                     __ptext57:
 10888                           	callstack 0
 10889  004B52                     _SPITransfer:
 10890                           	callstack 28
 10891                           
 10892                           ;incstack = 0
 10893                           ;SPITransfer@data_out stored from wreg
 10894  004B52  6E01               	movwf	SPITransfer@data_out^0,c
 10895  004B54  5092               	movf	146,w,c	;volatile
 10896                           
 10897                           ;spi.c: 54:     PIR3bits.SSP1IF = 0;
 10898  004B56  010E               	movlb	14	; () banked
 10899  004B58  91CD               	bcf	205,0,b	;volatile
 10900  004B5A                     
 10901                           ; BSR set to: 14
 10902                           ;spi.c: 55:     SSP1BUF = data_out;
 10903  004B5A  C001  FF92         	movff	SPITransfer@data_out,3986	;volatile
 10904  004B5E                     l144:
 10905                           
 10906                           ; BSR set to: 14
 10907  004B5E  A1CD               	btfss	205,0,b	;volatile
 10908  004B60  EFB4  F025         	goto	u1881
 10909  004B64  EFB6  F025         	goto	u1880
 10910  004B68                     u1881:
 10911  004B68  EFAF  F025         	goto	l144
 10912  004B6C                     u1880:
 10913  004B6C                     
 10914                           ; BSR set to: 14
 10915  004B6C  0012               	return		;funcret
 10916  004B6E                     __end_of_SPITransfer:
 10917                           	callstack 0
 10918                           
 10919 ;; *************** function _SPIReceive *****************
 10920 ;; Defined at:
 10921 ;;		line 59 in file "spi.c"
 10922 ;; Parameters:    Size  Location     Type
 10923 ;;  data_out        1    wreg     unsigned char 
 10924 ;; Auto vars:     Size  Location     Type
 10925 ;;  data_out        1    0[COMRAM] unsigned char 
 10926 ;;  data_in         1    1[COMRAM] unsigned char 
 10927 ;;  dummy_byte      1    0        unsigned char 
 10928 ;; Return value:  Size  Location     Type
 10929 ;;                  1    wreg      unsigned char 
 10930 ;; Registers used:
 10931 ;;		wreg, status,2
 10932 ;; Tracked objects:
 10933 ;;		On entry : 0/0
 10934 ;;		On exit  : 0/0
 10935 ;;		Unchanged: 0/0
 10936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10937 ;;      Params:         0       0       0       0       0       0       0       0       0
 10938 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10939 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10940 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10941 ;;Total ram usage:        2 bytes
 10942 ;; Hardware stack levels used: 1
 10943 ;; This function calls:
 10944 ;;		Nothing
 10945 ;; This function is called by:
 10946 ;;		_ReadSXRegister
 10947 ;;		_humidityHex
 10948 ;;		_temperatureHex
 10949 ;; This function uses a non-reentrant model
 10950 ;;
 10951                           
 10952                           	psect	text58
 10953  004B8C                     __ptext58:
 10954                           	callstack 0
 10955  004B8C                     _SPIReceive:
 10956                           	callstack 28
 10957                           
 10958                           ; BSR set to: 14
 10959                           ;incstack = 0
 10960                           ;SPIReceive@data_out stored from wreg
 10961  004B8C  6E01               	movwf	SPIReceive@data_out^0,c
 10962  004B8E  5092               	movf	146,w,c	;volatile
 10963                           
 10964                           ;spi.c: 63:     PIR3bits.SSP1IF = 0;
 10965  004B90  010E               	movlb	14	; () banked
 10966  004B92  91CD               	bcf	205,0,b	;volatile
 10967  004B94                     
 10968                           ; BSR set to: 14
 10969                           ;spi.c: 64:     SSP1BUF = data_out;
 10970  004B94  C001  FF92         	movff	SPIReceive@data_out,3986	;volatile
 10971  004B98                     l150:
 10972                           
 10973                           ; BSR set to: 14
 10974  004B98  A1CD               	btfss	205,0,b	;volatile
 10975  004B9A  EFD1  F025         	goto	u1891
 10976  004B9E  EFD3  F025         	goto	u1890
 10977  004BA2                     u1891:
 10978  004BA2  EFCC  F025         	goto	l150
 10979  004BA6                     u1890:
 10980  004BA6                     
 10981                           ; BSR set to: 14
 10982                           ;spi.c: 66:     data_in = SSP1BUF;
 10983  004BA6  CF92 F002          	movff	3986,SPIReceive@data_in	;volatile
 10984                           
 10985                           ;spi.c: 67:     return(data_in);
 10986  004BAA  5002               	movf	SPIReceive@data_in^0,w,c
 10987  004BAC                     
 10988                           ; BSR set to: 14
 10989  004BAC  0012               	return		;funcret
 10990  004BAE                     __end_of_SPIReceive:
 10991                           	callstack 0
 10992                           
 10993                           	psect	rparam
 10994  0000                     
 10995                           	psect	idloc
 10996                           
 10997                           ;Config register IDLOC0 @ 0x200000
 10998                           ;	unspecified, using default values
 10999  200000                     	org	2097152
 11000  200000  0FFF               	dw	4095
 11001                           
 11002                           ;Config register IDLOC1 @ 0x200002
 11003                           ;	unspecified, using default values
 11004  200002                     	org	2097154
 11005  200002  0FFF               	dw	4095
 11006                           
 11007                           ;Config register IDLOC2 @ 0x200004
 11008                           ;	unspecified, using default values
 11009  200004                     	org	2097156
 11010  200004  0FFF               	dw	4095
 11011                           
 11012                           ;Config register IDLOC3 @ 0x200006
 11013                           ;	unspecified, using default values
 11014  200006                     	org	2097158
 11015  200006  0FFF               	dw	4095
 11016                           
 11017                           ;Config register IDLOC4 @ 0x200008
 11018                           ;	unspecified, using default values
 11019  200008                     	org	2097160
 11020  200008  0FFF               	dw	4095
 11021                           
 11022                           ;Config register IDLOC5 @ 0x20000A
 11023                           ;	unspecified, using default values
 11024  20000A                     	org	2097162
 11025  20000A  0FFF               	dw	4095
 11026                           
 11027                           ;Config register IDLOC6 @ 0x20000C
 11028                           ;	unspecified, using default values
 11029  20000C                     	org	2097164
 11030  20000C  0FFF               	dw	4095
 11031                           
 11032                           ;Config register IDLOC7 @ 0x20000E
 11033                           ;	unspecified, using default values
 11034  20000E                     	org	2097166
 11035  20000E  0FFF               	dw	4095
 11036                           
 11037                           	psect	config
 11038                           
 11039                           ;Config register CONFIG1L @ 0x300000
 11040                           ;	External Oscillator mode Selection bits
 11041                           ;	FEXTOSC = OFF, Oscillator not enabled
 11042                           ;	Power-up default value for COSC bits
 11043                           ;	RSTOSC = HFINTOSC_1MHZ, HFINTOSC with HFFRQ = 4 MHz and CDIV = 4:1
 11044  300000                     	org	3145728
 11045  300000  EC                 	db	236
 11046                           
 11047                           ;Config register CONFIG1H @ 0x300001
 11048                           ;	Clock Out Enable bit
 11049                           ;	CLKOUTEN = OFF, CLKOUT function is disabled
 11050                           ;	Clock Switch Enable bit
 11051                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
 11052                           ;	Fail-Safe Clock Monitor Enable bit
 11053                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
 11054  300001                     	org	3145729
 11055  300001  FF                 	db	255
 11056                           
 11057                           ;Config register CONFIG2L @ 0x300002
 11058                           ;	Master Clear Enable bit
 11059                           ;	MCLRE = EXTMCLR, If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR
 11060                           ;	Power-up Timer Enable bit
 11061                           ;	PWRTE = OFF, Power up timer disabled
 11062                           ;	Low-power BOR enable bit
 11063                           ;	LPBOREN = OFF, ULPBOR disabled
 11064                           ;	Brown-out Reset Enable bits
 11065                           ;	BOREN = SBORDIS, Brown-out Reset enabled , SBOREN bit is ignored
 11066  300002                     	org	3145730
 11067  300002  FF                 	db	255
 11068                           
 11069                           ;Config register CONFIG2H @ 0x300003
 11070                           ;	Brown Out Reset Voltage selection bits
 11071                           ;	BORV = VBOR_2P45, Brown-out Reset Voltage (VBOR) set to 2.45V
 11072                           ;	ZCD Disable bit
 11073                           ;	ZCD = OFF, ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON
 11074                           ;	PPSLOCK bit One-Way Set Enable bit
 11075                           ;	PPS1WAY = ON, PPSLOCK bit can be cleared and set only once; PPS registers remain locke
      +                          d after one clear/set cycle
 11076                           ;	Stack Full/Underflow Reset Enable bit
 11077                           ;	STVREN = ON, Stack full/underflow will cause Reset
 11078                           ;	Debugger Enable bit
 11079                           ;	DEBUG = OFF, Background debugger disabled
 11080                           ;	Extended Instruction Set Enable bit
 11081                           ;	XINST = OFF, Extended Instruction Set and Indexed Addressing Mode disabled
 11082  300003                     	org	3145731
 11083  300003  FF                 	db	255
 11084                           
 11085                           ;Config register CONFIG3L @ 0x300004
 11086                           ;	WDT Period Select bits
 11087                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 11088                           ;	WDT operating mode
 11089                           ;	WDTE = OFF, WDT Disabled
 11090  300004                     	org	3145732
 11091  300004  9F                 	db	159
 11092                           
 11093                           ;Config register CONFIG3H @ 0x300005
 11094                           ;	WDT Window Select bits
 11095                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
 11096                           ;	WDT input clock selector
 11097                           ;	WDTCCS = SC, Software Control
 11098  300005                     	org	3145733
 11099  300005  FF                 	db	255
 11100                           
 11101                           ;Config register CONFIG4L @ 0x300006
 11102                           ;	Write Protection Block 0
 11103                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
 11104                           ;	Write Protection Block 1
 11105                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
 11106                           ;	Write Protection Block 2
 11107                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
 11108                           ;	Write Protection Block 3
 11109                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
 11110  300006                     	org	3145734
 11111  300006  FF                 	db	255
 11112                           
 11113                           ;Config register CONFIG4H @ 0x300007
 11114                           ;	Configuration Register Write Protection bit
 11115                           ;	WRTC = OFF, Configuration registers (300000-30000Bh) not write-protected
 11116                           ;	Boot Block Write Protection bit
 11117                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
 11118                           ;	Data EEPROM Write Protection bit
 11119                           ;	WRTD = OFF, Data EEPROM not write-protected
 11120                           ;	Scanner Enable bit
 11121                           ;	SCANE = ON, Scanner module is available for use, SCANMD bit can control the module
 11122                           ;	Low Voltage Programming Enable bit
 11123                           ;	LVP = ON, Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE config
      +                          uration bit is ignored
 11124  300007                     	org	3145735
 11125  300007  FF                 	db	255
 11126                           
 11127                           ;Config register CONFIG5L @ 0x300008
 11128                           ;	UserNVM Program Memory Code Protection bit
 11129                           ;	CP = OFF, UserNVM code protection disabled
 11130                           ;	DataNVM Memory Code Protection bit
 11131                           ;	CPD = OFF, DataNVM code protection disabled
 11132  300008                     	org	3145736
 11133  300008  FF                 	db	255
 11134                           
 11135                           ;Config register CONFIG5H @ 0x300009
 11136                           ;	unspecified, using default values
 11137  300009                     	org	3145737
 11138  300009  FF                 	db	255
 11139                           
 11140                           ;Config register CONFIG6L @ 0x30000A
 11141                           ;	Table Read Protection Block 0
 11142                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
 11143                           ;	Table Read Protection Block 1
 11144                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
 11145                           ;	Table Read Protection Block 2
 11146                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
 11147                           ;	Table Read Protection Block 3
 11148                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
 11149  30000A                     	org	3145738
 11150  30000A  FF                 	db	255
 11151                           
 11152                           ;Config register CONFIG6H @ 0x30000B
 11153                           ;	Boot Block Table Read Protection bit
 11154                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
 11155  30000B                     	org	3145739
 11156  30000B  FF                 	db	255
 11157                           tosu	equ	0xFFF
 11158                           tosh	equ	0xFFE
 11159                           tosl	equ	0xFFD
 11160                           stkptr	equ	0xFFC
 11161                           pclatu	equ	0xFFB
 11162                           pclath	equ	0xFFA
 11163                           pcl	equ	0xFF9
 11164                           tblptru	equ	0xFF8
 11165                           tblptrh	equ	0xFF7
 11166                           tblptrl	equ	0xFF6
 11167                           tablat	equ	0xFF5
 11168                           prodh	equ	0xFF4
 11169                           prodl	equ	0xFF3
 11170                           indf0	equ	0xFEF
 11171                           postinc0	equ	0xFEE
 11172                           postdec0	equ	0xFED
 11173                           preinc0	equ	0xFEC
 11174                           plusw0	equ	0xFEB
 11175                           fsr0h	equ	0xFEA
 11176                           fsr0l	equ	0xFE9
 11177                           wreg	equ	0xFE8
 11178                           indf1	equ	0xFE7
 11179                           postinc1	equ	0xFE6
 11180                           postdec1	equ	0xFE5
 11181                           preinc1	equ	0xFE4
 11182                           plusw1	equ	0xFE3
 11183                           fsr1h	equ	0xFE2
 11184                           fsr1l	equ	0xFE1
 11185                           bsr	equ	0xFE0
 11186                           indf2	equ	0xFDF
 11187                           postinc2	equ	0xFDE
 11188                           postdec2	equ	0xFDD
 11189                           preinc2	equ	0xFDC
 11190                           plusw2	equ	0xFDB
 11191                           fsr2h	equ	0xFDA
 11192                           fsr2l	equ	0xFD9
 11193                           status	equ	0xFD8

Data Sizes:
    Strings     737
    Constant    0
    Data        9
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    135     144
    BANK1           256     48      48
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    refresh_leds@batterie	PTR const unsigned short  size(2) Largest target is 2
		 -> main@batterie(BANK1[2]), 

    refresh_leds@temperature	PTR const unsigned short  size(2) Largest target is 2
		 -> main@temperature(BANK1[2]), 

    afficher_string_hex@hexa	PTR unsigned char  size(2) Largest target is 17
		 -> STR_65(CODE[17]), 

    afficher_string@string	PTR unsigned char  size(2) Largest target is 11
		 -> STR_36(CODE[11]), STR_31(CODE[11]), STR_29(CODE[11]), STR_27(CODE[11]), 
		 -> STR_25(CODE[11]), STR_22(CODE[11]), STR_21(CODE[11]), STR_16(CODE[10]), 
		 -> STR_14(CODE[11]), STR_11(CODE[10]), STR_1(CODE[11]), 

    Receive@data	PTR unsigned char  size(2) Largest target is 30
		 -> main@rxMsg(BANK1[30]), 

    Transmit@data	PTR const unsigned char  size(2) Largest target is 9
		 -> main@txMsg(BANK1[9]), 

    UARTWriteByteHex@hexa	PTR unsigned char  size(2) Largest target is 17
		 -> STR_47(CODE[17]), 

    UARTWriteStrLn@string	PTR unsigned char  size(2) Largest target is 38
		 -> STR_64(CODE[2]), STR_61(CODE[18]), STR_60(CODE[2]), STR_59(CODE[22]), 
		 -> STR_58(CODE[25]), STR_57(CODE[24]), STR_56(CODE[2]), printTemperatureLevel@string(BANK0[6]), 
		 -> STR_51(CODE[2]), printHumidityLevel@string(BANK0[6]), STR_50(CODE[2]), STR_48(CODE[2]), 
		 -> STR_46(CODE[27]), STR_45(CODE[20]), STR_44(CODE[24]), STR_43(CODE[23]), 
		 -> STR_42(CODE[8]), STR_41(CODE[23]), STR_40(CODE[13]), STR_39(CODE[11]), 
		 -> STR_38(CODE[11]), STR_37(CODE[38]), STR_35(CODE[12]), STR_34(CODE[2]), 
		 -> STR_32(CODE[6]), STR_30(CODE[8]), STR_28(CODE[20]), STR_26(CODE[17]), 
		 -> STR_24(CODE[18]), STR_23(CODE[16]), STR_20(CODE[16]), STR_19(CODE[2]), 
		 -> STR_18(CODE[16]), STR_17(CODE[2]), STR_15(CODE[19]), STR_13(CODE[15]), 
		 -> STR_12(CODE[2]), STR_10(CODE[2]), STR_8(CODE[2]), STR_5(CODE[2]), 
		 -> STR_4(CODE[18]), STR_3(CODE[25]), STR_2(CODE[2]), 

    UARTWriteStr@string	PTR unsigned char  size(2) Largest target is 27
		 -> STR_63(CODE[2]), STR_62(CODE[16]), STR_55(CODE[2]), STR_54(CODE[18]), 
		 -> STR_53(CODE[15]), STR_52(CODE[12]), STR_49(CODE[27]), printBatteryLevel@string(BANK0[6]), 
		 -> STR_33(CODE[17]), STR_9(CODE[18]), STR_7(CODE[2]), STR_6(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->___lwmod
    _voltmeterDec->___fltol
    _sendMeanHumi->___fltol
    _printTemperatureLevel->___lwmod
    _sendMeanTemp->___fltol
    _temperatureHex->_SPIReceive
    _printHumidityLevel->___lwmod
    _printBatteryLevel->___lwmod
    _pourcentBatt->___fltol
    ___fladd->___flmul
    _init_ecran->_ecrire_ecran_data
    _humidityDec->___fltol
    _humidityHex->_SPIReceive
    ___xxtofl->_temperatureHex
    ___fltol->___fladd
    ___flmul->___fldiv
    ___fldiv->___xxtofl
    _hexToDec->___awdiv
    _afficher_string_hex->_ecrire_ecran_data
    _clear_ecran->_ecrire_ecran_data
    _afficher_temperature->___lwmod
    _afficher_humidite->___lwmod
    _afficher_batterie->___lwmod
    ___lwmod->___fltol
    _Transmit->_UARTWriteByteHex
    _Receive->_UARTWriteByteHex
    _InitModule->_WriteSXRegister
    _WriteSXRegister->_ReadSXRegister
    _GetMode->_afficher_string
    _afficher_string->_ecrire_ecran_data
    _ecrire_ecran_start_byte->_SPITransfer
    _ecrire_ecran_data->_inverser_binaire
    _UARTWriteStrLn->_UARTWriteByte
    _UARTWriteStr->_UARTWriteByte
    _UARTWriteByteHex->_UARTWriteByte
    _ReadSXRegister->_SPIReceive

Critical Paths under _main in BANK0

    _main->_printTemperatureLevel
    _voltmeterDec->___fltol
    _sendMeanHumi->___fltol
    _printTemperatureLevel->_sendMeanTemp
    _sendMeanTemp->___fltol
    _printHumidityLevel->___lwmod
    _printBatteryLevel->___lwmod
    _pourcentBatt->___fltol
    _humidityDec->___fltol
    _afficher_donnees->_afficher_batterie
    _afficher_donnees->_afficher_humidite
    _afficher_donnees->_afficher_temperature
    _afficher_temperature->___lwmod
    _afficher_humidite->___lwmod
    _afficher_batterie->___lwmod
    ___lwmod->___fltol

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                55    50      5  190148
                                            128 BANK0      7     2      5
                                              0 BANK1     48    48      0
                            _GetMode
                         _InitModule
                     _InitRFLoRaPins
                     _ReadSXRegister
                            _Receive
                      _ResetRFModule
                            _SPIInit
                           _Transmit
                           _UARTInit
                   _UARTWriteByteHex
                       _UARTWriteStr
                     _UARTWriteStrLn
                    _WriteSXRegister
                            ___lwdiv
                            ___lwmod
                   _afficher_donnees
                    _afficher_string
                _afficher_string_hex
                        _clear_ecran
                           _hexToDec
                        _humidityDec
                        _humidityHex
                           _initLeds
                      _initVoltmeter
                         _init_ecran
                       _pourcentBatt
                  _printBatteryLevel
                 _printHumidityLevel
              _printTemperatureLevel
                       _refresh_leds
                       _sendMeanHumi
                       _sendMeanTemp
                       _voltmeterDec
 ---------------------------------------------------------------------------------
 (1) _voltmeterDec                                         9     9      0    6491
                                              6 BANK0      9     9      0
                            ___flmul
                            ___fltol
                           ___xxtofl
                       _voltmeterHex
 ---------------------------------------------------------------------------------
 (1) _sendMeanHumi                                       110   108      2    9272
                                              6 BANK0    110   108      2
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                        _humidityHex
 ---------------------------------------------------------------------------------
 (1) _refresh_leds                                         6     2      4     370
                                              0 COMRAM     6     2      4
                       _allumer_bleu
                      _allumer_rouge
                 _allumer_rouge_solo
                       _allumer_vert
 ---------------------------------------------------------------------------------
 (2) _allumer_vert                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _allumer_rouge_solo                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _allumer_rouge                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _allumer_bleu                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printTemperatureLevel                                8     8      0   24114
                                            120 BANK0      8     8      0
                       _UARTWriteStr
                     _UARTWriteStrLn
                            ___lwdiv
                            ___lwmod
                       _sendMeanTemp
 ---------------------------------------------------------------------------------
 (1) _sendMeanTemp                                       114   112      2   12163
                                              6 BANK0    114   112      2
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                     _temperatureHex
 ---------------------------------------------------------------------------------
 (2) _temperatureHex                                       8     6      2      93
                                              2 COMRAM     8     6      2
                         _SPIReceive
 ---------------------------------------------------------------------------------
 (1) _printHumidityLevel                                  14    14      0   20973
                                             10 BANK0     14    14      0
                       _UARTWriteStr
                     _UARTWriteStrLn
                            ___fldiv
                            ___flmul
                            ___fltol
                            ___lwdiv
                            ___lwmod
                           ___xxtofl
                        _humidityHex
 ---------------------------------------------------------------------------------
 (1) _printBatteryLevel                                   22    22      0   23795
                                             10 BANK0     22    22      0
                       _UARTWriteStr
                     _UARTWriteStrLn
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___fltol
                            ___lwdiv
                            ___lwmod
                           ___xxtofl
                       _voltmeterHex
 ---------------------------------------------------------------------------------
 (1) _pourcentBatt                                        12    10      2   11798
                                              6 BANK0     12    10      2
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                       _voltmeterHex
 ---------------------------------------------------------------------------------
 (2) _voltmeterHex                                         8     6      2      23
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) ___fladd                                             16     8      8    2844
                                             74 COMRAM    16     8      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                     _temperatureHex (ARG)
                       _voltmeterHex (ARG)
 ---------------------------------------------------------------------------------
 (1) _init_ecran                                           1     1      0     360
                                             11 COMRAM     1     1      0
                  _ecrire_ecran_data
            _ecrire_ecran_start_byte
 ---------------------------------------------------------------------------------
 (1) _initVoltmeter                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLeds                                             0     0      0       0
                _eteindre_rouge_solo
 ---------------------------------------------------------------------------------
 (2) _eteindre_rouge_solo                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _humidityDec                                          4     2      2    8999
                                              6 BANK0      4     2      2
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                        _humidityHex
 ---------------------------------------------------------------------------------
 (2) _humidityHex                                          7     5      2     114
                                              2 COMRAM     7     5      2
                         _SPIReceive
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1082
                                             10 COMRAM    14    10      4
                        _humidityHex (ARG)
                     _temperatureHex (ARG)
                       _voltmeterHex (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     989
                                             90 COMRAM     4     0      4
                                              0 BANK0      6     6      0
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                        _humidityHex (ARG)
                     _temperatureHex (ARG)
                       _voltmeterHex (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    4328
                                             49 COMRAM    25    17      8
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
                        _humidityHex (ARG)
                     _temperatureHex (ARG)
                       _voltmeterHex (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2463
                                             24 COMRAM    25    17      8
                           ___xxtofl (ARG)
                        _humidityHex (ARG)
                     _temperatureHex (ARG)
                       _voltmeterHex (ARG)
 ---------------------------------------------------------------------------------
 (1) _hexToDec                                             3     3      0    1013
                                              8 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _afficher_string_hex                                  9     7      2     755
                                             11 COMRAM     9     7      2
                  _ecrire_ecran_data
            _ecrire_ecran_start_byte
 ---------------------------------------------------------------------------------
 (1) _afficher_donnees                                     6     0      6   24415
                                             12 BANK0      6     0      6
                  _afficher_batterie
                  _afficher_humidite
               _afficher_temperature
                        _clear_ecran
                        _humidityDec (ARG)
 ---------------------------------------------------------------------------------
 (1) _clear_ecran                                          0     0      0     360
                  _ecrire_ecran_data
            _ecrire_ecran_start_byte
 ---------------------------------------------------------------------------------
 (2) _afficher_temperature                                 2     0      2    7859
                                             10 BANK0      2     0      2
                            ___lwdiv
                            ___lwmod
                  _ecrire_ecran_data
            _ecrire_ecran_start_byte
 ---------------------------------------------------------------------------------
 (2) _afficher_humidite                                    2     0      2    7837
                                             10 BANK0      2     0      2
                            ___lwdiv
                            ___lwmod
                  _ecrire_ecran_data
            _ecrire_ecran_start_byte
 ---------------------------------------------------------------------------------
 (2) _afficher_batterie                                    2     0      2    7837
                                             10 BANK0      2     0      2
                            ___lwdiv
                            ___lwmod
                  _ecrire_ecran_data
            _ecrire_ecran_start_byte
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4    3503
                                             94 COMRAM     1     1      0
                                              6 BANK0      4     0      4
                            ___flmul (ARG)
                            ___fltol (ARG)
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    3810
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Transmit                                             6     3      3    9140
                                             10 COMRAM     6     3      3
                          _AntennaTX
                     _ReadSXRegister
                   _UARTWriteByteHex
                       _UARTWriteStr
                     _UARTWriteStrLn
                    _WriteSXRegister
 ---------------------------------------------------------------------------------
 (2) _AntennaTX                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ResetRFModule                                        1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Receive                                              6     4      2    8390
                                             10 COMRAM     6     4      2
                          _AntennaRX
                     _ReadSXRegister
                   _UARTWriteByteHex
                       _UARTWriteStr
                     _UARTWriteStrLn
                    _WriteSXRegister
 ---------------------------------------------------------------------------------
 (2) _AntennaRX                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitRFLoRaPins                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitModule                                           1     1      0    2925
                    _WriteSXRegister
 ---------------------------------------------------------------------------------
 (1) _WriteSXRegister                                      2     1      1    2902
                                              4 COMRAM     2     1      1
                     _ReadSXRegister (ARG)
                        _SPITransfer
 ---------------------------------------------------------------------------------
 (1) _GetMode                                              4     4      0    6563
                                             13 COMRAM     4     4      0
                     _ReadSXRegister
                   _UARTWriteByteHex
                       _UARTWriteStr
                     _UARTWriteStrLn
                    _afficher_string
 ---------------------------------------------------------------------------------
 (1) _afficher_string                                      2     0      2    1241
                                             11 COMRAM     2     0      2
                  _ecrire_ecran_data
            _ecrire_ecran_start_byte
 ---------------------------------------------------------------------------------
 (2) _ecrire_ecran_start_byte                              1     1      0      45
                                              1 COMRAM     1     1      0
                        _SPITransfer
 ---------------------------------------------------------------------------------
 (2) _ecrire_ecran_data                                    3     3      0     315
                                              8 COMRAM     3     3      0
                        _SPITransfer
                   _inverser_binaire
 ---------------------------------------------------------------------------------
 (3) _inverser_binaire                                     8     8      0     225
                                              0 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (2) _UARTWriteStrLn                                       5     3      2    3380
                                              1 COMRAM     5     3      2
                      _UARTWriteByte
 ---------------------------------------------------------------------------------
 (2) _UARTWriteStr                                         5     3      2    1024
                                              1 COMRAM     5     3      2
                      _UARTWriteByte
 ---------------------------------------------------------------------------------
 (1) _UARTWriteByteHex                                     9     7      2     623
                                              1 COMRAM     9     7      2
                      _UARTWriteByte
 ---------------------------------------------------------------------------------
 (3) _UARTWriteByte                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ReadSXRegister                                       2     2      0     137
                                              2 COMRAM     2     2      0
                         _SPIReceive
                        _SPITransfer
 ---------------------------------------------------------------------------------
 (3) _SPITransfer                                          2     2      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SPIReceive                                           3     3      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetMode
     _ReadSXRegister
       _SPIReceive
       _SPITransfer
     _UARTWriteByteHex
       _UARTWriteByte
     _UARTWriteStr
       _UARTWriteByte
     _UARTWriteStrLn
       _UARTWriteByte
     _afficher_string
       _ecrire_ecran_data
         _SPITransfer
         _inverser_binaire
       _ecrire_ecran_start_byte
         _SPITransfer
   _InitModule
     _WriteSXRegister
       _ReadSXRegister (ARG)
       _SPITransfer (ARG)
   _InitRFLoRaPins
   _ReadSXRegister
   _Receive
     _AntennaRX
     _ReadSXRegister
     _UARTWriteByteHex
     _UARTWriteStr
     _UARTWriteStrLn
     _WriteSXRegister
   _ResetRFModule
   _SPIInit
   _Transmit
     _AntennaTX
     _ReadSXRegister
     _UARTWriteByteHex
     _UARTWriteStr
     _UARTWriteStrLn
     _WriteSXRegister
   _UARTInit
   _UARTWriteByteHex
   _UARTWriteStr
   _UARTWriteStrLn
   _WriteSXRegister
   ___lwdiv
   ___lwmod
     ___flmul (ARG)
       ___fldiv (ARG)
         ___xxtofl (ARG)
           _humidityHex (ARG)
             _SPIReceive
           _temperatureHex (ARG)
             _SPIReceive
           _voltmeterHex (ARG)
         _humidityHex (ARG)
         _temperatureHex (ARG)
         _voltmeterHex (ARG)
       ___xxtofl (ARG)
       _humidityHex (ARG)
       _temperatureHex (ARG)
       _voltmeterHex (ARG)
     ___fltol (ARG)
       ___fladd (ARG)
         ___fldiv (ARG)
         ___flmul (ARG)
         ___xxtofl (ARG)
         _temperatureHex (ARG)
         _voltmeterHex (ARG)
       ___fldiv (ARG)
       ___flmul (ARG)
       ___xxtofl (ARG)
       _humidityHex (ARG)
       _temperatureHex (ARG)
       _voltmeterHex (ARG)
     ___lwdiv (ARG)
   _afficher_donnees
     _afficher_batterie
       ___lwdiv
       ___lwmod
       _ecrire_ecran_data
       _ecrire_ecran_start_byte
     _afficher_humidite
       ___lwdiv
       ___lwmod
       _ecrire_ecran_data
       _ecrire_ecran_start_byte
     _afficher_temperature
       ___lwdiv
       ___lwmod
       _ecrire_ecran_data
       _ecrire_ecran_start_byte
     _clear_ecran
       _ecrire_ecran_data
       _ecrire_ecran_start_byte
     _humidityDec (ARG)
       ___fldiv
       ___flmul
       ___fltol
       ___xxtofl
       _humidityHex
   _afficher_string
   _afficher_string_hex
     _ecrire_ecran_data
     _ecrire_ecran_start_byte
   _clear_ecran
   _hexToDec
     ___awdiv
     ___awmod
   _humidityDec
   _humidityHex
   _initLeds
     _eteindre_rouge_solo
   _initVoltmeter
   _init_ecran
     _ecrire_ecran_data
     _ecrire_ecran_start_byte
   _pourcentBatt
     ___fladd
     ___fldiv
     ___flmul
     ___fltol
     ___xxtofl
     _voltmeterHex
   _printBatteryLevel
     _UARTWriteStr
     _UARTWriteStrLn
     ___fladd
     ___fldiv
     ___flmul
     ___fltol
     ___lwdiv
     ___lwmod
     ___xxtofl
     _voltmeterHex
   _printHumidityLevel
     _UARTWriteStr
     _UARTWriteStrLn
     ___fldiv
     ___flmul
     ___fltol
     ___lwdiv
     ___lwmod
     ___xxtofl
     _humidityHex
   _printTemperatureLevel
     _UARTWriteStr
     _UARTWriteStrLn
     ___lwdiv
     ___lwmod
     _sendMeanTemp
       ___fladd
       ___fldiv
       ___flmul
       ___fltol
       ___xxtofl
       _temperatureHex
   _refresh_leds
     _allumer_bleu
     _allumer_rouge
     _allumer_rouge_solo
     _allumer_vert
   _sendMeanHumi
     ___fldiv
     ___flmul
     ___fltol
     ___xxtofl
     _humidityHex
   _sendMeanTemp
   _voltmeterDec
     ___flmul
     ___fltol
     ___xxtofl
     _voltmeterHex

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     30      30       7       18.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     87      90       5       90.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11F      18        0.0%
DATA                 0      0     11F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Jun 30 09:43:18 2021

                 ??_allumer_rouge 0001            __end_of_InitRFLoRaPins 4AAC  
                    _pourcentBatt 5C7A             __end_of_ResetRFModule 4BD6  
                    ___fldiv@aexp 0031                      ___fldiv@bexp 0030  
                    ___fldiv@sign 0029                _allumer_rouge_solo 4A7A  
                    ___awdiv@sign 0006               sendMeanTemp@integer 00D6  
                     _SPITransfer 4B52            Receive@RXNumberOfBytes 000E  
                _UARTWriteByteHex 5580               sendMeanTemp@tempMoy 006C  
                    hexToDec@data 000B                               l111 4B20  
                             l105 4AAA                               l114 4B0A  
                             l108 4BD4                               l141 4C98  
                             l150 4B98                               l231 4AE2  
                             l152 4BA6                               l144 4B5E  
                             l240 50AA                               l304 4EDC  
                             l312 51B2                               l153 4BAC  
                             l321 54B0                               l234 4AF4  
                             l250 55FE                               l170 4B50  
                             l147 4B6C                               l251 566A  
                             l403 557E                               l228 4D18  
                             l420 5FB2                               l412 4F4A  
                             l173 4B8A                               l309 4E0C  
                             l341 65C8                               l333 65C0  
                             l325 5E94                               l246 512E  
                             l406 4ACA                               l190 6126  
                             l430 5858                               l318 62A6  
                             l415 4AB8                               l424 58E0  
                             l280 4DA8                               l409 4C60  
                             l193 575C                               l425 5954  
                             l433 4C2C                               l329 5E9C  
                             l274 4B36                               l419 5F1E  
                             l443 5B3A                               l283 5322  
                             l444 5B68                               l437 4D5E  
                             l429 57E4                               l453 4ADE  
                             l277 4D64                               l438 4D60  
                             l286 5D88                               l462 4A94  
                             l375 642A                               l367 5C78  
                             l711 53E6                               l456 4A8C  
                             l289 6A1A                               l465 4A7C  
                             l378 6372                               l386 4CD4  
                             l459 4A84                               l724 5262  
                             l468 4A78                               l477 5032  
                             l777 5A5C                               l971 4FB6  
                             l981 4E6A                               l978 4FBE  
                             l988 4E72                  ??_temperatureHex 0005  
             ?_allumer_rouge_solo 0001                      ___awmod@sign 0006  
                             prod 000FF3                               wreg 000FE8  
                    ___flmul@aexp 0043                      ___flmul@bexp 0044  
                    ___flmul@sign 003E                      ___flmul@temp 0049  
                    ___flmul@prod 0045                      _BAUD1CONbits 000F9F  
                    ___fltol@exp1 0065                              l1010 7382  
                            l1101 7070                              l1111 71A0  
                            l1103 70E8                              l1104 70D6  
                            l1008 73CE                              l1025 74E8  
                            l1017 769E                              l1009 73BC  
                            l1034 75B8                              l1035 75A6  
                            l1062 6DB4                              l1142 66B8  
                            l1135 6620                              l1064 6C14  
                            l1073 6C5A                              l3001 73B0  
                            l1138 677C                              l1075 6CD2  
                            l1067 6BD8                              l3011 7400  
                            l3003 73BA                              l1076 6CC0  
                            l1149 6714                              l3101 768C  
                            l3021 743C                              l3013 7410  
                            l3005 73DC                              l1094 6E7A  
                            l3111 6A36                              l3103 768E  
                            l3031 7482                              l3023 744A  
                            l3015 741E                              l3007 73EC  
                            l3201 6C6A                              l3121 6A6A  
                            l3113 6A38                              l3041 74FE  
                            l3033 74B6                              l3025 744C  
                            l3017 742C                              l4001 5494  
                            l1098 71DE                              l3203 6C78  
                            l3131 6A9C                              l3115 6A48  
                            l3123 6A72                              l3107 6A1C  
                            l3051 753A                              l3043 750E  
                            l3035 74B8                              l3027 7456  
                            l3019 7438                              l4011 678A  
                            l4003 5498                              l4101 6364  
                            l3213 6CE2                              l3221 6D2A  
                            l3205 6C7C                              l3141 6AD0  
                            l3133 6A9E                              l3125 6A82  
                            l3117 6A58                              l3109 6A28  
                            l3301 6F24                              l3061 7566  
                            l3053 753C                              l3037 74C8  
                            l3029 745C                              l4021 6962  
                            l4013 67D0                              l4005 54A4  
                            l4111 63BE                              l4103 6380  
                            l3231 6D94                              l3223 6D44  
                            l3215 6CEE                              l3207 6C8A  
                            l3151 6B16                              l3135 6AAE  
                            l3143 6AD8                              l3127 6A88  
                            l3119 6A68                              l3311 6F76  
                            l3303 6F30                              l3071 759E  
                            l3055 754A                              l3047 7522  
                            l3063 7568                              l3039 74D8  
                            l4031 69EA                              l4023 6994  
                            l4015 6826                              l4113 63C6  
                            l4121 6402                              l4105 639C  
                            l3233 6DA2                              l3225 6D5A  
                            l3217 6CFC                              l3209 6CB8  
                            l3161 6B3E                              l3153 6B1A  
                            l3145 6AE8                              l3137 6ABE  
                            l3129 6A8E                              l3321 6FF4  
                            l3313 6F86                              l3305 6F40  
                            l3401 59FC                              l4041 5130  
                            l3081 761C                              l3057 7552  
                            l3049 752C                              l3065 7576  
                            l4033 69F6                              l4025 6998  
                            l4017 6878                              l4009 677E  
                            l4201 5D8A                              l4123 6414  
                            l4115 63DA                              l4107 63A8  
                            l4051 4C2A                              l4131 5A60  
                            l3235 6DA8                              l3227 6D74  
                            l3219 6D26                              l3171 6B8C  
                            l3147 6AFE                              l3139 6ACE  
                            l3331 706E                              l3323 702A  
                            l3315 6FA2                              l3307 6F4C  
                            l3251 6DD2                              l3411 5A2C  
                            l4043 51AA                              l3091 7662  
                            l3075 75C8                              l3083 761E  
                            l3067 757A                              l3059 7556  
                            l4035 6A02                              l4027 69CA  
                            l4019 6946                              l4211 5E24  
                            l4117 63F4                              l4109 63B0  
                            l4125 6420                              l3421 4F54  
                            l4141 5AAE                              l4133 5A68  
                            l3237 6DAA                              l3229 6D90  
                            l3181 6BD6                              l3173 6B9C  
                            l3165 6B52                              l3149 6B0E  
                            l3157 6B2E                              l3341 70CE  
                            l3333 7080                              l3325 7038  
                            l3317 6FAE                              l3309 6F5C  
                            l3261 6E18                              l3253 6DE2  
                            l3245 6DB6                              l3413 5A3C  
                            l3093 7670                              l3085 762E  
                            l3077 75D4                              l3069 7588  
                            l4037 6A0E                              l4029 69E6  
                            l4061 5004                              l4221 5E42  
                            l4213 5E36                              l4301 77C0  
                            l3511 4D1C                              l4119 6400  
                            l4071 62AC                              l4151 5B6A  
                            l3431 4F8A                              l3423 4F66  
                            l3503 4AAC                              l4047 4C00  
                            l4143 5AE4                              l4135 5A6E  
                            l4231 4C9C                              l3191 6C24  
                            l3183 6BE2                              l3175 6BA4  
                            l3167 6B6C                              l3159 6B3E  
                            l3351 713C                              l3335 708E  
                            l3327 7056                              l3319 6FCA  
                            l3271 6E44                              l3263 6E1E  
                            l3255 6DF2                              l3247 6DC2  
                            l3415 5A4C                              l3407 5A10  
                            l3095 7676                              l3087 763E  
                            l3079 75E2                              l4063 500C  
                            l4055 4FC0                              l4223 5E70  
                            l4215 5E3E                              l4207 5D90  
                            l4311 77FE                              l4303 77D2  
                            l3601 4B70                              l3521 4D42  
                            l3513 4D22                              l4081 62EC  
                            l4073 62BA                              l4153 5B6E  
                            l3433 4FA0                              l3425 4F6E  
                            l3441 4E0E                              l3505 4AB2  
                            l4049 4C02                              l4145 5AFA  
                            l4137 5A80                              l4129 5A5E  
                            l4233 4CC8                              l3193 6C3A  
                            l3185 6C00                              l3177 6BB4  
                            l3169 6B7C                              l3361 71A4  
                            l3345 70F8                              l3353 7140  
                            l3337 7092                              l3329 7060  
                            l3281 6E9A                              l3273 6E54  
                            l3265 6E24                              l3257 6E02  
                            l3249 6DD0                              l3409 5A1C  
                            l3097 7678                              l3089 765E  
                            l4065 5010                              l4057 4FDE  
                            l4225 5E72                              l4209 5E0A  
                            l4241 5320                              l4321 7840  
                            l4305 77D6                              l4313 7812  
                            l3611 4B88                              l3603 4B72  
                            l3531 5122                              l3523 50AC  
                            l3515 4D28                              l4091 6336  
                            l4083 62F4                              l4075 62C4  
                            l4171 5BD2                              l4163 5B9E  
                            l4155 5B7C                              l3435 4FA8  
                            l3427 4F76                              l3419 4F4C  
                            l3451 4E56                              l3443 4E22  
                            l4147 5B66                              l4139 5A9E  
                            l4235 4CD2                              l3195 6C40  
                            l3187 6C02                              l3179 6BC8  
                            l3371 71CE                              l3363 71B4  
                            l3355 715A                              l3347 7104  
                            l3339 70A0                              l3291 6EDA  
                            l3275 6E64                              l3267 6E32  
                            l3259 6E08                              l3099 767E  
                            l4067 502E                              l4059 4FFC  
                            l4227 5E82                              l4411 7A6C  
                            l4403 7A32                              l4331 78A4  
                            l4323 7844                              l4315 781E  
                            l4307 77DA                              l4251 76C2  
                            l3605 4B78                              l3621 55C8  
                            l3525 50B4                              l2901 4C50  
                            l3517 4D2E                              l3509 4D1A  
                            l3541 4B4E                              l3533 4B3A  
                            l4085 6302                              l4077 62D4  
                            l4069 62A8                              l4181 5C0E  
                            l4173 5BE2                              l4165 5BB4  
                            l4157 5B86                              l3437 4FAA  
                            l3429 4F84                              l3453 4E5E  
                            l3445 4E2A                              l3701 533E  
                            l3197 6C4A                              l3189 6C12  
                            l3365 71C2                              l3357 716E  
                            l3349 7112                              l3293 6EE6  
                            l3285 6EAE                              l3277 6E6A  
                            l3269 6E34                              l3381 5982  
                            l3461 65EA                              l4229 5E84  
                            l4421 7AAE                              l4413 7A78  
                            l4405 7A4A                              l4341 78E2  
                            l4333 78AE                              l4325 7864  
                            l4317 782A                              l4309 77DE  
                            l4261 76DE                              l4253 76C6  
                            l4245 76A0                              l3607 4B7E  
                            l3615 5580                              l3527 50E4  
                            l3519 4D3E                              l3535 4B3C  
                            l3631 4AFA                              l4095 6344  
                            l4087 6310                              l4079 62E0  
                            l3623 4B0C                              l4191 5C4C  
                            l4183 5C1A                              l4175 5BEE  
                            l4167 5BB6                              l4159 5B8A  
                            l3439 4FB0                              l3455 4E64  
                            l3447 4E32                              l3711 5364  
                            l3703 5342                              l3199 6C58  
                            l3367 71C4                              l3359 7188  
                            l3295 6EFE                              l3287 6EBA  
                            l3279 6E8A                              l3391 59D0  
                            l3383 59AC                              l3375 5956  
                            l3471 6662                              l3463 6630  
                            l3551 4ED2                              l3543 4E74  
                            l2911 71FC                              l4239 5264  
                            l4431 7B36                              l4423 7ABA  
                            l4415 7A84                              l4407 7A50  
                            l4351 791A                              l4343 78F4  
                            l4335 78B6                              l4327 7878  
                            l4319 783C                              l4271 7702  
                            l4263 76E2                              l4255 76CA  
                            l4247 76BA                              l2841 4B5A  
                            l3609 4B86                              l3617 559A  
                            l3529 50E6                              l3537 4B42  
                            l3633 4B08                              l4097 6350  
                            l4089 6326                              l3625 4B10  
                            l4193 5C58                              l4185 5C1E  
                            l4177 5BF6                              l4169 5BC8  
                            l3449 4E40                              l3721 539A  
                            l3713 5376                              l3705 5350  
                            l3369 71CA                              l3297 6F0A  
                            l3289 6EC4                              l3385 59AE  
                            l3377 596E                              l3481 66EA  
                            l3473 666E                              l3465 6646  
                            l3457 65CC                              l3553 4ED4  
                            l3545 4E76                              l3801 4F06  
                            l2913 720C                              l2921 7236  
                            l2905 71E0                              l4441 7B7E  
                            l4433 7B42                              l4425 7AD8  
                            l4417 7A96                              l4409 7A60  
                            l4361 7956                              l4353 792C  
                            l4337 78D2                              l4329 788C  
                            l4345 7900                              l4281 773E  
                            l4273 7712                              l4265 76EA  
                            l4257 76CE                              l4249 76BE  
                            l2843 4B8E                              l3619 55B8  
                            l3539 4B48                              l4099 635C  
                            l3627 4B1E                              l4195 5C5A  
                            l4179 5C04                              l3651 5EE0  
                            l3643 5E9E                              l3723 53B0  
                            l3715 537E                              l3731 53C6  
                            l3707 5358                              l3299 6F16  
                            l3387 59BE                              l3491 6728  
                            l3483 66F6                              l3475 66A0  
                            l3459 65DC                              l3547 4E84  
                            l3811 4F24                              l3803 4F0C  
                            l2931 7266                              l2923 7246  
                            l2915 721C                              l2907 71EC  
                            l3635 4D62                              l3571 6538  
                            l3563 6432                              l4451 7BBA  
                            l4435 7B4E                              l4427 7AFA  
                            l4419 7AA2                              l4371 798E  
                            l4363 7962                              l4355 793E  
                            l4347 7906                              l4339 78DE  
                            l4291 776E                              l4283 7748  
                            l4275 771E                              l4267 76EE  
                            l4259 76DA                              l2845 4B94  
                            l2861 5560                              l2853 54C0  
                            l3901 606C                              l3629 4AF6  
                            l4197 5C6C                              l4189 5C32  
                            l3661 5866                              l3653 5F18  
                            l3645 5EA4                              l3733 53D6  
                            l3725 53B8                              l3717 5386  
                            l3709 535C                              l3741 51B8  
                            l3397 59E8                              l3389 59C2  
                            l3493 674C                              l3485 6704  
                            l3477 66A2                              l3469 665A  
                            l3549 4EA2                              l3821 4F42  
                            l3813 4F2A                              l3805 4F12  
                            l2941 72A6                              l2933 7274  
                            l2925 724C                              l2917 722C  
                            l2909 71FA                              l3637 4D72  
                            l3573 6550                              l3565 6504  
                            l3557 642C                              l4461 7BFA  
                            l4453 7BC6                              l4445 7B96  
                            l4437 7B62                              l4429 7B18  
                            l4381 79C8                              l4365 796C  
                            l4357 7942                              l4349 790A  
                            l4293 7780                              l4285 775A  
                            l4277 772A                              l4269 76F6  
                            l2839 4B54                              l2863 557C  
                            l2855 54DC                              l2847 54B4  
                            l3911 60BC                              l3903 607C  
                            l3831 4BB2                              l3671 575E  
                            l3663 588A                              l3647 5EAA  
                            l3735 53DE                              l3727 53BA  
                            l3719 5394                              l3751 51E8  
                            l3743 51C6                              l3399 59F2  
                            l3495 675C                              l3487 6722  
                            l3479 66AE                              l3823 4F48  
                            l3815 4F30                              l3807 4F18  
                            l2951 72E0                              l2943 72A8  
                            l2935 7276                              l2927 725E  
                            l2919 722E                              l3639 4DA0  
                            l2871 4DAA                              l3591 65B0  
                            l3583 656E                              l3575 6562  
                            l3567 651C                              l4471 7CAA  
                            l4463 7C82                              l4455 7BD6  
                            l4447 7B9A                              l4439 7B72  
                            l4391 79E4                              l4383 79CC  
                            l4375 79A6                              l4367 7978  
                            l4295 779E                              l4287 775E  
                            l4279 7734                              l3593 5034  
                            l2857 551E                              l3905 608C  
                            l3921 566C                              l3833 4BC2  
                            l3841 4CF2                              l3681 57DE  
                            l3673 5764                              l3665 58A2  
                            l3657 585A                              l3649 5EC8  
                            l3729 53C0                              l3761 522E  
                            l3753 51FA                              l3745 51CE  
                            l3497 676A                              l3489 6724  
                            l3817 4F36                              l3809 4F1E  
                            l2961 72F4                              l2953 72E4  
                            l2937 7286                              l2945 72B0  
                            l2929 7260                              l2881 4E02  
                            l2873 4DAC                              l3585 659C  
                            l3577 656A                              l3569 6532  
                            l4537 7CDA                              l4473 7CB4  
                            l4457 7BE2                              l4449 7BA6  
                            l4393 79F8                              l4385 79D0  
                            l4377 79BE                              l4369 7984  
                            l4297 77AA                              l4289 776A  
                            l2867 4AE2                              l3595 503C  
                            l2859 555C                              l4539 60E0  
                            l3907 609C                              l3915 60CC  
                            l3931 56B2                              l3923 5694  
                            l3827 4AA0                              l3851 4CFC  
                            l3843 4CF4                              l3835 4CD6  
                            l3675 576A                              l3667 58DA  
                            l3659 5860                              l3771 525A  
                            l3763 5236                              l3755 5202  
                            l3747 51D2                              l3739 51B4  
                            l3499 676C                              l3819 4F3C  
                            l2971 7308                              l2963 72F8  
                            l2955 72E8                              l2947 72C0  
                            l2939 7296                              l2883 4E04  
                            l2875 4DB4                              l3587 659E  
                            l3691 4A8E                              l4467 7C92  
                            l4395 7A04                              l4387 79D4  
                            l4379 79C4                              l4475 7CC4  
                            l4299 77B4                              l2869 4AF0  
                            l3597 506C                              l2893 4C30  
                            l3909 60AC                              l3941 56E4  
                            l3933 56BC                              l3925 5694  
                            l3829 4BAE                              l3861 4D12  
                            l3853 4CFE                              l3845 4CF6  
                            l3837 4CE2                              l3677 578E  
                            l3765 523C                              l3757 520A  
                            l3749 51E0                              l3685 4A76  
                            l3781 4B30                              l2981 731C  
                            l2973 730C                              l2965 72FC  
                            l2957 72EC                              l2949 72D2  
                            l2877 4DCA                              l3589 65AE  
                            l3693 4A7A                              l4469 7C9E  
                            l4397 7A10                              l4389 79D8  
                            l3599 506E                              l2895 4C38  
                            l2887 4ABC                              l3871 5FB4  
                            l3951 5716                              l3943 56EE  
                            l3935 56C6                              l3927 569E  
                            l3775 4C62                              l3863 4D14  
                            l3855 4D00                              l3847 4CF8  
                            l3839 4CF0                              l3679 57A6  
                            l3695 5324                              l3759 5218  
                            l3767 5242                              l3783 4B32  
                            l3791 4EE2                              l2991 737A  
                            l2975 7310                              l2967 7300  
                            l2959 72F0                              l2983 7320  
                            l2879 4DD0                              l3687 4A86  
                            l4399 7A1A                              l2897 4C40  
                            l2889 4AC4                              l3881 5FE4  
                            l3873 5FBC                              l3961 5748  
                            l3953 5720                              l3945 56F8  
                            l3937 56D0                              l3929 56A8  
                            l3777 4C7A                              l3865 4D16  
                            l3857 4D0E                              l3849 4CFA  
                            l3697 5328                              l3769 5252  
                            l3785 4B34                              l3793 4EF2  
                            l2993 7390                              l2985 7324  
                            l2977 7314                              l2969 7304  
                            l3689 4A7E                              l2899 4C48  
                            l3891 6026                              l3883 5FF4  
                            l3875 5FC8                              l3963 5752  
                            l3955 572A                              l3947 5702  
                            l3939 56DA                              l3859 4D10  
                            l3699 5336                              l3867 4ACC  
                            l3779 4B22                              l3795 4EFC  
                            l2995 739C                              l2987 734E  
                            l2979 7318                              l3971 6128  
                            l3885 5FFA                              l3893 6036  
                            l3877 5FD2                              l3957 5734  
                            l3949 570C                              l3869 4ADA  
                            l3797 4EFE                              l3789 4EDE  
                            l2997 73A0                              l2989 736A  
                            l3965 5C7A                              l3981 6282  
                            l3973 6134                              l3895 6042  
                            l3887 600A                              l3879 5FDE  
                            l3959 573E                              l3799 4F00  
                            l2999 73AE                              l3967 5D80  
                            l3983 628E                              l3975 619E  
                            l3991 53F4                              l3897 604C  
                            l3889 6016                              l3985 629A  
                            l3977 625E                              l3993 5410  
                            l3899 605C                              l3979 6262  
                            l3995 5442                              l3997 5446  
                            l3989 53E8                              l3999 5478  
                            STR_1 7F96                              STR_2 7F94  
                            STR_3 7D92                              STR_4 7EA2  
                            STR_5 7F94                              STR_6 7EF7  
                            STR_7 7F94                              STR_8 7F94  
                            STR_9 7E7E                              u2000 720C  
                            u2001 7208                              u2010 721C  
                            u2011 7218                              u2100 7368  
                            u2020 725E                              u2021 725A  
                            u2110 7390                              u2030 7274  
                            u2111 738C                              u2031 7270  
                            u3000 6722                              u2200 74C8  
                            u2120 73AE                              u2040 7286  
                            u3001 671E                              u2201 74C4  
                            u2121 73AA                              u2041 7282  
                            u3010 675C                              u2210 74FE  
                            u2130 73CE                              u2050 7296  
                            u3011 6758                              u2211 74FA  
                            u2131 73CA                              u2051 7292  
                            u3020 676A                              u2300 75C8  
                            u2220 750E                              u2140 73DC  
                            u2060 72D2                              u3100 6532  
                            u3021 6766                              u2301 75C4  
                            u2221 750A                              u2141 73D8  
                            u2061 72CE                              u3101 652E  
                            u3030 4D5E                              u2310 75E2  
                            u2230 753A                              u2150 73EC  
                            u2070 72E0                              u3110 6562  
                            u3031 4D5A                              u2311 75DE  
                            u2231 7536                              u2151 73E8  
                            u2071 72DC                              u3111 655E  
                            u3040 50E0                              u2400 6A58  
                            u2320 761C                              u2240 754A  
                            u2160 741E                              u2080 734E  
                            u3200 4D72                              u3120 65AE  
                            u2401 6A54                              u2321 7618  
                            u2241 7546                              u2161 741A  
                            u2081 734A                              u3201 4D6E  
                            u3121 65AA                              u3050 5112  
                            u2410 6A9C                              u2330 762E  
                            u2250 7566                              u2170 742C  
                            u2090 7366                              u3130 65C0  
                            u2411 6A98                              u2331 762A  
                            u2251 7562                              u2171 7428  
                            u2091 7360                              u3131 65BC  
                            u3140 5068                              u3060 5122  
                            u3220 5EE0                              u3300 53D6  
                            u2500 6C3A                              u2420 6AAE  
                            u2340 763E                              u2260 7576  
                            u2180 744A                              u3061 511E  
                            u3221 5EDC                              u3301 53D2  
                            u2501 6C36                              u2421 6AAA  
                            u2341 763A                              u2261 7572  
                            u2181 7446                              u3150 509A  
                            u3230 58A2                              u3310 51C6  
                            u2510 6C58                              u2430 6ABE  
                            u3070 4EA2                              u2350 765E  
                            u2270 7588                              u2190 7482  
                            u3047 50D6                              u3231 589E  
                            u3311 51C2                              u2511 6C54  
                            u2431 6ABA                              u3071 4E9E  
                            u2351 765A                              u2271 7584  
                            u2191 747E                              u3215 4D7A  
                            u3160 50AA                              u3240 57A6  
                            u3320 51E0                              u2600 6DA2  
                            u2520 6C78                              u2440 6AFE  
                            u2360 7670                              u2280 759E  
                            u3400 4FFC                              u3161 50A6  
                            u3057 5108                              u3241 57A2  
                            u3321 51DC                              u2601 6D9E  
                            u2521 6C74                              u2441 6AFA  
                            u2361 766C                              u2281 759A  
                            u3401 4FF8                              u3170 559A  
                            u3250 5336                              u3330 51FA  
                            u2530 6C8A                              u2450 6B3E  
                            u2610 6DD0                              u2370 768C  
                            u2290 75B4                              u3090 651C  
                            u3410 502E                              u3171 5596  
                            u3147 505E                              u3251 5332  
                            u3331 51F6                              u2531 6C86  
                            u2451 6B3A                              u2611 6DCC  
                            u2371 7688                              u2291 75B0  
                            u3091 6518                              u3411 502A  
                            u3180 55C8                              u1900 54DC  
                            u3420 6302                              u3500 5AFA  
                            u3260 5350                              u3340 5218  
                            u2540 6CB8                              u2460 6BB4  
                            u2380 6A36                              u2700 706E  
                            u2620 6DE2                              u3181 55C4  
                            u3157 5090                              u1901 54D8  
                            u3421 62FE                              u3501 5AF6  
                            u3261 534C                              u3341 5214  
                            u2541 6CB4                              u2461 6BB0  
                            u2381 6A32                              u2701 706A  
                            u2621 6DDE                              u3085 4EAC  
                            u3430 6310                              u3270 5376  
                            u3350 522E                              u2550 6CCE  
                            u2470 6BD6                              u2390 6A48  
                            u2710 708E                              u2630 6DF2  
                            u3431 630C                              u3271 5372  
                            u3351 522A                              u2551 6CCA  
                            u2471 6BD2                              u2391 6A44  
                            u2711 708A                              u2631 6DEE  
                            u3440 6326                              u3520 5B9A  
                            u3280 5394                              u3360 5252  
                            u2560 6CE2                              u2480 6C00  
                            u2720 70A0                              u2640 6E32  
                            u2800 596E                              u3441 6322  
                            u3521 5B96                              u3281 5390  
                            u3361 524E                              u2561 6CDE  
                            u2481 6BFC                              u2721 709C  
                            u2641 6E2E                              u2801 596A  
                            u3601 7778                              u1914 54FA  
                            u3370 5FF4                              u3450 6372  
                            u3530 5BC8                              u3290 53B0  
                            u2570 6CFC                              u2490 6C24  
                            u2730 70CE                              u2650 6E44  
                            u2810 59A2                              u3610 7798  
                            u3195 560A                              u1915 54F6  
                            u3371 5FF0                              u3451 636E  
                            u3531 5BC4                              u3515 5B06  
                            u3291 53AC                              u2571 6CF8  
                            u2491 6C20                              u2731 70CA  
                            u2651 6E40                              u3611 7792  
                            u1924 5510                              u3380 600A  
                            u3460 6380                              u3540 5C04  
                            u2900 4E22                              u2580 6D44  
                            u2740 70E4                              u2660 6E54  
                            u2820 59D0                              u3700 7952  
                            u3620 779A                              u1925 550C  
                            u3381 6006                              u3461 637C  
                            u3541 5C00                              u2901 4E1E  
                            u2581 6D40                              u2741 70E0  
                            u2661 6E50                              u2821 59CC  
                            u3701 794E                              u1950 557C  
                            u1934 553C                              u3470 6414  
                            u3550 5C2E                              u2910 4E40  
                            u2590 6D74                              u2750 70F8  
                            u2670 6E8A                              u2830 59E4  
                            u3390 4FDE                              u3710 79A2  
                            u3630 77D2                              u1951 5578  
                            u1935 5538                              u3471 6410  
                            u3551 5C2A                              u2911 4E3C  
                            u2591 6D70                              u2751 70F4  
                            u2671 6E86                              u2831 59E0  
                            u2815 5998                              u3391 4FDA  
                            u3711 799E                              u3631 77CE  
                            u1880 4B6C                              u1960 4AF0  
                            u1944 5552                              u3560 5C6C  
                            u2920 4E56                              u3480 5A80  
                            u2760 7112                              u2680 6E9A  
                            u2840 5A0C                              u3720 7A2E  
                            u3640 783C                              u1881 4B68  
                            u1961 4AEC                              u1945 554E  
                            u3561 5C68                              u2921 4E52  
                            u3481 5A7C                              u2761 710E  
                            u2681 6E96                              u2841 5A08  
                            u3721 7A2A                              u3641 7838  
                            u1890 4BA6                              u3490 5AAE  
                            u2770 715A                              u2690 7014  
                            u2850 5A2C                              u2930 65DC  
                            u1970 4DCA                              u3570 5E36  
                            u3730 7B92                              u3650 788C  
                            u1891 4BA2                              u3491 5AAA  
                            u2771 7156                              u2851 5A28  
                            u2931 65D8                              u1971 4DC6  
                            u3571 5E32                              u3731 7B8E  
                            u3651 7888                              u2780 7188  
                            u2860 5A3C                              u2940 65EA  
                            u3580 5E82                              u3740 7BF6  
                            u3660 78F4                              u2781 7184  
                            u2861 5A38                              u2941 65E6  
                            u3581 5E7E                              u3741 7BF2  
                            u3661 78F0                              u2870 4F66  
                            u2790 71C2                              u2950 6646  
                            u1990 71FA                              u3590 5E94  
                            u3670 791A                              u2871 4F62  
                            u2791 71BE                              u2695 700A  
                            u2951 6642                              u1991 71F6  
                            u3591 5E90                              u3807 7A8C  
                            u3671 7916                              u2880 4F84  
                            u2960 669C                              u3680 792C  
                            u2881 4F80                              u2961 6698  
                            u3817 4EE8                              u1985 4DDC  
                            u3681 7928                              u2890 4FA0  
                            u2970 66E6                              u3690 793E  
                            u3907 4C3A                              u2891 4F9C  
                            u2971 66E2                              u3827 4EF6  
                            u3691 793A                              u2980 6704  
                            u3917 4C4A                              u3837 5BD8  
                            u2981 6700                              u3757 76AC  
                            u2990 6714                              u3847 4B16  
                            u2991 6710                              u3767 76E4  
                            u3857 4BB8                              u3777 76F0  
                            u3867 4BCA                              u3787 770A  
                            u3877 62CA                              u3797 7750  
                            u3887 4B00                              u3897 4ABE  
               GetMode@masked_reg 0010             ReadSXRegister@address 0004  
                            _main 76A0                      Transmit@data 000B  
                 __end_of_SPIInit 4C9A                              fsr0h 000FEA  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
        __size_of_afficher_string 0048                              prodh 000FF4  
                            prodl 000FF3              ??_allumer_rouge_solo 0001  
                            start 0000                   ___fldiv@new_exp 002A  
                 __end_of_GetMode 6128            ReadSXRegister@RegValue 0003  
     __size_of_printHumidityLevel 0180                      ___param_bank 000000  
     __end_of_eteindre_rouge_solo 4A7A                   ?_InitRFLoRaPins 0001  
                    main@batterie 012C      inverser_binaire@data_inverse 0005  
                 __end_of_Receive 642C             afficher_humidite@data 006A  
                   ___fltol@sign1 0064                             _ADACQ 000F5C  
                 __end_of___fladd 76A0                             ?_main 00E0  
                           _ADCLK 000F57                             _ADPCH 000F5F  
                 __end_of___fldiv 6DB6                   __end_of___awdiv 53E8  
                           STR_10 7F94                             STR_11 7FE2  
                           STR_12 7F94                             STR_20 7F17  
                           STR_21 7FC2                             STR_13 7F36  
                           STR_30 7FF4                             STR_14 7FB7  
                           STR_22 7FAC                             STR_23 7F07  
                           STR_31 7FA1                             STR_15 7E47  
                           STR_32 7E78                             STR_16 7FD8  
                           STR_40 7F45                             STR_24 7E90  
                           STR_17 7F94                             STR_25 7FCD  
                           STR_33 7EC5                             STR_41 7DF2  
                           STR_34 7F94                             STR_50 7FFC  
                           STR_42 7FEC                             STR_18 7F07  
                           STR_26 7ED6                             STR_51 7F94  
                           STR_19 7F94                             STR_27 7F8B  
                           STR_35 7F5E                             STR_43 7DDB  
                           STR_60 7F94                             STR_36 7F6A  
                           STR_52 7F52                             STR_28 7E33  
                           STR_44 7DC3                   __end_of___awmod 5264  
                           STR_29 7FAC                             STR_53 7F27  
                           STR_61 7E6C                             STR_45 7E1F  
                           STR_37 7D1D                             STR_38 7F75  
                           STR_62 7EE7                             STR_54 7E5A  
                           STR_46 7D5E                             STR_63 7F94  
                           STR_55 7F94                             STR_39 7F80  
                           STR_47 7EB4                             STR_64 7F94  
                           STR_56 7F94                             STR_48 7F94  
                           STR_65 7EB4                             STR_57 7DAB  
                           STR_49 7D43                             STR_58 7D79  
                           STR_59 7E09                   __end_of___flmul 71E0  
                 __end_of___fltol 5A5E                 _pourcentBatt$2031 0068  
               _pourcentBatt$2032 006C                   ___awdiv@divisor 0003  
                 __end_of___lwdiv 4FC0                   __end_of___lwmod 4E74  
                 ___awdiv@counter 0005                      main@humidite 011F  
                __end_of_UARTInit 4D1A        __size_of_printBatteryLevel 029E  
                           main@i 0121                   UARTWriteStrLn@i 0006  
           __size_of_voltmeterDec 00C0                             tablat 000FF5  
           __size_of_voltmeterHex 0048                    _ReadSXRegister 4B6E  
                           plusw1 000FE3                             plusw2 000FDB  
        __end_of_afficher_donnees 4C2E                             status 000FD8  
__size_of_ecrire_ecran_start_byte 0012              UARTWriteByteHex@data 0002  
            UARTWriteByteHex@hexa 0009                       ?_SPIReceive 0001  
                 __initialization 4BD6                        _InitModule 566C  
                    ?_humidityDec 0066                      ?_humidityHex 0003  
                    __end_of_main 7D1C              __size_of_clear_ecran 000E  
                          ??_main 00E5      __end_of_afficher_temperature 5FB4  
                   __activetblptr 000002                __size_of_AntennaRX 0016  
              __size_of_AntennaTX 0016                      _voltmeterDec 5264  
                    _voltmeterHex 4D62              __end_of_allumer_bleu 4A86  
                __end_of_Transmit 5C7A              __end_of_allumer_vert 4A96  
          _printBatteryLevel$2033 006E                            _ADRESH 000F64  
                          _ADRESL 000F63                         ??_SPIInit 0001  
                ___awdiv@dividend 0001            __end_of_ReadSXRegister 4B8C  
                          _RC1STA 000F9D                            _RC3PPS 000EFA  
                          _RC5PPS 000EFC                            _RC6PPS 000EFD  
                          _SP1BRG 000F9B                         ??_GetMode 000E  
                          _TX1REG 000F9A                            _TX1STA 000F9E  
               inverser_binaire@i 0007                  __end_of___xxtofl 677E  
               _voltmeterDec$2030 006A            __size_of_initVoltmeter 0016  
                       ??_Receive 000D                       Receive@data 000B  
                __end_of_hexToDec 4CD6          __end_of_inverser_binaire 5580  
           _printTemperatureLevel 53E8                         ??___fladd 0053  
                       ??___fldiv 0021                         ??___awdiv 0005  
                       ??___awmod 0005                 ??_afficher_string 000E  
                       ??___flmul 003A                         ??___fltol 0060  
                       ??___lwdiv 0005                         ??___lwmod 005F  
                __end_of_initLeds 4AE0                  ___awdiv@quotient 0007  
                 ___awmod@divisor 0003                            isa$std 000001  
                 ___awmod@counter 0005               _afficher_string_hex 5A5E  
           afficher_batterie@data 006A                SPIReceive@data_out 0001  
                    __mediumconst 7D1C                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
             __size_of_SPIReceive 0022                   ?_ReadSXRegister 0001  
                    ___xxtofl@arg 0015                      ___xxtofl@exp 0014  
                    ___xxtofl@val 000B                        __accesstop 0060  
         __end_of__initialization 4BF6          __end_of_UARTWriteByteHex 566C  
            ?_afficher_string_hex 000C                     ___rparam_used 000001  
                      ___fltol@f1 005B                 __end_of_AntennaRX 4B0C  
               __end_of_AntennaTX 4B22                       ?_InitModule 0001  
                  __pcstackCOMRAM 0001                      __pidataBANK0 4A97  
                       ?_UARTInit 0001          __size_of_WriteSXRegister 001A  
                    ?_SPITransfer 0001              refresh_leds@batterie 0003  
             main@RXNumberOfBytes 011E             __end_of_UARTWriteByte 4AF6  
                   _initVoltmeter 4B22                     ?_sendMeanHumi 0066  
                   ?_sendMeanTemp 0066        ecrire_ecran_start_byte@RSW 0002  
         __size_of_UARTWriteStrLn 0084           _ecrire_ecran_start_byte 4ABA  
           ??_afficher_string_hex 000E                     ?_refresh_leds 0001  
                ??_InitRFLoRaPins 0001              _afficher_temperature 5E9E  
                   sendMeanHumi@i 00D2                     sendMeanHumi@j 00D3  
                   sendMeanTemp@i 00D4                     sendMeanTemp@j 00D5  
          ?_printTemperatureLevel 0001           printHumidityLevel@value 006E  
                      ??_UARTInit 0003           printBatteryLevel@string 0078  
           __end_of_allumer_rouge 4A8E                         ?_Transmit 000B  
            __size_of_humidityDec 0084              __size_of_humidityHex 006A  
                  ?_initVoltmeter 0001             __size_of_allumer_bleu 0008  
                hexToDec@lowerHex 000A             __size_of_allumer_vert 0008  
                  ??_sendMeanHumi 0068                    ??_sendMeanTemp 0068  
                       ?___xxtofl 000B                           _SP1BRGH 000F9C  
                         _SSP1BUF 000F92                  hexToDec@upperHex 0009  
             __size_of_InitModule 00F2                         ?_hexToDec 0001  
                         _SPIInit 4C62            __size_of_ResetRFModule 0028  
                       ?_initLeds 0001                           _GetMode 5FB4  
                  ??_refresh_leds 0005               humidityDec@humidite 0068  
               ?_afficher_donnees 006C                 UARTWriteByte@data 0001  
           ?_afficher_temperature 006A        __end_of_printHumidityLevel 62A8  
     __size_of_allumer_rouge_solo 0004                           _Receive 62A8  
              ??_afficher_donnees 0060                      ??_SPIReceive 0001  
                         __Hparam 0000                           __Lparam 0000  
                    _allumer_bleu 4A7E                           ___fladd 71E0  
                    _allumer_vert 4A8E                           ___fldiv 6A1C  
                         ___awdiv 5324                           ___awmod 51B4  
                         ___flmul 6DB6                           ___fltol 5956  
                   ?_UARTWriteStr 0002                           ___lwdiv 4F4C  
                      ??_Transmit 000E                           ___lwmod 4E0E  
                      _init_ecran 4EDE               afficher_donnees@bat 0070  
             afficher_donnees@hum 006E               afficher_donnees@tem 006C  
                         __pcinit 4BD6                           __ramtop 0800  
                         __ptext0 76A0                           __ptext1 5264  
                         __ptext2 5D8A                           __ptext3 4FC0  
                         __ptext4 4A8E                           __ptext5 4A7A  
                         __ptext6 4A86                           __ptext7 4A7E  
                         __ptext8 53E8                           __ptext9 642C  
    __size_of_eteindre_rouge_solo 0004                        ??___xxtofl 000F  
                ___awmod@dividend 0001                 ??_WriteSXRegister 0006  
       ??_ecrire_ecran_start_byte 0002                __end_of_SPIReceive 4BAE  
                      ??_hexToDec 0009                   Transmit@reg_val 000F  
            end_of_initialization 4BF6                 _sendMeanTemp$2035 00D0  
         __size_of_temperatureHex 0064                        ??_initLeds 0001  
                 _afficher_string 4D1A                     __Lmediumconst 7D1C  
               _ecrire_ecran_data 4C2E                     ??_clear_ecran 000C  
              ?_ecrire_ecran_data 0001        printHumidityLevel@humidite 006A  
               ?_inverser_binaire 0001                           postdec1 000FE5  
                         postdec2 000FDD                    ??_UARTWriteStr 0004  
                         postinc0 000FEE                           postinc2 000FDE  
                   _ResetRFModule 4BAE                   ??_initVoltmeter 0001  
              ??_inverser_binaire 0001               ??_ecrire_ecran_data 0009  
            __size_of_SPITransfer 001C                       ___fladd@grs 005A  
                ??_ReadSXRegister 0003                     ___xxtofl@sign 0013  
                       _TRISAbits 000F88                         _TRISBbits 000F89  
                       _TRISCbits 000F8A              inverser_binaire@data 0006  
                     ___fldiv@grs 002C                       ___fldiv@rem 0025  
                  _UARTWriteStrLn 50AC         __end_of_ecrire_ecran_data 4C62  
          ??_afficher_temperature 0060                       ___flmul@grs 003F  
               ?_UARTWriteByteHex 0002          afficher_temperature@data 006A  
            __end_of_sendMeanHumi 5E9E              __end_of_sendMeanTemp 65CA  
              ??_UARTWriteByteHex 0004                      ??_InitModule 0007  
                   ?_pourcentBatt 0066   __end_of_ecrire_ecran_start_byte 4ACC  
                  ?_ResetRFModule 0001                         _AntennaRX 4AF6  
                       _AntennaTX 4B0C                       ?_init_ecran 0001  
             __end_of_clear_ecran 4ABA              UARTWriteStrLn@string 0002  
               __size_of_UARTInit 0044           refresh_leds@temperature 0001  
            __end_of_refresh_leds 5034               start_initialization 4BD6  
          __end_of_UARTWriteStrLn 5130           __end_of_afficher_string 4D62  
              __end_of_InitModule 575E                    Receive@reg_val 0010  
         ??_printTemperatureLevel 0060                    ??_pourcentBatt 005F  
                      ?_AntennaRX 0001                        ?_AntennaTX 0001  
                     __pdataBANK0 00E7               temperatureHex@value 0008  
               SPIReceive@data_in 0002               temperatureHex@trash 000A  
               __size_of_Transmit 0110                         ___fladd@a 004F  
                       ___fladd@b 004B                         ___fldiv@a 001D  
                       ___fldiv@b 0019       printTemperatureLevel@string 00D8  
                       ___flmul@a 0036                         ___flmul@b 0032  
         afficher_string_hex@data 000C                         Transmit@i 0010  
         afficher_string_hex@hexa 0013                     __pcstackBANK0 0060  
                   __pcstackBANK1 0100                   ?_UARTWriteStrLn 0002  
     __end_of_afficher_string_hex 5B6A                 __size_of___xxtofl 01B4  
                        ?_SPIInit 0001              __end_of_UARTWriteStr 50AC  
                  _temperatureHex 4DAA        __size_of_ecrire_ecran_data 0034  
             __size_of_init_ecran 006E                 __size_of_hexToDec 003C  
                        ?_GetMode 0001            __size_of_UARTWriteByte 0016  
             _eteindre_rouge_solo 4A76                 __size_of_initLeds 0014  
                        ?_Receive 000B                   ??_ResetRFModule 0001  
                     _clear_ecran 4AAC            printBatteryLevel@vBatt 0076  
                ___lwdiv@dividend 0001                     ??_humidityDec 005F  
                   ??_humidityHex 0005            printBatteryLevel@value 0072  
        printBatteryLevel@integer 0074     printBatteryLevel@pourcentBatt 007E  
          printBatteryLevel@volts 006A                     __pmediumconst 7D1C  
                        ?___fladd 004B                          ?___fldiv 0019  
                        ?___awdiv 0001                          ?___awmod 0001  
                        ?___flmul 0032                          ?___fltol 005B  
                 _WriteSXRegister 4B38                          ?___lwdiv 0001  
                        ?___lwmod 0066          printHumidityLevel@string 0070  
       __size_of_afficher_donnees 002E                _printHumidityLevel 6128  
            ?_eteindre_rouge_solo 0001             ecrire_ecran_data@data 000A  
                   ?_voltmeterDec 0001                     ?_voltmeterHex 0001  
             ?_printHumidityLevel 0001                  ?_afficher_string 000C  
          __end_of_temperatureHex 4E0E                  ___lwdiv@quotient 0005  
              main@capteurPresent 0122            __size_of_allumer_rouge 0008  
               Transmit@data_long 000D             __size_of_sendMeanHumi 0114  
           __size_of_sendMeanTemp 019E        __end_of_allumer_rouge_solo 4A7E  
                        _LATAbits 000F83                          _LATBbits 000F84  
                        _LATCbits 000F85                          _PIE3bits 000EC5  
            ??_printHumidityLevel 0060                          _PIR3bits 000ECD  
             SPITransfer@data_out 0001                         main@F9622 00E7  
                        _SSP1CON1 000F96                          _SSP1CON3 000F98  
                        _UARTInit 4CD6             __size_of_refresh_leds 0074  
               voltmeterDec@vBatt 006E                          _SSP1STAT 000F95  
                     ??_AntennaRX 0001                       ??_AntennaTX 0001  
         __size_of_InitRFLoRaPins 000C                 voltmeterDec@volts 0066  
           ??_eteindre_rouge_solo 0001               __end_of_humidityDec 51B4  
                   _UARTWriteByte 4AE0               __end_of_humidityHex 4EDE  
                      _ADCON0bits 000F60                 _afficher_batterie 575E  
                  ??_voltmeterDec 005F                    ??_voltmeterHex 0003  
              ?_afficher_batterie 006A                         main@rxMsg 0100  
                    _sendMeanHumi 5D8A                         main@txMsg 0123  
                    _sendMeanTemp 642C         __size_of_inverser_binaire 00CE  
            __end_of_pourcentBatt 5D8A                   ?_temperatureHex 0003  
                        Receive@i 000F                         copy_data0 4BEA  
             ??_afficher_batterie 0060                     UARTWriteStr@i 0006  
                __size_of_SPIInit 0038                 _afficher_humidite 585A  
               voltmeterHex@value 0007                ?_afficher_humidite 006A  
                __size_of_GetMode 0174                      _refresh_leds 4FC0  
         __end_of_WriteSXRegister 4B52                          __Hrparam 0000  
                __size_of_Receive 0184                          __Lrparam 0000  
             ??_afficher_humidite 0060                      ??_init_ecran 000C  
                        _Transmit 5B6A                  __size_of___fladd 04C0  
       __end_of_afficher_batterie 585A                  __size_of___fldiv 039A  
                __size_of___awdiv 00C4                  __size_of___awmod 00B0  
                   ??_SPITransfer 0001                  __size_of___flmul 042A  
                __size_of___fltol 0108                     _allumer_rouge 4A86  
                __size_of___lwdiv 0074                  __size_of___lwmod 0066  
                  ?_UARTWriteByte 0001             __end_of_initVoltmeter 4B38  
       __size_of_UARTWriteByteHex 00EC                        _ANSELAbits 000F11  
                      _ANSELCbits 000F21          ?_ecrire_ecran_start_byte 0001  
           __size_of_UARTWriteStr 0078                          ___xxtofl 65CA  
                 ___lwdiv@divisor 0003      printTemperatureLevel@integer 00DE  
                 ___lwdiv@counter 0007                          __ptext10 4DAA  
                        __ptext11 6128                          __ptext20 5130  
                        __ptext12 677E                          __ptext21 4E74  
                        __ptext13 5C7A                          __ptext30 4C00  
                        __ptext22 65CA                          __ptext14 4D62  
                        __ptext31 4AAC                          __ptext23 5956  
                        __ptext15 71E0                          __ptext40 4C62  
                        __ptext32 5E9E                          __ptext24 6DB6  
                        __ptext16 4EDE                          __ptext41 4BAE  
                        __ptext33 585A                          __ptext25 6A1C  
                        __ptext17 4B22                          __ptext50 4C2E  
                        __ptext42 62A8                          __ptext34 575E  
                        __ptext26 4C9A                          __ptext18 4ACC  
                        __ptext51 54B2                          __ptext43 4AF6  
                        __ptext35 4E0E                          __ptext27 51B4  
                        __ptext19 4A76                          __ptext52 50AC  
                        __ptext44 4AA0                          __ptext36 4F4C  
                        __ptext28 5324                          __ptext53 5034  
                        __ptext45 566C                          __ptext37 4CD6  
                        __ptext29 5A5E                          __ptext54 5580  
                        __ptext46 4B38                          __ptext38 5B6A  
                        __ptext55 4AE0                          __ptext47 5FB4  
                        __ptext39 4B0C                          __ptext56 4B6E  
                        __ptext48 4D1A                          __ptext57 4B52  
                        __ptext49 4ABA                          __ptext58 4B8C  
       __end_of_afficher_humidite 5956                  humidityHex@value 0008  
                        _hexToDec 4C9A               sendMeanHumi@integer 00D0  
             sendMeanHumi@humiMoy 006C                          _initLeds 4ACC  
              __end_of_init_ecran 4F4C                     __size_of_main 067C  
   __size_of_afficher_temperature 0116    __size_of_printTemperatureLevel 00CA  
   __end_of_printTemperatureLevel 54B2                        _RC1STAbits 000F9D  
   ecrire_ecran_data@data_inverse 000B               WriteSXRegister@data 0005  
                     _humidityDec 5130                          isa$xinst 000000  
                     _humidityHex 4E74                    ?_allumer_rouge 0001  
                    _UARTWriteStr 5034                          main@argc 00E0  
                        main@argv 00E2                  _afficher_donnees 4C00  
                ??_UARTWriteStrLn 0004             afficher_string@string 000C  
                 main@temperature 012E                UARTWriteStr@string 0002  
                      _INTCONbits 000FF2               __end_of_SPITransfer 4B6E  
               _printBatteryLevel 677E                  ___lwmod@dividend 0066  
         __size_of_ReadSXRegister 001E                ?_printBatteryLevel 0001  
                ?_WriteSXRegister 0005              __end_of_voltmeterDec 5324  
            __end_of_voltmeterHex 4DAA                      ?_clear_ecran 0001  
                      GetMode@reg 0011            WriteSXRegister@address 0006  
                   ?_allumer_bleu 0001               ??_printBatteryLevel 0060  
                   ?_allumer_vert 0001         printHumidityLevel@integer 0076  
                 ??_UARTWriteByte 0001                    _InitRFLoRaPins 4AA0  
      __size_of_afficher_batterie 00FC       pourcentBatt@pourcentBattDec 0070  
           __size_of_pourcentBatt 0110                        _SSP1DATPPS 000EB8  
                      _SSP1CLKPPS 000EB7                   ___lwmod@divisor 0068  
                 ___lwmod@counter 005F                  _inverser_binaire 54B2  
       __end_of_printBatteryLevel 6A1C        __size_of_afficher_humidite 00FC  
                      _TX1STAbits 000F9E                     ___fladd@signs 0057  
                    ___fladd@aexp 0058                      ___fladd@bexp 0059  
    __size_of_afficher_string_hex 010C                        _SPIReceive 4B8C  
                  ??_allumer_bleu 0001                  UARTInit@baudRate 0001  
                  ??_allumer_vert 0001  
