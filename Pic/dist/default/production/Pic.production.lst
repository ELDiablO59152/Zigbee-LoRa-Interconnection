

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon May 22 15:35:35 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F25K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34  0000                     
    35                           ; Version 2.20
    36                           ; Generated 12/02/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F25K40 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	idataCOMRAM
    71  0073E1                     __pidataCOMRAM:
    72                           	callstack 0
    73                           
    74                           ;initializer for main@F9592
    75  0073E1  AD                 	db	173
    76  0073E2  4E                 	db	78
    77  0073E3  00                 	db	0
    78  0073E4  00                 	db	0
    79  0073E5  00                 	db	0
    80  0073E6  00                 	db	0
    81  0073E7  00                 	db	0
    82  0073E8  00                 	db	0
    83  0073E9  00                 	db	0
    84  0000                     _SP1BRGH	set	3996
    85  0000                     _RC1STAbits	set	3997
    86  0000                     _TX1STAbits	set	3998
    87  0000                     _SSP1CLKPPS	set	3767
    88  0000                     _RC3PPS	set	3834
    89  0000                     _ANSELCbits	set	3873
    90  0000                     _LATBbits	set	3972
    91  0000                     _TRISBbits	set	3977
    92  0000                     _SSP1BUF	set	3986
    93  0000                     _SSP1STAT	set	3989
    94  0000                     _TRISCbits	set	3978
    95  0000                     _TRISAbits	set	3976
    96  0000                     _LATCbits	set	3973
    97  0000                     _ADCLK	set	3927
    98  0000                     _LATAbits	set	3971
    99  0000                     _RC5PPS	set	3836
   100  0000                     _ANSELAbits	set	3857
   101  0000                     _RC6PPS	set	3837
   102  0000                     _PIE3bits	set	3781
   103  0000                     _PIR3bits	set	3789
   104  0000                     _SSP1DATPPS	set	3768
   105  0000                     _SSP1CON3	set	3992
   106  0000                     _SSP1CON1	set	3990
   107  0000                     _SP1BRG	set	3995
   108  0000                     _TX1REG	set	3994
   109  0000                     _RC1STA	set	3997
   110  0000                     _TX1STA	set	3998
   111  0000                     _INTCONbits	set	4082
   112  0000                     _BAUD1CONbits	set	3999
   113  0000                     _ADACQ	set	3932
   114  0000                     _ADPCH	set	3935
   115  0000                     _ADRESL	set	3939
   116  0000                     _ADRESH	set	3940
   117  0000                     _ADCON0bits	set	3936
   118                           
   119                           	psect	mediumconst
   120  007E46                     __pmediumconst:
   121                           	callstack 0
   122  007E46  00                 	db	0
   123  007E47                     STR_4:
   124                           
   125                           ; BSR set to: 14
   126  007E47  6D                 	db	109	;'m'
   127  007E48  6F                 	db	111	;'o'
   128  007E49  64                 	db	100	;'d'
   129  007E4A  65                 	db	101	;'e'
   130  007E4B  20                 	db	32
   131  007E4C  3D                 	db	61	;'='
   132  007E4D  20                 	db	32
   133  007E4E  4C                 	db	76	;'L'
   134  007E4F  6F                 	db	111	;'o'
   135  007E50  52                 	db	82	;'R'
   136  007E51  61                 	db	97	;'a'
   137  007E52  20                 	db	32
   138  007E53  77                 	db	119	;'w'
   139  007E54  69                 	db	105	;'i'
   140  007E55  74                 	db	116	;'t'
   141  007E56  68                 	db	104	;'h'
   142  007E57  20                 	db	32
   143  007E58  46                 	db	70	;'F'
   144  007E59  53                 	db	83	;'S'
   145  007E5A  4B                 	db	75	;'K'
   146  007E5B  20                 	db	32
   147  007E5C  72                 	db	114	;'r'
   148  007E5D  65                 	db	101	;'e'
   149  007E5E  67                 	db	103	;'g'
   150  007E5F  69                 	db	105	;'i'
   151  007E60  73                 	db	115	;'s'
   152  007E61  74                 	db	116	;'t'
   153  007E62  65                 	db	101	;'e'
   154  007E63  72                 	db	114	;'r'
   155  007E64  73                 	db	115	;'s'
   156  007E65  20                 	db	32
   157  007E66  61                 	db	97	;'a'
   158  007E67  63                 	db	99	;'c'
   159  007E68  63                 	db	99	;'c'
   160  007E69  65                 	db	101	;'e'
   161  007E6A  73                 	db	115	;'s'
   162  007E6B  73                 	db	115	;'s'
   163  007E6C  00                 	db	0
   164  007E6D                     STR_16:
   165                           
   166                           ; BSR set to: 14
   167  007E6D  50                 	db	80	;'P'
   168  007E6E  6F                 	db	111	;'o'
   169  007E6F  75                 	db	117	;'u'
   170  007E70  72                 	db	114	;'r'
   171  007E71  63                 	db	99	;'c'
   172  007E72  65                 	db	101	;'e'
   173  007E73  6E                 	db	110	;'n'
   174  007E74  74                 	db	116	;'t'
   175  007E75  61                 	db	97	;'a'
   176  007E76  67                 	db	103	;'g'
   177  007E77  65                 	db	101	;'e'
   178  007E78  20                 	db	32
   179  007E79  64                 	db	100	;'d'
   180  007E7A  65                 	db	101	;'e'
   181  007E7B  20                 	db	32
   182  007E7C  62                 	db	98	;'b'
   183  007E7D  61                 	db	97	;'a'
   184  007E7E  74                 	db	116	;'t'
   185  007E7F  74                 	db	116	;'t'
   186  007E80  65                 	db	101	;'e'
   187  007E81  72                 	db	114	;'r'
   188  007E82  69                 	db	105	;'i'
   189  007E83  65                 	db	101	;'e'
   190  007E84  20                 	db	32
   191  007E85  3A                 	db	58	;':'
   192  007E86  20                 	db	32
   193  007E87  00                 	db	0
   194  007E88                     STR_13:
   195                           
   196                           ; BSR set to: 14
   197  007E88  43                 	db	67	;'C'
   198  007E89  68                 	db	104	;'h'
   199  007E8A  61                 	db	97	;'a'
   200  007E8B  6E                 	db	110	;'n'
   201  007E8C  6E                 	db	110	;'n'
   202  007E8D  65                 	db	101	;'e'
   203  007E8E  6C                 	db	108	;'l'
   204  007E8F  20                 	db	32
   205  007E90  41                 	db	65	;'A'
   206  007E91  63                 	db	99	;'c'
   207  007E92  74                 	db	116	;'t'
   208  007E93  69                 	db	105	;'i'
   209  007E94  76                 	db	118	;'v'
   210  007E95  69                 	db	105	;'i'
   211  007E96  74                 	db	116	;'t'
   212  007E97  79                 	db	121	;'y'
   213  007E98  20                 	db	32
   214  007E99  44                 	db	68	;'D'
   215  007E9A  65                 	db	101	;'e'
   216  007E9B  74                 	db	116	;'t'
   217  007E9C  65                 	db	101	;'e'
   218  007E9D  63                 	db	99	;'c'
   219  007E9E  74                 	db	116	;'t'
   220  007E9F  69                 	db	105	;'i'
   221  007EA0  6F                 	db	111	;'o'
   222  007EA1  6E                 	db	110	;'n'
   223  007EA2  00                 	db	0
   224  007EA3                     STR_30:
   225                           
   226                           ; BSR set to: 14
   227  007EA3  73                 	db	115	;'s'
   228  007EA4  65                 	db	101	;'e'
   229  007EA5  74                 	db	116	;'t'
   230  007EA6  20                 	db	32
   231  007EA7  6D                 	db	109	;'m'
   232  007EA8  6F                 	db	111	;'o'
   233  007EA9  64                 	db	100	;'d'
   234  007EAA  65                 	db	101	;'e'
   235  007EAB  20                 	db	32
   236  007EAC  74                 	db	116	;'t'
   237  007EAD  6F                 	db	111	;'o'
   238  007EAE  20                 	db	32
   239  007EAF  4C                 	db	76	;'L'
   240  007EB0  6F                 	db	111	;'o'
   241  007EB1  52                 	db	82	;'R'
   242  007EB2  61                 	db	97	;'a'
   243  007EB3  20                 	db	32
   244  007EB4  73                 	db	115	;'s'
   245  007EB5  74                 	db	116	;'t'
   246  007EB6  61                 	db	97	;'a'
   247  007EB7  6E                 	db	110	;'n'
   248  007EB8  64                 	db	100	;'d'
   249  007EB9  62                 	db	98	;'b'
   250  007EBA  79                 	db	121	;'y'
   251  007EBB  00                 	db	0
   252  007EBC                     STR_22:
   253                           
   254                           ; BSR set to: 14
   255  007EBC  77                 	db	119	;'w'
   256  007EBD  61                 	db	97	;'a'
   257  007EBE  69                 	db	105	;'i'
   258  007EBF  74                 	db	116	;'t'
   259  007EC0  69                 	db	105	;'i'
   260  007EC1  6E                 	db	110	;'n'
   261  007EC2  67                 	db	103	;'g'
   262  007EC3  20                 	db	32
   263  007EC4  66                 	db	102	;'f'
   264  007EC5  6F                 	db	111	;'o'
   265  007EC6  72                 	db	114	;'r'
   266  007EC7  20                 	db	32
   267  007EC8  76                 	db	118	;'v'
   268  007EC9  61                 	db	97	;'a'
   269  007ECA  6C                 	db	108	;'l'
   270  007ECB  69                 	db	105	;'i'
   271  007ECC  64                 	db	100	;'d'
   272  007ECD  20                 	db	32
   273  007ECE  68                 	db	104	;'h'
   274  007ECF  65                 	db	101	;'e'
   275  007ED0  61                 	db	97	;'a'
   276  007ED1  64                 	db	100	;'d'
   277  007ED2  65                 	db	101	;'e'
   278  007ED3  72                 	db	114	;'r'
   279  007ED4  00                 	db	0
   280  007ED5                     STR_21:
   281                           
   282                           ; BSR set to: 14
   283  007ED5  2D                 	db	45
   284  007ED6  2D                 	db	45
   285  007ED7  2D                 	db	45
   286  007ED8  2D                 	db	45
   287  007ED9  2D                 	db	45
   288  007EDA  2D                 	db	45
   289  007EDB  2D                 	db	45
   290  007EDC  2D                 	db	45
   291  007EDD  2D                 	db	45
   292  007EDE  2D                 	db	45
   293  007EDF  2D                 	db	45
   294  007EE0  2D                 	db	45
   295  007EE1  2D                 	db	45
   296  007EE2  2D                 	db	45
   297  007EE3  2D                 	db	45
   298  007EE4  2D                 	db	45
   299  007EE5  2D                 	db	45
   300  007EE6  2D                 	db	45
   301  007EE7  2D                 	db	45
   302  007EE8  2D                 	db	45
   303  007EE9  2D                 	db	45
   304  007EEA  2D                 	db	45
   305  007EEB  2D                 	db	45
   306  007EEC  00                 	db	0
   307  007EED                     STR_11:
   308                           
   309                           ; BSR set to: 14
   310  007EED  63                 	db	99	;'c'
   311  007EEE  6F                 	db	111	;'o'
   312  007EEF  6E                 	db	110	;'n'
   313  007EF0  74                 	db	116	;'t'
   314  007EF1  69                 	db	105	;'i'
   315  007EF2  6E                 	db	110	;'n'
   316  007EF3  75                 	db	117	;'u'
   317  007EF4  6F                 	db	111	;'o'
   318  007EF5  75                 	db	117	;'u'
   319  007EF6  73                 	db	115	;'s'
   320  007EF7  20                 	db	32
   321  007EF8  72                 	db	114	;'r'
   322  007EF9  65                 	db	101	;'e'
   323  007EFA  63                 	db	99	;'c'
   324  007EFB  65                 	db	101	;'e'
   325  007EFC  69                 	db	105	;'i'
   326  007EFD  76                 	db	118	;'v'
   327  007EFE  65                 	db	101	;'e'
   328  007EFF  20                 	db	32
   329  007F00  6D                 	db	109	;'m'
   330  007F01  6F                 	db	111	;'o'
   331  007F02  64                 	db	100	;'d'
   332  007F03  65                 	db	101	;'e'
   333  007F04  00                 	db	0
   334  007F05                     STR_10:
   335                           
   336                           ; BSR set to: 14
   337  007F05  66                 	db	102	;'f'
   338  007F06  72                 	db	114	;'r'
   339  007F07  65                 	db	101	;'e'
   340  007F08  71                 	db	113	;'q'
   341  007F09  75                 	db	117	;'u'
   342  007F0A  65                 	db	101	;'e'
   343  007F0B  6E                 	db	110	;'n'
   344  007F0C  63                 	db	99	;'c'
   345  007F0D  79                 	db	121	;'y'
   346  007F0E  20                 	db	32
   347  007F0F  73                 	db	115	;'s'
   348  007F10  79                 	db	121	;'y'
   349  007F11  6E                 	db	110	;'n'
   350  007F12  74                 	db	116	;'t'
   351  007F13  68                 	db	104	;'h'
   352  007F14  65                 	db	101	;'e'
   353  007F15  73                 	db	115	;'s'
   354  007F16  69                 	db	105	;'i'
   355  007F17  73                 	db	115	;'s'
   356  007F18  20                 	db	32
   357  007F19  52                 	db	82	;'R'
   358  007F1A  58                 	db	88	;'X'
   359  007F1B  00                 	db	0
   360  007F1C                     STR_8:
   361                           
   362                           ; BSR set to: 14
   363  007F1C  66                 	db	102	;'f'
   364  007F1D  72                 	db	114	;'r'
   365  007F1E  65                 	db	101	;'e'
   366  007F1F  71                 	db	113	;'q'
   367  007F20  75                 	db	117	;'u'
   368  007F21  65                 	db	101	;'e'
   369  007F22  6E                 	db	110	;'n'
   370  007F23  63                 	db	99	;'c'
   371  007F24  79                 	db	121	;'y'
   372  007F25  20                 	db	32
   373  007F26  73                 	db	115	;'s'
   374  007F27  79                 	db	121	;'y'
   375  007F28  6E                 	db	110	;'n'
   376  007F29  74                 	db	116	;'t'
   377  007F2A  68                 	db	104	;'h'
   378  007F2B  65                 	db	101	;'e'
   379  007F2C  73                 	db	115	;'s'
   380  007F2D  69                 	db	105	;'i'
   381  007F2E  73                 	db	115	;'s'
   382  007F2F  20                 	db	32
   383  007F30  54                 	db	84	;'T'
   384  007F31  58                 	db	88	;'X'
   385  007F32  00                 	db	0
   386  007F33                     STR_23:
   387                           
   388                           ; BSR set to: 14
   389  007F33  76                 	db	118	;'v'
   390  007F34  61                 	db	97	;'a'
   391  007F35  6C                 	db	108	;'l'
   392  007F36  69                 	db	105	;'i'
   393  007F37  64                 	db	100	;'d'
   394  007F38  20                 	db	32
   395  007F39  68                 	db	104	;'h'
   396  007F3A  65                 	db	101	;'e'
   397  007F3B  61                 	db	97	;'a'
   398  007F3C  64                 	db	100	;'d'
   399  007F3D  65                 	db	101	;'e'
   400  007F3E  72                 	db	114	;'r'
   401  007F3F  20                 	db	32
   402  007F40  72                 	db	114	;'r'
   403  007F41  65                 	db	101	;'e'
   404  007F42  63                 	db	99	;'c'
   405  007F43  65                 	db	101	;'e'
   406  007F44  69                 	db	105	;'i'
   407  007F45  76                 	db	118	;'v'
   408  007F46  65                 	db	101	;'e'
   409  007F47  64                 	db	100	;'d'
   410  007F48  00                 	db	0
   411  007F49                     STR_12:
   412                           
   413                           ; BSR set to: 14
   414  007F49  73                 	db	115	;'s'
   415  007F4A  69                 	db	105	;'i'
   416  007F4B  6E                 	db	110	;'n'
   417  007F4C  67                 	db	103	;'g'
   418  007F4D  6C                 	db	108	;'l'
   419  007F4E  65                 	db	101	;'e'
   420  007F4F  20                 	db	32
   421  007F50  72                 	db	114	;'r'
   422  007F51  65                 	db	101	;'e'
   423  007F52  63                 	db	99	;'c'
   424  007F53  65                 	db	101	;'e'
   425  007F54  69                 	db	105	;'i'
   426  007F55  76                 	db	118	;'v'
   427  007F56  65                 	db	101	;'e'
   428  007F57  20                 	db	32
   429  007F58  6D                 	db	109	;'m'
   430  007F59  6F                 	db	111	;'o'
   431  007F5A  64                 	db	100	;'d'
   432  007F5B  65                 	db	101	;'e'
   433  007F5C  00                 	db	0
   434  007F5D                     STR_31:
   435                           
   436                           ; BSR set to: 14
   437  007F5D  69                 	db	105	;'i'
   438  007F5E  6E                 	db	110	;'n'
   439  007F5F  69                 	db	105	;'i'
   440  007F60  74                 	db	116	;'t'
   441  007F61  69                 	db	105	;'i'
   442  007F62  61                 	db	97	;'a'
   443  007F63  6C                 	db	108	;'l'
   444  007F64  69                 	db	105	;'i'
   445  007F65  7A                 	db	122	;'z'
   446  007F66  65                 	db	101	;'e'
   447  007F67  20                 	db	32
   448  007F68  6D                 	db	109	;'m'
   449  007F69  6F                 	db	111	;'o'
   450  007F6A  64                 	db	100	;'d'
   451  007F6B  75                 	db	117	;'u'
   452  007F6C  6C                 	db	108	;'l'
   453  007F6D  65                 	db	101	;'e'
   454  007F6E  00                 	db	0
   455  007F6F                     STR_18:
   456                           
   457                           ; BSR set to: 14
   458  007F6F  4D                 	db	77	;'M'
   459  007F70  65                 	db	101	;'e'
   460  007F71  73                 	db	115	;'s'
   461  007F72  73                 	db	115	;'s'
   462  007F73  61                 	db	97	;'a'
   463  007F74  67                 	db	103	;'g'
   464  007F75  65                 	db	101	;'e'
   465  007F76  20                 	db	32
   466  007F77  65                 	db	101	;'e'
   467  007F78  6E                 	db	110	;'n'
   468  007F79  76                 	db	118	;'v'
   469  007F7A  6F                 	db	111	;'o'
   470  007F7B  79                 	db	121	;'y'
   471  007F7C  65                 	db	101	;'e'
   472  007F7D  20                 	db	32
   473  007F7E  3A                 	db	58	;':'
   474  007F7F  20                 	db	32
   475  007F80  00                 	db	0
   476  007F81                     STR_25:
   477                           
   478                           ; BSR set to: 14
   479  007F81  70                 	db	112	;'p'
   480  007F82  61                 	db	97	;'a'
   481  007F83  79                 	db	121	;'y'
   482  007F84  6C                 	db	108	;'l'
   483  007F85  6F                 	db	111	;'o'
   484  007F86  61                 	db	97	;'a'
   485  007F87  64                 	db	100	;'d'
   486  007F88  20                 	db	32
   487  007F89  43                 	db	67	;'C'
   488  007F8A  52                 	db	82	;'R'
   489  007F8B  43                 	db	67	;'C'
   490  007F8C  20                 	db	32
   491  007F8D  65                 	db	101	;'e'
   492  007F8E  72                 	db	114	;'r'
   493  007F8F  72                 	db	114	;'r'
   494  007F90  6F                 	db	111	;'o'
   495  007F91  72                 	db	114	;'r'
   496  007F92  00                 	db	0
   497  007F93                     STR_14:
   498                           
   499                           ; BSR set to: 14
   500  007F93  30                 	db	48	;'0'
   501  007F94  31                 	db	49	;'1'
   502  007F95  32                 	db	50	;'2'
   503  007F96  33                 	db	51	;'3'
   504  007F97  34                 	db	52	;'4'
   505  007F98  35                 	db	53	;'5'
   506  007F99  36                 	db	54	;'6'
   507  007F9A  37                 	db	55	;'7'
   508  007F9B  38                 	db	56	;'8'
   509  007F9C  39                 	db	57	;'9'
   510  007F9D  41                 	db	65	;'A'
   511  007F9E  42                 	db	66	;'B'
   512  007F9F  43                 	db	67	;'C'
   513  007FA0  44                 	db	68	;'D'
   514  007FA1  45                 	db	69	;'E'
   515  007FA2  46                 	db	70	;'F'
   516  007FA3  00                 	db	0
   517  007FA4                     STR_1:
   518                           
   519                           ; BSR set to: 14
   520  007FA4  52                 	db	82	;'R'
   521  007FA5  45                 	db	69	;'E'
   522  007FA6  47                 	db	71	;'G'
   523  007FA7  5F                 	db	95	;'_'
   524  007FA8  4F                 	db	79	;'O'
   525  007FA9  50                 	db	80	;'P'
   526  007FAA  5F                 	db	95	;'_'
   527  007FAB  4D                 	db	77	;'M'
   528  007FAC  4F                 	db	79	;'O'
   529  007FAD  44                 	db	68	;'D'
   530  007FAE  45                 	db	69	;'E'
   531  007FAF  20                 	db	32
   532  007FB0  3D                 	db	61	;'='
   533  007FB1  20                 	db	32
   534  007FB2  30                 	db	48	;'0'
   535  007FB3  78                 	db	120	;'x'
   536  007FB4  00                 	db	0
   537  007FB5                     STR_26:
   538                           
   539                           ; BSR set to: 14
   540  007FB5  72                 	db	114	;'r'
   541  007FB6  65                 	db	101	;'e'
   542  007FB7  63                 	db	99	;'c'
   543  007FB8  65                 	db	101	;'e'
   544  007FB9  69                 	db	105	;'i'
   545  007FBA  76                 	db	118	;'v'
   546  007FBB  65                 	db	101	;'e'
   547  007FBC  64                 	db	100	;'d'
   548  007FBD  20                 	db	32
   549  007FBE  64                 	db	100	;'d'
   550  007FBF  61                 	db	97	;'a'
   551  007FC0  74                 	db	116	;'t'
   552  007FC1  61                 	db	97	;'a'
   553  007FC2  3A                 	db	58	;':'
   554  007FC3  20                 	db	32
   555  007FC4  00                 	db	0
   556  007FC5                     STR_7:
   557                           
   558                           ; BSR set to: 14
   559  007FC5  73                 	db	115	;'s'
   560  007FC6  74                 	db	116	;'t'
   561  007FC7  61                 	db	97	;'a'
   562  007FC8  6E                 	db	110	;'n'
   563  007FC9  64                 	db	100	;'d'
   564  007FCA  62                 	db	98	;'b'
   565  007FCB  79                 	db	121	;'y'
   566  007FCC  20                 	db	32
   567  007FCD  6D                 	db	109	;'m'
   568  007FCE  6F                 	db	111	;'o'
   569  007FCF  64                 	db	100	;'d'
   570  007FD0  65                 	db	101	;'e'
   571  007FD1  00                 	db	0
   572  007FD2                     STR_3:
   573                           
   574                           ; BSR set to: 14
   575  007FD2  6D                 	db	109	;'m'
   576  007FD3  6F                 	db	111	;'o'
   577  007FD4  64                 	db	100	;'d'
   578  007FD5  65                 	db	101	;'e'
   579  007FD6  20                 	db	32
   580  007FD7  3D                 	db	61	;'='
   581  007FD8  20                 	db	32
   582  007FD9  4C                 	db	76	;'L'
   583  007FDA  6F                 	db	111	;'o'
   584  007FDB  52                 	db	82	;'R'
   585  007FDC  61                 	db	97	;'a'
   586  007FDD  00                 	db	0
   587  007FDE                     STR_5:
   588                           
   589                           ; BSR set to: 14
   590  007FDE  6D                 	db	109	;'m'
   591  007FDF  6F                 	db	111	;'o'
   592  007FE0  64                 	db	100	;'d'
   593  007FE1  65                 	db	101	;'e'
   594  007FE2  20                 	db	32
   595  007FE3  3D                 	db	61	;'='
   596  007FE4  20                 	db	32
   597  007FE5  46                 	db	70	;'F'
   598  007FE6  53                 	db	83	;'S'
   599  007FE7  4B                 	db	75	;'K'
   600  007FE8  00                 	db	0
   601  007FE9                     STR_6:
   602                           
   603                           ; BSR set to: 14
   604  007FE9  73                 	db	115	;'s'
   605  007FEA  6C                 	db	108	;'l'
   606  007FEB  65                 	db	101	;'e'
   607  007FEC  65                 	db	101	;'e'
   608  007FED  70                 	db	112	;'p'
   609  007FEE  20                 	db	32
   610  007FEF  6D                 	db	109	;'m'
   611  007FF0  6F                 	db	111	;'o'
   612  007FF1  64                 	db	100	;'d'
   613  007FF2  65                 	db	101	;'e'
   614  007FF3  00                 	db	0
   615  007FF4                     STR_9:
   616                           
   617                           ; BSR set to: 14
   618  007FF4  54                 	db	84	;'T'
   619  007FF5  58                 	db	88	;'X'
   620  007FF6  20                 	db	32
   621  007FF7  6D                 	db	109	;'m'
   622  007FF8  6F                 	db	111	;'o'
   623  007FF9  64                 	db	100	;'d'
   624  007FFA  65                 	db	101	;'e'
   625  007FFB  00                 	db	0
   626  007FFC                     
   627                           ; BSR set to: 14
   628  007FFC  25                 	db	37
   629  007FFD  00                 	db	0
   630  007FFE  00                 	db	0	; dummy byte at the end
   631  0000                     
   632                           ; #config settings
   633                           
   634                           	psect	cinit
   635  0074EC                     __pcinit:
   636                           	callstack 0
   637  0074EC                     start_initialization:
   638                           	callstack 0
   639  0074EC                     __initialization:
   640                           	callstack 0
   641                           
   642                           ; Initialize objects allocated to COMRAM (9 bytes)
   643                           ; load TBLPTR registers with __pidataCOMRAM
   644  0074EC  0EE1               	movlw	low __pidataCOMRAM
   645  0074EE  6EF6               	movwf	tblptrl,c
   646  0074F0  0E73               	movlw	high __pidataCOMRAM
   647  0074F2  6EF7               	movwf	tblptrh,c
   648  0074F4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   649  0074F6  6EF8               	movwf	tblptru,c
   650  0074F8  EE00  F043         	lfsr	0,__pdataCOMRAM
   651  0074FC  EE10 F009          	lfsr	1,9
   652  007500                     copy_data0:
   653  007500  0009               	tblrd		*+
   654  007502  CFF5 FFEE          	movff	tablat,postinc0
   655  007506  50E5               	movf	postdec1,w,c
   656  007508  50E1               	movf	fsr1l,w,c
   657  00750A  E1FA               	bnz	copy_data0
   658  00750C                     end_of_initialization:
   659                           	callstack 0
   660  00750C                     __end_of__initialization:
   661                           	callstack 0
   662  00750C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   663  00750E  6EF8               	movwf	tblptru,c
   664  007510  0100               	movlb	0
   665  007512  EF18  F03E         	goto	_main	;jump to C main() function
   666                           
   667                           	psect	dataCOMRAM
   668  000043                     __pdataCOMRAM:
   669                           	callstack 0
   670  000043                     main@F9592:
   671                           	callstack 0
   672  000043                     	ds	9
   673                           
   674                           	psect	cstackCOMRAM
   675  000001                     __pcstackCOMRAM:
   676                           	callstack 0
   677  000001                     ??_ResetRFModule:
   678  000001                     ??_AntennaTX:
   679  000001                     ??_AntennaRX:
   680  000001                     SPITransfer@data_out:
   681                           	callstack 0
   682  000001                     SPIReceive@data_out:
   683                           	callstack 0
   684  000001                     UARTWriteByte@data:
   685                           	callstack 0
   686  000001                     UARTInit@baudRate:
   687                           	callstack 0
   688                           
   689                           ; 2 bytes @ 0x0
   690  000001                     	ds	1
   691  000002                     SPIReceive@data_in:
   692                           	callstack 0
   693  000002                     UARTWriteStr@string:
   694                           	callstack 0
   695  000002                     UARTWriteStrLn@string:
   696                           	callstack 0
   697  000002                     UARTWriteByteHex@data:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0x1
   701  000002                     	ds	1
   702  000003                     ReadSXRegister@RegValue:
   703                           	callstack 0
   704                           
   705                           ; 1 bytes @ 0x2
   706  000003                     	ds	1
   707  000004                     ??_UARTWriteStr:
   708  000004                     ??_UARTWriteByteHex:
   709  000004                     ??_UARTWriteStrLn:
   710  000004                     ReadSXRegister@address:
   711                           	callstack 0
   712                           
   713                           ; 1 bytes @ 0x3
   714  000004                     	ds	1
   715  000005                     WriteSXRegister@data:
   716                           	callstack 0
   717                           
   718                           ; 1 bytes @ 0x4
   719  000005                     	ds	1
   720  000006                     WriteSXRegister@address:
   721                           	callstack 0
   722  000006                     UARTWriteStr@i:
   723                           	callstack 0
   724  000006                     UARTWriteStrLn@i:
   725                           	callstack 0
   726                           
   727                           ; 1 bytes @ 0x5
   728  000006                     	ds	1
   729  000007                     
   730                           ; 1 bytes @ 0x6
   731  000007                     	ds	2
   732  000009                     UARTWriteByteHex@hexa:
   733                           	callstack 0
   734                           
   735                           ; 2 bytes @ 0x8
   736  000009                     	ds	2
   737  00000B                     ??_GetMode:
   738  00000B                     Transmit@data:
   739                           	callstack 0
   740  00000B                     Receive@data:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0xA
   744  00000B                     	ds	2
   745  00000D                     ??_Receive:
   746  00000D                     GetMode@masked_reg:
   747                           	callstack 0
   748  00000D                     Transmit@data_long:
   749                           	callstack 0
   750                           
   751                           ; 1 bytes @ 0xC
   752  00000D                     	ds	1
   753  00000E                     ??_Transmit:
   754  00000E                     GetMode@reg:
   755                           	callstack 0
   756  00000E                     Receive@RXNumberOfBytes:
   757                           	callstack 0
   758                           
   759                           ; 1 bytes @ 0xD
   760  00000E                     	ds	1
   761  00000F                     Transmit@reg_val:
   762                           	callstack 0
   763  00000F                     Receive@i:
   764                           	callstack 0
   765                           
   766                           ; 1 bytes @ 0xE
   767  00000F                     	ds	1
   768  000010                     Transmit@i:
   769                           	callstack 0
   770  000010                     Receive@reg_val:
   771                           	callstack 0
   772                           
   773                           ; 1 bytes @ 0xF
   774  000010                     	ds	1
   775  000011                     main@argc:
   776                           	callstack 0
   777                           
   778                           ; 2 bytes @ 0x10
   779  000011                     	ds	2
   780  000013                     
   781                           ; 3 bytes @ 0x12
   782  000013                     	ds	3
   783  000016                     ??_main:
   784                           
   785                           ; 1 bytes @ 0x15
   786  000016                     	ds	3
   787  000019                     main@rxMsg:
   788                           	callstack 0
   789                           
   790                           ; 30 bytes @ 0x18
   791  000019                     	ds	30
   792  000037                     main@txMsg:
   793                           	callstack 0
   794                           
   795                           ; 9 bytes @ 0x36
   796  000037                     	ds	9
   797  000040                     main@RXNumberOfBytes:
   798                           	callstack 0
   799                           
   800                           ; 1 bytes @ 0x3F
   801  000040                     	ds	1
   802  000041                     main@i:
   803                           	callstack 0
   804                           
   805                           ; 1 bytes @ 0x40
   806  000041                     	ds	1
   807  000042                     main@i_1047:
   808                           	callstack 0
   809                           
   810                           ; 1 bytes @ 0x41
   811  000042                     	ds	1
   812                           
   813 ;;
   814 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   815 ;;
   816 ;; *************** function _main *****************
   817 ;; Defined at:
   818 ;;		line 105 in file "main.c"
   819 ;; Parameters:    Size  Location     Type
   820 ;;  argc            2   16[COMRAM] int 
   821 ;;  argv            3   18[COMRAM] PTR PTR unsigned char 
   822 ;; Auto vars:     Size  Location     Type
   823 ;;  i               1   65[COMRAM] unsigned char 
   824 ;;  i               1   64[COMRAM] unsigned char 
   825 ;;  rxMsg          30   24[COMRAM] unsigned char [30]
   826 ;;  txMsg           9   54[COMRAM] unsigned char [9]
   827 ;;  RXNumberOfBy    1   63[COMRAM] unsigned char 
   828 ;; Return value:  Size  Location     Type
   829 ;;                  2   16[COMRAM] int 
   830 ;; Registers used:
   831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   837 ;;      Params:         5       0       0       0       0       0       0       0       0
   838 ;;      Locals:        42       0       0       0       0       0       0       0       0
   839 ;;      Temps:          3       0       0       0       0       0       0       0       0
   840 ;;      Totals:        50       0       0       0       0       0       0       0       0
   841 ;;Total ram usage:       50 bytes
   842 ;; Hardware stack levels required when called: 3
   843 ;; This function calls:
   844 ;;		_GetMode
   845 ;;		_InitModule
   846 ;;		_InitRFLoRaPins
   847 ;;		_ReadSXRegister
   848 ;;		_Receive
   849 ;;		_ResetRFModule
   850 ;;		_SPIInit
   851 ;;		_Transmit
   852 ;;		_UARTInit
   853 ;;		_UARTWriteStrLn
   854 ;;		_WriteSXRegister
   855 ;;		_initVoltmeter
   856 ;; This function is called by:
   857 ;;		Startup code after reset
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861                           	psect	text0
   862  007C30                     __ptext0:
   863                           	callstack 0
   864  007C30                     _main:
   865                           	callstack 28
   866  007C30                     
   867                           ;main.c: 107:     _delay((unsigned long)((2500)*(1000000UL/4000.0)));
   868  007C30  0E04               	movlw	4
   869  007C32  6E17               	movwf	(??_main+1)^0,c
   870  007C34  0E2C               	movlw	44
   871  007C36  6E16               	movwf	??_main^0,c
   872  007C38  0EAC               	movlw	172
   873  007C3A                     u607:
   874  007C3A  2EE8               	decfsz	wreg,f,c
   875  007C3C  D7FE               	bra	u607
   876  007C3E  2E16               	decfsz	??_main^0,f,c
   877  007C40  D7FC               	bra	u607
   878  007C42  2E17               	decfsz	(??_main+1)^0,f,c
   879  007C44  D7FA               	bra	u607
   880  007C46                     
   881                           ;main.c: 108:     SPIInit();
   882  007C46  EC8B  F03A         	call	_SPIInit	;wreg free
   883  007C4A                     
   884                           ;main.c: 109:     initVoltmeter();
   885  007C4A  EC1C  F03A         	call	_initVoltmeter	;wreg free
   886  007C4E                     
   887                           ;main.c: 110:     InitRFLoRaPins();
   888  007C4E  ECF5  F039         	call	_InitRFLoRaPins	;wreg free
   889                           
   890                           ;main.c: 111:     ResetRFModule();
   891  007C52  EC62  F03A         	call	_ResetRFModule	;wreg free
   892  007C56                     
   893                           ;main.c: 112:     UARTInit(19200);
   894  007C56  0E4B               	movlw	75
   895  007C58  6E02               	movwf	(UARTInit@baudRate+1)^0,c
   896  007C5A  0E00               	movlw	0
   897  007C5C  6E01               	movwf	UARTInit@baudRate^0,c
   898  007C5E  ECA7  F03A         	call	_UARTInit	;wreg free
   899  007C62                     
   900                           ;main.c: 114:     _delay((unsigned long)((1)*(1000000UL/4000.0)));
   901  007C62  0E53               	movlw	83
   902  007C64                     u617:
   903  007C64  2EE8               	decfsz	wreg,f,c
   904  007C66  D7FE               	bra	u617
   905  007C68  F000               	nop	
   906  007C6A                     
   907                           ;main.c: 115:     _delay((unsigned long)((1)*(1000000UL/4000.0)));
   908  007C6A  0E53               	movlw	83
   909  007C6C                     u627:
   910  007C6C  2EE8               	decfsz	wreg,f,c
   911  007C6E  D7FE               	bra	u627
   912  007C70  F000               	nop	
   913  007C72                     
   914                           ;main.c: 116:     _delay((unsigned long)((500)*(1000000UL/4000.0)));
   915  007C72  0EA3               	movlw	163
   916  007C74  6E16               	movwf	??_main^0,c
   917  007C76  0E55               	movlw	85
   918  007C78                     u637:
   919  007C78  2EE8               	decfsz	wreg,f,c
   920  007C7A  D7FE               	bra	u637
   921  007C7C  2E16               	decfsz	??_main^0,f,c
   922  007C7E  D7FC               	bra	u637
   923  007C80  F000               	nop	
   924  007C82                     
   925                           ;main.c: 119:     UARTWriteStrLn(" ");
   926  007C82  0E86               	movlw	low (STR_16+25)
   927  007C84  6E02               	movwf	UARTWriteStrLn@string^0,c
   928  007C86  0E7E               	movlw	high (STR_16+25)
   929  007C88  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
   930  007C8A  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
   931  007C8E                     
   932                           ;main.c: 120:     UARTWriteStrLn("set mode to LoRa standby");
   933  007C8E  0EA3               	movlw	low STR_30
   934  007C90  6E02               	movwf	UARTWriteStrLn@string^0,c
   935  007C92  0E7E               	movlw	high STR_30
   936  007C94  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
   937  007C96  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
   938  007C9A                     
   939                           ;main.c: 122:     WriteSXRegister(0x01, 0x00);
   940  007C9A  0E00               	movlw	0
   941  007C9C  6E05               	movwf	WriteSXRegister@data^0,c
   942  007C9E  0E01               	movlw	1
   943  007CA0  EC27  F03A         	call	_WriteSXRegister
   944  007CA4                     
   945                           ;main.c: 123:     WriteSXRegister(0x01, 0x80);
   946  007CA4  0E80               	movlw	128
   947  007CA6  6E05               	movwf	WriteSXRegister@data^0,c
   948  007CA8  0E01               	movlw	1
   949  007CAA  EC27  F03A         	call	_WriteSXRegister
   950  007CAE                     
   951                           ;main.c: 124:     WriteSXRegister(0x01, 0x81);
   952  007CAE  0E81               	movlw	129
   953  007CB0  6E05               	movwf	WriteSXRegister@data^0,c
   954  007CB2  0E01               	movlw	1
   955  007CB4  EC27  F03A         	call	_WriteSXRegister
   956  007CB8                     
   957                           ;main.c: 125:     _delay((unsigned long)((100)*(1000000UL/4000.0)));
   958  007CB8  0E21               	movlw	33
   959  007CBA  6E16               	movwf	??_main^0,c
   960  007CBC  0E76               	movlw	118
   961  007CBE                     u647:
   962  007CBE  2EE8               	decfsz	wreg,f,c
   963  007CC0  D7FE               	bra	u647
   964  007CC2  2E16               	decfsz	??_main^0,f,c
   965  007CC4  D7FC               	bra	u647
   966  007CC6  D000               	nop2	
   967  007CC8                     
   968                           ;main.c: 126:     GetMode();
   969  007CC8  ECAA  F03C         	call	_GetMode	;wreg free
   970  007CCC                     
   971                           ;main.c: 129:     UARTWriteStrLn("initialize module");
   972  007CCC  0E5D               	movlw	low STR_31
   973  007CCE  6E02               	movwf	UARTWriteStrLn@string^0,c
   974  007CD0  0E7F               	movlw	high STR_31
   975  007CD2  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
   976  007CD4  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
   977  007CD8                     
   978                           ;main.c: 130:     InitModule();
   979  007CD8  ECA9  F03B         	call	_InitModule	;wreg free
   980  007CDC                     
   981                           ;main.c: 142:     uint8_t RXNumberOfBytes;;main.c: 143:     uint8_t rxMsg[30];;main.c: 1
      +                          44:     uint8_t txMsg[] = { 0xAD, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
   982  007CDC  EE20  F043         	lfsr	2,main@F9592
   983  007CE0  EE10  F037         	lfsr	1,main@txMsg
   984  007CE4  0E08               	movlw	8
   985  007CE6                     u531:
   986  007CE6  CFDB FFE3          	movff	plusw2,plusw1
   987  007CEA  06E8               	decf	wreg,f,c
   988  007CEC  E2FC               	bc	u531
   989  007CEE                     
   990                           ;main.c: 146:     if (ReadSXRegister(0x42) != 0x22) {
   991  007CEE  0E42               	movlw	66
   992  007CF0  EC42  F03A         	call	_ReadSXRegister
   993  007CF4  0A22               	xorlw	34
   994  007CF6  B4D8               	btfsc	status,2,c
   995  007CF8  EF80  F03E         	goto	u541
   996  007CFC  EF82  F03E         	goto	u540
   997  007D00                     u541:
   998  007D00  EF88  F03E         	goto	l1792
   999  007D04                     u540:
  1000  007D04                     
  1001                           ;main.c: 147:          UARTWriteStrLn("initialize module");
  1002  007D04  0E5D               	movlw	low STR_31
  1003  007D06  6E02               	movwf	UARTWriteStrLn@string^0,c
  1004  007D08  0E7F               	movlw	high STR_31
  1005  007D0A  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1006  007D0C  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  1007  007D10                     l1792:
  1008                           
  1009                           ;main.c: 152:         Receive(rxMsg);
  1010  007D10  0E19               	movlw	low main@rxMsg
  1011  007D12  6E0B               	movwf	Receive@data^0,c
  1012  007D14  0E00               	movlw	high main@rxMsg
  1013  007D16  6E0C               	movwf	(Receive@data+1)^0,c
  1014  007D18  EC5E  F03D         	call	_Receive	;wreg free
  1015  007D1C                     
  1016                           ;main.c: 154:         RXNumberOfBytes = ReadSXRegister(0x13);
  1017  007D1C  0E13               	movlw	19
  1018  007D1E  EC42  F03A         	call	_ReadSXRegister
  1019  007D22  6E40               	movwf	main@RXNumberOfBytes^0,c
  1020  007D24                     
  1021                           ;main.c: 156:         txMsg[0] = 0x4E;
  1022  007D24  0E4E               	movlw	78
  1023  007D26  6E37               	movwf	main@txMsg^0,c
  1024  007D28                     
  1025                           ;main.c: 157:         txMsg[1] = 0xAD;
  1026  007D28  0EAD               	movlw	173
  1027  007D2A  6E38               	movwf	(main@txMsg+1)^0,c
  1028  007D2C                     
  1029                           ;main.c: 158:         txMsg[2] = 0x01;
  1030  007D2C  0E01               	movlw	1
  1031  007D2E  6E39               	movwf	(main@txMsg+2)^0,c
  1032  007D30                     
  1033                           ;main.c: 159:         txMsg[3] = 0x02;
  1034  007D30  0E02               	movlw	2
  1035  007D32  6E3A               	movwf	(main@txMsg+3)^0,c
  1036  007D34                     
  1037                           ;main.c: 160:         txMsg[4] = 0x01;
  1038  007D34  0E01               	movlw	1
  1039  007D36  6E3B               	movwf	(main@txMsg+4)^0,c
  1040  007D38                     
  1041                           ;main.c: 161:         txMsg[5] = 0x01;
  1042  007D38  0E01               	movlw	1
  1043  007D3A  6E3C               	movwf	(main@txMsg+5)^0,c
  1044  007D3C                     
  1045                           ;main.c: 162:         Transmit(txMsg,6);
  1046  007D3C  0E37               	movlw	low main@txMsg
  1047  007D3E  6E0B               	movwf	Transmit@data^0,c
  1048  007D40  0E00               	movlw	high main@txMsg
  1049  007D42  6E0C               	movwf	(Transmit@data+1)^0,c
  1050  007D44  0E06               	movlw	6
  1051  007D46  6E0D               	movwf	Transmit@data_long^0,c
  1052  007D48  EC22  F03C         	call	_Transmit	;wreg free
  1053  007D4C                     
  1054                           ;main.c: 163:         if(rxMsg[0] == 0x4E){
  1055  007D4C  0E4E               	movlw	78
  1056  007D4E  1819               	xorwf	main@rxMsg^0,w,c
  1057  007D50  A4D8               	btfss	status,2,c
  1058  007D52  EFAD  F03E         	goto	u551
  1059  007D56  EFAF  F03E         	goto	u550
  1060  007D5A                     u551:
  1061  007D5A  EFB5  F03E         	goto	l1814
  1062  007D5E                     u550:
  1063  007D5E                     
  1064                           ;main.c: 164:            UARTWriteStrLn("initialize module");
  1065  007D5E  0E5D               	movlw	low STR_31
  1066  007D60  6E02               	movwf	UARTWriteStrLn@string^0,c
  1067  007D62  0E7F               	movlw	high STR_31
  1068  007D64  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1069  007D66  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  1070  007D6A                     l1814:
  1071                           
  1072                           ;main.c: 166:         if(rxMsg[2] == 0x02 && rxMsg[4] == 0x02){
  1073  007D6A  0E02               	movlw	2
  1074  007D6C  181B               	xorwf	(main@rxMsg+2)^0,w,c
  1075  007D6E  A4D8               	btfss	status,2,c
  1076  007D70  EFBC  F03E         	goto	u561
  1077  007D74  EFBE  F03E         	goto	u560
  1078  007D78                     u561:
  1079  007D78  EFF8  F03E         	goto	l1828
  1080  007D7C                     u560:
  1081  007D7C  0E02               	movlw	2
  1082  007D7E  181D               	xorwf	(main@rxMsg+4)^0,w,c
  1083  007D80  A4D8               	btfss	status,2,c
  1084  007D82  EFC5  F03E         	goto	u571
  1085  007D86  EFC7  F03E         	goto	u570
  1086  007D8A                     u571:
  1087  007D8A  EFF8  F03E         	goto	l1828
  1088  007D8E                     u570:
  1089  007D8E                     
  1090                           ;main.c: 167:             for (uint8_t i = 0; i < argc; i++) {
  1091  007D8E  0E00               	movlw	0
  1092  007D90  6E41               	movwf	main@i^0,c
  1093  007D92  EFDA  F03E         	goto	l1824
  1094  007D96                     l1820:
  1095                           
  1096                           ;main.c: 168:                 txMsg[i] = rxMsg[i];
  1097  007D96  0E19               	movlw	low main@rxMsg
  1098  007D98  2441               	addwf	main@i^0,w,c
  1099  007D9A  6ED9               	movwf	fsr2l,c
  1100  007D9C  6ADA               	clrf	fsr2h,c
  1101  007D9E  0E00               	movlw	high main@rxMsg
  1102  007DA0  22DA               	addwfc	fsr2h,f,c
  1103  007DA2  0E37               	movlw	low main@txMsg
  1104  007DA4  2441               	addwf	main@i^0,w,c
  1105  007DA6  6EE1               	movwf	fsr1l,c
  1106  007DA8  6AE2               	clrf	fsr1h,c
  1107  007DAA  0E00               	movlw	high main@txMsg
  1108  007DAC  22E2               	addwfc	fsr1h,f,c
  1109  007DAE  CFDF FFE7          	movff	indf2,indf1
  1110  007DB2                     
  1111                           ;main.c: 169:             }
  1112  007DB2  2A41               	incf	main@i^0,f,c
  1113  007DB4                     l1824:
  1114  007DB4  5041               	movf	main@i^0,w,c
  1115  007DB6  6E16               	movwf	??_main^0,c
  1116  007DB8  6A17               	clrf	(??_main+1)^0,c
  1117  007DBA  5011               	movf	main@argc^0,w,c
  1118  007DBC  5C16               	subwf	??_main^0,w,c
  1119  007DBE  5017               	movf	(??_main+1)^0,w,c
  1120  007DC0  0A80               	xorlw	128
  1121  007DC2  6E18               	movwf	(??_main+2)^0,c
  1122  007DC4  5012               	movf	(main@argc+1)^0,w,c
  1123  007DC6  0A80               	xorlw	128
  1124  007DC8  5818               	subwfb	(??_main+2)^0,w,c
  1125  007DCA  A0D8               	btfss	status,0,c
  1126  007DCC  EFEA  F03E         	goto	u581
  1127  007DD0  EFEC  F03E         	goto	u580
  1128  007DD4                     u581:
  1129  007DD4  EFCB  F03E         	goto	l1820
  1130  007DD8                     u580:
  1131  007DD8                     
  1132                           ;main.c: 170:             txMsg[2] = rxMsg[3];
  1133  007DD8  C01C  F039         	movff	main@rxMsg+3,main@txMsg+2
  1134  007DDC                     l1826:
  1135                           
  1136                           ;main.c: 171:             Transmit(txMsg, RXNumberOfBytes);
  1137  007DDC  0E37               	movlw	low main@txMsg
  1138  007DDE  6E0B               	movwf	Transmit@data^0,c
  1139  007DE0  0E00               	movlw	high main@txMsg
  1140  007DE2  6E0C               	movwf	(Transmit@data+1)^0,c
  1141  007DE4  C040  F00D         	movff	main@RXNumberOfBytes,Transmit@data_long
  1142  007DE8  EC22  F03C         	call	_Transmit	;wreg free
  1143                           
  1144                           ;main.c: 172:         }
  1145  007DEC  EF88  F03E         	goto	l1792
  1146  007DF0                     l1828:
  1147                           
  1148                           ;main.c: 175:             for (uint8_t i = 0; i < argc; i++) {
  1149  007DF0  0E00               	movlw	0
  1150  007DF2  6E42               	movwf	main@i_1047^0,c
  1151  007DF4  EF0B  F03F         	goto	l1834
  1152  007DF8                     l1830:
  1153                           
  1154                           ;main.c: 176:                 txMsg[i] = rxMsg[i];
  1155  007DF8  0E19               	movlw	low main@rxMsg
  1156  007DFA  2442               	addwf	main@i_1047^0,w,c
  1157  007DFC  6ED9               	movwf	fsr2l,c
  1158  007DFE  6ADA               	clrf	fsr2h,c
  1159  007E00  0E00               	movlw	high main@rxMsg
  1160  007E02  22DA               	addwfc	fsr2h,f,c
  1161  007E04  0E37               	movlw	low main@txMsg
  1162  007E06  2442               	addwf	main@i_1047^0,w,c
  1163  007E08  6EE1               	movwf	fsr1l,c
  1164  007E0A  6AE2               	clrf	fsr1h,c
  1165  007E0C  0E00               	movlw	high main@txMsg
  1166  007E0E  22E2               	addwfc	fsr1h,f,c
  1167  007E10  CFDF FFE7          	movff	indf2,indf1
  1168  007E14                     
  1169                           ;main.c: 177:             }
  1170  007E14  2A42               	incf	main@i_1047^0,f,c
  1171  007E16                     l1834:
  1172  007E16  5042               	movf	main@i_1047^0,w,c
  1173  007E18  6E16               	movwf	??_main^0,c
  1174  007E1A  6A17               	clrf	(??_main+1)^0,c
  1175  007E1C  5011               	movf	main@argc^0,w,c
  1176  007E1E  5C16               	subwf	??_main^0,w,c
  1177  007E20  5017               	movf	(??_main+1)^0,w,c
  1178  007E22  0A80               	xorlw	128
  1179  007E24  6E18               	movwf	(??_main+2)^0,c
  1180  007E26  5012               	movf	(main@argc+1)^0,w,c
  1181  007E28  0A80               	xorlw	128
  1182  007E2A  5818               	subwfb	(??_main+2)^0,w,c
  1183  007E2C  A0D8               	btfss	status,0,c
  1184  007E2E  EF1B  F03F         	goto	u591
  1185  007E32  EF1D  F03F         	goto	u590
  1186  007E36                     u591:
  1187  007E36  EFFC  F03E         	goto	l1830
  1188  007E3A                     u590:
  1189  007E3A                     
  1190                           ;main.c: 178:              txMsg[4] = 0x04;
  1191  007E3A  0E04               	movlw	4
  1192  007E3C  6E3B               	movwf	(main@txMsg+4)^0,c
  1193  007E3E  EFEE  F03E         	goto	l1826
  1194  007E42  EF00  F000         	goto	start
  1195  007E46                     __end_of_main:
  1196                           	callstack 0
  1197                           
  1198 ;; *************** function _initVoltmeter *****************
  1199 ;; Defined at:
  1200 ;;		line 15 in file "voltmeter.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;		None
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;		None
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  1    wreg      void 
  1207 ;; Registers used:
  1208 ;;		wreg, status,2
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1214 ;;      Params:         0       0       0       0       0       0       0       0       0
  1215 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1216 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1217 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1218 ;;Total ram usage:        0 bytes
  1219 ;; Hardware stack levels used: 1
  1220 ;; This function calls:
  1221 ;;		Nothing
  1222 ;; This function is called by:
  1223 ;;		_main
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           	psect	text1
  1228  007438                     __ptext1:
  1229                           	callstack 0
  1230  007438                     _initVoltmeter:
  1231                           	callstack 30
  1232  007438                     
  1233                           ;voltmeter.c: 36:     ADCLK = 0b00011111;
  1234  007438  0E1F               	movlw	31
  1235  00743A  010F               	movlb	15	; () banked
  1236  00743C  6F57               	movwf	87,b	;volatile
  1237                           
  1238                           ;voltmeter.c: 37:     ADPCH = 0b00000011;
  1239  00743E  0E03               	movlw	3
  1240  007440  6F5F               	movwf	95,b	;volatile
  1241                           
  1242                           ;voltmeter.c: 38:     ADACQ = 0x014;
  1243  007442  0E14               	movlw	20
  1244  007444  6F5C               	movwf	92,b	;volatile
  1245  007446                     
  1246                           ; BSR set to: 15
  1247                           ;voltmeter.c: 39:     ADCON0bits.ADON = 1;
  1248  007446  8E60               	bsf	96,7,c	;volatile
  1249  007448                     
  1250                           ; BSR set to: 15
  1251                           ;voltmeter.c: 41:     TRISAbits.TRISA3 = 1;
  1252  007448  8688               	bsf	136,3,c	;volatile
  1253  00744A                     
  1254                           ; BSR set to: 15
  1255                           ;voltmeter.c: 42:     ANSELAbits.ANSELA3 = 1;
  1256  00744A  8711               	bsf	17,3,b	;volatile
  1257  00744C                     
  1258                           ; BSR set to: 15
  1259  00744C  0012               	return		;funcret
  1260  00744E                     __end_of_initVoltmeter:
  1261                           	callstack 0
  1262                           
  1263 ;; *************** function _UARTInit *****************
  1264 ;; Defined at:
  1265 ;;		line 16 in file "uart.c"
  1266 ;; Parameters:    Size  Location     Type
  1267 ;;  baudRate        2    0[COMRAM] unsigned short 
  1268 ;; Auto vars:     Size  Location     Type
  1269 ;;		None
  1270 ;; Return value:  Size  Location     Type
  1271 ;;                  1    wreg      void 
  1272 ;; Registers used:
  1273 ;;		wreg, status,2
  1274 ;; Tracked objects:
  1275 ;;		On entry : 0/0
  1276 ;;		On exit  : 0/0
  1277 ;;		Unchanged: 0/0
  1278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1279 ;;      Params:         2       0       0       0       0       0       0       0       0
  1280 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1281 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1282 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1283 ;;Total ram usage:        2 bytes
  1284 ;; Hardware stack levels used: 1
  1285 ;; This function calls:
  1286 ;;		Nothing
  1287 ;; This function is called by:
  1288 ;;		_main
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292                           	psect	text2
  1293  00754E                     __ptext2:
  1294                           	callstack 0
  1295  00754E                     _UARTInit:
  1296                           	callstack 30
  1297  00754E                     
  1298                           ;uart.c: 19:     TRISCbits.TRISC6 = 1;
  1299  00754E  8C8A               	bsf	138,6,c	;volatile
  1300                           
  1301                           ;uart.c: 20:     TRISCbits.TRISC7 = 1;
  1302  007550  8E8A               	bsf	138,7,c	;volatile
  1303                           
  1304                           ;uart.c: 21:     ANSELCbits.ANSELC7 = 0;
  1305  007552  010F               	movlb	15	; () banked
  1306  007554  9F21               	bcf	33,7,b	;volatile
  1307                           
  1308                           ;uart.c: 23:     TRISAbits.TRISA0 = 0;
  1309  007556  9088               	bcf	136,0,c	;volatile
  1310                           
  1311                           ;uart.c: 24:     LATAbits.LATA0 = 0;
  1312  007558  9083               	bcf	131,0,c	;volatile
  1313  00755A                     
  1314                           ; BSR set to: 15
  1315                           ;uart.c: 27:     TX1STA = 0;
  1316  00755A  0E00               	movlw	0
  1317  00755C  6E9E               	movwf	158,c	;volatile
  1318                           
  1319                           ;uart.c: 28:     RC1STA = 0;
  1320  00755E  0E00               	movlw	0
  1321  007560  6E9D               	movwf	157,c	;volatile
  1322                           
  1323                           ;uart.c: 29:     RC6PPS = 0x09;
  1324  007562  0E09               	movlw	9
  1325  007564  010E               	movlb	14	; () banked
  1326  007566  6FFD               	movwf	253,b	;volatile
  1327  007568                     
  1328                           ; BSR set to: 14
  1329                           ;uart.c: 31:     TX1STAbits.SYNC = 0;
  1330  007568  989E               	bcf	158,4,c	;volatile
  1331  00756A                     
  1332                           ; BSR set to: 14
  1333                           ;uart.c: 32:     TX1STAbits.TX9 = 0;
  1334  00756A  9C9E               	bcf	158,6,c	;volatile
  1335  00756C                     
  1336                           ; BSR set to: 14
  1337                           ;uart.c: 33:     RC1STAbits.RX9 = 0;
  1338  00756C  9C9D               	bcf	157,6,c	;volatile
  1339  00756E                     
  1340                           ; BSR set to: 14
  1341                           ;uart.c: 34:     RC1STAbits.CREN = 1;
  1342  00756E  889D               	bsf	157,4,c	;volatile
  1343  007570                     
  1344                           ; BSR set to: 14
  1345                           ;uart.c: 35:     RC1STAbits.ADDEN = 0;
  1346  007570  969D               	bcf	157,3,c	;volatile
  1347  007572                     
  1348                           ; BSR set to: 14
  1349                           ;uart.c: 37:     PIE3bits.RC1IE = 1;
  1350  007572  8BC5               	bsf	197,5,b	;volatile
  1351  007574                     
  1352                           ; BSR set to: 14
  1353                           ;uart.c: 38:     PIE3bits.TX1IE = 0;
  1354  007574  99C5               	bcf	197,4,b	;volatile
  1355  007576                     
  1356                           ; BSR set to: 14
  1357                           ;uart.c: 40:     TX1STAbits.BRGH = 1;
  1358  007576  849E               	bsf	158,2,c	;volatile
  1359  007578                     
  1360                           ; BSR set to: 14
  1361                           ;uart.c: 41:     BAUD1CONbits.BRG16 = 1;
  1362  007578  869F               	bsf	159,3,c	;volatile
  1363                           
  1364                           ;uart.c: 45:     SP1BRG = 12;
  1365  00757A  0E00               	movlw	0
  1366  00757C  6E9C               	movwf	156,c	;volatile
  1367  00757E  0E0C               	movlw	12
  1368  007580  6E9B               	movwf	155,c	;volatile
  1369                           
  1370                           ;uart.c: 46:     SP1BRGH = 0;
  1371  007582  0E00               	movlw	0
  1372  007584  6E9C               	movwf	156,c	;volatile
  1373  007586                     
  1374                           ; BSR set to: 14
  1375                           ;uart.c: 50:     TX1STAbits.TXEN = 1;
  1376  007586  8A9E               	bsf	158,5,c	;volatile
  1377  007588                     
  1378                           ; BSR set to: 14
  1379                           ;uart.c: 51:     RC1STAbits.SPEN = 1;
  1380  007588  8E9D               	bsf	157,7,c	;volatile
  1381  00758A                     
  1382                           ; BSR set to: 14
  1383                           ;uart.c: 53:     PIR3bits.RC1IF = 0;
  1384  00758A  9BCD               	bcf	205,5,b	;volatile
  1385  00758C                     
  1386                           ; BSR set to: 14
  1387                           ;uart.c: 55:     PIE3bits.RC1IE = 1;
  1388  00758C  8BC5               	bsf	197,5,b	;volatile
  1389  00758E                     
  1390                           ; BSR set to: 14
  1391                           ;uart.c: 56:     INTCONbits.PEIE = 1;
  1392  00758E  8CF2               	bsf	242,6,c	;volatile
  1393  007590                     
  1394                           ; BSR set to: 14
  1395  007590  0012               	return		;funcret
  1396  007592                     __end_of_UARTInit:
  1397                           	callstack 0
  1398                           
  1399 ;; *************** function _Transmit *****************
  1400 ;; Defined at:
  1401 ;;		line 16 in file "sendRecept.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;  data            2   10[COMRAM] PTR const unsigned char 
  1404 ;;		 -> main@txMsg(9), 
  1405 ;;  data_long       1   12[COMRAM] const unsigned char 
  1406 ;; Auto vars:     Size  Location     Type
  1407 ;;  i               1   15[COMRAM] unsigned char 
  1408 ;;  reg_val         1   14[COMRAM] unsigned char 
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  1    wreg      void 
  1411 ;; Registers used:
  1412 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1418 ;;      Params:         3       0       0       0       0       0       0       0       0
  1419 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1420 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1421 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1422 ;;Total ram usage:        6 bytes
  1423 ;; Hardware stack levels used: 1
  1424 ;; Hardware stack levels required when called: 2
  1425 ;; This function calls:
  1426 ;;		_AntennaTX
  1427 ;;		_ReadSXRegister
  1428 ;;		_UARTWriteByteHex
  1429 ;;		_UARTWriteStr
  1430 ;;		_UARTWriteStrLn
  1431 ;;		_WriteSXRegister
  1432 ;; This function is called by:
  1433 ;;		_main
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           	psect	text3
  1438  007844                     __ptext3:
  1439                           	callstack 0
  1440  007844                     _Transmit:
  1441                           	callstack 28
  1442  007844                     
  1443                           ;sendRecept.c: 19:     uint8_t reg_val;;sendRecept.c: 20:     uint8_t i;;sendRecept.c: 2
      +                          6:     AntennaTX();
  1444  007844  EC11  F03A         	call	_AntennaTX	;wreg free
  1445  007848                     
  1446                           ;sendRecept.c: 31:     WriteSXRegister(0x0D, ReadSXRegister(0x0E));
  1447  007848  0E0E               	movlw	14
  1448  00784A  EC42  F03A         	call	_ReadSXRegister
  1449  00784E  6E05               	movwf	WriteSXRegister@data^0,c
  1450  007850  0E0D               	movlw	13
  1451  007852  EC27  F03A         	call	_WriteSXRegister
  1452  007856                     
  1453                           ;sendRecept.c: 32:     WriteSXRegister(0x22, data_long);
  1454  007856  C00D  F005         	movff	Transmit@data_long,WriteSXRegister@data
  1455  00785A  0E22               	movlw	34
  1456  00785C  EC27  F03A         	call	_WriteSXRegister
  1457  007860                     
  1458                           ;sendRecept.c: 34:     for (i = 0; i < data_long; i++) {
  1459  007860  0E00               	movlw	0
  1460  007862  6E10               	movwf	Transmit@i^0,c
  1461  007864  500D               	movf	Transmit@data_long^0,w,c
  1462  007866  A4D8               	btfss	status,2,c
  1463  007868  EF38  F03C         	goto	u421
  1464  00786C  EF3A  F03C         	goto	u420
  1465  007870                     u421:
  1466  007870  EF3C  F03C         	goto	l1622
  1467  007874                     u420:
  1468  007874  EF51  F03C         	goto	l1628
  1469  007878                     l1622:
  1470                           
  1471                           ;sendRecept.c: 35:         WriteSXRegister(0x00, data[i]);
  1472  007878  5010               	movf	Transmit@i^0,w,c
  1473  00787A  240B               	addwf	Transmit@data^0,w,c
  1474  00787C  6ED9               	movwf	fsr2l,c
  1475  00787E  0E00               	movlw	0
  1476  007880  200C               	addwfc	(Transmit@data+1)^0,w,c
  1477  007882  6EDA               	movwf	fsr2h,c
  1478  007884  50DF               	movf	indf2,w,c
  1479  007886  6E05               	movwf	WriteSXRegister@data^0,c
  1480  007888  0E00               	movlw	0
  1481  00788A  EC27  F03A         	call	_WriteSXRegister
  1482  00788E                     
  1483                           ;sendRecept.c: 36:     }
  1484  00788E  2A10               	incf	Transmit@i^0,f,c
  1485  007890  500D               	movf	Transmit@data_long^0,w,c
  1486  007892  5C10               	subwf	Transmit@i^0,w,c
  1487  007894  A0D8               	btfss	status,0,c
  1488  007896  EF4F  F03C         	goto	u431
  1489  00789A  EF51  F03C         	goto	u430
  1490  00789E                     u431:
  1491  00789E  EF3C  F03C         	goto	l1622
  1492  0078A2                     u430:
  1493  0078A2                     l1628:
  1494                           
  1495                           ;sendRecept.c: 41:     WriteSXRegister(0x01, 0x83);
  1496  0078A2  0E83               	movlw	131
  1497  0078A4  6E05               	movwf	WriteSXRegister@data^0,c
  1498  0078A6  0E01               	movlw	1
  1499  0078A8  EC27  F03A         	call	_WriteSXRegister
  1500  0078AC                     
  1501                           ;sendRecept.c: 42:     _delay((unsigned long)((100)*(1000000UL/4000.0)));
  1502  0078AC  0E21               	movlw	33
  1503  0078AE  6E0E               	movwf	??_Transmit^0,c
  1504  0078B0  0E76               	movlw	118
  1505  0078B2                     u657:
  1506  0078B2  2EE8               	decfsz	wreg,f,c
  1507  0078B4  D7FE               	bra	u657
  1508  0078B6  2E0E               	decfsz	??_Transmit^0,f,c
  1509  0078B8  D7FC               	bra	u657
  1510  0078BA  D000               	nop2	
  1511  0078BC                     
  1512                           ;sendRecept.c: 46:     reg_val = ReadSXRegister(0x12);
  1513  0078BC  0E12               	movlw	18
  1514  0078BE  EC42  F03A         	call	_ReadSXRegister
  1515  0078C2  6E0F               	movwf	Transmit@reg_val^0,c
  1516                           
  1517                           ;sendRecept.c: 47:     while ((reg_val & 0x08) == 0x00) {
  1518  0078C4  EF68  F03C         	goto	l1636
  1519  0078C8                     l1634:
  1520                           
  1521                           ;sendRecept.c: 48:         reg_val = ReadSXRegister(0x12);
  1522  0078C8  0E12               	movlw	18
  1523  0078CA  EC42  F03A         	call	_ReadSXRegister
  1524  0078CE  6E0F               	movwf	Transmit@reg_val^0,c
  1525  0078D0                     l1636:
  1526                           
  1527                           ;sendRecept.c: 47:     while ((reg_val & 0x08) == 0x00) {
  1528  0078D0  A60F               	btfss	Transmit@reg_val^0,3,c
  1529  0078D2  EF6D  F03C         	goto	u441
  1530  0078D6  EF6F  F03C         	goto	u440
  1531  0078DA                     u441:
  1532  0078DA  EF64  F03C         	goto	l1634
  1533  0078DE                     u440:
  1534  0078DE                     
  1535                           ;sendRecept.c: 64:     WriteSXRegister(0x12, 0xFF);
  1536  0078DE  0EFF               	movlw	255
  1537  0078E0  6E05               	movwf	WriteSXRegister@data^0,c
  1538  0078E2  0E12               	movlw	18
  1539  0078E4  EC27  F03A         	call	_WriteSXRegister
  1540  0078E8                     
  1541                           ;sendRecept.c: 73:     UARTWriteStr("Message envoye : ");
  1542  0078E8  0E6F               	movlw	low STR_18
  1543  0078EA  6E02               	movwf	UARTWriteStr@string^0,c
  1544  0078EC  0E7F               	movlw	high STR_18
  1545  0078EE  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  1546  0078F0  ECF7  F03A         	call	_UARTWriteStr	;wreg free
  1547  0078F4                     
  1548                           ;sendRecept.c: 74:     for(i = 0; i < data_long; i++) {
  1549  0078F4  0E00               	movlw	0
  1550  0078F6  6E10               	movwf	Transmit@i^0,c
  1551  0078F8  500D               	movf	Transmit@data_long^0,w,c
  1552  0078FA  A4D8               	btfss	status,2,c
  1553  0078FC  EF82  F03C         	goto	u451
  1554  007900  EF84  F03C         	goto	u450
  1555  007904                     u451:
  1556  007904  EF86  F03C         	goto	l1648
  1557  007908                     u450:
  1558  007908  EFA3  F03C         	goto	l1656
  1559  00790C                     l1648:
  1560                           
  1561                           ;sendRecept.c: 75:             UARTWriteByteHex(data[i]);
  1562  00790C  5010               	movf	Transmit@i^0,w,c
  1563  00790E  240B               	addwf	Transmit@data^0,w,c
  1564  007910  6ED9               	movwf	fsr2l,c
  1565  007912  0E00               	movlw	0
  1566  007914  200C               	addwfc	(Transmit@data+1)^0,w,c
  1567  007916  6EDA               	movwf	fsr2h,c
  1568  007918  50DF               	movf	indf2,w,c
  1569  00791A  6E0E               	movwf	??_Transmit^0,c
  1570  00791C  500E               	movf	??_Transmit^0,w,c
  1571  00791E  6E02               	movwf	UARTWriteByteHex@data^0,c
  1572  007920  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  1573  007922  EC33  F03B         	call	_UARTWriteByteHex	;wreg free
  1574  007926                     
  1575                           ;sendRecept.c: 76:             UARTWriteStr(" ");
  1576  007926  0E86               	movlw	low (STR_16+25)
  1577  007928  6E02               	movwf	UARTWriteStr@string^0,c
  1578  00792A  0E7E               	movlw	high (STR_16+25)
  1579  00792C  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  1580  00792E  ECF7  F03A         	call	_UARTWriteStr	;wreg free
  1581  007932                     
  1582                           ;sendRecept.c: 77:     }
  1583  007932  2A10               	incf	Transmit@i^0,f,c
  1584  007934  500D               	movf	Transmit@data_long^0,w,c
  1585  007936  5C10               	subwf	Transmit@i^0,w,c
  1586  007938  A0D8               	btfss	status,0,c
  1587  00793A  EFA1  F03C         	goto	u461
  1588  00793E  EFA3  F03C         	goto	u460
  1589  007942                     u461:
  1590  007942  EF86  F03C         	goto	l1648
  1591  007946                     u460:
  1592  007946                     l1656:
  1593                           
  1594                           ;sendRecept.c: 78:     UARTWriteStrLn(" ");
  1595  007946  0E86               	movlw	low (STR_16+25)
  1596  007948  6E02               	movwf	UARTWriteStrLn@string^0,c
  1597  00794A  0E7E               	movlw	high (STR_16+25)
  1598  00794C  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1599  00794E  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  1600  007952  0012               	return		;funcret
  1601  007954                     __end_of_Transmit:
  1602                           	callstack 0
  1603                           
  1604 ;; *************** function _AntennaTX *****************
  1605 ;; Defined at:
  1606 ;;		line 34 in file "RF_LoRa_868_SO.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;		None
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;		None
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  1    wreg      void 
  1613 ;; Registers used:
  1614 ;;		wreg
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1620 ;;      Params:         0       0       0       0       0       0       0       0       0
  1621 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1622 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1623 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1624 ;;Total ram usage:        1 bytes
  1625 ;; Hardware stack levels used: 1
  1626 ;; This function calls:
  1627 ;;		Nothing
  1628 ;; This function is called by:
  1629 ;;		_Transmit
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           	psect	text4
  1634  007422                     __ptext4:
  1635                           	callstack 0
  1636  007422                     _AntennaTX:
  1637                           	callstack 29
  1638  007422                     
  1639                           ;RF_LoRa_868_SO.c: 35:     LATBbits.LATB4 = 0;
  1640  007422  9884               	bcf	132,4,c	;volatile
  1641                           
  1642                           ;RF_LoRa_868_SO.c: 36:     LATBbits.LATB3 = 0;
  1643  007424  9684               	bcf	132,3,c	;volatile
  1644  007426                     
  1645                           ;RF_LoRa_868_SO.c: 37:     _delay((unsigned long)((10)*(1000000UL/4000.0)));
  1646  007426  0E04               	movlw	4
  1647  007428  6E01               	movwf	??_AntennaTX^0,c
  1648  00742A  0E3E               	movlw	62
  1649  00742C                     u667:
  1650  00742C  2EE8               	decfsz	wreg,f,c
  1651  00742E  D7FE               	bra	u667
  1652  007430  2E01               	decfsz	??_AntennaTX^0,f,c
  1653  007432  D7FC               	bra	u667
  1654  007434                     
  1655                           ;RF_LoRa_868_SO.c: 38:     LATBbits.LATB3 = 1;
  1656  007434  8684               	bsf	132,3,c	;volatile
  1657  007436  0012               	return		;funcret
  1658  007438                     __end_of_AntennaTX:
  1659                           	callstack 0
  1660                           
  1661 ;; *************** function _SPIInit *****************
  1662 ;; Defined at:
  1663 ;;		line 16 in file "spi.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;		None
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;		None
  1668 ;; Return value:  Size  Location     Type
  1669 ;;                  1    wreg      void 
  1670 ;; Registers used:
  1671 ;;		wreg, status,2
  1672 ;; Tracked objects:
  1673 ;;		On entry : 0/0
  1674 ;;		On exit  : 0/0
  1675 ;;		Unchanged: 0/0
  1676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1677 ;;      Params:         0       0       0       0       0       0       0       0       0
  1678 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1679 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1680 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1681 ;;Total ram usage:        0 bytes
  1682 ;; Hardware stack levels used: 1
  1683 ;; This function calls:
  1684 ;;		Nothing
  1685 ;; This function is called by:
  1686 ;;		_main
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           	psect	text5
  1691  007516                     __ptext5:
  1692                           	callstack 0
  1693  007516                     _SPIInit:
  1694                           	callstack 30
  1695  007516                     
  1696                           ;spi.c: 18:     TRISCbits.TRISC3 = 0;
  1697  007516  968A               	bcf	138,3,c	;volatile
  1698                           
  1699                           ;spi.c: 19:     ANSELCbits.ANSELC3 = 0;
  1700  007518  010F               	movlb	15	; () banked
  1701  00751A  9721               	bcf	33,3,b	;volatile
  1702                           
  1703                           ;spi.c: 20:     TRISCbits.TRISC4 = 1;
  1704  00751C  888A               	bsf	138,4,c	;volatile
  1705                           
  1706                           ;spi.c: 21:     ANSELCbits.ANSELC4 = 0;
  1707  00751E  9921               	bcf	33,4,b	;volatile
  1708                           
  1709                           ;spi.c: 22:     TRISCbits.TRISC5 = 0;
  1710  007520  9A8A               	bcf	138,5,c	;volatile
  1711                           
  1712                           ;spi.c: 24:     TRISCbits.TRISC2 = 0;
  1713  007522  948A               	bcf	138,2,c	;volatile
  1714                           
  1715                           ;spi.c: 25:     LATCbits.LATC2 = 1;
  1716  007524  8485               	bsf	133,2,c	;volatile
  1717                           
  1718                           ;spi.c: 27:     TRISCbits.TRISC0 = 0;
  1719  007526  908A               	bcf	138,0,c	;volatile
  1720                           
  1721                           ;spi.c: 28:     LATCbits.LATC0 = 1;
  1722  007528  8085               	bsf	133,0,c	;volatile
  1723                           
  1724                           ;spi.c: 30:     TRISCbits.TRISC1 = 0;
  1725  00752A  928A               	bcf	138,1,c	;volatile
  1726                           
  1727                           ;spi.c: 31:     LATCbits.LATC1 = 1;
  1728  00752C  8285               	bsf	133,1,c	;volatile
  1729  00752E                     
  1730                           ; BSR set to: 15
  1731                           ;spi.c: 33:     RC3PPS = 0x0D;
  1732  00752E  0E0D               	movlw	13
  1733  007530  010E               	movlb	14	; () banked
  1734  007532  6FFA               	movwf	250,b	;volatile
  1735                           
  1736                           ;spi.c: 34:     RC5PPS = 0x0E;
  1737  007534  0E0E               	movlw	14
  1738  007536  6FFC               	movwf	252,b	;volatile
  1739                           
  1740                           ;spi.c: 35:     SSP1CLKPPS = 0b00010011;
  1741  007538  0E13               	movlw	19
  1742  00753A  6FB7               	movwf	183,b	;volatile
  1743                           
  1744                           ;spi.c: 36:     SSP1DATPPS = 0b00010100;
  1745  00753C  0E14               	movlw	20
  1746  00753E  6FB8               	movwf	184,b	;volatile
  1747                           
  1748                           ;spi.c: 37:     SSP1STAT = 0b01000000;
  1749  007540  0E40               	movlw	64
  1750  007542  6E95               	movwf	149,c	;volatile
  1751                           
  1752                           ;spi.c: 40:     SSP1CON1 = 0b00100000;
  1753  007544  0E20               	movlw	32
  1754  007546  6E96               	movwf	150,c	;volatile
  1755                           
  1756                           ;spi.c: 46:     SSP1CON3 = 0b00000000;
  1757  007548  0E00               	movlw	0
  1758  00754A  6E98               	movwf	152,c	;volatile
  1759  00754C                     
  1760                           ; BSR set to: 14
  1761  00754C  0012               	return		;funcret
  1762  00754E                     __end_of_SPIInit:
  1763                           	callstack 0
  1764                           
  1765 ;; *************** function _ResetRFModule *****************
  1766 ;; Defined at:
  1767 ;;		line 26 in file "RF_LoRa_868_SO.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;		None
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;		None
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  1    wreg      void 
  1774 ;; Registers used:
  1775 ;;		wreg
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1781 ;;      Params:         0       0       0       0       0       0       0       0       0
  1782 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1783 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1784 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1785 ;;Total ram usage:        1 bytes
  1786 ;; Hardware stack levels used: 1
  1787 ;; This function calls:
  1788 ;;		Nothing
  1789 ;; This function is called by:
  1790 ;;		_main
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           	psect	text6
  1795  0074C4                     __ptext6:
  1796                           	callstack 0
  1797  0074C4                     _ResetRFModule:
  1798                           	callstack 30
  1799  0074C4                     
  1800                           ;RF_LoRa_868_SO.c: 27:     LATBbits.LATB2 = 1;
  1801  0074C4  8484               	bsf	132,2,c	;volatile
  1802                           
  1803                           ;RF_LoRa_868_SO.c: 28:     TRISBbits.TRISB2 = 0;
  1804  0074C6  9489               	bcf	137,2,c	;volatile
  1805  0074C8                     
  1806                           ;RF_LoRa_868_SO.c: 29:     _delay((unsigned long)((50)*(1000000UL/4000.0)));
  1807  0074C8  0E11               	movlw	17
  1808  0074CA  6E01               	movwf	??_ResetRFModule^0,c
  1809  0074CC  0E3A               	movlw	58
  1810  0074CE                     u677:
  1811  0074CE  2EE8               	decfsz	wreg,f,c
  1812  0074D0  D7FE               	bra	u677
  1813  0074D2  2E01               	decfsz	??_ResetRFModule^0,f,c
  1814  0074D4  D7FC               	bra	u677
  1815  0074D6  D000               	nop2	
  1816  0074D8                     
  1817                           ;RF_LoRa_868_SO.c: 30:     TRISBbits.TRISB2 = 1;
  1818  0074D8  8489               	bsf	137,2,c	;volatile
  1819                           
  1820                           ;RF_LoRa_868_SO.c: 31:     _delay((unsigned long)((50)*(1000000UL/4000.0)));
  1821  0074DA  0E11               	movlw	17
  1822  0074DC  6E01               	movwf	??_ResetRFModule^0,c
  1823  0074DE  0E3A               	movlw	58
  1824  0074E0                     u687:
  1825  0074E0  2EE8               	decfsz	wreg,f,c
  1826  0074E2  D7FE               	bra	u687
  1827  0074E4  2E01               	decfsz	??_ResetRFModule^0,f,c
  1828  0074E6  D7FC               	bra	u687
  1829  0074E8  D000               	nop2	
  1830  0074EA  0012               	return		;funcret
  1831  0074EC                     __end_of_ResetRFModule:
  1832                           	callstack 0
  1833                           
  1834 ;; *************** function _Receive *****************
  1835 ;; Defined at:
  1836 ;;		line 83 in file "sendRecept.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;  data            2   10[COMRAM] PTR unsigned char 
  1839 ;;		 -> main@rxMsg(30), 
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;  reg_val         1   15[COMRAM] unsigned char 
  1842 ;;  i               1   14[COMRAM] unsigned char 
  1843 ;;  RXNumberOfBy    1   13[COMRAM] unsigned char 
  1844 ;; Return value:  Size  Location     Type
  1845 ;;                  1    wreg      void 
  1846 ;; Registers used:
  1847 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1848 ;; Tracked objects:
  1849 ;;		On entry : 0/0
  1850 ;;		On exit  : 0/0
  1851 ;;		Unchanged: 0/0
  1852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1853 ;;      Params:         2       0       0       0       0       0       0       0       0
  1854 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1855 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1856 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1857 ;;Total ram usage:        6 bytes
  1858 ;; Hardware stack levels used: 1
  1859 ;; Hardware stack levels required when called: 2
  1860 ;; This function calls:
  1861 ;;		_AntennaRX
  1862 ;;		_ReadSXRegister
  1863 ;;		_UARTWriteByteHex
  1864 ;;		_UARTWriteStr
  1865 ;;		_UARTWriteStrLn
  1866 ;;		_WriteSXRegister
  1867 ;; This function is called by:
  1868 ;;		_main
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871                           
  1872                           	psect	text7
  1873  007ABC                     __ptext7:
  1874                           	callstack 0
  1875  007ABC                     _Receive:
  1876                           	callstack 28
  1877  007ABC                     
  1878                           ;sendRecept.c: 85:     uint8_t reg_val;;sendRecept.c: 86:     uint8_t RXNumberOfBytes;;s
      +                          endRecept.c: 87:     uint8_t i;;sendRecept.c: 89:     AntennaRX();
  1879  007ABC  EC06  F03A         	call	_AntennaRX	;wreg free
  1880  007AC0                     
  1881                           ;sendRecept.c: 92:     WriteSXRegister(0x0D, ReadSXRegister(0x0F));
  1882  007AC0  0E0F               	movlw	15
  1883  007AC2  EC42  F03A         	call	_ReadSXRegister
  1884  007AC6  6E05               	movwf	WriteSXRegister@data^0,c
  1885  007AC8  0E0D               	movlw	13
  1886  007ACA  EC27  F03A         	call	_WriteSXRegister
  1887  007ACE                     
  1888                           ;sendRecept.c: 97:     WriteSXRegister(0x01, 0x85);
  1889  007ACE  0E85               	movlw	133
  1890  007AD0  6E05               	movwf	WriteSXRegister@data^0,c
  1891  007AD2  0E01               	movlw	1
  1892  007AD4  EC27  F03A         	call	_WriteSXRegister
  1893  007AD8                     
  1894                           ;sendRecept.c: 101:     _delay((unsigned long)((100)*(1000000UL/4000.0)));
  1895  007AD8  0E21               	movlw	33
  1896  007ADA  6E0D               	movwf	??_Receive^0,c
  1897  007ADC  0E76               	movlw	118
  1898  007ADE                     u697:
  1899  007ADE  2EE8               	decfsz	wreg,f,c
  1900  007AE0  D7FE               	bra	u697
  1901  007AE2  2E0D               	decfsz	??_Receive^0,f,c
  1902  007AE4  D7FC               	bra	u697
  1903  007AE6  D000               	nop2	
  1904  007AE8                     
  1905                           ;sendRecept.c: 105:     UARTWriteStrLn("-----------------------");
  1906  007AE8  0ED5               	movlw	low STR_21
  1907  007AEA  6E02               	movwf	UARTWriteStrLn@string^0,c
  1908  007AEC  0E7E               	movlw	high STR_21
  1909  007AEE  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1910  007AF0  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  1911  007AF4                     
  1912                           ;sendRecept.c: 106:     UARTWriteStrLn("waiting for valid header");
  1913  007AF4  0EBC               	movlw	low STR_22
  1914  007AF6  6E02               	movwf	UARTWriteStrLn@string^0,c
  1915  007AF8  0E7E               	movlw	high STR_22
  1916  007AFA  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1917  007AFC  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  1918  007B00                     l1672:
  1919                           
  1920                           ;sendRecept.c: 109:         reg_val = ReadSXRegister(0x12);
  1921  007B00  0E12               	movlw	18
  1922  007B02  EC42  F03A         	call	_ReadSXRegister
  1923  007B06  6E10               	movwf	Receive@reg_val^0,c
  1924  007B08                     
  1925                           ;sendRecept.c: 110:     } while (((reg_val & 0x10) == 0x00) && ((reg_val & 0x80) == 0x00
      +                          ));
  1926  007B08  B810               	btfsc	Receive@reg_val^0,4,c
  1927  007B0A  EF89  F03D         	goto	u471
  1928  007B0E  EF8B  F03D         	goto	u470
  1929  007B12                     u471:
  1930  007B12  EF92  F03D         	goto	l1678
  1931  007B16                     u470:
  1932  007B16  AE10               	btfss	Receive@reg_val^0,7,c
  1933  007B18  EF90  F03D         	goto	u481
  1934  007B1C  EF92  F03D         	goto	u480
  1935  007B20                     u481:
  1936  007B20  EF80  F03D         	goto	l1672
  1937  007B24                     u480:
  1938  007B24                     l1678:
  1939                           
  1940                           ;sendRecept.c: 112:     if ((ReadSXRegister(0x12) & 0x10) == 0x00) {
  1941  007B24  0E12               	movlw	18
  1942  007B26  EC42  F03A         	call	_ReadSXRegister
  1943  007B2A  6E0D               	movwf	??_Receive^0,c
  1944  007B2C  B80D               	btfsc	??_Receive^0,4,c
  1945  007B2E  EF9B  F03D         	goto	u491
  1946  007B32  EF9D  F03D         	goto	u490
  1947  007B36                     u491:
  1948  007B36  EFA4  F03D         	goto	l1684
  1949  007B3A                     u490:
  1950  007B3A                     
  1951                           ;sendRecept.c: 114:         WriteSXRegister(0x12, 0xFF);
  1952  007B3A  0EFF               	movlw	255
  1953  007B3C  6E05               	movwf	WriteSXRegister@data^0,c
  1954  007B3E  0E12               	movlw	18
  1955  007B40  EC27  F03A         	call	_WriteSXRegister
  1956  007B44  EF17  F03E         	goto	l225
  1957  007B48                     l1684:
  1958                           
  1959                           ;sendRecept.c: 119:     UARTWriteStrLn("valid header received");
  1960  007B48  0E33               	movlw	low STR_23
  1961  007B4A  6E02               	movwf	UARTWriteStrLn@string^0,c
  1962  007B4C  0E7F               	movlw	high STR_23
  1963  007B4E  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1964  007B50  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  1965  007B54                     
  1966                           ;sendRecept.c: 128:     reg_val = ReadSXRegister(0x12);
  1967  007B54  0E12               	movlw	18
  1968  007B56  EC42  F03A         	call	_ReadSXRegister
  1969  007B5A  6E10               	movwf	Receive@reg_val^0,c
  1970                           
  1971                           ;sendRecept.c: 129:     while ((reg_val & 0x40) == 0x00) {
  1972  007B5C  EFB4  F03D         	goto	l1690
  1973  007B60                     l1688:
  1974                           
  1975                           ;sendRecept.c: 130:         reg_val = ReadSXRegister(0x12);
  1976  007B60  0E12               	movlw	18
  1977  007B62  EC42  F03A         	call	_ReadSXRegister
  1978  007B66  6E10               	movwf	Receive@reg_val^0,c
  1979  007B68                     l1690:
  1980                           
  1981                           ;sendRecept.c: 129:     while ((reg_val & 0x40) == 0x00) {
  1982  007B68  AC10               	btfss	Receive@reg_val^0,6,c
  1983  007B6A  EFB9  F03D         	goto	u501
  1984  007B6E  EFBB  F03D         	goto	u500
  1985  007B72                     u501:
  1986  007B72  EFB0  F03D         	goto	l1688
  1987  007B76                     u500:
  1988  007B76                     
  1989                           ;sendRecept.c: 142:     if((reg_val & 0x20) != 0x00){
  1990  007B76  AA10               	btfss	Receive@reg_val^0,5,c
  1991  007B78  EFC0  F03D         	goto	u511
  1992  007B7C  EFC2  F03D         	goto	u510
  1993  007B80                     u511:
  1994  007B80  EFD0  F03D         	goto	l1694
  1995  007B84                     u510:
  1996  007B84                     
  1997                           ;sendRecept.c: 143:         UARTWriteStrLn(" ");
  1998  007B84  0E86               	movlw	low (STR_16+25)
  1999  007B86  6E02               	movwf	UARTWriteStrLn@string^0,c
  2000  007B88  0E7E               	movlw	high (STR_16+25)
  2001  007B8A  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2002  007B8C  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  2003                           
  2004                           ;sendRecept.c: 144:         UARTWriteStrLn("payload CRC error");
  2005  007B90  0E81               	movlw	low STR_25
  2006  007B92  6E02               	movwf	UARTWriteStrLn@string^0,c
  2007  007B94  0E7F               	movlw	high STR_25
  2008  007B96  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2009  007B98  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  2010                           
  2011                           ;sendRecept.c: 145:     }
  2012  007B9C  EF12  F03E         	goto	l1714
  2013  007BA0                     l1694:
  2014                           
  2015                           ;sendRecept.c: 148:         UARTWriteStr("received data: ");
  2016  007BA0  0EB5               	movlw	low STR_26
  2017  007BA2  6E02               	movwf	UARTWriteStr@string^0,c
  2018  007BA4  0E7F               	movlw	high STR_26
  2019  007BA6  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  2020  007BA8  ECF7  F03A         	call	_UARTWriteStr	;wreg free
  2021  007BAC                     
  2022                           ;sendRecept.c: 149:         RXNumberOfBytes = ReadSXRegister(0x13);
  2023  007BAC  0E13               	movlw	19
  2024  007BAE  EC42  F03A         	call	_ReadSXRegister
  2025  007BB2  6E0E               	movwf	Receive@RXNumberOfBytes^0,c
  2026  007BB4                     
  2027                           ;sendRecept.c: 150:         WriteSXRegister(0x0D, ReadSXRegister(0x10));
  2028  007BB4  0E10               	movlw	16
  2029  007BB6  EC42  F03A         	call	_ReadSXRegister
  2030  007BBA  6E05               	movwf	WriteSXRegister@data^0,c
  2031  007BBC  0E0D               	movlw	13
  2032  007BBE  EC27  F03A         	call	_WriteSXRegister
  2033  007BC2                     
  2034                           ;sendRecept.c: 152:         for (i = 0; i < RXNumberOfBytes; i++) {
  2035  007BC2  0E00               	movlw	0
  2036  007BC4  6E0F               	movwf	Receive@i^0,c
  2037  007BC6  EF03  F03E         	goto	l1710
  2038  007BCA                     l1702:
  2039                           
  2040                           ;sendRecept.c: 159:             data[i] = ReadSXRegister(0x00);
  2041  007BCA  500F               	movf	Receive@i^0,w,c
  2042  007BCC  240B               	addwf	Receive@data^0,w,c
  2043  007BCE  6ED9               	movwf	fsr2l,c
  2044  007BD0  0E00               	movlw	0
  2045  007BD2  200C               	addwfc	(Receive@data+1)^0,w,c
  2046  007BD4  6EDA               	movwf	fsr2h,c
  2047  007BD6  0E00               	movlw	0
  2048  007BD8  EC42  F03A         	call	_ReadSXRegister
  2049  007BDC  6EDF               	movwf	indf2,c
  2050  007BDE                     
  2051                           ;sendRecept.c: 160:             UARTWriteByteHex(data[i]);
  2052  007BDE  500F               	movf	Receive@i^0,w,c
  2053  007BE0  240B               	addwf	Receive@data^0,w,c
  2054  007BE2  6ED9               	movwf	fsr2l,c
  2055  007BE4  0E00               	movlw	0
  2056  007BE6  200C               	addwfc	(Receive@data+1)^0,w,c
  2057  007BE8  6EDA               	movwf	fsr2h,c
  2058  007BEA  50DF               	movf	indf2,w,c
  2059  007BEC  6E0D               	movwf	??_Receive^0,c
  2060  007BEE  500D               	movf	??_Receive^0,w,c
  2061  007BF0  6E02               	movwf	UARTWriteByteHex@data^0,c
  2062  007BF2  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  2063  007BF4  EC33  F03B         	call	_UARTWriteByteHex	;wreg free
  2064  007BF8                     
  2065                           ;sendRecept.c: 161:             UARTWriteStr(" ");
  2066  007BF8  0E86               	movlw	low (STR_16+25)
  2067  007BFA  6E02               	movwf	UARTWriteStr@string^0,c
  2068  007BFC  0E7E               	movlw	high (STR_16+25)
  2069  007BFE  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  2070  007C00  ECF7  F03A         	call	_UARTWriteStr	;wreg free
  2071  007C04                     
  2072                           ;sendRecept.c: 162:         }
  2073  007C04  2A0F               	incf	Receive@i^0,f,c
  2074  007C06                     l1710:
  2075  007C06  500E               	movf	Receive@RXNumberOfBytes^0,w,c
  2076  007C08  5C0F               	subwf	Receive@i^0,w,c
  2077  007C0A  A0D8               	btfss	status,0,c
  2078  007C0C  EF0A  F03E         	goto	u521
  2079  007C10  EF0C  F03E         	goto	u520
  2080  007C14                     u521:
  2081  007C14  EFE5  F03D         	goto	l1702
  2082  007C18                     u520:
  2083  007C18                     
  2084                           ;sendRecept.c: 163:         UARTWriteStrLn(" ");
  2085  007C18  0E86               	movlw	low (STR_16+25)
  2086  007C1A  6E02               	movwf	UARTWriteStrLn@string^0,c
  2087  007C1C  0E7E               	movlw	high (STR_16+25)
  2088  007C1E  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2089  007C20  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  2090  007C24                     l1714:
  2091                           
  2092                           ;sendRecept.c: 187:     WriteSXRegister(0x12, 0xFF);
  2093  007C24  0EFF               	movlw	255
  2094  007C26  6E05               	movwf	WriteSXRegister@data^0,c
  2095  007C28  0E12               	movlw	18
  2096  007C2A  EC27  F03A         	call	_WriteSXRegister
  2097  007C2E                     l225:
  2098  007C2E  0012               	return		;funcret
  2099  007C30                     __end_of_Receive:
  2100                           	callstack 0
  2101                           
  2102 ;; *************** function _AntennaRX *****************
  2103 ;; Defined at:
  2104 ;;		line 41 in file "RF_LoRa_868_SO.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;		None
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;		None
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2118 ;;      Params:         0       0       0       0       0       0       0       0       0
  2119 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2120 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2121 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2122 ;;Total ram usage:        1 bytes
  2123 ;; Hardware stack levels used: 1
  2124 ;; This function calls:
  2125 ;;		Nothing
  2126 ;; This function is called by:
  2127 ;;		_Receive
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           	psect	text8
  2132  00740C                     __ptext8:
  2133                           	callstack 0
  2134  00740C                     _AntennaRX:
  2135                           	callstack 29
  2136  00740C                     
  2137                           ;RF_LoRa_868_SO.c: 42:     LATBbits.LATB4 = 0;
  2138  00740C  9884               	bcf	132,4,c	;volatile
  2139                           
  2140                           ;RF_LoRa_868_SO.c: 43:     LATBbits.LATB3 = 0;
  2141  00740E  9684               	bcf	132,3,c	;volatile
  2142  007410                     
  2143                           ;RF_LoRa_868_SO.c: 44:     _delay((unsigned long)((10)*(1000000UL/4000.0)));
  2144  007410  0E04               	movlw	4
  2145  007412  6E01               	movwf	??_AntennaRX^0,c
  2146  007414  0E3E               	movlw	62
  2147  007416                     u707:
  2148  007416  2EE8               	decfsz	wreg,f,c
  2149  007418  D7FE               	bra	u707
  2150  00741A  2E01               	decfsz	??_AntennaRX^0,f,c
  2151  00741C  D7FC               	bra	u707
  2152  00741E                     
  2153                           ;RF_LoRa_868_SO.c: 45:     LATBbits.LATB4 = 1;
  2154  00741E  8884               	bsf	132,4,c	;volatile
  2155  007420  0012               	return		;funcret
  2156  007422                     __end_of_AntennaRX:
  2157                           	callstack 0
  2158                           
  2159 ;; *************** function _InitRFLoRaPins *****************
  2160 ;; Defined at:
  2161 ;;		line 18 in file "RF_LoRa_868_SO.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;		None
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;		None
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      void 
  2168 ;; Registers used:
  2169 ;;		None
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2175 ;;      Params:         0       0       0       0       0       0       0       0       0
  2176 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2177 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2178 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2179 ;;Total ram usage:        0 bytes
  2180 ;; Hardware stack levels used: 1
  2181 ;; This function calls:
  2182 ;;		Nothing
  2183 ;; This function is called by:
  2184 ;;		_main
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           	psect	text9
  2189  0073EA                     __ptext9:
  2190                           	callstack 0
  2191  0073EA                     _InitRFLoRaPins:
  2192                           	callstack 30
  2193  0073EA                     
  2194                           ;RF_LoRa_868_SO.c: 19:     TRISBbits.TRISB2 = 1;
  2195  0073EA  8489               	bsf	137,2,c	;volatile
  2196                           
  2197                           ;RF_LoRa_868_SO.c: 20:     LATBbits.LATB3 = 0;
  2198  0073EC  9684               	bcf	132,3,c	;volatile
  2199                           
  2200                           ;RF_LoRa_868_SO.c: 21:     TRISBbits.TRISB3 = 0;
  2201  0073EE  9689               	bcf	137,3,c	;volatile
  2202                           
  2203                           ;RF_LoRa_868_SO.c: 22:     LATBbits.LATB4 = 0;
  2204  0073F0  9884               	bcf	132,4,c	;volatile
  2205                           
  2206                           ;RF_LoRa_868_SO.c: 23:     TRISBbits.TRISB4 = 0;
  2207  0073F2  9889               	bcf	137,4,c	;volatile
  2208  0073F4  0012               	return		;funcret
  2209  0073F6                     __end_of_InitRFLoRaPins:
  2210                           	callstack 0
  2211                           
  2212 ;; *************** function _InitModule *****************
  2213 ;; Defined at:
  2214 ;;		line 96 in file "SX1272.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;		None
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;  pout            1    0        unsigned char 
  2219 ;; Return value:  Size  Location     Type
  2220 ;;                  1    wreg      void 
  2221 ;; Registers used:
  2222 ;;		wreg, status,2, status,0, cstack
  2223 ;; Tracked objects:
  2224 ;;		On entry : 0/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2228 ;;      Params:         0       0       0       0       0       0       0       0       0
  2229 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2230 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2231 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2232 ;;Total ram usage:        0 bytes
  2233 ;; Hardware stack levels used: 1
  2234 ;; Hardware stack levels required when called: 2
  2235 ;; This function calls:
  2236 ;;		_WriteSXRegister
  2237 ;; This function is called by:
  2238 ;;		_main
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242                           	psect	text10
  2243  007752                     __ptext10:
  2244                           	callstack 0
  2245  007752                     _InitModule:
  2246                           	callstack 28
  2247  007752                     
  2248                           ;SX1272.c: 97:   uint8_t pout;;SX1272.c: 99:   WriteSXRegister(0x00, 0x00);
  2249  007752  0E00               	movlw	0
  2250  007754  6E05               	movwf	WriteSXRegister@data^0,c
  2251  007756  0E00               	movlw	0
  2252  007758  EC27  F03A         	call	_WriteSXRegister
  2253                           
  2254                           ;SX1272.c: 101:   WriteSXRegister(0x06, 0xD8);
  2255  00775C  0ED8               	movlw	216
  2256  00775E  6E05               	movwf	WriteSXRegister@data^0,c
  2257  007760  0E06               	movlw	6
  2258  007762  EC27  F03A         	call	_WriteSXRegister
  2259                           
  2260                           ;SX1272.c: 102:   WriteSXRegister(0x07, 0x99);
  2261  007766  0E99               	movlw	153
  2262  007768  6E05               	movwf	WriteSXRegister@data^0,c
  2263  00776A  0E07               	movlw	7
  2264  00776C  EC27  F03A         	call	_WriteSXRegister
  2265                           
  2266                           ;SX1272.c: 103:   WriteSXRegister(0x08, 0x99);
  2267  007770  0E99               	movlw	153
  2268  007772  6E05               	movwf	WriteSXRegister@data^0,c
  2269  007774  0E08               	movlw	8
  2270  007776  EC27  F03A         	call	_WriteSXRegister
  2271  00777A                     
  2272                           ;SX1272.c: 107:   WriteSXRegister(0x09, 0x80 | pout);
  2273  00777A  0E8C               	movlw	140
  2274  00777C  6E05               	movwf	WriteSXRegister@data^0,c
  2275  00777E  0E09               	movlw	9
  2276  007780  EC27  F03A         	call	_WriteSXRegister
  2277  007784                     
  2278                           ;SX1272.c: 109:   WriteSXRegister(0x0A, 0x19);
  2279  007784  0E19               	movlw	25
  2280  007786  6E05               	movwf	WriteSXRegister@data^0,c
  2281  007788  0E0A               	movlw	10
  2282  00778A  EC27  F03A         	call	_WriteSXRegister
  2283  00778E                     
  2284                           ;SX1272.c: 111:   WriteSXRegister(0x0B, 0b00101011);
  2285  00778E  0E2B               	movlw	43
  2286  007790  6E05               	movwf	WriteSXRegister@data^0,c
  2287  007792  0E0B               	movlw	11
  2288  007794  EC27  F03A         	call	_WriteSXRegister
  2289  007798                     
  2290                           ;SX1272.c: 113:   WriteSXRegister(0x0C, 0b00100011);
  2291  007798  0E23               	movlw	35
  2292  00779A  6E05               	movwf	WriteSXRegister@data^0,c
  2293  00779C  0E0C               	movlw	12
  2294  00779E  EC27  F03A         	call	_WriteSXRegister
  2295  0077A2                     
  2296                           ;SX1272.c: 115:   WriteSXRegister(0x0D, 0x00);
  2297  0077A2  0E00               	movlw	0
  2298  0077A4  6E05               	movwf	WriteSXRegister@data^0,c
  2299  0077A6  0E0D               	movlw	13
  2300  0077A8  EC27  F03A         	call	_WriteSXRegister
  2301  0077AC                     
  2302                           ;SX1272.c: 116:   WriteSXRegister(0x0E, 0x80);
  2303  0077AC  0E80               	movlw	128
  2304  0077AE  6E05               	movwf	WriteSXRegister@data^0,c
  2305  0077B0  0E0E               	movlw	14
  2306  0077B2  EC27  F03A         	call	_WriteSXRegister
  2307  0077B6                     
  2308                           ;SX1272.c: 117:   WriteSXRegister(0x0F, 0x00);
  2309  0077B6  0E00               	movlw	0
  2310  0077B8  6E05               	movwf	WriteSXRegister@data^0,c
  2311  0077BA  0E0F               	movlw	15
  2312  0077BC  EC27  F03A         	call	_WriteSXRegister
  2313  0077C0                     
  2314                           ;SX1272.c: 119:   WriteSXRegister(0x11, 0x00);
  2315  0077C0  0E00               	movlw	0
  2316  0077C2  6E05               	movwf	WriteSXRegister@data^0,c
  2317  0077C4  0E11               	movlw	17
  2318  0077C6  EC27  F03A         	call	_WriteSXRegister
  2319  0077CA                     
  2320                           ;SX1272.c: 121:   WriteSXRegister(0x12, 0xFF);
  2321  0077CA  0EFF               	movlw	255
  2322  0077CC  6E05               	movwf	WriteSXRegister@data^0,c
  2323  0077CE  0E12               	movlw	18
  2324  0077D0  EC27  F03A         	call	_WriteSXRegister
  2325  0077D4                     
  2326                           ;SX1272.c: 125:   WriteSXRegister(0x1D, 0b10001010);
  2327  0077D4  0E8A               	movlw	138
  2328  0077D6  6E05               	movwf	WriteSXRegister@data^0,c
  2329  0077D8  0E1D               	movlw	29
  2330  0077DA  EC27  F03A         	call	_WriteSXRegister
  2331  0077DE                     
  2332                           ;SX1272.c: 129:   WriteSXRegister(0x1E, 0b11000110);
  2333  0077DE  0EC6               	movlw	198
  2334  0077E0  6E05               	movwf	WriteSXRegister@data^0,c
  2335  0077E2  0E1E               	movlw	30
  2336  0077E4  EC27  F03A         	call	_WriteSXRegister
  2337  0077E8                     
  2338                           ;SX1272.c: 133:   WriteSXRegister(0x1F, 0xFF);
  2339  0077E8  0EFF               	movlw	255
  2340  0077EA  6E05               	movwf	WriteSXRegister@data^0,c
  2341  0077EC  0E1F               	movlw	31
  2342  0077EE  EC27  F03A         	call	_WriteSXRegister
  2343  0077F2                     
  2344                           ;SX1272.c: 140:   WriteSXRegister(0x20, 0x00);
  2345  0077F2  0E00               	movlw	0
  2346  0077F4  6E05               	movwf	WriteSXRegister@data^0,c
  2347  0077F6  0E20               	movlw	32
  2348  0077F8  EC27  F03A         	call	_WriteSXRegister
  2349  0077FC                     
  2350                           ;SX1272.c: 141:   WriteSXRegister(0x21, 0x08);
  2351  0077FC  0E08               	movlw	8
  2352  0077FE  6E05               	movwf	WriteSXRegister@data^0,c
  2353  007800  0E21               	movlw	33
  2354  007802  EC27  F03A         	call	_WriteSXRegister
  2355  007806                     
  2356                           ;SX1272.c: 143:   WriteSXRegister(0x23, 0x80);
  2357  007806  0E80               	movlw	128
  2358  007808  6E05               	movwf	WriteSXRegister@data^0,c
  2359  00780A  0E23               	movlw	35
  2360  00780C  EC27  F03A         	call	_WriteSXRegister
  2361  007810                     
  2362                           ;SX1272.c: 145:   WriteSXRegister(0x24, 0x00);
  2363  007810  0E00               	movlw	0
  2364  007812  6E05               	movwf	WriteSXRegister@data^0,c
  2365  007814  0E24               	movlw	36
  2366  007816  EC27  F03A         	call	_WriteSXRegister
  2367  00781A                     
  2368                           ;SX1272.c: 147:   WriteSXRegister(0x31, 0xC3);
  2369  00781A  0EC3               	movlw	195
  2370  00781C  6E05               	movwf	WriteSXRegister@data^0,c
  2371  00781E  0E31               	movlw	49
  2372  007820  EC27  F03A         	call	_WriteSXRegister
  2373  007824                     
  2374                           ;SX1272.c: 149:   WriteSXRegister(0x33, 0x27);
  2375  007824  0E27               	movlw	39
  2376  007826  6E05               	movwf	WriteSXRegister@data^0,c
  2377  007828  0E33               	movlw	51
  2378  00782A  EC27  F03A         	call	_WriteSXRegister
  2379  00782E                     
  2380                           ;SX1272.c: 151:   WriteSXRegister(0x37, 0x0A);
  2381  00782E  0E0A               	movlw	10
  2382  007830  6E05               	movwf	WriteSXRegister@data^0,c
  2383  007832  0E37               	movlw	55
  2384  007834  EC27  F03A         	call	_WriteSXRegister
  2385  007838                     
  2386                           ;SX1272.c: 153:   WriteSXRegister(0x39, 0x12);
  2387  007838  0E12               	movlw	18
  2388  00783A  6E05               	movwf	WriteSXRegister@data^0,c
  2389  00783C  0E39               	movlw	57
  2390  00783E  EC27  F03A         	call	_WriteSXRegister
  2391  007842  0012               	return		;funcret
  2392  007844                     __end_of_InitModule:
  2393                           	callstack 0
  2394                           
  2395 ;; *************** function _WriteSXRegister *****************
  2396 ;; Defined at:
  2397 ;;		line 19 in file "SX1272.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;  address         1    wreg     unsigned char 
  2400 ;;  data            1    4[COMRAM] unsigned char 
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;  address         1    5[COMRAM] unsigned char 
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  1    wreg      void 
  2405 ;; Registers used:
  2406 ;;		wreg, status,2, status,0, cstack
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2412 ;;      Params:         1       0       0       0       0       0       0       0       0
  2413 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2414 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2415 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2416 ;;Total ram usage:        2 bytes
  2417 ;; Hardware stack levels used: 1
  2418 ;; Hardware stack levels required when called: 1
  2419 ;; This function calls:
  2420 ;;		_SPITransfer
  2421 ;; This function is called by:
  2422 ;;		_InitModule
  2423 ;;		_Transmit
  2424 ;;		_Receive
  2425 ;;		_main
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	text11
  2430  00744E                     __ptext11:
  2431                           	callstack 0
  2432  00744E                     _WriteSXRegister:
  2433                           	callstack 29
  2434                           
  2435                           ;incstack = 0
  2436                           ;WriteSXRegister@address stored from wreg
  2437  00744E  6E06               	movwf	WriteSXRegister@address^0,c
  2438  007450                     
  2439                           ;SX1272.c: 21:     LATCbits.LATC2 = 0;
  2440  007450  9485               	bcf	133,2,c	;volatile
  2441  007452                     
  2442                           ;SX1272.c: 22:     address = address | 0x80;
  2443  007452  5006               	movf	WriteSXRegister@address^0,w,c
  2444  007454  0980               	iorlw	128
  2445  007456  6E06               	movwf	WriteSXRegister@address^0,c
  2446  007458                     
  2447                           ;SX1272.c: 24:     SPITransfer(address);
  2448  007458  5006               	movf	WriteSXRegister@address^0,w,c
  2449  00745A  EC34  F03A         	call	_SPITransfer
  2450  00745E                     
  2451                           ;SX1272.c: 25:     SPITransfer(data);
  2452  00745E  5005               	movf	WriteSXRegister@data^0,w,c
  2453  007460  EC34  F03A         	call	_SPITransfer
  2454  007464                     
  2455                           ;SX1272.c: 26:     LATCbits.LATC2 = 1;
  2456  007464  8485               	bsf	133,2,c	;volatile
  2457  007466  0012               	return		;funcret
  2458  007468                     __end_of_WriteSXRegister:
  2459                           	callstack 0
  2460                           
  2461 ;; *************** function _GetMode *****************
  2462 ;; Defined at:
  2463 ;;		line 42 in file "SX1272.c"
  2464 ;; Parameters:    Size  Location     Type
  2465 ;;		None
  2466 ;; Auto vars:     Size  Location     Type
  2467 ;;  reg             1   13[COMRAM] unsigned char 
  2468 ;;  masked_reg      1   12[COMRAM] unsigned char 
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  1    wreg      void 
  2471 ;; Registers used:
  2472 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2478 ;;      Params:         0       0       0       0       0       0       0       0       0
  2479 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2480 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2481 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2482 ;;Total ram usage:        4 bytes
  2483 ;; Hardware stack levels used: 1
  2484 ;; Hardware stack levels required when called: 2
  2485 ;; This function calls:
  2486 ;;		_ReadSXRegister
  2487 ;;		_UARTWriteByteHex
  2488 ;;		_UARTWriteStr
  2489 ;;		_UARTWriteStrLn
  2490 ;; This function is called by:
  2491 ;;		_main
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           	psect	text12
  2496  007954                     __ptext12:
  2497                           	callstack 0
  2498  007954                     _GetMode:
  2499                           	callstack 28
  2500  007954                     
  2501                           ;SX1272.c: 43:     uint8_t reg, masked_reg;;SX1272.c: 44:     reg = ReadSXRegister(0x01)
      +                          ;
  2502  007954  0E01               	movlw	1
  2503  007956  EC42  F03A         	call	_ReadSXRegister
  2504  00795A  6E0E               	movwf	GetMode@reg^0,c
  2505  00795C                     
  2506                           ;SX1272.c: 47:         UARTWriteStr("REG_OP_MODE = 0x");
  2507  00795C  0EA4               	movlw	low STR_1
  2508  00795E  6E02               	movwf	UARTWriteStr@string^0,c
  2509  007960  0E7F               	movlw	high STR_1
  2510  007962  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  2511  007964  ECF7  F03A         	call	_UARTWriteStr	;wreg free
  2512  007968                     
  2513                           ;SX1272.c: 48:         UARTWriteByteHex(reg);
  2514  007968  C00E  F002         	movff	GetMode@reg,UARTWriteByteHex@data
  2515  00796C  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  2516  00796E  EC33  F03B         	call	_UARTWriteByteHex	;wreg free
  2517  007972                     
  2518                           ;SX1272.c: 49:         UARTWriteStrLn(" ");
  2519  007972  0E86               	movlw	low (STR_16+25)
  2520  007974  6E02               	movwf	UARTWriteStrLn@string^0,c
  2521  007976  0E7E               	movlw	high (STR_16+25)
  2522  007978  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2523  00797A  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  2524  00797E                     
  2525                           ;SX1272.c: 51:     masked_reg = reg & 0x80;
  2526  00797E  500E               	movf	GetMode@reg^0,w,c
  2527  007980  0B80               	andlw	128
  2528  007982  6E0D               	movwf	GetMode@masked_reg^0,c
  2529  007984                     
  2530                           ;SX1272.c: 52:     if (masked_reg)
  2531  007984  500D               	movf	GetMode@masked_reg^0,w,c
  2532  007986  B4D8               	btfsc	status,2,c
  2533  007988  EFC8  F03C         	goto	u401
  2534  00798C  EFCA  F03C         	goto	u400
  2535  007990                     u401:
  2536  007990  EFE5  F03C         	goto	l1506
  2537  007994                     u400:
  2538  007994                     
  2539                           ;SX1272.c: 53:         {;SX1272.c: 55:         masked_reg = reg & 0x40;
  2540  007994  500E               	movf	GetMode@reg^0,w,c
  2541  007996  0B40               	andlw	64
  2542  007998  6E0D               	movwf	GetMode@masked_reg^0,c
  2543  00799A                     
  2544                           ;SX1272.c: 56:         if (!masked_reg) {
  2545  00799A  500D               	movf	GetMode@masked_reg^0,w,c
  2546  00799C  A4D8               	btfss	status,2,c
  2547  00799E  EFD3  F03C         	goto	u411
  2548  0079A2  EFD5  F03C         	goto	u410
  2549  0079A6                     u411:
  2550  0079A6  EFDD  F03C         	goto	l1504
  2551  0079AA                     u410:
  2552  0079AA                     
  2553                           ;SX1272.c: 57:             UARTWriteStrLn("mode = LoRa");
  2554  0079AA  0ED2               	movlw	low STR_3
  2555  0079AC  6E02               	movwf	UARTWriteStrLn@string^0,c
  2556  0079AE  0E7F               	movlw	high STR_3
  2557  0079B0  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2558  0079B2  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  2559                           
  2560                           ;SX1272.c: 58:         }
  2561  0079B6  EFEB  F03C         	goto	l1508
  2562  0079BA                     l1504:
  2563                           
  2564                           ;SX1272.c: 60:             UARTWriteStrLn("mode = LoRa with FSK registers access");
  2565  0079BA  0E47               	movlw	low STR_4
  2566  0079BC  6E02               	movwf	UARTWriteStrLn@string^0,c
  2567  0079BE  0E7E               	movlw	high STR_4
  2568  0079C0  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2569  0079C2  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  2570  0079C6  EFEB  F03C         	goto	l1508
  2571  0079CA                     l1506:
  2572                           
  2573                           ;SX1272.c: 64:         UARTWriteStrLn("mode = FSK");
  2574  0079CA  0EDE               	movlw	low STR_5
  2575  0079CC  6E02               	movwf	UARTWriteStrLn@string^0,c
  2576  0079CE  0E7F               	movlw	high STR_5
  2577  0079D0  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2578  0079D2  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  2579  0079D6                     l1508:
  2580                           
  2581                           ;SX1272.c: 66:     masked_reg = reg & 0x07;
  2582  0079D6  500E               	movf	GetMode@reg^0,w,c
  2583  0079D8  0B07               	andlw	7
  2584  0079DA  6E0D               	movwf	GetMode@masked_reg^0,c
  2585                           
  2586                           ;SX1272.c: 67:         switch (masked_reg){
  2587  0079DC  EF30  F03D         	goto	l1528
  2588  0079E0                     l1510:
  2589                           
  2590                           ;SX1272.c: 69:             UARTWriteStrLn("sleep mode");
  2591  0079E0  0EE9               	movlw	low STR_6
  2592  0079E2  6E02               	movwf	UARTWriteStrLn@string^0,c
  2593  0079E4  0E7F               	movlw	high STR_6
  2594  0079E6  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2595  0079E8  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  2596                           
  2597                           ;SX1272.c: 70:             break;
  2598  0079EC  EF5D  F03D         	goto	l92
  2599  0079F0                     l1512:
  2600                           
  2601                           ;SX1272.c: 72:             UARTWriteStrLn("standby mode");
  2602  0079F0  0EC5               	movlw	low STR_7
  2603  0079F2  6E02               	movwf	UARTWriteStrLn@string^0,c
  2604  0079F4  0E7F               	movlw	high STR_7
  2605  0079F6  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2606  0079F8  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  2607                           
  2608                           ;SX1272.c: 73:             break;
  2609  0079FC  EF5D  F03D         	goto	l92
  2610  007A00                     l1514:
  2611                           
  2612                           ;SX1272.c: 75:             UARTWriteStrLn("frequency synthesis TX");
  2613  007A00  0E1C               	movlw	low STR_8
  2614  007A02  6E02               	movwf	UARTWriteStrLn@string^0,c
  2615  007A04  0E7F               	movlw	high STR_8
  2616  007A06  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2617  007A08  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  2618                           
  2619                           ;SX1272.c: 76:             break;
  2620  007A0C  EF5D  F03D         	goto	l92
  2621  007A10                     l1516:
  2622                           
  2623                           ;SX1272.c: 78:             UARTWriteStrLn("TX mode");
  2624  007A10  0EF4               	movlw	low STR_9
  2625  007A12  6E02               	movwf	UARTWriteStrLn@string^0,c
  2626  007A14  0E7F               	movlw	high STR_9
  2627  007A16  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2628  007A18  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  2629                           
  2630                           ;SX1272.c: 79:             break;
  2631  007A1C  EF5D  F03D         	goto	l92
  2632  007A20                     l1518:
  2633                           
  2634                           ;SX1272.c: 81:             UARTWriteStrLn("frequency synthesis RX");
  2635  007A20  0E05               	movlw	low STR_10
  2636  007A22  6E02               	movwf	UARTWriteStrLn@string^0,c
  2637  007A24  0E7F               	movlw	high STR_10
  2638  007A26  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2639  007A28  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  2640                           
  2641                           ;SX1272.c: 82:             break;
  2642  007A2C  EF5D  F03D         	goto	l92
  2643  007A30                     l1520:
  2644                           
  2645                           ;SX1272.c: 84:             UARTWriteStrLn("continuous receive mode");
  2646  007A30  0EED               	movlw	low STR_11
  2647  007A32  6E02               	movwf	UARTWriteStrLn@string^0,c
  2648  007A34  0E7E               	movlw	high STR_11
  2649  007A36  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2650  007A38  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  2651                           
  2652                           ;SX1272.c: 85:             break;
  2653  007A3C  EF5D  F03D         	goto	l92
  2654  007A40                     l1522:
  2655                           
  2656                           ;SX1272.c: 87:             UARTWriteStrLn("single receive mode");
  2657  007A40  0E49               	movlw	low STR_12
  2658  007A42  6E02               	movwf	UARTWriteStrLn@string^0,c
  2659  007A44  0E7F               	movlw	high STR_12
  2660  007A46  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2661  007A48  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  2662                           
  2663                           ;SX1272.c: 88:             break;
  2664  007A4C  EF5D  F03D         	goto	l92
  2665  007A50                     l1524:
  2666                           
  2667                           ;SX1272.c: 90:             UARTWriteStrLn("Channel Activity Detection");
  2668  007A50  0E88               	movlw	low STR_13
  2669  007A52  6E02               	movwf	UARTWriteStrLn@string^0,c
  2670  007A54  0E7E               	movlw	high STR_13
  2671  007A56  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2672  007A58  ECC9  F03A         	call	_UARTWriteStrLn	;wreg free
  2673                           
  2674                           ;SX1272.c: 91:             break;
  2675  007A5C  EF5D  F03D         	goto	l92
  2676  007A60                     l1528:
  2677  007A60  500D               	movf	GetMode@masked_reg^0,w,c
  2678  007A62  6E0B               	movwf	??_GetMode^0,c
  2679  007A64  6A0C               	clrf	(??_GetMode+1)^0,c
  2680                           
  2681                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2682                           ; Switch size 1, requested type "simple"
  2683                           ; Number of cases is 1, Range of values is 0 to 0
  2684                           ; switch strategies available:
  2685                           ; Name         Instructions Cycles
  2686                           ; simple_byte            4     3 (average)
  2687                           ;	Chosen strategy is simple_byte
  2688  007A66  500C               	movf	(??_GetMode+1)^0,w,c
  2689  007A68  0A00               	xorlw	0	; case 0
  2690  007A6A  B4D8               	btfsc	status,2,c
  2691  007A6C  EF3A  F03D         	goto	l1860
  2692  007A70  EF5D  F03D         	goto	l92
  2693  007A74                     l1860:
  2694                           
  2695                           ; Switch size 1, requested type "simple"
  2696                           ; Number of cases is 8, Range of values is 0 to 7
  2697                           ; switch strategies available:
  2698                           ; Name         Instructions Cycles
  2699                           ; simple_byte           25    13 (average)
  2700                           ;	Chosen strategy is simple_byte
  2701  007A74  500B               	movf	??_GetMode^0,w,c
  2702  007A76  0A00               	xorlw	0	; case 0
  2703  007A78  B4D8               	btfsc	status,2,c
  2704  007A7A  EFF0  F03C         	goto	l1510
  2705  007A7E  0A01               	xorlw	1	; case 1
  2706  007A80  B4D8               	btfsc	status,2,c
  2707  007A82  EFF8  F03C         	goto	l1512
  2708  007A86  0A03               	xorlw	3	; case 2
  2709  007A88  B4D8               	btfsc	status,2,c
  2710  007A8A  EF00  F03D         	goto	l1514
  2711  007A8E  0A01               	xorlw	1	; case 3
  2712  007A90  B4D8               	btfsc	status,2,c
  2713  007A92  EF08  F03D         	goto	l1516
  2714  007A96  0A07               	xorlw	7	; case 4
  2715  007A98  B4D8               	btfsc	status,2,c
  2716  007A9A  EF10  F03D         	goto	l1518
  2717  007A9E  0A01               	xorlw	1	; case 5
  2718  007AA0  B4D8               	btfsc	status,2,c
  2719  007AA2  EF18  F03D         	goto	l1520
  2720  007AA6  0A03               	xorlw	3	; case 6
  2721  007AA8  B4D8               	btfsc	status,2,c
  2722  007AAA  EF20  F03D         	goto	l1522
  2723  007AAE  0A01               	xorlw	1	; case 7
  2724  007AB0  B4D8               	btfsc	status,2,c
  2725  007AB2  EF28  F03D         	goto	l1524
  2726  007AB6  EF5D  F03D         	goto	l92
  2727  007ABA                     l92:
  2728  007ABA  0012               	return		;funcret
  2729  007ABC                     __end_of_GetMode:
  2730                           	callstack 0
  2731                           
  2732 ;; *************** function _UARTWriteStrLn *****************
  2733 ;; Defined at:
  2734 ;;		line 77 in file "uart.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;  string          2    1[COMRAM] PTR unsigned char 
  2737 ;;		 -> STR_33(18), STR_32(18), STR_31(18), STR_30(25), 
  2738 ;;		 -> STR_29(2), STR_28(2), STR_25(18), STR_24(2), 
  2739 ;;		 -> STR_23(22), STR_22(25), STR_21(24), STR_20(2), 
  2740 ;;		 -> STR_17(2), STR_15(2), STR_13(27), STR_12(20), 
  2741 ;;		 -> STR_11(24), STR_10(23), STR_9(8), STR_8(23), 
  2742 ;;		 -> STR_7(13), STR_6(11), STR_5(11), STR_4(38), 
  2743 ;;		 -> STR_3(12), STR_2(2), 
  2744 ;; Auto vars:     Size  Location     Type
  2745 ;;  i               1    5[COMRAM] unsigned char 
  2746 ;; Return value:  Size  Location     Type
  2747 ;;                  1    wreg      void 
  2748 ;; Registers used:
  2749 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2750 ;; Tracked objects:
  2751 ;;		On entry : 0/0
  2752 ;;		On exit  : 0/0
  2753 ;;		Unchanged: 0/0
  2754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2755 ;;      Params:         2       0       0       0       0       0       0       0       0
  2756 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2757 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2758 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2759 ;;Total ram usage:        5 bytes
  2760 ;; Hardware stack levels used: 1
  2761 ;; Hardware stack levels required when called: 1
  2762 ;; This function calls:
  2763 ;;		_UARTWriteByte
  2764 ;; This function is called by:
  2765 ;;		_GetMode
  2766 ;;		_Transmit
  2767 ;;		_Receive
  2768 ;;		_main
  2769 ;;		_printBatteryLevel
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           	psect	text13
  2774  007592                     __ptext13:
  2775                           	callstack 0
  2776  007592                     _UARTWriteStrLn:
  2777                           	callstack 29
  2778  007592                     
  2779                           ;uart.c: 78:   uint8_t i = 0;
  2780  007592  0E00               	movlw	0
  2781  007594  6E06               	movwf	UARTWriteStrLn@i^0,c
  2782                           
  2783                           ;uart.c: 80:   while (string[i])
  2784  007596  EFDC  F03A         	goto	l1482
  2785  00759A                     l1478:
  2786                           
  2787                           ;uart.c: 81:     UARTWriteByte(string[i++]);
  2788  00759A  5006               	movf	UARTWriteStrLn@i^0,w,c
  2789  00759C  2402               	addwf	UARTWriteStrLn@string^0,w,c
  2790  00759E  6E04               	movwf	??_UARTWriteStrLn^0,c
  2791  0075A0  0E00               	movlw	0
  2792  0075A2  2003               	addwfc	(UARTWriteStrLn@string+1)^0,w,c
  2793  0075A4  6E05               	movwf	(??_UARTWriteStrLn+1)^0,c
  2794  0075A6  C004  FFF6         	movff	??_UARTWriteStrLn,tblptrl
  2795  0075AA  C005  FFF7         	movff	??_UARTWriteStrLn+1,tblptrh
  2796  0075AE                     	if	0	;tblptru may be non-zero
  2797  0075AE                     	endif
  2798  0075AE                     	if	0	;tblptru may be non-zero
  2799  0075AE                     	endif
  2800  0075AE  0008               	tblrd		*
  2801  0075B0  50F5               	movf	tablat,w,c
  2802  0075B2  ECFB  F039         	call	_UARTWriteByte
  2803  0075B6  2A06               	incf	UARTWriteStrLn@i^0,f,c
  2804  0075B8                     l1482:
  2805                           
  2806                           ;uart.c: 80:   while (string[i])
  2807  0075B8  5006               	movf	UARTWriteStrLn@i^0,w,c
  2808  0075BA  2402               	addwf	UARTWriteStrLn@string^0,w,c
  2809  0075BC  6E04               	movwf	??_UARTWriteStrLn^0,c
  2810  0075BE  0E00               	movlw	0
  2811  0075C0  2003               	addwfc	(UARTWriteStrLn@string+1)^0,w,c
  2812  0075C2  6E05               	movwf	(??_UARTWriteStrLn+1)^0,c
  2813  0075C4  C004  FFF6         	movff	??_UARTWriteStrLn,tblptrl
  2814  0075C8  C005  FFF7         	movff	??_UARTWriteStrLn+1,tblptrh
  2815  0075CC                     	if	0	;tblptru may be non-zero
  2816  0075CC                     	endif
  2817  0075CC                     	if	0	;tblptru may be non-zero
  2818  0075CC                     	endif
  2819  0075CC  0008               	tblrd		*
  2820  0075CE  50F5               	movf	tablat,w,c
  2821  0075D0  0900               	iorlw	0
  2822  0075D2  A4D8               	btfss	status,2,c
  2823  0075D4  EFEE  F03A         	goto	u391
  2824  0075D8  EFF0  F03A         	goto	u390
  2825  0075DC                     u391:
  2826  0075DC  EFCD  F03A         	goto	l1478
  2827  0075E0                     u390:
  2828  0075E0                     
  2829                           ;uart.c: 83:   UARTWriteByte(0x0D);
  2830  0075E0  0E0D               	movlw	13
  2831  0075E2  ECFB  F039         	call	_UARTWriteByte
  2832                           
  2833                           ;uart.c: 84:   UARTWriteByte(0x0A);
  2834  0075E6  0E0A               	movlw	10
  2835  0075E8  ECFB  F039         	call	_UARTWriteByte
  2836  0075EC  0012               	return		;funcret
  2837  0075EE                     __end_of_UARTWriteStrLn:
  2838                           	callstack 0
  2839                           
  2840 ;; *************** function _UARTWriteStr *****************
  2841 ;; Defined at:
  2842 ;;		line 70 in file "uart.c"
  2843 ;; Parameters:    Size  Location     Type
  2844 ;;  string          2    1[COMRAM] PTR unsigned char 
  2845 ;;		 -> STR_27(2), STR_26(16), STR_19(2), STR_18(18), 
  2846 ;;		 -> STR_16(27), printBatteryLevel@string(6), STR_1(17), 
  2847 ;; Auto vars:     Size  Location     Type
  2848 ;;  i               1    5[COMRAM] unsigned char 
  2849 ;; Return value:  Size  Location     Type
  2850 ;;                  1    wreg      void 
  2851 ;; Registers used:
  2852 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2853 ;; Tracked objects:
  2854 ;;		On entry : 0/0
  2855 ;;		On exit  : 0/0
  2856 ;;		Unchanged: 0/0
  2857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2858 ;;      Params:         2       0       0       0       0       0       0       0       0
  2859 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2860 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2861 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2862 ;;Total ram usage:        5 bytes
  2863 ;; Hardware stack levels used: 1
  2864 ;; Hardware stack levels required when called: 1
  2865 ;; This function calls:
  2866 ;;		_UARTWriteByte
  2867 ;; This function is called by:
  2868 ;;		_GetMode
  2869 ;;		_Transmit
  2870 ;;		_Receive
  2871 ;;		_printBatteryLevel
  2872 ;; This function uses a non-reentrant model
  2873 ;;
  2874                           
  2875                           	psect	text14
  2876  0075EE                     __ptext14:
  2877                           	callstack 0
  2878  0075EE                     _UARTWriteStr:
  2879                           	callstack 28
  2880  0075EE                     
  2881                           ;uart.c: 71:   uint8_t i = 0;
  2882  0075EE  0E00               	movlw	0
  2883  0075F0  6E06               	movwf	UARTWriteStr@i^0,c
  2884                           
  2885                           ;uart.c: 73:   while (string[i])
  2886  0075F2  EF14  F03B         	goto	l1466
  2887  0075F6                     l1462:
  2888                           
  2889                           ;uart.c: 74:     UARTWriteByte(string[i++]);
  2890  0075F6  5006               	movf	UARTWriteStr@i^0,w,c
  2891  0075F8  2402               	addwf	UARTWriteStr@string^0,w,c
  2892  0075FA  6E04               	movwf	??_UARTWriteStr^0,c
  2893  0075FC  0E00               	movlw	0
  2894  0075FE  2003               	addwfc	(UARTWriteStr@string+1)^0,w,c
  2895  007600  6E05               	movwf	(??_UARTWriteStr+1)^0,c
  2896  007602  C004  FFF6         	movff	??_UARTWriteStr,tblptrl
  2897  007606  C005  FFF7         	movff	??_UARTWriteStr+1,tblptrh
  2898  00760A  6AF8               	clrf	tblptru,c
  2899  00760C  0E07               	movlw	(high __ramtop+-1)
  2900  00760E  64F7               	cpfsgt	tblptrh,c
  2901  007610  D003               	bra	u337
  2902  007612  0008               	tblrd		*
  2903  007614  50F5               	movf	tablat,w,c
  2904  007616  D005               	bra	u330
  2905  007618                     u337:
  2906  007618  CFF6 FFE9          	movff	tblptrl,fsr0l
  2907  00761C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2908  007620  50EF               	movf	indf0,w,c
  2909  007622                     u330:
  2910  007622  ECFB  F039         	call	_UARTWriteByte
  2911  007626  2A06               	incf	UARTWriteStr@i^0,f,c
  2912  007628                     l1466:
  2913                           
  2914                           ;uart.c: 73:   while (string[i])
  2915  007628  5006               	movf	UARTWriteStr@i^0,w,c
  2916  00762A  2402               	addwf	UARTWriteStr@string^0,w,c
  2917  00762C  6E04               	movwf	??_UARTWriteStr^0,c
  2918  00762E  0E00               	movlw	0
  2919  007630  2003               	addwfc	(UARTWriteStr@string+1)^0,w,c
  2920  007632  6E05               	movwf	(??_UARTWriteStr+1)^0,c
  2921  007634  C004  FFF6         	movff	??_UARTWriteStr,tblptrl
  2922  007638  C005  FFF7         	movff	??_UARTWriteStr+1,tblptrh
  2923  00763C  6AF8               	clrf	tblptru,c
  2924  00763E  0E07               	movlw	(high __ramtop+-1)
  2925  007640  64F7               	cpfsgt	tblptrh,c
  2926  007642  D003               	bra	u347
  2927  007644  0008               	tblrd		*
  2928  007646  50F5               	movf	tablat,w,c
  2929  007648  D005               	bra	u340
  2930  00764A                     u347:
  2931  00764A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2932  00764E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2933  007652  50EF               	movf	indf0,w,c
  2934  007654                     u340:
  2935  007654  0900               	iorlw	0
  2936  007656  A4D8               	btfss	status,2,c
  2937  007658  EF30  F03B         	goto	u351
  2938  00765C  EF32  F03B         	goto	u350
  2939  007660                     u351:
  2940  007660  EFFB  F03A         	goto	l1462
  2941  007664                     u350:
  2942  007664  0012               	return		;funcret
  2943  007666                     __end_of_UARTWriteStr:
  2944                           	callstack 0
  2945                           
  2946 ;; *************** function _UARTWriteByteHex *****************
  2947 ;; Defined at:
  2948 ;;		line 87 in file "uart.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;  data            2    1[COMRAM] unsigned short 
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;  hexa            2    8[COMRAM] PTR unsigned char 
  2953 ;;		 -> STR_14(17), 
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  1    wreg      void 
  2956 ;; Registers used:
  2957 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2963 ;;      Params:         2       0       0       0       0       0       0       0       0
  2964 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2965 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2966 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2967 ;;Total ram usage:        9 bytes
  2968 ;; Hardware stack levels used: 1
  2969 ;; Hardware stack levels required when called: 1
  2970 ;; This function calls:
  2971 ;;		_UARTWriteByte
  2972 ;; This function is called by:
  2973 ;;		_GetMode
  2974 ;;		_Transmit
  2975 ;;		_Receive
  2976 ;; This function uses a non-reentrant model
  2977 ;;
  2978                           
  2979                           	psect	text15
  2980  007666                     __ptext15:
  2981                           	callstack 0
  2982  007666                     _UARTWriteByteHex:
  2983                           	callstack 28
  2984  007666                     
  2985                           ;uart.c: 88:     char *hexa = "0123456789ABCDEF";
  2986  007666  0E93               	movlw	low STR_14
  2987  007668  6E09               	movwf	UARTWriteByteHex@hexa^0,c
  2988  00766A  0E7F               	movlw	high STR_14
  2989  00766C  6E0A               	movwf	(UARTWriteByteHex@hexa+1)^0,c
  2990                           
  2991                           ;uart.c: 90:     if (data > 4095) UARTWriteByte(hexa[data / 4096]);
  2992  00766E  0E10               	movlw	16
  2993  007670  5C03               	subwf	(UARTWriteByteHex@data+1)^0,w,c
  2994  007672  A0D8               	btfss	status,0,c
  2995  007674  EF3E  F03B         	goto	u361
  2996  007678  EF40  F03B         	goto	u360
  2997  00767C                     u361:
  2998  00767C  EF4F  F03B         	goto	l1472
  2999  007680                     u360:
  3000  007680  3803               	swapf	(UARTWriteByteHex@data+1)^0,w,c
  3001  007682  0B0F               	andlw	15
  3002  007684  2409               	addwf	UARTWriteByteHex@hexa^0,w,c
  3003  007686  6E04               	movwf	??_UARTWriteByteHex^0,c
  3004  007688  0E00               	movlw	0
  3005  00768A  200A               	addwfc	(UARTWriteByteHex@hexa+1)^0,w,c
  3006  00768C  6E05               	movwf	(??_UARTWriteByteHex+1)^0,c
  3007  00768E  C004  FFF6         	movff	??_UARTWriteByteHex,tblptrl
  3008  007692  C005  FFF7         	movff	??_UARTWriteByteHex+1,tblptrh
  3009  007696                     	if	0	;tblptru may be non-zero
  3010  007696                     	endif
  3011  007696                     	if	0	;tblptru may be non-zero
  3012  007696                     	endif
  3013  007696  0008               	tblrd		*
  3014  007698  50F5               	movf	tablat,w,c
  3015  00769A  ECFB  F039         	call	_UARTWriteByte
  3016  00769E                     l1472:
  3017                           
  3018                           ;uart.c: 91:     if (data > 255) UARTWriteByte(hexa[data / 256 % 16]);
  3019  00769E  0403               	decf	(UARTWriteByteHex@data+1)^0,w,c
  3020  0076A0  A0D8               	btfss	status,0,c
  3021  0076A2  EF55  F03B         	goto	u371
  3022  0076A6  EF57  F03B         	goto	u370
  3023  0076AA                     u371:
  3024  0076AA  EF72  F03B         	goto	l152
  3025  0076AE                     u370:
  3026  0076AE  C002  F004         	movff	UARTWriteByteHex@data,??_UARTWriteByteHex
  3027  0076B2  C003  F005         	movff	UARTWriteByteHex@data+1,??_UARTWriteByteHex+1
  3028  0076B6  C005  F004         	movff	??_UARTWriteByteHex+1,??_UARTWriteByteHex
  3029  0076BA  6A05               	clrf	(??_UARTWriteByteHex+1)^0,c
  3030  0076BC  0E0F               	movlw	15
  3031  0076BE  1604               	andwf	??_UARTWriteByteHex^0,f,c
  3032  0076C0  0E00               	movlw	0
  3033  0076C2  1605               	andwf	(??_UARTWriteByteHex+1)^0,f,c
  3034  0076C4  C009  F006         	movff	UARTWriteByteHex@hexa,??_UARTWriteByteHex+2
  3035  0076C8  C00A  F007         	movff	UARTWriteByteHex@hexa+1,??_UARTWriteByteHex+3
  3036  0076CC  5004               	movf	??_UARTWriteByteHex^0,w,c
  3037  0076CE  2606               	addwf	(??_UARTWriteByteHex+2)^0,f,c
  3038  0076D0  5005               	movf	(??_UARTWriteByteHex+1)^0,w,c
  3039  0076D2  2207               	addwfc	(??_UARTWriteByteHex+3)^0,f,c
  3040  0076D4  C006  FFF6         	movff	??_UARTWriteByteHex+2,tblptrl
  3041  0076D8  C007  FFF7         	movff	??_UARTWriteByteHex+3,tblptrh
  3042  0076DC                     	if	0	;tblptru may be non-zero
  3043  0076DC                     	endif
  3044  0076DC                     	if	0	;tblptru may be non-zero
  3045  0076DC                     	endif
  3046  0076DC  0008               	tblrd		*
  3047  0076DE  50F5               	movf	tablat,w,c
  3048  0076E0  ECFB  F039         	call	_UARTWriteByte
  3049  0076E4                     l152:
  3050                           
  3051                           ;uart.c: 92:     UARTWriteByte(hexa[data / 16 % 16]);
  3052  0076E4  C002  F004         	movff	UARTWriteByteHex@data,??_UARTWriteByteHex
  3053  0076E8  C003  F005         	movff	UARTWriteByteHex@data+1,??_UARTWriteByteHex+1
  3054  0076EC  0E04               	movlw	4
  3055  0076EE  6E06               	movwf	(??_UARTWriteByteHex+2)^0,c
  3056  0076F0                     u385:
  3057  0076F0  90D8               	bcf	status,0,c
  3058  0076F2  3205               	rrcf	(??_UARTWriteByteHex+1)^0,f,c
  3059  0076F4  3204               	rrcf	??_UARTWriteByteHex^0,f,c
  3060  0076F6  2E06               	decfsz	(??_UARTWriteByteHex+2)^0,f,c
  3061  0076F8  EF78  F03B         	goto	u385
  3062  0076FC  0E0F               	movlw	15
  3063  0076FE  1604               	andwf	??_UARTWriteByteHex^0,f,c
  3064  007700  0E00               	movlw	0
  3065  007702  1605               	andwf	(??_UARTWriteByteHex+1)^0,f,c
  3066  007704  C009  F007         	movff	UARTWriteByteHex@hexa,??_UARTWriteByteHex+3
  3067  007708  C00A  F008         	movff	UARTWriteByteHex@hexa+1,??_UARTWriteByteHex+4
  3068  00770C  5004               	movf	??_UARTWriteByteHex^0,w,c
  3069  00770E  2607               	addwf	(??_UARTWriteByteHex+3)^0,f,c
  3070  007710  5005               	movf	(??_UARTWriteByteHex+1)^0,w,c
  3071  007712  2208               	addwfc	(??_UARTWriteByteHex+4)^0,f,c
  3072  007714  C007  FFF6         	movff	??_UARTWriteByteHex+3,tblptrl
  3073  007718  C008  FFF7         	movff	??_UARTWriteByteHex+4,tblptrh
  3074  00771C                     	if	0	;tblptru may be non-zero
  3075  00771C                     	endif
  3076  00771C                     	if	0	;tblptru may be non-zero
  3077  00771C                     	endif
  3078  00771C  0008               	tblrd		*
  3079  00771E  50F5               	movf	tablat,w,c
  3080  007720  ECFB  F039         	call	_UARTWriteByte
  3081                           
  3082                           ;uart.c: 93:     UARTWriteByte(hexa[data % 16]);
  3083  007724  0E0F               	movlw	15
  3084  007726  1402               	andwf	UARTWriteByteHex@data^0,w,c
  3085  007728  6E04               	movwf	??_UARTWriteByteHex^0,c
  3086  00772A  0E00               	movlw	0
  3087  00772C  1403               	andwf	(UARTWriteByteHex@data+1)^0,w,c
  3088  00772E  6E05               	movwf	(??_UARTWriteByteHex+1)^0,c
  3089  007730  C009  F006         	movff	UARTWriteByteHex@hexa,??_UARTWriteByteHex+2
  3090  007734  C00A  F007         	movff	UARTWriteByteHex@hexa+1,??_UARTWriteByteHex+3
  3091  007738  5004               	movf	??_UARTWriteByteHex^0,w,c
  3092  00773A  2606               	addwf	(??_UARTWriteByteHex+2)^0,f,c
  3093  00773C  5005               	movf	(??_UARTWriteByteHex+1)^0,w,c
  3094  00773E  2207               	addwfc	(??_UARTWriteByteHex+3)^0,f,c
  3095  007740  C006  FFF6         	movff	??_UARTWriteByteHex+2,tblptrl
  3096  007744  C007  FFF7         	movff	??_UARTWriteByteHex+3,tblptrh
  3097  007748                     	if	0	;tblptru may be non-zero
  3098  007748                     	endif
  3099  007748                     	if	0	;tblptru may be non-zero
  3100  007748                     	endif
  3101  007748  0008               	tblrd		*
  3102  00774A  50F5               	movf	tablat,w,c
  3103  00774C  ECFB  F039         	call	_UARTWriteByte
  3104  007750  0012               	return		;funcret
  3105  007752                     __end_of_UARTWriteByteHex:
  3106                           	callstack 0
  3107                           
  3108 ;; *************** function _UARTWriteByte *****************
  3109 ;; Defined at:
  3110 ;;		line 59 in file "uart.c"
  3111 ;; Parameters:    Size  Location     Type
  3112 ;;  data            1    wreg     unsigned char 
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;  data            1    0[COMRAM] unsigned char 
  3115 ;; Return value:  Size  Location     Type
  3116 ;;                  1    wreg      void 
  3117 ;; Registers used:
  3118 ;;		wreg
  3119 ;; Tracked objects:
  3120 ;;		On entry : 0/0
  3121 ;;		On exit  : 0/0
  3122 ;;		Unchanged: 0/0
  3123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3124 ;;      Params:         0       0       0       0       0       0       0       0       0
  3125 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3126 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3127 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3128 ;;Total ram usage:        1 bytes
  3129 ;; Hardware stack levels used: 1
  3130 ;; This function calls:
  3131 ;;		Nothing
  3132 ;; This function is called by:
  3133 ;;		_UARTWriteStr
  3134 ;;		_UARTWriteStrLn
  3135 ;;		_UARTWriteByteHex
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139                           	psect	text16
  3140  0073F6                     __ptext16:
  3141                           	callstack 0
  3142  0073F6                     _UARTWriteByte:
  3143                           	callstack 29
  3144                           
  3145                           ;incstack = 0
  3146                           ;UARTWriteByte@data stored from wreg
  3147  0073F6  6E01               	movwf	UARTWriteByte@data^0,c
  3148  0073F8                     l133:
  3149  0073F8  A29E               	btfss	158,1,c	;volatile
  3150  0073FA  EF01  F03A         	goto	u31
  3151  0073FE  EF03  F03A         	goto	u30
  3152  007402                     u31:
  3153  007402  EFFC  F039         	goto	l133
  3154  007406                     u30:
  3155  007406                     
  3156                           ;uart.c: 63:     TX1REG = data;
  3157  007406  C001  FF9A         	movff	UARTWriteByte@data,3994	;volatile
  3158  00740A  0012               	return		;funcret
  3159  00740C                     __end_of_UARTWriteByte:
  3160                           	callstack 0
  3161                           
  3162 ;; *************** function _ReadSXRegister *****************
  3163 ;; Defined at:
  3164 ;;		line 29 in file "SX1272.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  address         1    wreg     unsigned char 
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  address         1    3[COMRAM] unsigned char 
  3169 ;;  RegValue        1    2[COMRAM] unsigned char 
  3170 ;; Return value:  Size  Location     Type
  3171 ;;                  1    wreg      unsigned char 
  3172 ;; Registers used:
  3173 ;;		wreg, status,2, status,0, cstack
  3174 ;; Tracked objects:
  3175 ;;		On entry : 0/0
  3176 ;;		On exit  : 0/0
  3177 ;;		Unchanged: 0/0
  3178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3179 ;;      Params:         0       0       0       0       0       0       0       0       0
  3180 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3181 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3182 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3183 ;;Total ram usage:        2 bytes
  3184 ;; Hardware stack levels used: 1
  3185 ;; Hardware stack levels required when called: 1
  3186 ;; This function calls:
  3187 ;;		_SPIReceive
  3188 ;;		_SPITransfer
  3189 ;; This function is called by:
  3190 ;;		_GetMode
  3191 ;;		_Transmit
  3192 ;;		_Receive
  3193 ;;		_main
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           	psect	text17
  3198  007484                     __ptext17:
  3199                           	callstack 0
  3200  007484                     _ReadSXRegister:
  3201                           	callstack 28
  3202                           
  3203                           ;incstack = 0
  3204                           ;ReadSXRegister@address stored from wreg
  3205  007484  6E04               	movwf	ReadSXRegister@address^0,c
  3206  007486                     
  3207                           ;SX1272.c: 30:     uint8_t RegValue;;SX1272.c: 31:     LATCbits.LATC2 = 0;
  3208  007486  9485               	bcf	133,2,c	;volatile
  3209  007488                     
  3210                           ;SX1272.c: 32:     address = address & 0x7F;
  3211  007488  5004               	movf	ReadSXRegister@address^0,w,c
  3212  00748A  0B7F               	andlw	127
  3213  00748C  6E04               	movwf	ReadSXRegister@address^0,c
  3214  00748E                     
  3215                           ;SX1272.c: 34:     SPITransfer(address);
  3216  00748E  5004               	movf	ReadSXRegister@address^0,w,c
  3217  007490  EC34  F03A         	call	_SPITransfer
  3218  007494                     
  3219                           ;SX1272.c: 35:     RegValue = SPIReceive(0x00);
  3220  007494  0E00               	movlw	0
  3221  007496  EC51  F03A         	call	_SPIReceive
  3222  00749A  6E03               	movwf	ReadSXRegister@RegValue^0,c
  3223  00749C                     
  3224                           ;SX1272.c: 36:     LATCbits.LATC2 = 1;
  3225  00749C  8485               	bsf	133,2,c	;volatile
  3226  00749E                     
  3227                           ;SX1272.c: 37:     return RegValue;
  3228  00749E  5003               	movf	ReadSXRegister@RegValue^0,w,c
  3229  0074A0  0012               	return		;funcret
  3230  0074A2                     __end_of_ReadSXRegister:
  3231                           	callstack 0
  3232                           
  3233 ;; *************** function _SPITransfer *****************
  3234 ;; Defined at:
  3235 ;;		line 50 in file "spi.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;  data_out        1    wreg     unsigned char 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;  data_out        1    0[COMRAM] unsigned char 
  3240 ;;  dummy_byte      1    0        unsigned char 
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  1    wreg      void 
  3243 ;; Registers used:
  3244 ;;		wreg
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3250 ;;      Params:         0       0       0       0       0       0       0       0       0
  3251 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3252 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3253 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3254 ;;Total ram usage:        1 bytes
  3255 ;; Hardware stack levels used: 1
  3256 ;; This function calls:
  3257 ;;		Nothing
  3258 ;; This function is called by:
  3259 ;;		_WriteSXRegister
  3260 ;;		_ReadSXRegister
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           	psect	text18
  3265  007468                     __ptext18:
  3266                           	callstack 0
  3267  007468                     _SPITransfer:
  3268                           	callstack 29
  3269                           
  3270                           ;incstack = 0
  3271                           ;SPITransfer@data_out stored from wreg
  3272  007468  6E01               	movwf	SPITransfer@data_out^0,c
  3273  00746A  5092               	movf	146,w,c	;volatile
  3274                           
  3275                           ;spi.c: 54:     PIR3bits.SSP1IF = 0;
  3276  00746C  010E               	movlb	14	; () banked
  3277  00746E  91CD               	bcf	205,0,b	;volatile
  3278  007470                     
  3279                           ; BSR set to: 14
  3280                           ;spi.c: 55:     SSP1BUF = data_out;
  3281  007470  C001  FF92         	movff	SPITransfer@data_out,3986	;volatile
  3282  007474                     l48:
  3283                           
  3284                           ; BSR set to: 14
  3285  007474  A1CD               	btfss	205,0,b	;volatile
  3286  007476  EF3F  F03A         	goto	u11
  3287  00747A  EF41  F03A         	goto	u10
  3288  00747E                     u11:
  3289  00747E  EF3A  F03A         	goto	l48
  3290  007482                     u10:
  3291  007482                     
  3292                           ; BSR set to: 14
  3293  007482  0012               	return		;funcret
  3294  007484                     __end_of_SPITransfer:
  3295                           	callstack 0
  3296                           
  3297 ;; *************** function _SPIReceive *****************
  3298 ;; Defined at:
  3299 ;;		line 59 in file "spi.c"
  3300 ;; Parameters:    Size  Location     Type
  3301 ;;  data_out        1    wreg     unsigned char 
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;  data_out        1    0[COMRAM] unsigned char 
  3304 ;;  data_in         1    1[COMRAM] unsigned char 
  3305 ;;  dummy_byte      1    0        unsigned char 
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  1    wreg      unsigned char 
  3308 ;; Registers used:
  3309 ;;		wreg, status,2
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3315 ;;      Params:         0       0       0       0       0       0       0       0       0
  3316 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3317 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3318 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3319 ;;Total ram usage:        2 bytes
  3320 ;; Hardware stack levels used: 1
  3321 ;; This function calls:
  3322 ;;		Nothing
  3323 ;; This function is called by:
  3324 ;;		_ReadSXRegister
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           	psect	text19
  3329  0074A2                     __ptext19:
  3330                           	callstack 0
  3331  0074A2                     _SPIReceive:
  3332                           	callstack 28
  3333                           
  3334                           ; BSR set to: 14
  3335                           ;incstack = 0
  3336                           ;SPIReceive@data_out stored from wreg
  3337  0074A2  6E01               	movwf	SPIReceive@data_out^0,c
  3338  0074A4  5092               	movf	146,w,c	;volatile
  3339                           
  3340                           ;spi.c: 63:     PIR3bits.SSP1IF = 0;
  3341  0074A6  010E               	movlb	14	; () banked
  3342  0074A8  91CD               	bcf	205,0,b	;volatile
  3343  0074AA                     
  3344                           ; BSR set to: 14
  3345                           ;spi.c: 64:     SSP1BUF = data_out;
  3346  0074AA  C001  FF92         	movff	SPIReceive@data_out,3986	;volatile
  3347  0074AE                     l54:
  3348                           
  3349                           ; BSR set to: 14
  3350  0074AE  A1CD               	btfss	205,0,b	;volatile
  3351  0074B0  EF5C  F03A         	goto	u21
  3352  0074B4  EF5E  F03A         	goto	u20
  3353  0074B8                     u21:
  3354  0074B8  EF57  F03A         	goto	l54
  3355  0074BC                     u20:
  3356  0074BC                     
  3357                           ; BSR set to: 14
  3358                           ;spi.c: 66:     data_in = SSP1BUF;
  3359  0074BC  CF92 F002          	movff	3986,SPIReceive@data_in	;volatile
  3360                           
  3361                           ;spi.c: 67:     return(data_in);
  3362  0074C0  5002               	movf	SPIReceive@data_in^0,w,c
  3363  0074C2                     
  3364                           ; BSR set to: 14
  3365  0074C2  0012               	return		;funcret
  3366  0074C4                     __end_of_SPIReceive:
  3367                           	callstack 0
  3368                           
  3369                           	psect	rparam
  3370  0000                     
  3371                           	psect	idloc
  3372                           
  3373                           ;Config register IDLOC0 @ 0x200000
  3374                           ;	unspecified, using default values
  3375  200000                     	org	2097152
  3376  200000  0FFF               	dw	4095
  3377                           
  3378                           ;Config register IDLOC1 @ 0x200002
  3379                           ;	unspecified, using default values
  3380  200002                     	org	2097154
  3381  200002  0FFF               	dw	4095
  3382                           
  3383                           ;Config register IDLOC2 @ 0x200004
  3384                           ;	unspecified, using default values
  3385  200004                     	org	2097156
  3386  200004  0FFF               	dw	4095
  3387                           
  3388                           ;Config register IDLOC3 @ 0x200006
  3389                           ;	unspecified, using default values
  3390  200006                     	org	2097158
  3391  200006  0FFF               	dw	4095
  3392                           
  3393                           ;Config register IDLOC4 @ 0x200008
  3394                           ;	unspecified, using default values
  3395  200008                     	org	2097160
  3396  200008  0FFF               	dw	4095
  3397                           
  3398                           ;Config register IDLOC5 @ 0x20000A
  3399                           ;	unspecified, using default values
  3400  20000A                     	org	2097162
  3401  20000A  0FFF               	dw	4095
  3402                           
  3403                           ;Config register IDLOC6 @ 0x20000C
  3404                           ;	unspecified, using default values
  3405  20000C                     	org	2097164
  3406  20000C  0FFF               	dw	4095
  3407                           
  3408                           ;Config register IDLOC7 @ 0x20000E
  3409                           ;	unspecified, using default values
  3410  20000E                     	org	2097166
  3411  20000E  0FFF               	dw	4095
  3412                           
  3413                           	psect	config
  3414                           
  3415                           ;Config register CONFIG1L @ 0x300000
  3416                           ;	External Oscillator mode Selection bits
  3417                           ;	FEXTOSC = OFF, Oscillator not enabled
  3418                           ;	Power-up default value for COSC bits
  3419                           ;	RSTOSC = HFINTOSC_1MHZ, HFINTOSC with HFFRQ = 4 MHz and CDIV = 4:1
  3420  300000                     	org	3145728
  3421  300000  EC                 	db	236
  3422                           
  3423                           ;Config register CONFIG1H @ 0x300001
  3424                           ;	Clock Out Enable bit
  3425                           ;	CLKOUTEN = OFF, CLKOUT function is disabled
  3426                           ;	Clock Switch Enable bit
  3427                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  3428                           ;	Fail-Safe Clock Monitor Enable bit
  3429                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  3430  300001                     	org	3145729
  3431  300001  FF                 	db	255
  3432                           
  3433                           ;Config register CONFIG2L @ 0x300002
  3434                           ;	Master Clear Enable bit
  3435                           ;	MCLRE = EXTMCLR, If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR
  3436                           ;	Power-up Timer Enable bit
  3437                           ;	PWRTE = OFF, Power up timer disabled
  3438                           ;	Low-power BOR enable bit
  3439                           ;	LPBOREN = OFF, ULPBOR disabled
  3440                           ;	Brown-out Reset Enable bits
  3441                           ;	BOREN = SBORDIS, Brown-out Reset enabled , SBOREN bit is ignored
  3442  300002                     	org	3145730
  3443  300002  FF                 	db	255
  3444                           
  3445                           ;Config register CONFIG2H @ 0x300003
  3446                           ;	Brown Out Reset Voltage selection bits
  3447                           ;	BORV = VBOR_2P45, Brown-out Reset Voltage (VBOR) set to 2.45V
  3448                           ;	ZCD Disable bit
  3449                           ;	ZCD = OFF, ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON
  3450                           ;	PPSLOCK bit One-Way Set Enable bit
  3451                           ;	PPS1WAY = ON, PPSLOCK bit can be cleared and set only once; PPS registers remain locke
      +                          d after one clear/set cycle
  3452                           ;	Stack Full/Underflow Reset Enable bit
  3453                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3454                           ;	Debugger Enable bit
  3455                           ;	DEBUG = ON, Background debugger enabled
  3456                           ;	Extended Instruction Set Enable bit
  3457                           ;	XINST = OFF, Extended Instruction Set and Indexed Addressing Mode disabled
  3458  300003                     	org	3145731
  3459  300003  DF                 	db	223
  3460                           
  3461                           ;Config register CONFIG3L @ 0x300004
  3462                           ;	WDT Period Select bits
  3463                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  3464                           ;	WDT operating mode
  3465                           ;	WDTE = OFF, WDT Disabled
  3466  300004                     	org	3145732
  3467  300004  9F                 	db	159
  3468                           
  3469                           ;Config register CONFIG3H @ 0x300005
  3470                           ;	WDT Window Select bits
  3471                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
  3472                           ;	WDT input clock selector
  3473                           ;	WDTCCS = SC, Software Control
  3474  300005                     	org	3145733
  3475  300005  FF                 	db	255
  3476                           
  3477                           ;Config register CONFIG4L @ 0x300006
  3478                           ;	Write Protection Block 0
  3479                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3480                           ;	Write Protection Block 1
  3481                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3482                           ;	Write Protection Block 2
  3483                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3484                           ;	Write Protection Block 3
  3485                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3486  300006                     	org	3145734
  3487  300006  FF                 	db	255
  3488                           
  3489                           ;Config register CONFIG4H @ 0x300007
  3490                           ;	Configuration Register Write Protection bit
  3491                           ;	WRTC = OFF, Configuration registers (300000-30000Bh) not write-protected
  3492                           ;	Boot Block Write Protection bit
  3493                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  3494                           ;	Data EEPROM Write Protection bit
  3495                           ;	WRTD = OFF, Data EEPROM not write-protected
  3496                           ;	Scanner Enable bit
  3497                           ;	SCANE = ON, Scanner module is available for use, SCANMD bit can control the module
  3498                           ;	Low Voltage Programming Enable bit
  3499                           ;	LVP = ON, Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE config
      +                          uration bit is ignored
  3500  300007                     	org	3145735
  3501  300007  FF                 	db	255
  3502                           
  3503                           ;Config register CONFIG5L @ 0x300008
  3504                           ;	UserNVM Program Memory Code Protection bit
  3505                           ;	CP = OFF, UserNVM code protection disabled
  3506                           ;	DataNVM Memory Code Protection bit
  3507                           ;	CPD = OFF, DataNVM code protection disabled
  3508  300008                     	org	3145736
  3509  300008  FF                 	db	255
  3510                           
  3511                           ;Config register CONFIG5H @ 0x300009
  3512                           ;	unspecified, using default values
  3513  300009                     	org	3145737
  3514  300009  FF                 	db	255
  3515                           
  3516                           ;Config register CONFIG6L @ 0x30000A
  3517                           ;	Table Read Protection Block 0
  3518                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3519                           ;	Table Read Protection Block 1
  3520                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3521                           ;	Table Read Protection Block 2
  3522                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3523                           ;	Table Read Protection Block 3
  3524                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3525  30000A                     	org	3145738
  3526  30000A  FF                 	db	255
  3527                           
  3528                           ;Config register CONFIG6H @ 0x30000B
  3529                           ;	Boot Block Table Read Protection bit
  3530                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3531  30000B                     	org	3145739
  3532  30000B  FF                 	db	255
  3533                           tosu	equ	0xFFF
  3534                           tosh	equ	0xFFE
  3535                           tosl	equ	0xFFD
  3536                           stkptr	equ	0xFFC
  3537                           pclatu	equ	0xFFB
  3538                           pclath	equ	0xFFA
  3539                           pcl	equ	0xFF9
  3540                           tblptru	equ	0xFF8
  3541                           tblptrh	equ	0xFF7
  3542                           tblptrl	equ	0xFF6
  3543                           tablat	equ	0xFF5
  3544                           prodh	equ	0xFF4
  3545                           prodl	equ	0xFF3
  3546                           indf0	equ	0xFEF
  3547                           postinc0	equ	0xFEE
  3548                           postdec0	equ	0xFED
  3549                           preinc0	equ	0xFEC
  3550                           plusw0	equ	0xFEB
  3551                           fsr0h	equ	0xFEA
  3552                           fsr0l	equ	0xFE9
  3553                           wreg	equ	0xFE8
  3554                           indf1	equ	0xFE7
  3555                           postinc1	equ	0xFE6
  3556                           postdec1	equ	0xFE5
  3557                           preinc1	equ	0xFE4
  3558                           plusw1	equ	0xFE3
  3559                           fsr1h	equ	0xFE2
  3560                           fsr1l	equ	0xFE1
  3561                           bsr	equ	0xFE0
  3562                           indf2	equ	0xFDF
  3563                           postinc2	equ	0xFDE
  3564                           postdec2	equ	0xFDD
  3565                           preinc2	equ	0xFDC
  3566                           plusw2	equ	0xFDB
  3567                           fsr2h	equ	0xFDA
  3568                           fsr2l	equ	0xFD9
  3569                           status	equ	0xFD8

Data Sizes:
    Strings     439
    Constant    0
    Data        9
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     66      75
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Receive@data	PTR unsigned char  size(2) Largest target is 30
		 -> main@rxMsg(COMRAM[30]), 

    Transmit@data	PTR const unsigned char  size(2) Largest target is 9
		 -> main@txMsg(COMRAM[9]), 

    UARTWriteByteHex@hexa	PTR unsigned char  size(2) Largest target is 17
		 -> STR_14(CODE[17]), 

    UARTWriteStrLn@string	PTR unsigned char  size(2) Largest target is 38
		 -> STR_33(CODE[18]), STR_32(CODE[18]), STR_31(CODE[18]), STR_30(CODE[25]), 
		 -> STR_29(CODE[2]), STR_28(CODE[2]), STR_25(CODE[18]), STR_24(CODE[2]), 
		 -> STR_23(CODE[22]), STR_22(CODE[25]), STR_21(CODE[24]), STR_20(CODE[2]), 
		 -> STR_17(CODE[2]), STR_15(CODE[2]), STR_13(CODE[27]), STR_12(CODE[20]), 
		 -> STR_11(CODE[24]), STR_10(CODE[23]), STR_9(CODE[8]), STR_8(CODE[23]), 
		 -> STR_7(CODE[13]), STR_6(CODE[11]), STR_5(CODE[11]), STR_4(CODE[38]), 
		 -> STR_3(CODE[12]), STR_2(CODE[2]), 

    UARTWriteStr@string	PTR unsigned char  size(2) Largest target is 27
		 -> STR_27(CODE[2]), STR_26(CODE[16]), STR_19(CODE[2]), STR_18(CODE[18]), 
		 -> STR_16(CODE[27]), printBatteryLevel@string(COMRAM[6]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_Receive
    _main->_Transmit
    _Transmit->_UARTWriteByteHex
    _Receive->_UARTWriteByteHex
    _InitModule->_WriteSXRegister
    _WriteSXRegister->_ReadSXRegister
    _GetMode->_UARTWriteByteHex
    _UARTWriteStrLn->_UARTWriteByte
    _UARTWriteStr->_UARTWriteByte
    _UARTWriteByteHex->_UARTWriteByte
    _ReadSXRegister->_SPIReceive

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                50    45      5   25565
                                             16 COMRAM    50    45      5
                            _GetMode
                         _InitModule
                     _InitRFLoRaPins
                     _ReadSXRegister
                            _Receive
                      _ResetRFModule
                            _SPIInit
                           _Transmit
                           _UARTInit
                     _UARTWriteStrLn
                    _WriteSXRegister
                      _initVoltmeter
 ---------------------------------------------------------------------------------
 (1) _initVoltmeter                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Transmit                                             6     3      3    6936
                                             10 COMRAM     6     3      3
                          _AntennaTX
                     _ReadSXRegister
                   _UARTWriteByteHex
                       _UARTWriteStr
                     _UARTWriteStrLn
                    _WriteSXRegister
 ---------------------------------------------------------------------------------
 (2) _AntennaTX                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ResetRFModule                                        1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Receive                                              6     4      2    6468
                                             10 COMRAM     6     4      2
                          _AntennaRX
                     _ReadSXRegister
                   _UARTWriteByteHex
                       _UARTWriteStr
                     _UARTWriteStrLn
                    _WriteSXRegister
 ---------------------------------------------------------------------------------
 (2) _AntennaRX                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitRFLoRaPins                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitModule                                           1     1      0    2917
                    _WriteSXRegister
 ---------------------------------------------------------------------------------
 (1) _WriteSXRegister                                      2     1      1    2894
                                              4 COMRAM     2     1      1
                     _ReadSXRegister (ARG)
                        _SPITransfer
 ---------------------------------------------------------------------------------
 (1) _GetMode                                              4     4      0    3430
                                             10 COMRAM     4     4      0
                     _ReadSXRegister
                   _UARTWriteByteHex
                       _UARTWriteStr
                     _UARTWriteStrLn
 ---------------------------------------------------------------------------------
 (1) _UARTWriteStrLn                                       5     3      2    2081
                                              1 COMRAM     5     3      2
                      _UARTWriteByte
 ---------------------------------------------------------------------------------
 (2) _UARTWriteStr                                         5     3      2     637
                                              1 COMRAM     5     3      2
                      _UARTWriteByte
 ---------------------------------------------------------------------------------
 (2) _UARTWriteByteHex                                     9     7      2     464
                                              1 COMRAM     9     7      2
                      _UARTWriteByte
 ---------------------------------------------------------------------------------
 (2) _UARTWriteByte                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ReadSXRegister                                       2     2      0      90
                                              2 COMRAM     2     2      0
                         _SPIReceive
                        _SPITransfer
 ---------------------------------------------------------------------------------
 (2) _SPITransfer                                          2     2      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SPIReceive                                           3     3      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetMode
     _ReadSXRegister
       _SPIReceive
       _SPITransfer
     _UARTWriteByteHex
       _UARTWriteByte
     _UARTWriteStr
       _UARTWriteByte
     _UARTWriteStrLn
       _UARTWriteByte
   _InitModule
     _WriteSXRegister
       _ReadSXRegister (ARG)
       _SPITransfer (ARG)
   _InitRFLoRaPins
   _ReadSXRegister
   _Receive
     _AntennaRX
     _ReadSXRegister
     _UARTWriteByteHex
     _UARTWriteStr
     _UARTWriteStrLn
     _WriteSXRegister
   _ResetRFModule
   _SPIInit
   _Transmit
     _AntennaTX
     _ReadSXRegister
     _UARTWriteByteHex
     _UARTWriteStr
     _UARTWriteStrLn
     _WriteSXRegister
   _UARTInit
   _UARTWriteStrLn
   _WriteSXRegister
   _initVoltmeter

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      40        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     42      4B       1       78.9%
BITBIGSFRhhhhl      52      0       0      21        0.0%
BITBIGSFRllhl       35      0       0      31        0.0%
BITBIGSFRllllhh     2C      0       0      35        0.0%
BITBIGSFRllhhhh     1E      0       0      27        0.0%
BITBIGSFRlllll      17      0       0      38        0.0%
BITBIGSFRlllhhl     13      0       0      33        0.0%
BITBIGSFRlllhhh      F      0       0      32        0.0%
BITBIGSFRhhhhh       D      0       0      20        0.0%
BITBIGSFRllllhl      C      0       0      37        0.0%
BITBIGSFRllllhl      7      0       0      36        0.0%
BITBIGSFRhll         7      0       0      25        0.0%
BITBIGSFRllhhll      4      0       0      30        0.0%
BITBIGSFRllhhlh      2      0       0      29        0.0%
BITBIGSFRllhhhl      2      0       0      28        0.0%
BITBIGSFRhlh         2      0       0      24        0.0%
BITBIGSFRlh          2      0       0      26        0.0%
BITBIGSFRhhhl        1      0       0      22        0.0%
BITBIGSFRhhl         1      0       0      23        0.0%
BITBIGSFRlllhl       1      0       0      34        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4B      39        0.0%
DATA                 0      0      4B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon May 22 15:35:35 2023

  __end_of_InitRFLoRaPins 73F6     __end_of_ResetRFModule 74EC                         l9 73F4  
                      l12 74EA                        l15 7436                        l18 7420  
                      l51 7482                        l45 754C                        l54 74AE  
                      l56 74BC                        l48 7474                        l72 7466  
                      l57 74C2                        l75 74A0                        l92 7ABA  
                      l95 7842                        u10 7482                        u11 747E  
                      u20 74BC                        u21 74B8                        u30 7406  
                      u31 7402               _SPITransfer 7468    Receive@RXNumberOfBytes 000E  
        _UARTWriteByteHex 7666                       l130 7590                       l133 73F8  
                     l142 7664                       l136 740A                       l152 76E4  
                     l153 7750                       l225 7C2E                       l217 7952  
                     l148 75EC                       l228 7B76                       l176 744C  
                     l275 7DD8                       l960 7470                       l962 74A4  
                     l970 7422                       l964 74AA                       l980 741E  
                     l972 7426                       l958 746A                       l966 73F8  
                     l974 7434                       l992 7486                       l968 7406  
                     l976 740C                       l994 7488                       l978 7410  
                     l996 748E                       l998 7494                       u400 7994  
                     u401 7990                       u330 7622                       u410 79AA  
                     u411 79A6                       u340 7654                       u500 7B76  
                     u420 7874                       u501 7B72                       u421 7870  
                     u350 7664                       u510 7B84                       u430 78A2  
                     u351 7660                       u511 7B80                       u431 789E  
                     u360 7680                       u520 7C18                       u440 78DE  
                     u361 767C                       u337 7618                       u521 7C14  
                     u441 78DA                       u370 76AE                       u450 7908  
                     u371 76AA                       u347 764A                       u451 7904  
                     u531 7CE6                       u460 7946                       u540 7D04  
                     u461 7942                       u541 7D00                       u390 75E0  
                     u470 7B16                       u550 7D5E                       u391 75DC  
                     u471 7B12                       u551 7D5A                       u607 7C3A  
                     u480 7B24                       u560 7D7C                       u385 76F0  
                     u481 7B20                       u561 7D78                       u617 7C64  
                     u490 7B3A                       u570 7D8E                       u707 7416  
                     u491 7B36                       u571 7D8A                       u627 7C6C  
                     u580 7DD8                       u581 7DD4                       u637 7C78  
                     u590 7E3A                       u591 7E36                       u647 7CBE  
                     u657 78B2                       u667 742C                       u677 74CE  
                     u687 74E0                       u697 7ADE                       wreg 000FE8  
            _BAUD1CONbits 000F9F                      l1000 749C                      l1002 749E  
                    l1032 73EA                      l1040 7516                      l1034 74C4  
                    l1042 752E                      l1036 74C8                      l1038 74D8  
                    l1170 7446                      l1500 799A                      l1172 7448  
                    l1510 79E0                      l1502 79AA                      l1174 744A  
                    l1520 7A30                      l1512 79F0                      l1504 79BA  
                    l1600 7586                      l1168 7438                      l1522 7A40  
                    l1514 7A00                      l1506 79CA                      l1450 7450  
                    l1610 7844                      l1602 7588                      l1460 75EE  
                    l1524 7A50                      l1516 7A10                      l1508 79D6  
                    l1452 7452                      l1540 7784                      l1700 7BC2  
                    l1612 7848                      l1604 758A                      l1470 7680  
                    l1462 75F6                      l1518 7A20                      l1454 7458  
                    l1550 77B6                      l1542 778E                      l1534 7752  
                    l1702 7BCA                      l1710 7C06                      l1630 78AC  
                    l1622 7878                      l1614 7856                      l1606 758C  
                    l1472 769E                      l1464 7626                      l1480 75B6  
                    l1528 7A60                      l1456 745E                      l1560 77E8  
                    l1552 77C0                      l1544 7798                      l1536 777A  
                    l1712 7C18                      l1704 7BDE                      l1640 78E8  
                    l1632 78BC                      l1624 788E                      l1616 7860  
                    l1608 758E                      l1800 7D2C                      l1474 76AE  
                    l1466 7628                      l1482 75B8                      l1490 7968  
                    l1458 7464                      l1570 781A                      l1562 77F2  
                    l1554 77CA                      l1546 77A2                      l1538 777A  
                    l1706 7BF8                      l1714 7C24                      l1650 7926  
                    l1642 78F4                      l1634 78C8                      l1626 7890  
                    l1618 7864                      l1810 7D4C                      l1802 7D30  
                    l1468 7666                      l1484 75E0                      l1476 7592  
                    l1492 7972                      l1572 7824                      l1564 77FC  
                    l1556 77D4                      l1548 77AC                      l1708 7C04  
                    l1660 7ABC                      l1652 7932                      l1644 78F8  
                    l1636 78D0                      l1628 78A2                      l1580 755A  
                    l1820 7D96                      l1812 7D5E                      l1804 7D34  
                    l1478 759A                      l1494 797E                      l1486 7954  
                    l1574 782E                      l1566 7806                      l1558 77DE  
                    l1670 7AF4                      l1662 7AC0                      l1654 7934  
                    l1638 78DE                      l1590 7570                      l1582 7568  
                    l1830 7DF8                      l1822 7DB2                      l1814 7D6A  
                    l1806 7D38                      l1496 7984                      l1488 795C  
                    l1576 7838                      l1568 7810                      l1680 7B3A  
                    l1672 7B00                      l1664 7ACE                      l1656 7946  
                    l1648 790C                      l1592 7572                      l1584 756A  
                    l1832 7E14                      l1824 7DB4                      l1816 7D7C  
                    l1808 7D3C                      l1760 7C56                      l1752 7C30  
                    l1498 7994                      l1690 7B68                      l1674 7B08  
                    l1666 7AD8                      l1594 7574                      l1586 756C  
                    l1578 754E                      l1834 7E16                      l1826 7DDC  
                    l1818 7D8E                      l1770 7C8E                      l1762 7C62  
                    l1754 7C46                      l1860 7A74                      l1692 7B84  
                    l1684 7B48                      l1676 7B16                      l1668 7AE8  
                    l1596 7576                      l1588 756E                      l1836 7E3A  
                    l1828 7DF0                      l1780 7CC8                      l1772 7C9A  
                    l1764 7C6A                      l1756 7C4A                      l1694 7BA0  
                    l1686 7B54                      l1678 7B24                      l1598 7578  
                    l1790 7D04                      l1782 7CCC                      l1774 7CA4  
                    l1766 7C72                      l1758 7C4E                      l1696 7BAC  
                    l1688 7B60                      l1792 7D10                      l1784 7CD8  
                    l1776 7CAE                      l1768 7C82                      l1698 7BB4  
                    l1794 7D1C                      l1786 7CDC                      l1778 7CB8  
                    l1796 7D24                      l1788 7CEE                      l1798 7D28  
                    STR_1 7FA4                      STR_2 7E86                      STR_3 7FD2  
                    STR_4 7E47                      STR_5 7FDE                      STR_6 7FE9  
                    STR_7 7FC5                      STR_8 7F1C                      STR_9 7FF4  
       GetMode@masked_reg 000D     ReadSXRegister@address 0004                      _main 7C30  
            Transmit@data 000B           __end_of_SPIInit 754E                      fsr0h 000FEA  
                    indf0 000FEF                      fsr0l 000FE9                      indf1 000FE7  
                    indf2 000FDF                      fsr1l 000FE1                      fsr2l 000FD9  
                    start 0000           __end_of_GetMode 7ABC    ReadSXRegister@RegValue 0003  
            ___param_bank 000000           ?_InitRFLoRaPins 0001           __end_of_Receive 7C30  
                   _ADACQ 000F5C                     ?_main 0011                     _ADCLK 000F57  
                   _ADPCH 000F5F                     STR_10 7F05                     STR_11 7EED  
                   STR_20 7E86                     STR_12 7F49                     STR_21 7ED5  
                   STR_13 7E88                     STR_14 7F93                     STR_22 7EBC  
                   STR_30 7EA3                     STR_31 7F5D                     STR_23 7F33  
                   STR_24 7E86                     STR_32 7F5D                     STR_16 7E6D  
                   STR_33 7F5D                     STR_17 7FFC                     STR_25 7F81  
                   STR_26 7FB5                     STR_18 7F6F                     STR_27 7E86  
                   STR_19 7E86                     STR_28 7E86                     STR_29 7E86  
        __end_of_UARTInit 7592                     main@i 0041           UARTWriteStrLn@i 0006  
                   tablat 000FF5            _ReadSXRegister 7484                     plusw1 000FE3  
                   plusw2 000FDB                     status 000FD8      UARTWriteByteHex@data 0002  
    UARTWriteByteHex@hexa 0009               ?_SPIReceive 0001           __initialization 74EC  
              _InitModule 7752              __end_of_main 7E46                    ??_main 0016  
           __activetblptr 000002          __end_of_Transmit 7954                    _ADRESH 000F64  
                  _ADRESL 000F63                 ??_SPIInit 0001    __end_of_ReadSXRegister 74A2  
                  _RC1STA 000F9D                    _RC3PPS 000EFA                    _RC5PPS 000EFC  
                  _RC6PPS 000EFD                    _SP1BRG 000F9B                 ??_GetMode 000B  
                  _TX1REG 000F9A                    _TX1STA 000F9E                 ??_Receive 000D  
             Receive@data 000B                    isa$std 000001        SPIReceive@data_out 0001  
            __pdataCOMRAM 0043              __mediumconst 7E46                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8           ?_ReadSXRegister 0001  
              __accesstop 0060   __end_of__initialization 750C  __end_of_UARTWriteByteHex 7752  
           ___rparam_used 000001         __end_of_AntennaRX 7422         __end_of_AntennaTX 7438  
             ?_InitModule 0001            __pcstackCOMRAM 0001                 ?_UARTInit 0001  
            ?_SPITransfer 0001       main@RXNumberOfBytes 0040     __end_of_UARTWriteByte 740C  
           _initVoltmeter 7438          ??_InitRFLoRaPins 0001                ??_UARTInit 0003  
               ?_Transmit 000B            ?_initVoltmeter 0001                   _SP1BRGH 000F9C  
                 _SSP1BUF 000F92                   _SPIInit 7516                   _GetMode 7954  
       UARTWriteByte@data 0001                   _Receive 7ABC              ??_SPIReceive 0001  
                 __Hparam 0000                   __Lparam 0000             ?_UARTWriteStr 0002  
              ??_Transmit 000E                   __pcinit 74EC                   __ramtop 0800  
                 __ptext0 7C30                   __ptext1 7438                   __ptext2 754E  
                 __ptext3 7844                   __ptext4 7422                   __ptext5 7516  
                 __ptext6 74C4                   __ptext7 7ABC                   __ptext8 740C  
                 __ptext9 73EA         ??_WriteSXRegister 0006        __end_of_SPIReceive 74C4  
         Transmit@reg_val 000F      end_of_initialization 750C             __Lmediumconst 7E46  
                 postdec1 000FE5            ??_UARTWriteStr 0004                   postinc0 000FEE  
           _ResetRFModule 74C4           ??_initVoltmeter 0001          ??_ReadSXRegister 0003  
               _TRISAbits 000F88                 _TRISBbits 000F89                 _TRISCbits 000F8A  
              main@i_1047 0042            _UARTWriteStrLn 7592         ?_UARTWriteByteHex 0002  
      ??_UARTWriteByteHex 0004              ??_InitModule 0007            ?_ResetRFModule 0001  
               _AntennaRX 740C                 _AntennaTX 7422      UARTWriteStrLn@string 0002  
           __pidataCOMRAM 73E1       start_initialization 74EC    __end_of_UARTWriteStrLn 75EE  
      __end_of_InitModule 7844            Receive@reg_val 0010                ?_AntennaRX 0001  
              ?_AntennaTX 0001         SPIReceive@data_in 0002                 Transmit@i 0010  
         ?_UARTWriteStrLn 0002                  ?_SPIInit 0001      __end_of_UARTWriteStr 7666  
                ?_GetMode 0001                  ?_Receive 000B           ??_ResetRFModule 0001  
           __pmediumconst 7E46           _WriteSXRegister 744E         Transmit@data_long 000D  
                _LATAbits 000F83                  _LATBbits 000F84                  _LATCbits 000F85  
                _PIE3bits 000EC5                  _PIR3bits 000ECD       SPITransfer@data_out 0001  
               main@F9592 0043                  _SSP1CON1 000F96                  _SSP1CON3 000F98  
                _UARTInit 754E                  _SSP1STAT 000F95               ??_AntennaRX 0001  
             ??_AntennaTX 0001             _UARTWriteByte 73F6                _ADCON0bits 000F60  
               main@rxMsg 0019                 main@txMsg 0037                  Receive@i 000F  
               copy_data0 7500             UARTWriteStr@i 0006   __end_of_WriteSXRegister 7468  
                __Hrparam 0000                  __Lrparam 0000                  _Transmit 7844  
           ??_SPITransfer 0001            ?_UARTWriteByte 0001     __end_of_initVoltmeter 744E  
              _ANSELAbits 000F11                _ANSELCbits 000F21                  __ptext10 7752  
                __ptext11 744E                  __ptext12 7954                  __ptext13 7592  
                __ptext14 75EE                  __ptext15 7666                  __ptext16 73F6  
                __ptext17 7484                  __ptext18 7468                  __ptext19 74A2  
              _RC1STAbits 000F9D       WriteSXRegister@data 0005                  isa$xinst 000000  
            _UARTWriteStr 75EE                  main@argc 0011                  main@argv 0013  
        ??_UARTWriteStrLn 0004        UARTWriteStr@string 0002                _INTCONbits 000FF2  
     __end_of_SPITransfer 7484          ?_WriteSXRegister 0005                GetMode@reg 000E  
  WriteSXRegister@address 0006           ??_UARTWriteByte 0001            _InitRFLoRaPins 73EA  
              _SSP1DATPPS 000EB8                _SSP1CLKPPS 000EB7                _TX1STAbits 000F9E  
              _SPIReceive 74A2          UARTInit@baudRate 0001  
