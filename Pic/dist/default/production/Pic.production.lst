

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon May 22 13:18:45 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F25K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34  0000                     
    35                           ; Version 2.20
    36                           ; Generated 12/02/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F25K40 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	idataCOMRAM
    71  007463                     __pidataCOMRAM:
    72                           	callstack 0
    73                           
    74                           ;initializer for main@F9592
    75  007463  AD                 	db	173
    76  007464  4E                 	db	78
    77  007465  00                 	db	0
    78  007466  00                 	db	0
    79  007467  00                 	db	0
    80  007468  00                 	db	0
    81  007469  00                 	db	0
    82  00746A  00                 	db	0
    83  00746B  00                 	db	0
    84  0000                     _SP1BRGH	set	3996
    85  0000                     _RC1STAbits	set	3997
    86  0000                     _TX1STAbits	set	3998
    87  0000                     _SSP1CLKPPS	set	3767
    88  0000                     _RC3PPS	set	3834
    89  0000                     _ANSELCbits	set	3873
    90  0000                     _LATBbits	set	3972
    91  0000                     _TRISBbits	set	3977
    92  0000                     _SSP1BUF	set	3986
    93  0000                     _SSP1STAT	set	3989
    94  0000                     _TRISCbits	set	3978
    95  0000                     _TRISAbits	set	3976
    96  0000                     _LATCbits	set	3973
    97  0000                     _ADCLK	set	3927
    98  0000                     _LATAbits	set	3971
    99  0000                     _RC5PPS	set	3836
   100  0000                     _ANSELAbits	set	3857
   101  0000                     _RC6PPS	set	3837
   102  0000                     _PIE3bits	set	3781
   103  0000                     _PIR3bits	set	3789
   104  0000                     _SSP1DATPPS	set	3768
   105  0000                     _SSP1CON3	set	3992
   106  0000                     _SSP1CON1	set	3990
   107  0000                     _SP1BRG	set	3995
   108  0000                     _TX1REG	set	3994
   109  0000                     _RC1STA	set	3997
   110  0000                     _TX1STA	set	3998
   111  0000                     _INTCONbits	set	4082
   112  0000                     _BAUD1CONbits	set	3999
   113  0000                     _ADACQ	set	3932
   114  0000                     _ADPCH	set	3935
   115  0000                     _ADRESL	set	3939
   116  0000                     _ADRESH	set	3940
   117  0000                     _ADCON0bits	set	3936
   118                           
   119                           	psect	mediumconst
   120  007E46                     __pmediumconst:
   121                           	callstack 0
   122  007E46  00                 	db	0
   123  007E47                     STR_4:
   124                           
   125                           ; BSR set to: 14
   126  007E47  6D                 	db	109	;'m'
   127  007E48  6F                 	db	111	;'o'
   128  007E49  64                 	db	100	;'d'
   129  007E4A  65                 	db	101	;'e'
   130  007E4B  20                 	db	32
   131  007E4C  3D                 	db	61	;'='
   132  007E4D  20                 	db	32
   133  007E4E  4C                 	db	76	;'L'
   134  007E4F  6F                 	db	111	;'o'
   135  007E50  52                 	db	82	;'R'
   136  007E51  61                 	db	97	;'a'
   137  007E52  20                 	db	32
   138  007E53  77                 	db	119	;'w'
   139  007E54  69                 	db	105	;'i'
   140  007E55  74                 	db	116	;'t'
   141  007E56  68                 	db	104	;'h'
   142  007E57  20                 	db	32
   143  007E58  46                 	db	70	;'F'
   144  007E59  53                 	db	83	;'S'
   145  007E5A  4B                 	db	75	;'K'
   146  007E5B  20                 	db	32
   147  007E5C  72                 	db	114	;'r'
   148  007E5D  65                 	db	101	;'e'
   149  007E5E  67                 	db	103	;'g'
   150  007E5F  69                 	db	105	;'i'
   151  007E60  73                 	db	115	;'s'
   152  007E61  74                 	db	116	;'t'
   153  007E62  65                 	db	101	;'e'
   154  007E63  72                 	db	114	;'r'
   155  007E64  73                 	db	115	;'s'
   156  007E65  20                 	db	32
   157  007E66  61                 	db	97	;'a'
   158  007E67  63                 	db	99	;'c'
   159  007E68  63                 	db	99	;'c'
   160  007E69  65                 	db	101	;'e'
   161  007E6A  73                 	db	115	;'s'
   162  007E6B  73                 	db	115	;'s'
   163  007E6C  00                 	db	0
   164  007E6D                     STR_16:
   165                           
   166                           ; BSR set to: 14
   167  007E6D  50                 	db	80	;'P'
   168  007E6E  6F                 	db	111	;'o'
   169  007E6F  75                 	db	117	;'u'
   170  007E70  72                 	db	114	;'r'
   171  007E71  63                 	db	99	;'c'
   172  007E72  65                 	db	101	;'e'
   173  007E73  6E                 	db	110	;'n'
   174  007E74  74                 	db	116	;'t'
   175  007E75  61                 	db	97	;'a'
   176  007E76  67                 	db	103	;'g'
   177  007E77  65                 	db	101	;'e'
   178  007E78  20                 	db	32
   179  007E79  64                 	db	100	;'d'
   180  007E7A  65                 	db	101	;'e'
   181  007E7B  20                 	db	32
   182  007E7C  62                 	db	98	;'b'
   183  007E7D  61                 	db	97	;'a'
   184  007E7E  74                 	db	116	;'t'
   185  007E7F  74                 	db	116	;'t'
   186  007E80  65                 	db	101	;'e'
   187  007E81  72                 	db	114	;'r'
   188  007E82  69                 	db	105	;'i'
   189  007E83  65                 	db	101	;'e'
   190  007E84  20                 	db	32
   191  007E85  3A                 	db	58	;':'
   192  007E86  20                 	db	32
   193  007E87  00                 	db	0
   194  007E88                     STR_13:
   195                           
   196                           ; BSR set to: 14
   197  007E88  43                 	db	67	;'C'
   198  007E89  68                 	db	104	;'h'
   199  007E8A  61                 	db	97	;'a'
   200  007E8B  6E                 	db	110	;'n'
   201  007E8C  6E                 	db	110	;'n'
   202  007E8D  65                 	db	101	;'e'
   203  007E8E  6C                 	db	108	;'l'
   204  007E8F  20                 	db	32
   205  007E90  41                 	db	65	;'A'
   206  007E91  63                 	db	99	;'c'
   207  007E92  74                 	db	116	;'t'
   208  007E93  69                 	db	105	;'i'
   209  007E94  76                 	db	118	;'v'
   210  007E95  69                 	db	105	;'i'
   211  007E96  74                 	db	116	;'t'
   212  007E97  79                 	db	121	;'y'
   213  007E98  20                 	db	32
   214  007E99  44                 	db	68	;'D'
   215  007E9A  65                 	db	101	;'e'
   216  007E9B  74                 	db	116	;'t'
   217  007E9C  65                 	db	101	;'e'
   218  007E9D  63                 	db	99	;'c'
   219  007E9E  74                 	db	116	;'t'
   220  007E9F  69                 	db	105	;'i'
   221  007EA0  6F                 	db	111	;'o'
   222  007EA1  6E                 	db	110	;'n'
   223  007EA2  00                 	db	0
   224  007EA3                     STR_30:
   225                           
   226                           ; BSR set to: 14
   227  007EA3  73                 	db	115	;'s'
   228  007EA4  65                 	db	101	;'e'
   229  007EA5  74                 	db	116	;'t'
   230  007EA6  20                 	db	32
   231  007EA7  6D                 	db	109	;'m'
   232  007EA8  6F                 	db	111	;'o'
   233  007EA9  64                 	db	100	;'d'
   234  007EAA  65                 	db	101	;'e'
   235  007EAB  20                 	db	32
   236  007EAC  74                 	db	116	;'t'
   237  007EAD  6F                 	db	111	;'o'
   238  007EAE  20                 	db	32
   239  007EAF  4C                 	db	76	;'L'
   240  007EB0  6F                 	db	111	;'o'
   241  007EB1  52                 	db	82	;'R'
   242  007EB2  61                 	db	97	;'a'
   243  007EB3  20                 	db	32
   244  007EB4  73                 	db	115	;'s'
   245  007EB5  74                 	db	116	;'t'
   246  007EB6  61                 	db	97	;'a'
   247  007EB7  6E                 	db	110	;'n'
   248  007EB8  64                 	db	100	;'d'
   249  007EB9  62                 	db	98	;'b'
   250  007EBA  79                 	db	121	;'y'
   251  007EBB  00                 	db	0
   252  007EBC                     STR_22:
   253                           
   254                           ; BSR set to: 14
   255  007EBC  77                 	db	119	;'w'
   256  007EBD  61                 	db	97	;'a'
   257  007EBE  69                 	db	105	;'i'
   258  007EBF  74                 	db	116	;'t'
   259  007EC0  69                 	db	105	;'i'
   260  007EC1  6E                 	db	110	;'n'
   261  007EC2  67                 	db	103	;'g'
   262  007EC3  20                 	db	32
   263  007EC4  66                 	db	102	;'f'
   264  007EC5  6F                 	db	111	;'o'
   265  007EC6  72                 	db	114	;'r'
   266  007EC7  20                 	db	32
   267  007EC8  76                 	db	118	;'v'
   268  007EC9  61                 	db	97	;'a'
   269  007ECA  6C                 	db	108	;'l'
   270  007ECB  69                 	db	105	;'i'
   271  007ECC  64                 	db	100	;'d'
   272  007ECD  20                 	db	32
   273  007ECE  68                 	db	104	;'h'
   274  007ECF  65                 	db	101	;'e'
   275  007ED0  61                 	db	97	;'a'
   276  007ED1  64                 	db	100	;'d'
   277  007ED2  65                 	db	101	;'e'
   278  007ED3  72                 	db	114	;'r'
   279  007ED4  00                 	db	0
   280  007ED5                     STR_21:
   281                           
   282                           ; BSR set to: 14
   283  007ED5  2D                 	db	45
   284  007ED6  2D                 	db	45
   285  007ED7  2D                 	db	45
   286  007ED8  2D                 	db	45
   287  007ED9  2D                 	db	45
   288  007EDA  2D                 	db	45
   289  007EDB  2D                 	db	45
   290  007EDC  2D                 	db	45
   291  007EDD  2D                 	db	45
   292  007EDE  2D                 	db	45
   293  007EDF  2D                 	db	45
   294  007EE0  2D                 	db	45
   295  007EE1  2D                 	db	45
   296  007EE2  2D                 	db	45
   297  007EE3  2D                 	db	45
   298  007EE4  2D                 	db	45
   299  007EE5  2D                 	db	45
   300  007EE6  2D                 	db	45
   301  007EE7  2D                 	db	45
   302  007EE8  2D                 	db	45
   303  007EE9  2D                 	db	45
   304  007EEA  2D                 	db	45
   305  007EEB  2D                 	db	45
   306  007EEC  00                 	db	0
   307  007EED                     STR_11:
   308                           
   309                           ; BSR set to: 14
   310  007EED  63                 	db	99	;'c'
   311  007EEE  6F                 	db	111	;'o'
   312  007EEF  6E                 	db	110	;'n'
   313  007EF0  74                 	db	116	;'t'
   314  007EF1  69                 	db	105	;'i'
   315  007EF2  6E                 	db	110	;'n'
   316  007EF3  75                 	db	117	;'u'
   317  007EF4  6F                 	db	111	;'o'
   318  007EF5  75                 	db	117	;'u'
   319  007EF6  73                 	db	115	;'s'
   320  007EF7  20                 	db	32
   321  007EF8  72                 	db	114	;'r'
   322  007EF9  65                 	db	101	;'e'
   323  007EFA  63                 	db	99	;'c'
   324  007EFB  65                 	db	101	;'e'
   325  007EFC  69                 	db	105	;'i'
   326  007EFD  76                 	db	118	;'v'
   327  007EFE  65                 	db	101	;'e'
   328  007EFF  20                 	db	32
   329  007F00  6D                 	db	109	;'m'
   330  007F01  6F                 	db	111	;'o'
   331  007F02  64                 	db	100	;'d'
   332  007F03  65                 	db	101	;'e'
   333  007F04  00                 	db	0
   334  007F05                     STR_10:
   335                           
   336                           ; BSR set to: 14
   337  007F05  66                 	db	102	;'f'
   338  007F06  72                 	db	114	;'r'
   339  007F07  65                 	db	101	;'e'
   340  007F08  71                 	db	113	;'q'
   341  007F09  75                 	db	117	;'u'
   342  007F0A  65                 	db	101	;'e'
   343  007F0B  6E                 	db	110	;'n'
   344  007F0C  63                 	db	99	;'c'
   345  007F0D  79                 	db	121	;'y'
   346  007F0E  20                 	db	32
   347  007F0F  73                 	db	115	;'s'
   348  007F10  79                 	db	121	;'y'
   349  007F11  6E                 	db	110	;'n'
   350  007F12  74                 	db	116	;'t'
   351  007F13  68                 	db	104	;'h'
   352  007F14  65                 	db	101	;'e'
   353  007F15  73                 	db	115	;'s'
   354  007F16  69                 	db	105	;'i'
   355  007F17  73                 	db	115	;'s'
   356  007F18  20                 	db	32
   357  007F19  52                 	db	82	;'R'
   358  007F1A  58                 	db	88	;'X'
   359  007F1B  00                 	db	0
   360  007F1C                     STR_8:
   361                           
   362                           ; BSR set to: 14
   363  007F1C  66                 	db	102	;'f'
   364  007F1D  72                 	db	114	;'r'
   365  007F1E  65                 	db	101	;'e'
   366  007F1F  71                 	db	113	;'q'
   367  007F20  75                 	db	117	;'u'
   368  007F21  65                 	db	101	;'e'
   369  007F22  6E                 	db	110	;'n'
   370  007F23  63                 	db	99	;'c'
   371  007F24  79                 	db	121	;'y'
   372  007F25  20                 	db	32
   373  007F26  73                 	db	115	;'s'
   374  007F27  79                 	db	121	;'y'
   375  007F28  6E                 	db	110	;'n'
   376  007F29  74                 	db	116	;'t'
   377  007F2A  68                 	db	104	;'h'
   378  007F2B  65                 	db	101	;'e'
   379  007F2C  73                 	db	115	;'s'
   380  007F2D  69                 	db	105	;'i'
   381  007F2E  73                 	db	115	;'s'
   382  007F2F  20                 	db	32
   383  007F30  54                 	db	84	;'T'
   384  007F31  58                 	db	88	;'X'
   385  007F32  00                 	db	0
   386  007F33                     STR_23:
   387                           
   388                           ; BSR set to: 14
   389  007F33  76                 	db	118	;'v'
   390  007F34  61                 	db	97	;'a'
   391  007F35  6C                 	db	108	;'l'
   392  007F36  69                 	db	105	;'i'
   393  007F37  64                 	db	100	;'d'
   394  007F38  20                 	db	32
   395  007F39  68                 	db	104	;'h'
   396  007F3A  65                 	db	101	;'e'
   397  007F3B  61                 	db	97	;'a'
   398  007F3C  64                 	db	100	;'d'
   399  007F3D  65                 	db	101	;'e'
   400  007F3E  72                 	db	114	;'r'
   401  007F3F  20                 	db	32
   402  007F40  72                 	db	114	;'r'
   403  007F41  65                 	db	101	;'e'
   404  007F42  63                 	db	99	;'c'
   405  007F43  65                 	db	101	;'e'
   406  007F44  69                 	db	105	;'i'
   407  007F45  76                 	db	118	;'v'
   408  007F46  65                 	db	101	;'e'
   409  007F47  64                 	db	100	;'d'
   410  007F48  00                 	db	0
   411  007F49                     STR_12:
   412                           
   413                           ; BSR set to: 14
   414  007F49  73                 	db	115	;'s'
   415  007F4A  69                 	db	105	;'i'
   416  007F4B  6E                 	db	110	;'n'
   417  007F4C  67                 	db	103	;'g'
   418  007F4D  6C                 	db	108	;'l'
   419  007F4E  65                 	db	101	;'e'
   420  007F4F  20                 	db	32
   421  007F50  72                 	db	114	;'r'
   422  007F51  65                 	db	101	;'e'
   423  007F52  63                 	db	99	;'c'
   424  007F53  65                 	db	101	;'e'
   425  007F54  69                 	db	105	;'i'
   426  007F55  76                 	db	118	;'v'
   427  007F56  65                 	db	101	;'e'
   428  007F57  20                 	db	32
   429  007F58  6D                 	db	109	;'m'
   430  007F59  6F                 	db	111	;'o'
   431  007F5A  64                 	db	100	;'d'
   432  007F5B  65                 	db	101	;'e'
   433  007F5C  00                 	db	0
   434  007F5D                     STR_31:
   435                           
   436                           ; BSR set to: 14
   437  007F5D  69                 	db	105	;'i'
   438  007F5E  6E                 	db	110	;'n'
   439  007F5F  69                 	db	105	;'i'
   440  007F60  74                 	db	116	;'t'
   441  007F61  69                 	db	105	;'i'
   442  007F62  61                 	db	97	;'a'
   443  007F63  6C                 	db	108	;'l'
   444  007F64  69                 	db	105	;'i'
   445  007F65  7A                 	db	122	;'z'
   446  007F66  65                 	db	101	;'e'
   447  007F67  20                 	db	32
   448  007F68  6D                 	db	109	;'m'
   449  007F69  6F                 	db	111	;'o'
   450  007F6A  64                 	db	100	;'d'
   451  007F6B  75                 	db	117	;'u'
   452  007F6C  6C                 	db	108	;'l'
   453  007F6D  65                 	db	101	;'e'
   454  007F6E  00                 	db	0
   455  007F6F                     STR_18:
   456                           
   457                           ; BSR set to: 14
   458  007F6F  4D                 	db	77	;'M'
   459  007F70  65                 	db	101	;'e'
   460  007F71  73                 	db	115	;'s'
   461  007F72  73                 	db	115	;'s'
   462  007F73  61                 	db	97	;'a'
   463  007F74  67                 	db	103	;'g'
   464  007F75  65                 	db	101	;'e'
   465  007F76  20                 	db	32
   466  007F77  65                 	db	101	;'e'
   467  007F78  6E                 	db	110	;'n'
   468  007F79  76                 	db	118	;'v'
   469  007F7A  6F                 	db	111	;'o'
   470  007F7B  79                 	db	121	;'y'
   471  007F7C  65                 	db	101	;'e'
   472  007F7D  20                 	db	32
   473  007F7E  3A                 	db	58	;':'
   474  007F7F  20                 	db	32
   475  007F80  00                 	db	0
   476  007F81                     STR_25:
   477                           
   478                           ; BSR set to: 14
   479  007F81  70                 	db	112	;'p'
   480  007F82  61                 	db	97	;'a'
   481  007F83  79                 	db	121	;'y'
   482  007F84  6C                 	db	108	;'l'
   483  007F85  6F                 	db	111	;'o'
   484  007F86  61                 	db	97	;'a'
   485  007F87  64                 	db	100	;'d'
   486  007F88  20                 	db	32
   487  007F89  43                 	db	67	;'C'
   488  007F8A  52                 	db	82	;'R'
   489  007F8B  43                 	db	67	;'C'
   490  007F8C  20                 	db	32
   491  007F8D  65                 	db	101	;'e'
   492  007F8E  72                 	db	114	;'r'
   493  007F8F  72                 	db	114	;'r'
   494  007F90  6F                 	db	111	;'o'
   495  007F91  72                 	db	114	;'r'
   496  007F92  00                 	db	0
   497  007F93                     STR_14:
   498                           
   499                           ; BSR set to: 14
   500  007F93  30                 	db	48	;'0'
   501  007F94  31                 	db	49	;'1'
   502  007F95  32                 	db	50	;'2'
   503  007F96  33                 	db	51	;'3'
   504  007F97  34                 	db	52	;'4'
   505  007F98  35                 	db	53	;'5'
   506  007F99  36                 	db	54	;'6'
   507  007F9A  37                 	db	55	;'7'
   508  007F9B  38                 	db	56	;'8'
   509  007F9C  39                 	db	57	;'9'
   510  007F9D  41                 	db	65	;'A'
   511  007F9E  42                 	db	66	;'B'
   512  007F9F  43                 	db	67	;'C'
   513  007FA0  44                 	db	68	;'D'
   514  007FA1  45                 	db	69	;'E'
   515  007FA2  46                 	db	70	;'F'
   516  007FA3  00                 	db	0
   517  007FA4                     STR_1:
   518                           
   519                           ; BSR set to: 14
   520  007FA4  52                 	db	82	;'R'
   521  007FA5  45                 	db	69	;'E'
   522  007FA6  47                 	db	71	;'G'
   523  007FA7  5F                 	db	95	;'_'
   524  007FA8  4F                 	db	79	;'O'
   525  007FA9  50                 	db	80	;'P'
   526  007FAA  5F                 	db	95	;'_'
   527  007FAB  4D                 	db	77	;'M'
   528  007FAC  4F                 	db	79	;'O'
   529  007FAD  44                 	db	68	;'D'
   530  007FAE  45                 	db	69	;'E'
   531  007FAF  20                 	db	32
   532  007FB0  3D                 	db	61	;'='
   533  007FB1  20                 	db	32
   534  007FB2  30                 	db	48	;'0'
   535  007FB3  78                 	db	120	;'x'
   536  007FB4  00                 	db	0
   537  007FB5                     STR_26:
   538                           
   539                           ; BSR set to: 14
   540  007FB5  72                 	db	114	;'r'
   541  007FB6  65                 	db	101	;'e'
   542  007FB7  63                 	db	99	;'c'
   543  007FB8  65                 	db	101	;'e'
   544  007FB9  69                 	db	105	;'i'
   545  007FBA  76                 	db	118	;'v'
   546  007FBB  65                 	db	101	;'e'
   547  007FBC  64                 	db	100	;'d'
   548  007FBD  20                 	db	32
   549  007FBE  64                 	db	100	;'d'
   550  007FBF  61                 	db	97	;'a'
   551  007FC0  74                 	db	116	;'t'
   552  007FC1  61                 	db	97	;'a'
   553  007FC2  3A                 	db	58	;':'
   554  007FC3  20                 	db	32
   555  007FC4  00                 	db	0
   556  007FC5                     STR_7:
   557                           
   558                           ; BSR set to: 14
   559  007FC5  73                 	db	115	;'s'
   560  007FC6  74                 	db	116	;'t'
   561  007FC7  61                 	db	97	;'a'
   562  007FC8  6E                 	db	110	;'n'
   563  007FC9  64                 	db	100	;'d'
   564  007FCA  62                 	db	98	;'b'
   565  007FCB  79                 	db	121	;'y'
   566  007FCC  20                 	db	32
   567  007FCD  6D                 	db	109	;'m'
   568  007FCE  6F                 	db	111	;'o'
   569  007FCF  64                 	db	100	;'d'
   570  007FD0  65                 	db	101	;'e'
   571  007FD1  00                 	db	0
   572  007FD2                     STR_3:
   573                           
   574                           ; BSR set to: 14
   575  007FD2  6D                 	db	109	;'m'
   576  007FD3  6F                 	db	111	;'o'
   577  007FD4  64                 	db	100	;'d'
   578  007FD5  65                 	db	101	;'e'
   579  007FD6  20                 	db	32
   580  007FD7  3D                 	db	61	;'='
   581  007FD8  20                 	db	32
   582  007FD9  4C                 	db	76	;'L'
   583  007FDA  6F                 	db	111	;'o'
   584  007FDB  52                 	db	82	;'R'
   585  007FDC  61                 	db	97	;'a'
   586  007FDD  00                 	db	0
   587  007FDE                     STR_5:
   588                           
   589                           ; BSR set to: 14
   590  007FDE  6D                 	db	109	;'m'
   591  007FDF  6F                 	db	111	;'o'
   592  007FE0  64                 	db	100	;'d'
   593  007FE1  65                 	db	101	;'e'
   594  007FE2  20                 	db	32
   595  007FE3  3D                 	db	61	;'='
   596  007FE4  20                 	db	32
   597  007FE5  46                 	db	70	;'F'
   598  007FE6  53                 	db	83	;'S'
   599  007FE7  4B                 	db	75	;'K'
   600  007FE8  00                 	db	0
   601  007FE9                     STR_6:
   602                           
   603                           ; BSR set to: 14
   604  007FE9  73                 	db	115	;'s'
   605  007FEA  6C                 	db	108	;'l'
   606  007FEB  65                 	db	101	;'e'
   607  007FEC  65                 	db	101	;'e'
   608  007FED  70                 	db	112	;'p'
   609  007FEE  20                 	db	32
   610  007FEF  6D                 	db	109	;'m'
   611  007FF0  6F                 	db	111	;'o'
   612  007FF1  64                 	db	100	;'d'
   613  007FF2  65                 	db	101	;'e'
   614  007FF3  00                 	db	0
   615  007FF4                     STR_9:
   616                           
   617                           ; BSR set to: 14
   618  007FF4  54                 	db	84	;'T'
   619  007FF5  58                 	db	88	;'X'
   620  007FF6  20                 	db	32
   621  007FF7  6D                 	db	109	;'m'
   622  007FF8  6F                 	db	111	;'o'
   623  007FF9  64                 	db	100	;'d'
   624  007FFA  65                 	db	101	;'e'
   625  007FFB  00                 	db	0
   626  007FFC                     
   627                           ; BSR set to: 14
   628  007FFC  25                 	db	37
   629  007FFD  00                 	db	0
   630  007FFE  00                 	db	0	; dummy byte at the end
   631  0000                     
   632                           ; #config settings
   633                           
   634                           	psect	cinit
   635  00756E                     __pcinit:
   636                           	callstack 0
   637  00756E                     start_initialization:
   638                           	callstack 0
   639  00756E                     __initialization:
   640                           	callstack 0
   641                           
   642                           ; Initialize objects allocated to COMRAM (9 bytes)
   643                           ; load TBLPTR registers with __pidataCOMRAM
   644  00756E  0E63               	movlw	low __pidataCOMRAM
   645  007570  6EF6               	movwf	tblptrl,c
   646  007572  0E74               	movlw	high __pidataCOMRAM
   647  007574  6EF7               	movwf	tblptrh,c
   648  007576  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   649  007578  6EF8               	movwf	tblptru,c
   650  00757A  EE00  F043         	lfsr	0,__pdataCOMRAM
   651  00757E  EE10 F009          	lfsr	1,9
   652  007582                     copy_data0:
   653  007582  0009               	tblrd		*+
   654  007584  CFF5 FFEE          	movff	tablat,postinc0
   655  007588  50E5               	movf	postdec1,w,c
   656  00758A  50E1               	movf	fsr1l,w,c
   657  00758C  E1FA               	bnz	copy_data0
   658  00758E                     end_of_initialization:
   659                           	callstack 0
   660  00758E                     __end_of__initialization:
   661                           	callstack 0
   662  00758E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   663  007590  6EF8               	movwf	tblptru,c
   664  007592  0100               	movlb	0
   665  007594  EF59  F03E         	goto	_main	;jump to C main() function
   666                           
   667                           	psect	dataCOMRAM
   668  000043                     __pdataCOMRAM:
   669                           	callstack 0
   670  000043                     main@F9592:
   671                           	callstack 0
   672  000043                     	ds	9
   673                           
   674                           	psect	cstackCOMRAM
   675  000001                     __pcstackCOMRAM:
   676                           	callstack 0
   677  000001                     ??_ResetRFModule:
   678  000001                     ??_AntennaTX:
   679  000001                     ??_AntennaRX:
   680  000001                     SPITransfer@data_out:
   681                           	callstack 0
   682  000001                     SPIReceive@data_out:
   683                           	callstack 0
   684  000001                     UARTWriteByte@data:
   685                           	callstack 0
   686  000001                     UARTInit@baudRate:
   687                           	callstack 0
   688                           
   689                           ; 2 bytes @ 0x0
   690  000001                     	ds	1
   691  000002                     SPIReceive@data_in:
   692                           	callstack 0
   693  000002                     UARTWriteStr@string:
   694                           	callstack 0
   695  000002                     UARTWriteStrLn@string:
   696                           	callstack 0
   697  000002                     UARTWriteByteHex@data:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0x1
   701  000002                     	ds	1
   702  000003                     ReadSXRegister@RegValue:
   703                           	callstack 0
   704                           
   705                           ; 1 bytes @ 0x2
   706  000003                     	ds	1
   707  000004                     ??_UARTWriteStr:
   708  000004                     ??_UARTWriteByteHex:
   709  000004                     ??_UARTWriteStrLn:
   710  000004                     ReadSXRegister@address:
   711                           	callstack 0
   712                           
   713                           ; 1 bytes @ 0x3
   714  000004                     	ds	1
   715  000005                     WriteSXRegister@data:
   716                           	callstack 0
   717                           
   718                           ; 1 bytes @ 0x4
   719  000005                     	ds	1
   720  000006                     WriteSXRegister@address:
   721                           	callstack 0
   722  000006                     UARTWriteStr@i:
   723                           	callstack 0
   724  000006                     UARTWriteStrLn@i:
   725                           	callstack 0
   726                           
   727                           ; 1 bytes @ 0x5
   728  000006                     	ds	1
   729  000007                     
   730                           ; 1 bytes @ 0x6
   731  000007                     	ds	2
   732  000009                     UARTWriteByteHex@hexa:
   733                           	callstack 0
   734                           
   735                           ; 2 bytes @ 0x8
   736  000009                     	ds	2
   737  00000B                     ??_GetMode:
   738  00000B                     Transmit@data:
   739                           	callstack 0
   740  00000B                     Receive@data:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0xA
   744  00000B                     	ds	2
   745  00000D                     ??_Receive:
   746  00000D                     GetMode@masked_reg:
   747                           	callstack 0
   748  00000D                     Transmit@data_long:
   749                           	callstack 0
   750                           
   751                           ; 1 bytes @ 0xC
   752  00000D                     	ds	1
   753  00000E                     ??_Transmit:
   754  00000E                     GetMode@reg:
   755                           	callstack 0
   756  00000E                     Receive@RXNumberOfBytes:
   757                           	callstack 0
   758                           
   759                           ; 1 bytes @ 0xD
   760  00000E                     	ds	1
   761  00000F                     Transmit@reg_val:
   762                           	callstack 0
   763  00000F                     Receive@i:
   764                           	callstack 0
   765                           
   766                           ; 1 bytes @ 0xE
   767  00000F                     	ds	1
   768  000010                     Transmit@i:
   769                           	callstack 0
   770  000010                     Receive@reg_val:
   771                           	callstack 0
   772                           
   773                           ; 1 bytes @ 0xF
   774  000010                     	ds	1
   775  000011                     main@argc:
   776                           	callstack 0
   777                           
   778                           ; 2 bytes @ 0x10
   779  000011                     	ds	2
   780  000013                     
   781                           ; 3 bytes @ 0x12
   782  000013                     	ds	3
   783  000016                     ??_main:
   784                           
   785                           ; 1 bytes @ 0x15
   786  000016                     	ds	3
   787  000019                     main@rxMsg:
   788                           	callstack 0
   789                           
   790                           ; 30 bytes @ 0x18
   791  000019                     	ds	30
   792  000037                     main@txMsg:
   793                           	callstack 0
   794                           
   795                           ; 9 bytes @ 0x36
   796  000037                     	ds	9
   797  000040                     main@RXNumberOfBytes:
   798                           	callstack 0
   799                           
   800                           ; 1 bytes @ 0x3F
   801  000040                     	ds	1
   802  000041                     main@i:
   803                           	callstack 0
   804                           
   805                           ; 1 bytes @ 0x40
   806  000041                     	ds	1
   807  000042                     main@i_1043:
   808                           	callstack 0
   809                           
   810                           ; 1 bytes @ 0x41
   811  000042                     	ds	1
   812                           
   813 ;;
   814 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   815 ;;
   816 ;; *************** function _main *****************
   817 ;; Defined at:
   818 ;;		line 104 in file "main.c"
   819 ;; Parameters:    Size  Location     Type
   820 ;;  argc            2   16[COMRAM] int 
   821 ;;  argv            3   18[COMRAM] PTR PTR unsigned char 
   822 ;; Auto vars:     Size  Location     Type
   823 ;;  i               1   65[COMRAM] unsigned char 
   824 ;;  i               1   64[COMRAM] unsigned char 
   825 ;;  rxMsg          30   24[COMRAM] unsigned char [30]
   826 ;;  txMsg           9   54[COMRAM] unsigned char [9]
   827 ;;  RXNumberOfBy    1   63[COMRAM] unsigned char 
   828 ;; Return value:  Size  Location     Type
   829 ;;                  2   16[COMRAM] int 
   830 ;; Registers used:
   831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   837 ;;      Params:         5       0       0       0       0       0       0       0       0
   838 ;;      Locals:        42       0       0       0       0       0       0       0       0
   839 ;;      Temps:          3       0       0       0       0       0       0       0       0
   840 ;;      Totals:        50       0       0       0       0       0       0       0       0
   841 ;;Total ram usage:       50 bytes
   842 ;; Hardware stack levels required when called: 3
   843 ;; This function calls:
   844 ;;		_GetMode
   845 ;;		_InitModule
   846 ;;		_InitRFLoRaPins
   847 ;;		_Receive
   848 ;;		_ResetRFModule
   849 ;;		_SPIInit
   850 ;;		_Transmit
   851 ;;		_UARTInit
   852 ;;		_UARTWriteStrLn
   853 ;;		_WriteSXRegister
   854 ;;		_initVoltmeter
   855 ;; This function is called by:
   856 ;;		Startup code after reset
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           	psect	text0
   861  007CB2                     __ptext0:
   862                           	callstack 0
   863  007CB2                     _main:
   864                           	callstack 28
   865  007CB2                     
   866                           ;main.c: 106:     _delay((unsigned long)((2500)*(1000000UL/4000.0)));
   867  007CB2  0E04               	movlw	4
   868  007CB4  6E17               	movwf	(??_main+1)^0,c
   869  007CB6  0E2C               	movlw	44
   870  007CB8  6E16               	movwf	??_main^0,c
   871  007CBA  0EAC               	movlw	172
   872  007CBC                     u547:
   873  007CBC  2EE8               	decfsz	wreg,f,c
   874  007CBE  D7FE               	bra	u547
   875  007CC0  2E16               	decfsz	??_main^0,f,c
   876  007CC2  D7FC               	bra	u547
   877  007CC4  2E17               	decfsz	(??_main+1)^0,f,c
   878  007CC6  D7FA               	bra	u547
   879  007CC8                     
   880                           ;main.c: 107:     SPIInit();
   881  007CC8  ECCC  F03A         	call	_SPIInit	;wreg free
   882  007CCC                     
   883                           ;main.c: 108:     initVoltmeter();
   884  007CCC  EC5D  F03A         	call	_initVoltmeter	;wreg free
   885  007CD0                     
   886                           ;main.c: 109:     InitRFLoRaPins();
   887  007CD0  EC36  F03A         	call	_InitRFLoRaPins	;wreg free
   888                           
   889                           ;main.c: 110:     ResetRFModule();
   890  007CD4  ECA3  F03A         	call	_ResetRFModule	;wreg free
   891  007CD8                     
   892                           ;main.c: 111:     UARTInit(19200);
   893  007CD8  0E4B               	movlw	75
   894  007CDA  6E02               	movwf	(UARTInit@baudRate+1)^0,c
   895  007CDC  0E00               	movlw	0
   896  007CDE  6E01               	movwf	UARTInit@baudRate^0,c
   897  007CE0  ECE8  F03A         	call	_UARTInit	;wreg free
   898  007CE4                     
   899                           ;main.c: 113:     _delay((unsigned long)((1)*(1000000UL/4000.0)));
   900  007CE4  0E53               	movlw	83
   901  007CE6                     u557:
   902  007CE6  2EE8               	decfsz	wreg,f,c
   903  007CE8  D7FE               	bra	u557
   904  007CEA  F000               	nop	
   905  007CEC                     
   906                           ;main.c: 114:     _delay((unsigned long)((1)*(1000000UL/4000.0)));
   907  007CEC  0E53               	movlw	83
   908  007CEE                     u567:
   909  007CEE  2EE8               	decfsz	wreg,f,c
   910  007CF0  D7FE               	bra	u567
   911  007CF2  F000               	nop	
   912  007CF4                     
   913                           ;main.c: 115:     _delay((unsigned long)((500)*(1000000UL/4000.0)));
   914  007CF4  0EA3               	movlw	163
   915  007CF6  6E16               	movwf	??_main^0,c
   916  007CF8  0E55               	movlw	85
   917  007CFA                     u577:
   918  007CFA  2EE8               	decfsz	wreg,f,c
   919  007CFC  D7FE               	bra	u577
   920  007CFE  2E16               	decfsz	??_main^0,f,c
   921  007D00  D7FC               	bra	u577
   922  007D02  F000               	nop	
   923  007D04                     
   924                           ;main.c: 118:     UARTWriteStrLn(" ");
   925  007D04  0E86               	movlw	low (STR_16+25)
   926  007D06  6E02               	movwf	UARTWriteStrLn@string^0,c
   927  007D08  0E7E               	movlw	high (STR_16+25)
   928  007D0A  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
   929  007D0C  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
   930  007D10                     
   931                           ;main.c: 119:     UARTWriteStrLn("set mode to LoRa standby");
   932  007D10  0EA3               	movlw	low STR_30
   933  007D12  6E02               	movwf	UARTWriteStrLn@string^0,c
   934  007D14  0E7E               	movlw	high STR_30
   935  007D16  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
   936  007D18  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
   937  007D1C                     
   938                           ;main.c: 121:     WriteSXRegister(0x01, 0x00);
   939  007D1C  0E00               	movlw	0
   940  007D1E  6E05               	movwf	WriteSXRegister@data^0,c
   941  007D20  0E01               	movlw	1
   942  007D22  EC68  F03A         	call	_WriteSXRegister
   943  007D26                     
   944                           ;main.c: 122:     WriteSXRegister(0x01, 0x80);
   945  007D26  0E80               	movlw	128
   946  007D28  6E05               	movwf	WriteSXRegister@data^0,c
   947  007D2A  0E01               	movlw	1
   948  007D2C  EC68  F03A         	call	_WriteSXRegister
   949  007D30                     
   950                           ;main.c: 123:     WriteSXRegister(0x01, 0x81);
   951  007D30  0E81               	movlw	129
   952  007D32  6E05               	movwf	WriteSXRegister@data^0,c
   953  007D34  0E01               	movlw	1
   954  007D36  EC68  F03A         	call	_WriteSXRegister
   955  007D3A                     
   956                           ;main.c: 124:     _delay((unsigned long)((100)*(1000000UL/4000.0)));
   957  007D3A  0E21               	movlw	33
   958  007D3C  6E16               	movwf	??_main^0,c
   959  007D3E  0E76               	movlw	118
   960  007D40                     u587:
   961  007D40  2EE8               	decfsz	wreg,f,c
   962  007D42  D7FE               	bra	u587
   963  007D44  2E16               	decfsz	??_main^0,f,c
   964  007D46  D7FC               	bra	u587
   965  007D48  D000               	nop2	
   966  007D4A                     
   967                           ;main.c: 125:     GetMode();
   968  007D4A  ECEB  F03C         	call	_GetMode	;wreg free
   969  007D4E                     
   970                           ;main.c: 128:     UARTWriteStrLn("initialize module");
   971  007D4E  0E5D               	movlw	low STR_31
   972  007D50  6E02               	movwf	UARTWriteStrLn@string^0,c
   973  007D52  0E7F               	movlw	high STR_31
   974  007D54  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
   975  007D56  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
   976  007D5A                     
   977                           ;main.c: 129:     InitModule();
   978  007D5A  ECEA  F03B         	call	_InitModule	;wreg free
   979  007D5E                     
   980                           ;main.c: 141:     uint8_t RXNumberOfBytes;;main.c: 142:     uint8_t rxMsg[30];;main.c: 1
      +                          43:     uint8_t txMsg[] = { 0xAD, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
   981  007D5E  EE20  F043         	lfsr	2,main@F9592
   982  007D62  EE10  F037         	lfsr	1,main@txMsg
   983  007D66  0E08               	movlw	8
   984  007D68                     u501:
   985  007D68  CFDB FFE3          	movff	plusw2,plusw1
   986  007D6C  06E8               	decf	wreg,f,c
   987  007D6E  E2FC               	bc	u501
   988  007D70                     l1756:
   989                           
   990                           ;main.c: 148:         Receive(rxMsg);
   991  007D70  0E19               	movlw	low main@rxMsg
   992  007D72  6E0B               	movwf	Receive@data^0,c
   993  007D74  0E00               	movlw	high main@rxMsg
   994  007D76  6E0C               	movwf	(Receive@data+1)^0,c
   995  007D78  EC9F  F03D         	call	_Receive	;wreg free
   996  007D7C                     
   997                           ;main.c: 152:         if(rxMsg[2] == 0x02){
   998  007D7C  0E02               	movlw	2
   999  007D7E  181B               	xorwf	(main@rxMsg+2)^0,w,c
  1000  007D80  A4D8               	btfss	status,2,c
  1001  007D82  EFC5  F03E         	goto	u511
  1002  007D86  EFC7  F03E         	goto	u510
  1003  007D8A                     u511:
  1004  007D8A  EFF0  F03E         	goto	l1768
  1005  007D8E                     u510:
  1006  007D8E                     
  1007                           ;main.c: 153:             for (uint8_t i = 0; i < argc; i++) {
  1008  007D8E  0E00               	movlw	0
  1009  007D90  6E41               	movwf	main@i^0,c
  1010  007D92  EFDA  F03E         	goto	l1766
  1011  007D96                     l1762:
  1012                           
  1013                           ;main.c: 154:                 txMsg[i] = rxMsg[i];
  1014  007D96  0E19               	movlw	low main@rxMsg
  1015  007D98  2441               	addwf	main@i^0,w,c
  1016  007D9A  6ED9               	movwf	fsr2l,c
  1017  007D9C  6ADA               	clrf	fsr2h,c
  1018  007D9E  0E00               	movlw	high main@rxMsg
  1019  007DA0  22DA               	addwfc	fsr2h,f,c
  1020  007DA2  0E37               	movlw	low main@txMsg
  1021  007DA4  2441               	addwf	main@i^0,w,c
  1022  007DA6  6EE1               	movwf	fsr1l,c
  1023  007DA8  6AE2               	clrf	fsr1h,c
  1024  007DAA  0E00               	movlw	high main@txMsg
  1025  007DAC  22E2               	addwfc	fsr1h,f,c
  1026  007DAE  CFDF FFE7          	movff	indf2,indf1
  1027  007DB2                     
  1028                           ;main.c: 155:             }
  1029  007DB2  2A41               	incf	main@i^0,f,c
  1030  007DB4                     l1766:
  1031  007DB4  5041               	movf	main@i^0,w,c
  1032  007DB6  6E16               	movwf	??_main^0,c
  1033  007DB8  6A17               	clrf	(??_main+1)^0,c
  1034  007DBA  5011               	movf	main@argc^0,w,c
  1035  007DBC  5C16               	subwf	??_main^0,w,c
  1036  007DBE  5017               	movf	(??_main+1)^0,w,c
  1037  007DC0  0A80               	xorlw	128
  1038  007DC2  6E18               	movwf	(??_main+2)^0,c
  1039  007DC4  5012               	movf	(main@argc+1)^0,w,c
  1040  007DC6  0A80               	xorlw	128
  1041  007DC8  5818               	subwfb	(??_main+2)^0,w,c
  1042  007DCA  A0D8               	btfss	status,0,c
  1043  007DCC  EFEA  F03E         	goto	u521
  1044  007DD0  EFEC  F03E         	goto	u520
  1045  007DD4                     u521:
  1046  007DD4  EFCB  F03E         	goto	l1762
  1047  007DD8                     u520:
  1048  007DD8                     
  1049                           ;main.c: 156:             txMsg[2] = rxMsg[3];
  1050  007DD8  C01C  F039         	movff	main@rxMsg+3,main@txMsg+2
  1051                           
  1052                           ;main.c: 157:         }
  1053  007DDC  EFB8  F03E         	goto	l1756
  1054  007DE0                     l1768:
  1055                           
  1056                           ;main.c: 161:             for (uint8_t i = 0; i < argc; i++) {
  1057  007DE0  0E00               	movlw	0
  1058  007DE2  6E42               	movwf	main@i_1043^0,c
  1059  007DE4  EF03  F03F         	goto	l1774
  1060  007DE8                     l1770:
  1061                           
  1062                           ;main.c: 162:                 txMsg[i] = rxMsg[i];
  1063  007DE8  0E19               	movlw	low main@rxMsg
  1064  007DEA  2442               	addwf	main@i_1043^0,w,c
  1065  007DEC  6ED9               	movwf	fsr2l,c
  1066  007DEE  6ADA               	clrf	fsr2h,c
  1067  007DF0  0E00               	movlw	high main@rxMsg
  1068  007DF2  22DA               	addwfc	fsr2h,f,c
  1069  007DF4  0E37               	movlw	low main@txMsg
  1070  007DF6  2442               	addwf	main@i_1043^0,w,c
  1071  007DF8  6EE1               	movwf	fsr1l,c
  1072  007DFA  6AE2               	clrf	fsr1h,c
  1073  007DFC  0E00               	movlw	high main@txMsg
  1074  007DFE  22E2               	addwfc	fsr1h,f,c
  1075  007E00  CFDF FFE7          	movff	indf2,indf1
  1076  007E04                     
  1077                           ;main.c: 163:             }
  1078  007E04  2A42               	incf	main@i_1043^0,f,c
  1079  007E06                     l1774:
  1080  007E06  5042               	movf	main@i_1043^0,w,c
  1081  007E08  6E16               	movwf	??_main^0,c
  1082  007E0A  6A17               	clrf	(??_main+1)^0,c
  1083  007E0C  5011               	movf	main@argc^0,w,c
  1084  007E0E  5C16               	subwf	??_main^0,w,c
  1085  007E10  5017               	movf	(??_main+1)^0,w,c
  1086  007E12  0A80               	xorlw	128
  1087  007E14  6E18               	movwf	(??_main+2)^0,c
  1088  007E16  5012               	movf	(main@argc+1)^0,w,c
  1089  007E18  0A80               	xorlw	128
  1090  007E1A  5818               	subwfb	(??_main+2)^0,w,c
  1091  007E1C  A0D8               	btfss	status,0,c
  1092  007E1E  EF13  F03F         	goto	u531
  1093  007E22  EF15  F03F         	goto	u530
  1094  007E26                     u531:
  1095  007E26  EFF4  F03E         	goto	l1770
  1096  007E2A                     u530:
  1097  007E2A                     
  1098                           ;main.c: 164:              txMsg[4] = 0x04;
  1099  007E2A  0E04               	movlw	4
  1100  007E2C  6E3B               	movwf	(main@txMsg+4)^0,c
  1101  007E2E                     
  1102                           ;main.c: 165:              Transmit(txMsg, RXNumberOfBytes);
  1103  007E2E  0E37               	movlw	low main@txMsg
  1104  007E30  6E0B               	movwf	Transmit@data^0,c
  1105  007E32  0E00               	movlw	high main@txMsg
  1106  007E34  6E0C               	movwf	(Transmit@data+1)^0,c
  1107  007E36  C040  F00D         	movff	main@RXNumberOfBytes,Transmit@data_long
  1108  007E3A  EC63  F03C         	call	_Transmit	;wreg free
  1109  007E3E  EFB8  F03E         	goto	l1756
  1110  007E42  EF00  F000         	goto	start
  1111  007E46                     __end_of_main:
  1112                           	callstack 0
  1113                           
  1114 ;; *************** function _initVoltmeter *****************
  1115 ;; Defined at:
  1116 ;;		line 15 in file "voltmeter.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;		None
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;		None
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      void 
  1123 ;; Registers used:
  1124 ;;		wreg, status,2
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1130 ;;      Params:         0       0       0       0       0       0       0       0       0
  1131 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1132 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1133 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1134 ;;Total ram usage:        0 bytes
  1135 ;; Hardware stack levels used: 1
  1136 ;; This function calls:
  1137 ;;		Nothing
  1138 ;; This function is called by:
  1139 ;;		_main
  1140 ;; This function uses a non-reentrant model
  1141 ;;
  1142                           
  1143                           	psect	text1
  1144  0074BA                     __ptext1:
  1145                           	callstack 0
  1146  0074BA                     _initVoltmeter:
  1147                           	callstack 30
  1148  0074BA                     
  1149                           ;voltmeter.c: 36:     ADCLK = 0b00011111;
  1150  0074BA  0E1F               	movlw	31
  1151  0074BC  010F               	movlb	15	; () banked
  1152  0074BE  6F57               	movwf	87,b	;volatile
  1153                           
  1154                           ;voltmeter.c: 37:     ADPCH = 0b00000011;
  1155  0074C0  0E03               	movlw	3
  1156  0074C2  6F5F               	movwf	95,b	;volatile
  1157                           
  1158                           ;voltmeter.c: 38:     ADACQ = 0x014;
  1159  0074C4  0E14               	movlw	20
  1160  0074C6  6F5C               	movwf	92,b	;volatile
  1161  0074C8                     
  1162                           ; BSR set to: 15
  1163                           ;voltmeter.c: 39:     ADCON0bits.ADON = 1;
  1164  0074C8  8E60               	bsf	96,7,c	;volatile
  1165  0074CA                     
  1166                           ; BSR set to: 15
  1167                           ;voltmeter.c: 41:     TRISAbits.TRISA3 = 1;
  1168  0074CA  8688               	bsf	136,3,c	;volatile
  1169  0074CC                     
  1170                           ; BSR set to: 15
  1171                           ;voltmeter.c: 42:     ANSELAbits.ANSELA3 = 1;
  1172  0074CC  8711               	bsf	17,3,b	;volatile
  1173  0074CE                     
  1174                           ; BSR set to: 15
  1175  0074CE  0012               	return		;funcret
  1176  0074D0                     __end_of_initVoltmeter:
  1177                           	callstack 0
  1178                           
  1179 ;; *************** function _UARTInit *****************
  1180 ;; Defined at:
  1181 ;;		line 16 in file "uart.c"
  1182 ;; Parameters:    Size  Location     Type
  1183 ;;  baudRate        2    0[COMRAM] unsigned short 
  1184 ;; Auto vars:     Size  Location     Type
  1185 ;;		None
  1186 ;; Return value:  Size  Location     Type
  1187 ;;                  1    wreg      void 
  1188 ;; Registers used:
  1189 ;;		wreg, status,2
  1190 ;; Tracked objects:
  1191 ;;		On entry : 0/0
  1192 ;;		On exit  : 0/0
  1193 ;;		Unchanged: 0/0
  1194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1195 ;;      Params:         2       0       0       0       0       0       0       0       0
  1196 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1197 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1198 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1199 ;;Total ram usage:        2 bytes
  1200 ;; Hardware stack levels used: 1
  1201 ;; This function calls:
  1202 ;;		Nothing
  1203 ;; This function is called by:
  1204 ;;		_main
  1205 ;; This function uses a non-reentrant model
  1206 ;;
  1207                           
  1208                           	psect	text2
  1209  0075D0                     __ptext2:
  1210                           	callstack 0
  1211  0075D0                     _UARTInit:
  1212                           	callstack 30
  1213  0075D0                     
  1214                           ;uart.c: 19:     TRISCbits.TRISC6 = 1;
  1215  0075D0  8C8A               	bsf	138,6,c	;volatile
  1216                           
  1217                           ;uart.c: 20:     TRISCbits.TRISC7 = 1;
  1218  0075D2  8E8A               	bsf	138,7,c	;volatile
  1219                           
  1220                           ;uart.c: 21:     ANSELCbits.ANSELC7 = 0;
  1221  0075D4  010F               	movlb	15	; () banked
  1222  0075D6  9F21               	bcf	33,7,b	;volatile
  1223                           
  1224                           ;uart.c: 23:     TRISAbits.TRISA0 = 0;
  1225  0075D8  9088               	bcf	136,0,c	;volatile
  1226                           
  1227                           ;uart.c: 24:     LATAbits.LATA0 = 0;
  1228  0075DA  9083               	bcf	131,0,c	;volatile
  1229  0075DC                     
  1230                           ; BSR set to: 15
  1231                           ;uart.c: 27:     TX1STA = 0;
  1232  0075DC  0E00               	movlw	0
  1233  0075DE  6E9E               	movwf	158,c	;volatile
  1234                           
  1235                           ;uart.c: 28:     RC1STA = 0;
  1236  0075E0  0E00               	movlw	0
  1237  0075E2  6E9D               	movwf	157,c	;volatile
  1238                           
  1239                           ;uart.c: 29:     RC6PPS = 0x09;
  1240  0075E4  0E09               	movlw	9
  1241  0075E6  010E               	movlb	14	; () banked
  1242  0075E8  6FFD               	movwf	253,b	;volatile
  1243  0075EA                     
  1244                           ; BSR set to: 14
  1245                           ;uart.c: 31:     TX1STAbits.SYNC = 0;
  1246  0075EA  989E               	bcf	158,4,c	;volatile
  1247  0075EC                     
  1248                           ; BSR set to: 14
  1249                           ;uart.c: 32:     TX1STAbits.TX9 = 0;
  1250  0075EC  9C9E               	bcf	158,6,c	;volatile
  1251  0075EE                     
  1252                           ; BSR set to: 14
  1253                           ;uart.c: 33:     RC1STAbits.RX9 = 0;
  1254  0075EE  9C9D               	bcf	157,6,c	;volatile
  1255  0075F0                     
  1256                           ; BSR set to: 14
  1257                           ;uart.c: 34:     RC1STAbits.CREN = 1;
  1258  0075F0  889D               	bsf	157,4,c	;volatile
  1259  0075F2                     
  1260                           ; BSR set to: 14
  1261                           ;uart.c: 35:     RC1STAbits.ADDEN = 0;
  1262  0075F2  969D               	bcf	157,3,c	;volatile
  1263  0075F4                     
  1264                           ; BSR set to: 14
  1265                           ;uart.c: 37:     PIE3bits.RC1IE = 1;
  1266  0075F4  8BC5               	bsf	197,5,b	;volatile
  1267  0075F6                     
  1268                           ; BSR set to: 14
  1269                           ;uart.c: 38:     PIE3bits.TX1IE = 0;
  1270  0075F6  99C5               	bcf	197,4,b	;volatile
  1271  0075F8                     
  1272                           ; BSR set to: 14
  1273                           ;uart.c: 40:     TX1STAbits.BRGH = 1;
  1274  0075F8  849E               	bsf	158,2,c	;volatile
  1275  0075FA                     
  1276                           ; BSR set to: 14
  1277                           ;uart.c: 41:     BAUD1CONbits.BRG16 = 1;
  1278  0075FA  869F               	bsf	159,3,c	;volatile
  1279                           
  1280                           ;uart.c: 45:     SP1BRG = 12;
  1281  0075FC  0E00               	movlw	0
  1282  0075FE  6E9C               	movwf	156,c	;volatile
  1283  007600  0E0C               	movlw	12
  1284  007602  6E9B               	movwf	155,c	;volatile
  1285                           
  1286                           ;uart.c: 46:     SP1BRGH = 0;
  1287  007604  0E00               	movlw	0
  1288  007606  6E9C               	movwf	156,c	;volatile
  1289  007608                     
  1290                           ; BSR set to: 14
  1291                           ;uart.c: 50:     TX1STAbits.TXEN = 1;
  1292  007608  8A9E               	bsf	158,5,c	;volatile
  1293  00760A                     
  1294                           ; BSR set to: 14
  1295                           ;uart.c: 51:     RC1STAbits.SPEN = 1;
  1296  00760A  8E9D               	bsf	157,7,c	;volatile
  1297  00760C                     
  1298                           ; BSR set to: 14
  1299                           ;uart.c: 53:     PIR3bits.RC1IF = 0;
  1300  00760C  9BCD               	bcf	205,5,b	;volatile
  1301  00760E                     
  1302                           ; BSR set to: 14
  1303                           ;uart.c: 55:     PIE3bits.RC1IE = 1;
  1304  00760E  8BC5               	bsf	197,5,b	;volatile
  1305  007610                     
  1306                           ; BSR set to: 14
  1307                           ;uart.c: 56:     INTCONbits.PEIE = 1;
  1308  007610  8CF2               	bsf	242,6,c	;volatile
  1309  007612                     
  1310                           ; BSR set to: 14
  1311  007612  0012               	return		;funcret
  1312  007614                     __end_of_UARTInit:
  1313                           	callstack 0
  1314                           
  1315 ;; *************** function _Transmit *****************
  1316 ;; Defined at:
  1317 ;;		line 16 in file "sendRecept.c"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;  data            2   10[COMRAM] PTR const unsigned char 
  1320 ;;		 -> main@txMsg(9), 
  1321 ;;  data_long       1   12[COMRAM] const unsigned char 
  1322 ;; Auto vars:     Size  Location     Type
  1323 ;;  i               1   15[COMRAM] unsigned char 
  1324 ;;  reg_val         1   14[COMRAM] unsigned char 
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  1    wreg      void 
  1327 ;; Registers used:
  1328 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1334 ;;      Params:         3       0       0       0       0       0       0       0       0
  1335 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1336 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1337 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1338 ;;Total ram usage:        6 bytes
  1339 ;; Hardware stack levels used: 1
  1340 ;; Hardware stack levels required when called: 2
  1341 ;; This function calls:
  1342 ;;		_AntennaTX
  1343 ;;		_ReadSXRegister
  1344 ;;		_UARTWriteByteHex
  1345 ;;		_UARTWriteStr
  1346 ;;		_UARTWriteStrLn
  1347 ;;		_WriteSXRegister
  1348 ;; This function is called by:
  1349 ;;		_main
  1350 ;; This function uses a non-reentrant model
  1351 ;;
  1352                           
  1353                           	psect	text3
  1354  0078C6                     __ptext3:
  1355                           	callstack 0
  1356  0078C6                     _Transmit:
  1357                           	callstack 28
  1358  0078C6                     
  1359                           ;sendRecept.c: 19:     uint8_t reg_val;;sendRecept.c: 20:     uint8_t i;;sendRecept.c: 2
      +                          6:     AntennaTX();
  1360  0078C6  EC52  F03A         	call	_AntennaTX	;wreg free
  1361  0078CA                     
  1362                           ;sendRecept.c: 31:     WriteSXRegister(0x0D, ReadSXRegister(0x0E));
  1363  0078CA  0E0E               	movlw	14
  1364  0078CC  EC83  F03A         	call	_ReadSXRegister
  1365  0078D0  6E05               	movwf	WriteSXRegister@data^0,c
  1366  0078D2  0E0D               	movlw	13
  1367  0078D4  EC68  F03A         	call	_WriteSXRegister
  1368  0078D8                     
  1369                           ;sendRecept.c: 32:     WriteSXRegister(0x22, data_long);
  1370  0078D8  C00D  F005         	movff	Transmit@data_long,WriteSXRegister@data
  1371  0078DC  0E22               	movlw	34
  1372  0078DE  EC68  F03A         	call	_WriteSXRegister
  1373  0078E2                     
  1374                           ;sendRecept.c: 34:     for (i = 0; i < data_long; i++) {
  1375  0078E2  0E00               	movlw	0
  1376  0078E4  6E10               	movwf	Transmit@i^0,c
  1377  0078E6  500D               	movf	Transmit@data_long^0,w,c
  1378  0078E8  A4D8               	btfss	status,2,c
  1379  0078EA  EF79  F03C         	goto	u391
  1380  0078EE  EF7B  F03C         	goto	u390
  1381  0078F2                     u391:
  1382  0078F2  EF7D  F03C         	goto	l1590
  1383  0078F6                     u390:
  1384  0078F6  EF92  F03C         	goto	l1596
  1385  0078FA                     l1590:
  1386                           
  1387                           ;sendRecept.c: 35:         WriteSXRegister(0x00, data[i]);
  1388  0078FA  5010               	movf	Transmit@i^0,w,c
  1389  0078FC  240B               	addwf	Transmit@data^0,w,c
  1390  0078FE  6ED9               	movwf	fsr2l,c
  1391  007900  0E00               	movlw	0
  1392  007902  200C               	addwfc	(Transmit@data+1)^0,w,c
  1393  007904  6EDA               	movwf	fsr2h,c
  1394  007906  50DF               	movf	indf2,w,c
  1395  007908  6E05               	movwf	WriteSXRegister@data^0,c
  1396  00790A  0E00               	movlw	0
  1397  00790C  EC68  F03A         	call	_WriteSXRegister
  1398  007910                     
  1399                           ;sendRecept.c: 36:     }
  1400  007910  2A10               	incf	Transmit@i^0,f,c
  1401  007912  500D               	movf	Transmit@data_long^0,w,c
  1402  007914  5C10               	subwf	Transmit@i^0,w,c
  1403  007916  A0D8               	btfss	status,0,c
  1404  007918  EF90  F03C         	goto	u401
  1405  00791C  EF92  F03C         	goto	u400
  1406  007920                     u401:
  1407  007920  EF7D  F03C         	goto	l1590
  1408  007924                     u400:
  1409  007924                     l1596:
  1410                           
  1411                           ;sendRecept.c: 41:     WriteSXRegister(0x01, 0x83);
  1412  007924  0E83               	movlw	131
  1413  007926  6E05               	movwf	WriteSXRegister@data^0,c
  1414  007928  0E01               	movlw	1
  1415  00792A  EC68  F03A         	call	_WriteSXRegister
  1416  00792E                     
  1417                           ;sendRecept.c: 42:     _delay((unsigned long)((100)*(1000000UL/4000.0)));
  1418  00792E  0E21               	movlw	33
  1419  007930  6E0E               	movwf	??_Transmit^0,c
  1420  007932  0E76               	movlw	118
  1421  007934                     u597:
  1422  007934  2EE8               	decfsz	wreg,f,c
  1423  007936  D7FE               	bra	u597
  1424  007938  2E0E               	decfsz	??_Transmit^0,f,c
  1425  00793A  D7FC               	bra	u597
  1426  00793C  D000               	nop2	
  1427  00793E                     
  1428                           ;sendRecept.c: 46:     reg_val = ReadSXRegister(0x12);
  1429  00793E  0E12               	movlw	18
  1430  007940  EC83  F03A         	call	_ReadSXRegister
  1431  007944  6E0F               	movwf	Transmit@reg_val^0,c
  1432                           
  1433                           ;sendRecept.c: 47:     while ((reg_val & 0x08) == 0x00) {
  1434  007946  EFA9  F03C         	goto	l1604
  1435  00794A                     l1602:
  1436                           
  1437                           ;sendRecept.c: 48:         reg_val = ReadSXRegister(0x12);
  1438  00794A  0E12               	movlw	18
  1439  00794C  EC83  F03A         	call	_ReadSXRegister
  1440  007950  6E0F               	movwf	Transmit@reg_val^0,c
  1441  007952                     l1604:
  1442                           
  1443                           ;sendRecept.c: 47:     while ((reg_val & 0x08) == 0x00) {
  1444  007952  A60F               	btfss	Transmit@reg_val^0,3,c
  1445  007954  EFAE  F03C         	goto	u411
  1446  007958  EFB0  F03C         	goto	u410
  1447  00795C                     u411:
  1448  00795C  EFA5  F03C         	goto	l1602
  1449  007960                     u410:
  1450  007960                     
  1451                           ;sendRecept.c: 64:     WriteSXRegister(0x12, 0xFF);
  1452  007960  0EFF               	movlw	255
  1453  007962  6E05               	movwf	WriteSXRegister@data^0,c
  1454  007964  0E12               	movlw	18
  1455  007966  EC68  F03A         	call	_WriteSXRegister
  1456  00796A                     
  1457                           ;sendRecept.c: 73:     UARTWriteStr("Message envoye : ");
  1458  00796A  0E6F               	movlw	low STR_18
  1459  00796C  6E02               	movwf	UARTWriteStr@string^0,c
  1460  00796E  0E7F               	movlw	high STR_18
  1461  007970  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  1462  007972  EC38  F03B         	call	_UARTWriteStr	;wreg free
  1463  007976                     
  1464                           ;sendRecept.c: 74:     for(i = 0; i < data_long; i++) {
  1465  007976  0E00               	movlw	0
  1466  007978  6E10               	movwf	Transmit@i^0,c
  1467  00797A  500D               	movf	Transmit@data_long^0,w,c
  1468  00797C  A4D8               	btfss	status,2,c
  1469  00797E  EFC3  F03C         	goto	u421
  1470  007982  EFC5  F03C         	goto	u420
  1471  007986                     u421:
  1472  007986  EFC7  F03C         	goto	l1616
  1473  00798A                     u420:
  1474  00798A  EFE4  F03C         	goto	l1624
  1475  00798E                     l1616:
  1476                           
  1477                           ;sendRecept.c: 75:             UARTWriteByteHex(data[i]);
  1478  00798E  5010               	movf	Transmit@i^0,w,c
  1479  007990  240B               	addwf	Transmit@data^0,w,c
  1480  007992  6ED9               	movwf	fsr2l,c
  1481  007994  0E00               	movlw	0
  1482  007996  200C               	addwfc	(Transmit@data+1)^0,w,c
  1483  007998  6EDA               	movwf	fsr2h,c
  1484  00799A  50DF               	movf	indf2,w,c
  1485  00799C  6E0E               	movwf	??_Transmit^0,c
  1486  00799E  500E               	movf	??_Transmit^0,w,c
  1487  0079A0  6E02               	movwf	UARTWriteByteHex@data^0,c
  1488  0079A2  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  1489  0079A4  EC74  F03B         	call	_UARTWriteByteHex	;wreg free
  1490  0079A8                     
  1491                           ;sendRecept.c: 76:             UARTWriteStr(" ");
  1492  0079A8  0E86               	movlw	low (STR_16+25)
  1493  0079AA  6E02               	movwf	UARTWriteStr@string^0,c
  1494  0079AC  0E7E               	movlw	high (STR_16+25)
  1495  0079AE  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  1496  0079B0  EC38  F03B         	call	_UARTWriteStr	;wreg free
  1497  0079B4                     
  1498                           ;sendRecept.c: 77:     }
  1499  0079B4  2A10               	incf	Transmit@i^0,f,c
  1500  0079B6  500D               	movf	Transmit@data_long^0,w,c
  1501  0079B8  5C10               	subwf	Transmit@i^0,w,c
  1502  0079BA  A0D8               	btfss	status,0,c
  1503  0079BC  EFE2  F03C         	goto	u431
  1504  0079C0  EFE4  F03C         	goto	u430
  1505  0079C4                     u431:
  1506  0079C4  EFC7  F03C         	goto	l1616
  1507  0079C8                     u430:
  1508  0079C8                     l1624:
  1509                           
  1510                           ;sendRecept.c: 78:     UARTWriteStrLn(" ");
  1511  0079C8  0E86               	movlw	low (STR_16+25)
  1512  0079CA  6E02               	movwf	UARTWriteStrLn@string^0,c
  1513  0079CC  0E7E               	movlw	high (STR_16+25)
  1514  0079CE  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1515  0079D0  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  1516  0079D4  0012               	return		;funcret
  1517  0079D6                     __end_of_Transmit:
  1518                           	callstack 0
  1519                           
  1520 ;; *************** function _AntennaTX *****************
  1521 ;; Defined at:
  1522 ;;		line 34 in file "RF_LoRa_868_SO.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;		None
  1525 ;; Auto vars:     Size  Location     Type
  1526 ;;		None
  1527 ;; Return value:  Size  Location     Type
  1528 ;;                  1    wreg      void 
  1529 ;; Registers used:
  1530 ;;		wreg
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1536 ;;      Params:         0       0       0       0       0       0       0       0       0
  1537 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1538 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1539 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1540 ;;Total ram usage:        1 bytes
  1541 ;; Hardware stack levels used: 1
  1542 ;; This function calls:
  1543 ;;		Nothing
  1544 ;; This function is called by:
  1545 ;;		_Transmit
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text4
  1550  0074A4                     __ptext4:
  1551                           	callstack 0
  1552  0074A4                     _AntennaTX:
  1553                           	callstack 29
  1554  0074A4                     
  1555                           ;RF_LoRa_868_SO.c: 35:     LATBbits.LATB4 = 0;
  1556  0074A4  9884               	bcf	132,4,c	;volatile
  1557                           
  1558                           ;RF_LoRa_868_SO.c: 36:     LATBbits.LATB3 = 0;
  1559  0074A6  9684               	bcf	132,3,c	;volatile
  1560  0074A8                     
  1561                           ;RF_LoRa_868_SO.c: 37:     _delay((unsigned long)((10)*(1000000UL/4000.0)));
  1562  0074A8  0E04               	movlw	4
  1563  0074AA  6E01               	movwf	??_AntennaTX^0,c
  1564  0074AC  0E3E               	movlw	62
  1565  0074AE                     u607:
  1566  0074AE  2EE8               	decfsz	wreg,f,c
  1567  0074B0  D7FE               	bra	u607
  1568  0074B2  2E01               	decfsz	??_AntennaTX^0,f,c
  1569  0074B4  D7FC               	bra	u607
  1570  0074B6                     
  1571                           ;RF_LoRa_868_SO.c: 38:     LATBbits.LATB3 = 1;
  1572  0074B6  8684               	bsf	132,3,c	;volatile
  1573  0074B8  0012               	return		;funcret
  1574  0074BA                     __end_of_AntennaTX:
  1575                           	callstack 0
  1576                           
  1577 ;; *************** function _SPIInit *****************
  1578 ;; Defined at:
  1579 ;;		line 16 in file "spi.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;		None
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;		None
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  1    wreg      void 
  1586 ;; Registers used:
  1587 ;;		wreg, status,2
  1588 ;; Tracked objects:
  1589 ;;		On entry : 0/0
  1590 ;;		On exit  : 0/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1593 ;;      Params:         0       0       0       0       0       0       0       0       0
  1594 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1595 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1596 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1597 ;;Total ram usage:        0 bytes
  1598 ;; Hardware stack levels used: 1
  1599 ;; This function calls:
  1600 ;;		Nothing
  1601 ;; This function is called by:
  1602 ;;		_main
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           	psect	text5
  1607  007598                     __ptext5:
  1608                           	callstack 0
  1609  007598                     _SPIInit:
  1610                           	callstack 30
  1611  007598                     
  1612                           ;spi.c: 18:     TRISCbits.TRISC3 = 0;
  1613  007598  968A               	bcf	138,3,c	;volatile
  1614                           
  1615                           ;spi.c: 19:     ANSELCbits.ANSELC3 = 0;
  1616  00759A  010F               	movlb	15	; () banked
  1617  00759C  9721               	bcf	33,3,b	;volatile
  1618                           
  1619                           ;spi.c: 20:     TRISCbits.TRISC4 = 1;
  1620  00759E  888A               	bsf	138,4,c	;volatile
  1621                           
  1622                           ;spi.c: 21:     ANSELCbits.ANSELC4 = 0;
  1623  0075A0  9921               	bcf	33,4,b	;volatile
  1624                           
  1625                           ;spi.c: 22:     TRISCbits.TRISC5 = 0;
  1626  0075A2  9A8A               	bcf	138,5,c	;volatile
  1627                           
  1628                           ;spi.c: 24:     TRISCbits.TRISC2 = 0;
  1629  0075A4  948A               	bcf	138,2,c	;volatile
  1630                           
  1631                           ;spi.c: 25:     LATCbits.LATC2 = 1;
  1632  0075A6  8485               	bsf	133,2,c	;volatile
  1633                           
  1634                           ;spi.c: 27:     TRISCbits.TRISC0 = 0;
  1635  0075A8  908A               	bcf	138,0,c	;volatile
  1636                           
  1637                           ;spi.c: 28:     LATCbits.LATC0 = 1;
  1638  0075AA  8085               	bsf	133,0,c	;volatile
  1639                           
  1640                           ;spi.c: 30:     TRISCbits.TRISC1 = 0;
  1641  0075AC  928A               	bcf	138,1,c	;volatile
  1642                           
  1643                           ;spi.c: 31:     LATCbits.LATC1 = 1;
  1644  0075AE  8285               	bsf	133,1,c	;volatile
  1645  0075B0                     
  1646                           ; BSR set to: 15
  1647                           ;spi.c: 33:     RC3PPS = 0x0D;
  1648  0075B0  0E0D               	movlw	13
  1649  0075B2  010E               	movlb	14	; () banked
  1650  0075B4  6FFA               	movwf	250,b	;volatile
  1651                           
  1652                           ;spi.c: 34:     RC5PPS = 0x0E;
  1653  0075B6  0E0E               	movlw	14
  1654  0075B8  6FFC               	movwf	252,b	;volatile
  1655                           
  1656                           ;spi.c: 35:     SSP1CLKPPS = 0b00010011;
  1657  0075BA  0E13               	movlw	19
  1658  0075BC  6FB7               	movwf	183,b	;volatile
  1659                           
  1660                           ;spi.c: 36:     SSP1DATPPS = 0b00010100;
  1661  0075BE  0E14               	movlw	20
  1662  0075C0  6FB8               	movwf	184,b	;volatile
  1663                           
  1664                           ;spi.c: 37:     SSP1STAT = 0b01000000;
  1665  0075C2  0E40               	movlw	64
  1666  0075C4  6E95               	movwf	149,c	;volatile
  1667                           
  1668                           ;spi.c: 40:     SSP1CON1 = 0b00100000;
  1669  0075C6  0E20               	movlw	32
  1670  0075C8  6E96               	movwf	150,c	;volatile
  1671                           
  1672                           ;spi.c: 46:     SSP1CON3 = 0b00000000;
  1673  0075CA  0E00               	movlw	0
  1674  0075CC  6E98               	movwf	152,c	;volatile
  1675  0075CE                     
  1676                           ; BSR set to: 14
  1677  0075CE  0012               	return		;funcret
  1678  0075D0                     __end_of_SPIInit:
  1679                           	callstack 0
  1680                           
  1681 ;; *************** function _ResetRFModule *****************
  1682 ;; Defined at:
  1683 ;;		line 26 in file "RF_LoRa_868_SO.c"
  1684 ;; Parameters:    Size  Location     Type
  1685 ;;		None
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;		None
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  1    wreg      void 
  1690 ;; Registers used:
  1691 ;;		wreg
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1697 ;;      Params:         0       0       0       0       0       0       0       0       0
  1698 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1699 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1700 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1701 ;;Total ram usage:        1 bytes
  1702 ;; Hardware stack levels used: 1
  1703 ;; This function calls:
  1704 ;;		Nothing
  1705 ;; This function is called by:
  1706 ;;		_main
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           	psect	text6
  1711  007546                     __ptext6:
  1712                           	callstack 0
  1713  007546                     _ResetRFModule:
  1714                           	callstack 30
  1715  007546                     
  1716                           ;RF_LoRa_868_SO.c: 27:     LATBbits.LATB2 = 1;
  1717  007546  8484               	bsf	132,2,c	;volatile
  1718                           
  1719                           ;RF_LoRa_868_SO.c: 28:     TRISBbits.TRISB2 = 0;
  1720  007548  9489               	bcf	137,2,c	;volatile
  1721  00754A                     
  1722                           ;RF_LoRa_868_SO.c: 29:     _delay((unsigned long)((50)*(1000000UL/4000.0)));
  1723  00754A  0E11               	movlw	17
  1724  00754C  6E01               	movwf	??_ResetRFModule^0,c
  1725  00754E  0E3A               	movlw	58
  1726  007550                     u617:
  1727  007550  2EE8               	decfsz	wreg,f,c
  1728  007552  D7FE               	bra	u617
  1729  007554  2E01               	decfsz	??_ResetRFModule^0,f,c
  1730  007556  D7FC               	bra	u617
  1731  007558  D000               	nop2	
  1732  00755A                     
  1733                           ;RF_LoRa_868_SO.c: 30:     TRISBbits.TRISB2 = 1;
  1734  00755A  8489               	bsf	137,2,c	;volatile
  1735                           
  1736                           ;RF_LoRa_868_SO.c: 31:     _delay((unsigned long)((50)*(1000000UL/4000.0)));
  1737  00755C  0E11               	movlw	17
  1738  00755E  6E01               	movwf	??_ResetRFModule^0,c
  1739  007560  0E3A               	movlw	58
  1740  007562                     u627:
  1741  007562  2EE8               	decfsz	wreg,f,c
  1742  007564  D7FE               	bra	u627
  1743  007566  2E01               	decfsz	??_ResetRFModule^0,f,c
  1744  007568  D7FC               	bra	u627
  1745  00756A  D000               	nop2	
  1746  00756C  0012               	return		;funcret
  1747  00756E                     __end_of_ResetRFModule:
  1748                           	callstack 0
  1749                           
  1750 ;; *************** function _Receive *****************
  1751 ;; Defined at:
  1752 ;;		line 83 in file "sendRecept.c"
  1753 ;; Parameters:    Size  Location     Type
  1754 ;;  data            2   10[COMRAM] PTR unsigned char 
  1755 ;;		 -> main@rxMsg(30), 
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;  reg_val         1   15[COMRAM] unsigned char 
  1758 ;;  i               1   14[COMRAM] unsigned char 
  1759 ;;  RXNumberOfBy    1   13[COMRAM] unsigned char 
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      void 
  1762 ;; Registers used:
  1763 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1769 ;;      Params:         2       0       0       0       0       0       0       0       0
  1770 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1771 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1772 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1773 ;;Total ram usage:        6 bytes
  1774 ;; Hardware stack levels used: 1
  1775 ;; Hardware stack levels required when called: 2
  1776 ;; This function calls:
  1777 ;;		_AntennaRX
  1778 ;;		_ReadSXRegister
  1779 ;;		_UARTWriteByteHex
  1780 ;;		_UARTWriteStr
  1781 ;;		_UARTWriteStrLn
  1782 ;;		_WriteSXRegister
  1783 ;; This function is called by:
  1784 ;;		_main
  1785 ;; This function uses a non-reentrant model
  1786 ;;
  1787                           
  1788                           	psect	text7
  1789  007B3E                     __ptext7:
  1790                           	callstack 0
  1791  007B3E                     _Receive:
  1792                           	callstack 28
  1793  007B3E                     
  1794                           ;sendRecept.c: 85:     uint8_t reg_val;;sendRecept.c: 86:     uint8_t RXNumberOfBytes;;s
      +                          endRecept.c: 87:     uint8_t i;;sendRecept.c: 89:     AntennaRX();
  1795  007B3E  EC47  F03A         	call	_AntennaRX	;wreg free
  1796  007B42                     
  1797                           ;sendRecept.c: 92:     WriteSXRegister(0x0D, ReadSXRegister(0x0F));
  1798  007B42  0E0F               	movlw	15
  1799  007B44  EC83  F03A         	call	_ReadSXRegister
  1800  007B48  6E05               	movwf	WriteSXRegister@data^0,c
  1801  007B4A  0E0D               	movlw	13
  1802  007B4C  EC68  F03A         	call	_WriteSXRegister
  1803  007B50                     
  1804                           ;sendRecept.c: 100:     WriteSXRegister(0x01, 0x86);
  1805  007B50  0E86               	movlw	134
  1806  007B52  6E05               	movwf	WriteSXRegister@data^0,c
  1807  007B54  0E01               	movlw	1
  1808  007B56  EC68  F03A         	call	_WriteSXRegister
  1809  007B5A                     
  1810                           ;sendRecept.c: 101:     _delay((unsigned long)((100)*(1000000UL/4000.0)));
  1811  007B5A  0E21               	movlw	33
  1812  007B5C  6E0D               	movwf	??_Receive^0,c
  1813  007B5E  0E76               	movlw	118
  1814  007B60                     u637:
  1815  007B60  2EE8               	decfsz	wreg,f,c
  1816  007B62  D7FE               	bra	u637
  1817  007B64  2E0D               	decfsz	??_Receive^0,f,c
  1818  007B66  D7FC               	bra	u637
  1819  007B68  D000               	nop2	
  1820  007B6A                     
  1821                           ;sendRecept.c: 105:     UARTWriteStrLn("-----------------------");
  1822  007B6A  0ED5               	movlw	low STR_21
  1823  007B6C  6E02               	movwf	UARTWriteStrLn@string^0,c
  1824  007B6E  0E7E               	movlw	high STR_21
  1825  007B70  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1826  007B72  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  1827  007B76                     
  1828                           ;sendRecept.c: 106:     UARTWriteStrLn("waiting for valid header");
  1829  007B76  0EBC               	movlw	low STR_22
  1830  007B78  6E02               	movwf	UARTWriteStrLn@string^0,c
  1831  007B7A  0E7E               	movlw	high STR_22
  1832  007B7C  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1833  007B7E  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  1834  007B82                     l1640:
  1835                           
  1836                           ;sendRecept.c: 109:         reg_val = ReadSXRegister(0x12);
  1837  007B82  0E12               	movlw	18
  1838  007B84  EC83  F03A         	call	_ReadSXRegister
  1839  007B88  6E10               	movwf	Receive@reg_val^0,c
  1840  007B8A                     
  1841                           ;sendRecept.c: 110:     } while (((reg_val & 0x10) == 0x00) && ((reg_val & 0x80) == 0x00
      +                          ));
  1842  007B8A  B810               	btfsc	Receive@reg_val^0,4,c
  1843  007B8C  EFCA  F03D         	goto	u441
  1844  007B90  EFCC  F03D         	goto	u440
  1845  007B94                     u441:
  1846  007B94  EFD3  F03D         	goto	l1646
  1847  007B98                     u440:
  1848  007B98  AE10               	btfss	Receive@reg_val^0,7,c
  1849  007B9A  EFD1  F03D         	goto	u451
  1850  007B9E  EFD3  F03D         	goto	u450
  1851  007BA2                     u451:
  1852  007BA2  EFC1  F03D         	goto	l1640
  1853  007BA6                     u450:
  1854  007BA6                     l1646:
  1855                           
  1856                           ;sendRecept.c: 112:     if ((ReadSXRegister(0x12) & 0x10) == 0x00) {
  1857  007BA6  0E12               	movlw	18
  1858  007BA8  EC83  F03A         	call	_ReadSXRegister
  1859  007BAC  6E0D               	movwf	??_Receive^0,c
  1860  007BAE  B80D               	btfsc	??_Receive^0,4,c
  1861  007BB0  EFDC  F03D         	goto	u461
  1862  007BB4  EFDE  F03D         	goto	u460
  1863  007BB8                     u461:
  1864  007BB8  EFE5  F03D         	goto	l1652
  1865  007BBC                     u460:
  1866  007BBC                     
  1867                           ;sendRecept.c: 114:         WriteSXRegister(0x12, 0xFF);
  1868  007BBC  0EFF               	movlw	255
  1869  007BBE  6E05               	movwf	WriteSXRegister@data^0,c
  1870  007BC0  0E12               	movlw	18
  1871  007BC2  EC68  F03A         	call	_WriteSXRegister
  1872  007BC6  EF58  F03E         	goto	l225
  1873  007BCA                     l1652:
  1874                           
  1875                           ;sendRecept.c: 119:     UARTWriteStrLn("valid header received");
  1876  007BCA  0E33               	movlw	low STR_23
  1877  007BCC  6E02               	movwf	UARTWriteStrLn@string^0,c
  1878  007BCE  0E7F               	movlw	high STR_23
  1879  007BD0  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1880  007BD2  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  1881  007BD6                     
  1882                           ;sendRecept.c: 128:     reg_val = ReadSXRegister(0x12);
  1883  007BD6  0E12               	movlw	18
  1884  007BD8  EC83  F03A         	call	_ReadSXRegister
  1885  007BDC  6E10               	movwf	Receive@reg_val^0,c
  1886                           
  1887                           ;sendRecept.c: 129:     while ((reg_val & 0x40) == 0x00) {
  1888  007BDE  EFF5  F03D         	goto	l1658
  1889  007BE2                     l1656:
  1890                           
  1891                           ;sendRecept.c: 130:         reg_val = ReadSXRegister(0x12);
  1892  007BE2  0E12               	movlw	18
  1893  007BE4  EC83  F03A         	call	_ReadSXRegister
  1894  007BE8  6E10               	movwf	Receive@reg_val^0,c
  1895  007BEA                     l1658:
  1896                           
  1897                           ;sendRecept.c: 129:     while ((reg_val & 0x40) == 0x00) {
  1898  007BEA  AC10               	btfss	Receive@reg_val^0,6,c
  1899  007BEC  EFFA  F03D         	goto	u471
  1900  007BF0  EFFC  F03D         	goto	u470
  1901  007BF4                     u471:
  1902  007BF4  EFF1  F03D         	goto	l1656
  1903  007BF8                     u470:
  1904  007BF8                     
  1905                           ;sendRecept.c: 142:     if((reg_val & 0x20) != 0x00){
  1906  007BF8  AA10               	btfss	Receive@reg_val^0,5,c
  1907  007BFA  EF01  F03E         	goto	u481
  1908  007BFE  EF03  F03E         	goto	u480
  1909  007C02                     u481:
  1910  007C02  EF11  F03E         	goto	l1662
  1911  007C06                     u480:
  1912  007C06                     
  1913                           ;sendRecept.c: 143:         UARTWriteStrLn(" ");
  1914  007C06  0E86               	movlw	low (STR_16+25)
  1915  007C08  6E02               	movwf	UARTWriteStrLn@string^0,c
  1916  007C0A  0E7E               	movlw	high (STR_16+25)
  1917  007C0C  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1918  007C0E  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  1919                           
  1920                           ;sendRecept.c: 144:         UARTWriteStrLn("payload CRC error");
  1921  007C12  0E81               	movlw	low STR_25
  1922  007C14  6E02               	movwf	UARTWriteStrLn@string^0,c
  1923  007C16  0E7F               	movlw	high STR_25
  1924  007C18  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1925  007C1A  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  1926                           
  1927                           ;sendRecept.c: 145:     }
  1928  007C1E  EF53  F03E         	goto	l1682
  1929  007C22                     l1662:
  1930                           
  1931                           ;sendRecept.c: 148:         UARTWriteStr("received data: ");
  1932  007C22  0EB5               	movlw	low STR_26
  1933  007C24  6E02               	movwf	UARTWriteStr@string^0,c
  1934  007C26  0E7F               	movlw	high STR_26
  1935  007C28  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  1936  007C2A  EC38  F03B         	call	_UARTWriteStr	;wreg free
  1937  007C2E                     
  1938                           ;sendRecept.c: 149:         RXNumberOfBytes = ReadSXRegister(0x13);
  1939  007C2E  0E13               	movlw	19
  1940  007C30  EC83  F03A         	call	_ReadSXRegister
  1941  007C34  6E0E               	movwf	Receive@RXNumberOfBytes^0,c
  1942  007C36                     
  1943                           ;sendRecept.c: 150:         WriteSXRegister(0x0D, ReadSXRegister(0x10));
  1944  007C36  0E10               	movlw	16
  1945  007C38  EC83  F03A         	call	_ReadSXRegister
  1946  007C3C  6E05               	movwf	WriteSXRegister@data^0,c
  1947  007C3E  0E0D               	movlw	13
  1948  007C40  EC68  F03A         	call	_WriteSXRegister
  1949  007C44                     
  1950                           ;sendRecept.c: 152:         for (i = 0; i < RXNumberOfBytes; i++) {
  1951  007C44  0E00               	movlw	0
  1952  007C46  6E0F               	movwf	Receive@i^0,c
  1953  007C48  EF44  F03E         	goto	l1678
  1954  007C4C                     l1670:
  1955                           
  1956                           ;sendRecept.c: 159:             data[i] = ReadSXRegister(0x00);
  1957  007C4C  500F               	movf	Receive@i^0,w,c
  1958  007C4E  240B               	addwf	Receive@data^0,w,c
  1959  007C50  6ED9               	movwf	fsr2l,c
  1960  007C52  0E00               	movlw	0
  1961  007C54  200C               	addwfc	(Receive@data+1)^0,w,c
  1962  007C56  6EDA               	movwf	fsr2h,c
  1963  007C58  0E00               	movlw	0
  1964  007C5A  EC83  F03A         	call	_ReadSXRegister
  1965  007C5E  6EDF               	movwf	indf2,c
  1966  007C60                     
  1967                           ;sendRecept.c: 160:             UARTWriteByteHex(data[i]);
  1968  007C60  500F               	movf	Receive@i^0,w,c
  1969  007C62  240B               	addwf	Receive@data^0,w,c
  1970  007C64  6ED9               	movwf	fsr2l,c
  1971  007C66  0E00               	movlw	0
  1972  007C68  200C               	addwfc	(Receive@data+1)^0,w,c
  1973  007C6A  6EDA               	movwf	fsr2h,c
  1974  007C6C  50DF               	movf	indf2,w,c
  1975  007C6E  6E0D               	movwf	??_Receive^0,c
  1976  007C70  500D               	movf	??_Receive^0,w,c
  1977  007C72  6E02               	movwf	UARTWriteByteHex@data^0,c
  1978  007C74  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  1979  007C76  EC74  F03B         	call	_UARTWriteByteHex	;wreg free
  1980  007C7A                     
  1981                           ;sendRecept.c: 161:             UARTWriteStr(" ");
  1982  007C7A  0E86               	movlw	low (STR_16+25)
  1983  007C7C  6E02               	movwf	UARTWriteStr@string^0,c
  1984  007C7E  0E7E               	movlw	high (STR_16+25)
  1985  007C80  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  1986  007C82  EC38  F03B         	call	_UARTWriteStr	;wreg free
  1987  007C86                     
  1988                           ;sendRecept.c: 162:         }
  1989  007C86  2A0F               	incf	Receive@i^0,f,c
  1990  007C88                     l1678:
  1991  007C88  500E               	movf	Receive@RXNumberOfBytes^0,w,c
  1992  007C8A  5C0F               	subwf	Receive@i^0,w,c
  1993  007C8C  A0D8               	btfss	status,0,c
  1994  007C8E  EF4B  F03E         	goto	u491
  1995  007C92  EF4D  F03E         	goto	u490
  1996  007C96                     u491:
  1997  007C96  EF26  F03E         	goto	l1670
  1998  007C9A                     u490:
  1999  007C9A                     
  2000                           ;sendRecept.c: 163:         UARTWriteStrLn(" ");
  2001  007C9A  0E86               	movlw	low (STR_16+25)
  2002  007C9C  6E02               	movwf	UARTWriteStrLn@string^0,c
  2003  007C9E  0E7E               	movlw	high (STR_16+25)
  2004  007CA0  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2005  007CA2  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  2006  007CA6                     l1682:
  2007                           
  2008                           ;sendRecept.c: 187:     WriteSXRegister(0x12, 0xFF);
  2009  007CA6  0EFF               	movlw	255
  2010  007CA8  6E05               	movwf	WriteSXRegister@data^0,c
  2011  007CAA  0E12               	movlw	18
  2012  007CAC  EC68  F03A         	call	_WriteSXRegister
  2013  007CB0                     l225:
  2014  007CB0  0012               	return		;funcret
  2015  007CB2                     __end_of_Receive:
  2016                           	callstack 0
  2017                           
  2018 ;; *************** function _AntennaRX *****************
  2019 ;; Defined at:
  2020 ;;		line 41 in file "RF_LoRa_868_SO.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;		None
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;		None
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  1    wreg      void 
  2027 ;; Registers used:
  2028 ;;		wreg
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2034 ;;      Params:         0       0       0       0       0       0       0       0       0
  2035 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2036 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2037 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2038 ;;Total ram usage:        1 bytes
  2039 ;; Hardware stack levels used: 1
  2040 ;; This function calls:
  2041 ;;		Nothing
  2042 ;; This function is called by:
  2043 ;;		_Receive
  2044 ;; This function uses a non-reentrant model
  2045 ;;
  2046                           
  2047                           	psect	text8
  2048  00748E                     __ptext8:
  2049                           	callstack 0
  2050  00748E                     _AntennaRX:
  2051                           	callstack 29
  2052  00748E                     
  2053                           ;RF_LoRa_868_SO.c: 42:     LATBbits.LATB4 = 0;
  2054  00748E  9884               	bcf	132,4,c	;volatile
  2055                           
  2056                           ;RF_LoRa_868_SO.c: 43:     LATBbits.LATB3 = 0;
  2057  007490  9684               	bcf	132,3,c	;volatile
  2058  007492                     
  2059                           ;RF_LoRa_868_SO.c: 44:     _delay((unsigned long)((10)*(1000000UL/4000.0)));
  2060  007492  0E04               	movlw	4
  2061  007494  6E01               	movwf	??_AntennaRX^0,c
  2062  007496  0E3E               	movlw	62
  2063  007498                     u647:
  2064  007498  2EE8               	decfsz	wreg,f,c
  2065  00749A  D7FE               	bra	u647
  2066  00749C  2E01               	decfsz	??_AntennaRX^0,f,c
  2067  00749E  D7FC               	bra	u647
  2068  0074A0                     
  2069                           ;RF_LoRa_868_SO.c: 45:     LATBbits.LATB4 = 1;
  2070  0074A0  8884               	bsf	132,4,c	;volatile
  2071  0074A2  0012               	return		;funcret
  2072  0074A4                     __end_of_AntennaRX:
  2073                           	callstack 0
  2074                           
  2075 ;; *************** function _InitRFLoRaPins *****************
  2076 ;; Defined at:
  2077 ;;		line 18 in file "RF_LoRa_868_SO.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;		None
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;		None
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      void 
  2084 ;; Registers used:
  2085 ;;		None
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2091 ;;      Params:         0       0       0       0       0       0       0       0       0
  2092 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2093 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2094 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2095 ;;Total ram usage:        0 bytes
  2096 ;; Hardware stack levels used: 1
  2097 ;; This function calls:
  2098 ;;		Nothing
  2099 ;; This function is called by:
  2100 ;;		_main
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text9
  2105  00746C                     __ptext9:
  2106                           	callstack 0
  2107  00746C                     _InitRFLoRaPins:
  2108                           	callstack 30
  2109  00746C                     
  2110                           ;RF_LoRa_868_SO.c: 19:     TRISBbits.TRISB2 = 1;
  2111  00746C  8489               	bsf	137,2,c	;volatile
  2112                           
  2113                           ;RF_LoRa_868_SO.c: 20:     LATBbits.LATB3 = 0;
  2114  00746E  9684               	bcf	132,3,c	;volatile
  2115                           
  2116                           ;RF_LoRa_868_SO.c: 21:     TRISBbits.TRISB3 = 0;
  2117  007470  9689               	bcf	137,3,c	;volatile
  2118                           
  2119                           ;RF_LoRa_868_SO.c: 22:     LATBbits.LATB4 = 0;
  2120  007472  9884               	bcf	132,4,c	;volatile
  2121                           
  2122                           ;RF_LoRa_868_SO.c: 23:     TRISBbits.TRISB4 = 0;
  2123  007474  9889               	bcf	137,4,c	;volatile
  2124  007476  0012               	return		;funcret
  2125  007478                     __end_of_InitRFLoRaPins:
  2126                           	callstack 0
  2127                           
  2128 ;; *************** function _InitModule *****************
  2129 ;; Defined at:
  2130 ;;		line 96 in file "SX1272.c"
  2131 ;; Parameters:    Size  Location     Type
  2132 ;;		None
  2133 ;; Auto vars:     Size  Location     Type
  2134 ;;  pout            1    0        unsigned char 
  2135 ;; Return value:  Size  Location     Type
  2136 ;;                  1    wreg      void 
  2137 ;; Registers used:
  2138 ;;		wreg, status,2, status,0, cstack
  2139 ;; Tracked objects:
  2140 ;;		On entry : 0/0
  2141 ;;		On exit  : 0/0
  2142 ;;		Unchanged: 0/0
  2143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2144 ;;      Params:         0       0       0       0       0       0       0       0       0
  2145 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2146 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2147 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2148 ;;Total ram usage:        0 bytes
  2149 ;; Hardware stack levels used: 1
  2150 ;; Hardware stack levels required when called: 2
  2151 ;; This function calls:
  2152 ;;		_WriteSXRegister
  2153 ;; This function is called by:
  2154 ;;		_main
  2155 ;; This function uses a non-reentrant model
  2156 ;;
  2157                           
  2158                           	psect	text10
  2159  0077D4                     __ptext10:
  2160                           	callstack 0
  2161  0077D4                     _InitModule:
  2162                           	callstack 28
  2163  0077D4                     
  2164                           ;SX1272.c: 97:   uint8_t pout;;SX1272.c: 99:   WriteSXRegister(0x00, 0x00);
  2165  0077D4  0E00               	movlw	0
  2166  0077D6  6E05               	movwf	WriteSXRegister@data^0,c
  2167  0077D8  0E00               	movlw	0
  2168  0077DA  EC68  F03A         	call	_WriteSXRegister
  2169                           
  2170                           ;SX1272.c: 101:   WriteSXRegister(0x06, 0xD9);
  2171  0077DE  0ED9               	movlw	217
  2172  0077E0  6E05               	movwf	WriteSXRegister@data^0,c
  2173  0077E2  0E06               	movlw	6
  2174  0077E4  EC68  F03A         	call	_WriteSXRegister
  2175                           
  2176                           ;SX1272.c: 102:   WriteSXRegister(0x07, 0x00);
  2177  0077E8  0E00               	movlw	0
  2178  0077EA  6E05               	movwf	WriteSXRegister@data^0,c
  2179  0077EC  0E07               	movlw	7
  2180  0077EE  EC68  F03A         	call	_WriteSXRegister
  2181                           
  2182                           ;SX1272.c: 103:   WriteSXRegister(0x08, 0x00);
  2183  0077F2  0E00               	movlw	0
  2184  0077F4  6E05               	movwf	WriteSXRegister@data^0,c
  2185  0077F6  0E08               	movlw	8
  2186  0077F8  EC68  F03A         	call	_WriteSXRegister
  2187  0077FC                     
  2188                           ;SX1272.c: 107:   WriteSXRegister(0x09, 0x80 | pout);
  2189  0077FC  0E8C               	movlw	140
  2190  0077FE  6E05               	movwf	WriteSXRegister@data^0,c
  2191  007800  0E09               	movlw	9
  2192  007802  EC68  F03A         	call	_WriteSXRegister
  2193  007806                     
  2194                           ;SX1272.c: 109:   WriteSXRegister(0x0A, 0x19);
  2195  007806  0E19               	movlw	25
  2196  007808  6E05               	movwf	WriteSXRegister@data^0,c
  2197  00780A  0E0A               	movlw	10
  2198  00780C  EC68  F03A         	call	_WriteSXRegister
  2199  007810                     
  2200                           ;SX1272.c: 111:   WriteSXRegister(0x0B, 0b00101011);
  2201  007810  0E2B               	movlw	43
  2202  007812  6E05               	movwf	WriteSXRegister@data^0,c
  2203  007814  0E0B               	movlw	11
  2204  007816  EC68  F03A         	call	_WriteSXRegister
  2205  00781A                     
  2206                           ;SX1272.c: 113:   WriteSXRegister(0x0C, 0b00100011);
  2207  00781A  0E23               	movlw	35
  2208  00781C  6E05               	movwf	WriteSXRegister@data^0,c
  2209  00781E  0E0C               	movlw	12
  2210  007820  EC68  F03A         	call	_WriteSXRegister
  2211  007824                     
  2212                           ;SX1272.c: 115:   WriteSXRegister(0x0D, 0x00);
  2213  007824  0E00               	movlw	0
  2214  007826  6E05               	movwf	WriteSXRegister@data^0,c
  2215  007828  0E0D               	movlw	13
  2216  00782A  EC68  F03A         	call	_WriteSXRegister
  2217  00782E                     
  2218                           ;SX1272.c: 116:   WriteSXRegister(0x0E, 0x80);
  2219  00782E  0E80               	movlw	128
  2220  007830  6E05               	movwf	WriteSXRegister@data^0,c
  2221  007832  0E0E               	movlw	14
  2222  007834  EC68  F03A         	call	_WriteSXRegister
  2223  007838                     
  2224                           ;SX1272.c: 117:   WriteSXRegister(0x0F, 0x00);
  2225  007838  0E00               	movlw	0
  2226  00783A  6E05               	movwf	WriteSXRegister@data^0,c
  2227  00783C  0E0F               	movlw	15
  2228  00783E  EC68  F03A         	call	_WriteSXRegister
  2229  007842                     
  2230                           ;SX1272.c: 119:   WriteSXRegister(0x11, 0x00);
  2231  007842  0E00               	movlw	0
  2232  007844  6E05               	movwf	WriteSXRegister@data^0,c
  2233  007846  0E11               	movlw	17
  2234  007848  EC68  F03A         	call	_WriteSXRegister
  2235  00784C                     
  2236                           ;SX1272.c: 121:   WriteSXRegister(0x12, 0xFF);
  2237  00784C  0EFF               	movlw	255
  2238  00784E  6E05               	movwf	WriteSXRegister@data^0,c
  2239  007850  0E12               	movlw	18
  2240  007852  EC68  F03A         	call	_WriteSXRegister
  2241  007856                     
  2242                           ;SX1272.c: 126:   WriteSXRegister(0x1D, 0b00100011);
  2243  007856  0E23               	movlw	35
  2244  007858  6E05               	movwf	WriteSXRegister@data^0,c
  2245  00785A  0E1D               	movlw	29
  2246  00785C  EC68  F03A         	call	_WriteSXRegister
  2247  007860                     
  2248                           ;SX1272.c: 129:   WriteSXRegister(0x1E, 0b11000110);
  2249  007860  0EC6               	movlw	198
  2250  007862  6E05               	movwf	WriteSXRegister@data^0,c
  2251  007864  0E1E               	movlw	30
  2252  007866  EC68  F03A         	call	_WriteSXRegister
  2253  00786A                     
  2254                           ;SX1272.c: 133:   WriteSXRegister(0x1F, 0xFF);
  2255  00786A  0EFF               	movlw	255
  2256  00786C  6E05               	movwf	WriteSXRegister@data^0,c
  2257  00786E  0E1F               	movlw	31
  2258  007870  EC68  F03A         	call	_WriteSXRegister
  2259  007874                     
  2260                           ;SX1272.c: 140:   WriteSXRegister(0x20, 0x00);
  2261  007874  0E00               	movlw	0
  2262  007876  6E05               	movwf	WriteSXRegister@data^0,c
  2263  007878  0E20               	movlw	32
  2264  00787A  EC68  F03A         	call	_WriteSXRegister
  2265  00787E                     
  2266                           ;SX1272.c: 141:   WriteSXRegister(0x21, 0x08);
  2267  00787E  0E08               	movlw	8
  2268  007880  6E05               	movwf	WriteSXRegister@data^0,c
  2269  007882  0E21               	movlw	33
  2270  007884  EC68  F03A         	call	_WriteSXRegister
  2271  007888                     
  2272                           ;SX1272.c: 143:   WriteSXRegister(0x23, 0x80);
  2273  007888  0E80               	movlw	128
  2274  00788A  6E05               	movwf	WriteSXRegister@data^0,c
  2275  00788C  0E23               	movlw	35
  2276  00788E  EC68  F03A         	call	_WriteSXRegister
  2277  007892                     
  2278                           ;SX1272.c: 145:   WriteSXRegister(0x24, 0x00);
  2279  007892  0E00               	movlw	0
  2280  007894  6E05               	movwf	WriteSXRegister@data^0,c
  2281  007896  0E24               	movlw	36
  2282  007898  EC68  F03A         	call	_WriteSXRegister
  2283  00789C                     
  2284                           ;SX1272.c: 147:   WriteSXRegister(0x31, 0xC3);
  2285  00789C  0EC3               	movlw	195
  2286  00789E  6E05               	movwf	WriteSXRegister@data^0,c
  2287  0078A0  0E31               	movlw	49
  2288  0078A2  EC68  F03A         	call	_WriteSXRegister
  2289  0078A6                     
  2290                           ;SX1272.c: 149:   WriteSXRegister(0x33, 0x27);
  2291  0078A6  0E27               	movlw	39
  2292  0078A8  6E05               	movwf	WriteSXRegister@data^0,c
  2293  0078AA  0E33               	movlw	51
  2294  0078AC  EC68  F03A         	call	_WriteSXRegister
  2295  0078B0                     
  2296                           ;SX1272.c: 151:   WriteSXRegister(0x37, 0x0A);
  2297  0078B0  0E0A               	movlw	10
  2298  0078B2  6E05               	movwf	WriteSXRegister@data^0,c
  2299  0078B4  0E37               	movlw	55
  2300  0078B6  EC68  F03A         	call	_WriteSXRegister
  2301  0078BA                     
  2302                           ;SX1272.c: 153:   WriteSXRegister(0x39, 0x12);
  2303  0078BA  0E12               	movlw	18
  2304  0078BC  6E05               	movwf	WriteSXRegister@data^0,c
  2305  0078BE  0E39               	movlw	57
  2306  0078C0  EC68  F03A         	call	_WriteSXRegister
  2307  0078C4  0012               	return		;funcret
  2308  0078C6                     __end_of_InitModule:
  2309                           	callstack 0
  2310                           
  2311 ;; *************** function _WriteSXRegister *****************
  2312 ;; Defined at:
  2313 ;;		line 19 in file "SX1272.c"
  2314 ;; Parameters:    Size  Location     Type
  2315 ;;  address         1    wreg     unsigned char 
  2316 ;;  data            1    4[COMRAM] unsigned char 
  2317 ;; Auto vars:     Size  Location     Type
  2318 ;;  address         1    5[COMRAM] unsigned char 
  2319 ;; Return value:  Size  Location     Type
  2320 ;;                  1    wreg      void 
  2321 ;; Registers used:
  2322 ;;		wreg, status,2, status,0, cstack
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2328 ;;      Params:         1       0       0       0       0       0       0       0       0
  2329 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2330 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2331 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2332 ;;Total ram usage:        2 bytes
  2333 ;; Hardware stack levels used: 1
  2334 ;; Hardware stack levels required when called: 1
  2335 ;; This function calls:
  2336 ;;		_SPITransfer
  2337 ;; This function is called by:
  2338 ;;		_InitModule
  2339 ;;		_Transmit
  2340 ;;		_Receive
  2341 ;;		_main
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           	psect	text11
  2346  0074D0                     __ptext11:
  2347                           	callstack 0
  2348  0074D0                     _WriteSXRegister:
  2349                           	callstack 29
  2350                           
  2351                           ;incstack = 0
  2352                           ;WriteSXRegister@address stored from wreg
  2353  0074D0  6E06               	movwf	WriteSXRegister@address^0,c
  2354  0074D2                     
  2355                           ;SX1272.c: 21:     LATCbits.LATC2 = 0;
  2356  0074D2  9485               	bcf	133,2,c	;volatile
  2357  0074D4                     
  2358                           ;SX1272.c: 22:     address = address | 0x80;
  2359  0074D4  5006               	movf	WriteSXRegister@address^0,w,c
  2360  0074D6  0980               	iorlw	128
  2361  0074D8  6E06               	movwf	WriteSXRegister@address^0,c
  2362  0074DA                     
  2363                           ;SX1272.c: 24:     SPITransfer(address);
  2364  0074DA  5006               	movf	WriteSXRegister@address^0,w,c
  2365  0074DC  EC75  F03A         	call	_SPITransfer
  2366  0074E0                     
  2367                           ;SX1272.c: 25:     SPITransfer(data);
  2368  0074E0  5005               	movf	WriteSXRegister@data^0,w,c
  2369  0074E2  EC75  F03A         	call	_SPITransfer
  2370  0074E6                     
  2371                           ;SX1272.c: 26:     LATCbits.LATC2 = 1;
  2372  0074E6  8485               	bsf	133,2,c	;volatile
  2373  0074E8  0012               	return		;funcret
  2374  0074EA                     __end_of_WriteSXRegister:
  2375                           	callstack 0
  2376                           
  2377 ;; *************** function _GetMode *****************
  2378 ;; Defined at:
  2379 ;;		line 42 in file "SX1272.c"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;		None
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;  reg             1   13[COMRAM] unsigned char 
  2384 ;;  masked_reg      1   12[COMRAM] unsigned char 
  2385 ;; Return value:  Size  Location     Type
  2386 ;;                  1    wreg      void 
  2387 ;; Registers used:
  2388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2394 ;;      Params:         0       0       0       0       0       0       0       0       0
  2395 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2396 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2397 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2398 ;;Total ram usage:        4 bytes
  2399 ;; Hardware stack levels used: 1
  2400 ;; Hardware stack levels required when called: 2
  2401 ;; This function calls:
  2402 ;;		_ReadSXRegister
  2403 ;;		_UARTWriteByteHex
  2404 ;;		_UARTWriteStr
  2405 ;;		_UARTWriteStrLn
  2406 ;; This function is called by:
  2407 ;;		_main
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410                           
  2411                           	psect	text12
  2412  0079D6                     __ptext12:
  2413                           	callstack 0
  2414  0079D6                     _GetMode:
  2415                           	callstack 28
  2416  0079D6                     
  2417                           ;SX1272.c: 43:     uint8_t reg, masked_reg;;SX1272.c: 44:     reg = ReadSXRegister(0x01)
      +                          ;
  2418  0079D6  0E01               	movlw	1
  2419  0079D8  EC83  F03A         	call	_ReadSXRegister
  2420  0079DC  6E0E               	movwf	GetMode@reg^0,c
  2421  0079DE                     
  2422                           ;SX1272.c: 47:         UARTWriteStr("REG_OP_MODE = 0x");
  2423  0079DE  0EA4               	movlw	low STR_1
  2424  0079E0  6E02               	movwf	UARTWriteStr@string^0,c
  2425  0079E2  0E7F               	movlw	high STR_1
  2426  0079E4  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  2427  0079E6  EC38  F03B         	call	_UARTWriteStr	;wreg free
  2428  0079EA                     
  2429                           ;SX1272.c: 48:         UARTWriteByteHex(reg);
  2430  0079EA  C00E  F002         	movff	GetMode@reg,UARTWriteByteHex@data
  2431  0079EE  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  2432  0079F0  EC74  F03B         	call	_UARTWriteByteHex	;wreg free
  2433  0079F4                     
  2434                           ;SX1272.c: 49:         UARTWriteStrLn(" ");
  2435  0079F4  0E86               	movlw	low (STR_16+25)
  2436  0079F6  6E02               	movwf	UARTWriteStrLn@string^0,c
  2437  0079F8  0E7E               	movlw	high (STR_16+25)
  2438  0079FA  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2439  0079FC  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  2440  007A00                     
  2441                           ;SX1272.c: 51:     masked_reg = reg & 0x80;
  2442  007A00  500E               	movf	GetMode@reg^0,w,c
  2443  007A02  0B80               	andlw	128
  2444  007A04  6E0D               	movwf	GetMode@masked_reg^0,c
  2445  007A06                     
  2446                           ;SX1272.c: 52:     if (masked_reg)
  2447  007A06  500D               	movf	GetMode@masked_reg^0,w,c
  2448  007A08  B4D8               	btfsc	status,2,c
  2449  007A0A  EF09  F03D         	goto	u371
  2450  007A0E  EF0B  F03D         	goto	u370
  2451  007A12                     u371:
  2452  007A12  EF26  F03D         	goto	l1474
  2453  007A16                     u370:
  2454  007A16                     
  2455                           ;SX1272.c: 53:         {;SX1272.c: 55:         masked_reg = reg & 0x40;
  2456  007A16  500E               	movf	GetMode@reg^0,w,c
  2457  007A18  0B40               	andlw	64
  2458  007A1A  6E0D               	movwf	GetMode@masked_reg^0,c
  2459  007A1C                     
  2460                           ;SX1272.c: 56:         if (!masked_reg) {
  2461  007A1C  500D               	movf	GetMode@masked_reg^0,w,c
  2462  007A1E  A4D8               	btfss	status,2,c
  2463  007A20  EF14  F03D         	goto	u381
  2464  007A24  EF16  F03D         	goto	u380
  2465  007A28                     u381:
  2466  007A28  EF1E  F03D         	goto	l1472
  2467  007A2C                     u380:
  2468  007A2C                     
  2469                           ;SX1272.c: 57:             UARTWriteStrLn("mode = LoRa");
  2470  007A2C  0ED2               	movlw	low STR_3
  2471  007A2E  6E02               	movwf	UARTWriteStrLn@string^0,c
  2472  007A30  0E7F               	movlw	high STR_3
  2473  007A32  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2474  007A34  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  2475                           
  2476                           ;SX1272.c: 58:         }
  2477  007A38  EF2C  F03D         	goto	l1476
  2478  007A3C                     l1472:
  2479                           
  2480                           ;SX1272.c: 60:             UARTWriteStrLn("mode = LoRa with FSK registers access");
  2481  007A3C  0E47               	movlw	low STR_4
  2482  007A3E  6E02               	movwf	UARTWriteStrLn@string^0,c
  2483  007A40  0E7E               	movlw	high STR_4
  2484  007A42  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2485  007A44  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  2486  007A48  EF2C  F03D         	goto	l1476
  2487  007A4C                     l1474:
  2488                           
  2489                           ;SX1272.c: 64:         UARTWriteStrLn("mode = FSK");
  2490  007A4C  0EDE               	movlw	low STR_5
  2491  007A4E  6E02               	movwf	UARTWriteStrLn@string^0,c
  2492  007A50  0E7F               	movlw	high STR_5
  2493  007A52  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2494  007A54  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  2495  007A58                     l1476:
  2496                           
  2497                           ;SX1272.c: 66:     masked_reg = reg & 0x07;
  2498  007A58  500E               	movf	GetMode@reg^0,w,c
  2499  007A5A  0B07               	andlw	7
  2500  007A5C  6E0D               	movwf	GetMode@masked_reg^0,c
  2501                           
  2502                           ;SX1272.c: 67:         switch (masked_reg){
  2503  007A5E  EF71  F03D         	goto	l1496
  2504  007A62                     l1478:
  2505                           
  2506                           ;SX1272.c: 69:             UARTWriteStrLn("sleep mode");
  2507  007A62  0EE9               	movlw	low STR_6
  2508  007A64  6E02               	movwf	UARTWriteStrLn@string^0,c
  2509  007A66  0E7F               	movlw	high STR_6
  2510  007A68  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2511  007A6A  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  2512                           
  2513                           ;SX1272.c: 70:             break;
  2514  007A6E  EF9E  F03D         	goto	l92
  2515  007A72                     l1480:
  2516                           
  2517                           ;SX1272.c: 72:             UARTWriteStrLn("standby mode");
  2518  007A72  0EC5               	movlw	low STR_7
  2519  007A74  6E02               	movwf	UARTWriteStrLn@string^0,c
  2520  007A76  0E7F               	movlw	high STR_7
  2521  007A78  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2522  007A7A  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  2523                           
  2524                           ;SX1272.c: 73:             break;
  2525  007A7E  EF9E  F03D         	goto	l92
  2526  007A82                     l1482:
  2527                           
  2528                           ;SX1272.c: 75:             UARTWriteStrLn("frequency synthesis TX");
  2529  007A82  0E1C               	movlw	low STR_8
  2530  007A84  6E02               	movwf	UARTWriteStrLn@string^0,c
  2531  007A86  0E7F               	movlw	high STR_8
  2532  007A88  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2533  007A8A  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  2534                           
  2535                           ;SX1272.c: 76:             break;
  2536  007A8E  EF9E  F03D         	goto	l92
  2537  007A92                     l1484:
  2538                           
  2539                           ;SX1272.c: 78:             UARTWriteStrLn("TX mode");
  2540  007A92  0EF4               	movlw	low STR_9
  2541  007A94  6E02               	movwf	UARTWriteStrLn@string^0,c
  2542  007A96  0E7F               	movlw	high STR_9
  2543  007A98  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2544  007A9A  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  2545                           
  2546                           ;SX1272.c: 79:             break;
  2547  007A9E  EF9E  F03D         	goto	l92
  2548  007AA2                     l1486:
  2549                           
  2550                           ;SX1272.c: 81:             UARTWriteStrLn("frequency synthesis RX");
  2551  007AA2  0E05               	movlw	low STR_10
  2552  007AA4  6E02               	movwf	UARTWriteStrLn@string^0,c
  2553  007AA6  0E7F               	movlw	high STR_10
  2554  007AA8  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2555  007AAA  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  2556                           
  2557                           ;SX1272.c: 82:             break;
  2558  007AAE  EF9E  F03D         	goto	l92
  2559  007AB2                     l1488:
  2560                           
  2561                           ;SX1272.c: 84:             UARTWriteStrLn("continuous receive mode");
  2562  007AB2  0EED               	movlw	low STR_11
  2563  007AB4  6E02               	movwf	UARTWriteStrLn@string^0,c
  2564  007AB6  0E7E               	movlw	high STR_11
  2565  007AB8  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2566  007ABA  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  2567                           
  2568                           ;SX1272.c: 85:             break;
  2569  007ABE  EF9E  F03D         	goto	l92
  2570  007AC2                     l1490:
  2571                           
  2572                           ;SX1272.c: 87:             UARTWriteStrLn("single receive mode");
  2573  007AC2  0E49               	movlw	low STR_12
  2574  007AC4  6E02               	movwf	UARTWriteStrLn@string^0,c
  2575  007AC6  0E7F               	movlw	high STR_12
  2576  007AC8  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2577  007ACA  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  2578                           
  2579                           ;SX1272.c: 88:             break;
  2580  007ACE  EF9E  F03D         	goto	l92
  2581  007AD2                     l1492:
  2582                           
  2583                           ;SX1272.c: 90:             UARTWriteStrLn("Channel Activity Detection");
  2584  007AD2  0E88               	movlw	low STR_13
  2585  007AD4  6E02               	movwf	UARTWriteStrLn@string^0,c
  2586  007AD6  0E7E               	movlw	high STR_13
  2587  007AD8  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2588  007ADA  EC0A  F03B         	call	_UARTWriteStrLn	;wreg free
  2589                           
  2590                           ;SX1272.c: 91:             break;
  2591  007ADE  EF9E  F03D         	goto	l92
  2592  007AE2                     l1496:
  2593  007AE2  500D               	movf	GetMode@masked_reg^0,w,c
  2594  007AE4  6E0B               	movwf	??_GetMode^0,c
  2595  007AE6  6A0C               	clrf	(??_GetMode+1)^0,c
  2596                           
  2597                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2598                           ; Switch size 1, requested type "simple"
  2599                           ; Number of cases is 1, Range of values is 0 to 0
  2600                           ; switch strategies available:
  2601                           ; Name         Instructions Cycles
  2602                           ; simple_byte            4     3 (average)
  2603                           ;	Chosen strategy is simple_byte
  2604  007AE8  500C               	movf	(??_GetMode+1)^0,w,c
  2605  007AEA  0A00               	xorlw	0	; case 0
  2606  007AEC  B4D8               	btfsc	status,2,c
  2607  007AEE  EF7B  F03D         	goto	l1800
  2608  007AF2  EF9E  F03D         	goto	l92
  2609  007AF6                     l1800:
  2610                           
  2611                           ; Switch size 1, requested type "simple"
  2612                           ; Number of cases is 8, Range of values is 0 to 7
  2613                           ; switch strategies available:
  2614                           ; Name         Instructions Cycles
  2615                           ; simple_byte           25    13 (average)
  2616                           ;	Chosen strategy is simple_byte
  2617  007AF6  500B               	movf	??_GetMode^0,w,c
  2618  007AF8  0A00               	xorlw	0	; case 0
  2619  007AFA  B4D8               	btfsc	status,2,c
  2620  007AFC  EF31  F03D         	goto	l1478
  2621  007B00  0A01               	xorlw	1	; case 1
  2622  007B02  B4D8               	btfsc	status,2,c
  2623  007B04  EF39  F03D         	goto	l1480
  2624  007B08  0A03               	xorlw	3	; case 2
  2625  007B0A  B4D8               	btfsc	status,2,c
  2626  007B0C  EF41  F03D         	goto	l1482
  2627  007B10  0A01               	xorlw	1	; case 3
  2628  007B12  B4D8               	btfsc	status,2,c
  2629  007B14  EF49  F03D         	goto	l1484
  2630  007B18  0A07               	xorlw	7	; case 4
  2631  007B1A  B4D8               	btfsc	status,2,c
  2632  007B1C  EF51  F03D         	goto	l1486
  2633  007B20  0A01               	xorlw	1	; case 5
  2634  007B22  B4D8               	btfsc	status,2,c
  2635  007B24  EF59  F03D         	goto	l1488
  2636  007B28  0A03               	xorlw	3	; case 6
  2637  007B2A  B4D8               	btfsc	status,2,c
  2638  007B2C  EF61  F03D         	goto	l1490
  2639  007B30  0A01               	xorlw	1	; case 7
  2640  007B32  B4D8               	btfsc	status,2,c
  2641  007B34  EF69  F03D         	goto	l1492
  2642  007B38  EF9E  F03D         	goto	l92
  2643  007B3C                     l92:
  2644  007B3C  0012               	return		;funcret
  2645  007B3E                     __end_of_GetMode:
  2646                           	callstack 0
  2647                           
  2648 ;; *************** function _UARTWriteStrLn *****************
  2649 ;; Defined at:
  2650 ;;		line 77 in file "uart.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;  string          2    1[COMRAM] PTR unsigned char 
  2653 ;;		 -> STR_31(18), STR_30(25), STR_29(2), STR_28(2), 
  2654 ;;		 -> STR_25(18), STR_24(2), STR_23(22), STR_22(25), 
  2655 ;;		 -> STR_21(24), STR_20(2), STR_17(2), STR_15(2), 
  2656 ;;		 -> STR_13(27), STR_12(20), STR_11(24), STR_10(23), 
  2657 ;;		 -> STR_9(8), STR_8(23), STR_7(13), STR_6(11), 
  2658 ;;		 -> STR_5(11), STR_4(38), STR_3(12), STR_2(2), 
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;  i               1    5[COMRAM] unsigned char 
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  1    wreg      void 
  2663 ;; Registers used:
  2664 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2670 ;;      Params:         2       0       0       0       0       0       0       0       0
  2671 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2672 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2673 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2674 ;;Total ram usage:        5 bytes
  2675 ;; Hardware stack levels used: 1
  2676 ;; Hardware stack levels required when called: 1
  2677 ;; This function calls:
  2678 ;;		_UARTWriteByte
  2679 ;; This function is called by:
  2680 ;;		_GetMode
  2681 ;;		_Transmit
  2682 ;;		_Receive
  2683 ;;		_main
  2684 ;;		_printBatteryLevel
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           	psect	text13
  2689  007614                     __ptext13:
  2690                           	callstack 0
  2691  007614                     _UARTWriteStrLn:
  2692                           	callstack 29
  2693  007614                     
  2694                           ;uart.c: 78:   uint8_t i = 0;
  2695  007614  0E00               	movlw	0
  2696  007616  6E06               	movwf	UARTWriteStrLn@i^0,c
  2697                           
  2698                           ;uart.c: 80:   while (string[i])
  2699  007618  EF1D  F03B         	goto	l1450
  2700  00761C                     l1446:
  2701                           
  2702                           ;uart.c: 81:     UARTWriteByte(string[i++]);
  2703  00761C  5006               	movf	UARTWriteStrLn@i^0,w,c
  2704  00761E  2402               	addwf	UARTWriteStrLn@string^0,w,c
  2705  007620  6E04               	movwf	??_UARTWriteStrLn^0,c
  2706  007622  0E00               	movlw	0
  2707  007624  2003               	addwfc	(UARTWriteStrLn@string+1)^0,w,c
  2708  007626  6E05               	movwf	(??_UARTWriteStrLn+1)^0,c
  2709  007628  C004  FFF6         	movff	??_UARTWriteStrLn,tblptrl
  2710  00762C  C005  FFF7         	movff	??_UARTWriteStrLn+1,tblptrh
  2711  007630                     	if	0	;tblptru may be non-zero
  2712  007630                     	endif
  2713  007630                     	if	0	;tblptru may be non-zero
  2714  007630                     	endif
  2715  007630  0008               	tblrd		*
  2716  007632  50F5               	movf	tablat,w,c
  2717  007634  EC3C  F03A         	call	_UARTWriteByte
  2718  007638  2A06               	incf	UARTWriteStrLn@i^0,f,c
  2719  00763A                     l1450:
  2720                           
  2721                           ;uart.c: 80:   while (string[i])
  2722  00763A  5006               	movf	UARTWriteStrLn@i^0,w,c
  2723  00763C  2402               	addwf	UARTWriteStrLn@string^0,w,c
  2724  00763E  6E04               	movwf	??_UARTWriteStrLn^0,c
  2725  007640  0E00               	movlw	0
  2726  007642  2003               	addwfc	(UARTWriteStrLn@string+1)^0,w,c
  2727  007644  6E05               	movwf	(??_UARTWriteStrLn+1)^0,c
  2728  007646  C004  FFF6         	movff	??_UARTWriteStrLn,tblptrl
  2729  00764A  C005  FFF7         	movff	??_UARTWriteStrLn+1,tblptrh
  2730  00764E                     	if	0	;tblptru may be non-zero
  2731  00764E                     	endif
  2732  00764E                     	if	0	;tblptru may be non-zero
  2733  00764E                     	endif
  2734  00764E  0008               	tblrd		*
  2735  007650  50F5               	movf	tablat,w,c
  2736  007652  0900               	iorlw	0
  2737  007654  A4D8               	btfss	status,2,c
  2738  007656  EF2F  F03B         	goto	u361
  2739  00765A  EF31  F03B         	goto	u360
  2740  00765E                     u361:
  2741  00765E  EF0E  F03B         	goto	l1446
  2742  007662                     u360:
  2743  007662                     
  2744                           ;uart.c: 83:   UARTWriteByte(0x0D);
  2745  007662  0E0D               	movlw	13
  2746  007664  EC3C  F03A         	call	_UARTWriteByte
  2747                           
  2748                           ;uart.c: 84:   UARTWriteByte(0x0A);
  2749  007668  0E0A               	movlw	10
  2750  00766A  EC3C  F03A         	call	_UARTWriteByte
  2751  00766E  0012               	return		;funcret
  2752  007670                     __end_of_UARTWriteStrLn:
  2753                           	callstack 0
  2754                           
  2755 ;; *************** function _UARTWriteStr *****************
  2756 ;; Defined at:
  2757 ;;		line 70 in file "uart.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;  string          2    1[COMRAM] PTR unsigned char 
  2760 ;;		 -> STR_27(2), STR_26(16), STR_19(2), STR_18(18), 
  2761 ;;		 -> STR_16(27), printBatteryLevel@string(6), STR_1(17), 
  2762 ;; Auto vars:     Size  Location     Type
  2763 ;;  i               1    5[COMRAM] unsigned char 
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  1    wreg      void 
  2766 ;; Registers used:
  2767 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2773 ;;      Params:         2       0       0       0       0       0       0       0       0
  2774 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2775 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2776 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2777 ;;Total ram usage:        5 bytes
  2778 ;; Hardware stack levels used: 1
  2779 ;; Hardware stack levels required when called: 1
  2780 ;; This function calls:
  2781 ;;		_UARTWriteByte
  2782 ;; This function is called by:
  2783 ;;		_GetMode
  2784 ;;		_Transmit
  2785 ;;		_Receive
  2786 ;;		_printBatteryLevel
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           	psect	text14
  2791  007670                     __ptext14:
  2792                           	callstack 0
  2793  007670                     _UARTWriteStr:
  2794                           	callstack 28
  2795  007670                     
  2796                           ;uart.c: 71:   uint8_t i = 0;
  2797  007670  0E00               	movlw	0
  2798  007672  6E06               	movwf	UARTWriteStr@i^0,c
  2799                           
  2800                           ;uart.c: 73:   while (string[i])
  2801  007674  EF55  F03B         	goto	l1434
  2802  007678                     l1430:
  2803                           
  2804                           ;uart.c: 74:     UARTWriteByte(string[i++]);
  2805  007678  5006               	movf	UARTWriteStr@i^0,w,c
  2806  00767A  2402               	addwf	UARTWriteStr@string^0,w,c
  2807  00767C  6E04               	movwf	??_UARTWriteStr^0,c
  2808  00767E  0E00               	movlw	0
  2809  007680  2003               	addwfc	(UARTWriteStr@string+1)^0,w,c
  2810  007682  6E05               	movwf	(??_UARTWriteStr+1)^0,c
  2811  007684  C004  FFF6         	movff	??_UARTWriteStr,tblptrl
  2812  007688  C005  FFF7         	movff	??_UARTWriteStr+1,tblptrh
  2813  00768C  6AF8               	clrf	tblptru,c
  2814  00768E  0E07               	movlw	(high __ramtop+-1)
  2815  007690  64F7               	cpfsgt	tblptrh,c
  2816  007692  D003               	bra	u307
  2817  007694  0008               	tblrd		*
  2818  007696  50F5               	movf	tablat,w,c
  2819  007698  D005               	bra	u300
  2820  00769A                     u307:
  2821  00769A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2822  00769E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2823  0076A2  50EF               	movf	indf0,w,c
  2824  0076A4                     u300:
  2825  0076A4  EC3C  F03A         	call	_UARTWriteByte
  2826  0076A8  2A06               	incf	UARTWriteStr@i^0,f,c
  2827  0076AA                     l1434:
  2828                           
  2829                           ;uart.c: 73:   while (string[i])
  2830  0076AA  5006               	movf	UARTWriteStr@i^0,w,c
  2831  0076AC  2402               	addwf	UARTWriteStr@string^0,w,c
  2832  0076AE  6E04               	movwf	??_UARTWriteStr^0,c
  2833  0076B0  0E00               	movlw	0
  2834  0076B2  2003               	addwfc	(UARTWriteStr@string+1)^0,w,c
  2835  0076B4  6E05               	movwf	(??_UARTWriteStr+1)^0,c
  2836  0076B6  C004  FFF6         	movff	??_UARTWriteStr,tblptrl
  2837  0076BA  C005  FFF7         	movff	??_UARTWriteStr+1,tblptrh
  2838  0076BE  6AF8               	clrf	tblptru,c
  2839  0076C0  0E07               	movlw	(high __ramtop+-1)
  2840  0076C2  64F7               	cpfsgt	tblptrh,c
  2841  0076C4  D003               	bra	u317
  2842  0076C6  0008               	tblrd		*
  2843  0076C8  50F5               	movf	tablat,w,c
  2844  0076CA  D005               	bra	u310
  2845  0076CC                     u317:
  2846  0076CC  CFF6 FFE9          	movff	tblptrl,fsr0l
  2847  0076D0  CFF7 FFEA          	movff	tblptrh,fsr0h
  2848  0076D4  50EF               	movf	indf0,w,c
  2849  0076D6                     u310:
  2850  0076D6  0900               	iorlw	0
  2851  0076D8  A4D8               	btfss	status,2,c
  2852  0076DA  EF71  F03B         	goto	u321
  2853  0076DE  EF73  F03B         	goto	u320
  2854  0076E2                     u321:
  2855  0076E2  EF3C  F03B         	goto	l1430
  2856  0076E6                     u320:
  2857  0076E6  0012               	return		;funcret
  2858  0076E8                     __end_of_UARTWriteStr:
  2859                           	callstack 0
  2860                           
  2861 ;; *************** function _UARTWriteByteHex *****************
  2862 ;; Defined at:
  2863 ;;		line 87 in file "uart.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;  data            2    1[COMRAM] unsigned short 
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;  hexa            2    8[COMRAM] PTR unsigned char 
  2868 ;;		 -> STR_14(17), 
  2869 ;; Return value:  Size  Location     Type
  2870 ;;                  1    wreg      void 
  2871 ;; Registers used:
  2872 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2873 ;; Tracked objects:
  2874 ;;		On entry : 0/0
  2875 ;;		On exit  : 0/0
  2876 ;;		Unchanged: 0/0
  2877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2878 ;;      Params:         2       0       0       0       0       0       0       0       0
  2879 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2880 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2881 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2882 ;;Total ram usage:        9 bytes
  2883 ;; Hardware stack levels used: 1
  2884 ;; Hardware stack levels required when called: 1
  2885 ;; This function calls:
  2886 ;;		_UARTWriteByte
  2887 ;; This function is called by:
  2888 ;;		_GetMode
  2889 ;;		_Transmit
  2890 ;;		_Receive
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text15
  2895  0076E8                     __ptext15:
  2896                           	callstack 0
  2897  0076E8                     _UARTWriteByteHex:
  2898                           	callstack 28
  2899  0076E8                     
  2900                           ;uart.c: 88:     char *hexa = "0123456789ABCDEF";
  2901  0076E8  0E93               	movlw	low STR_14
  2902  0076EA  6E09               	movwf	UARTWriteByteHex@hexa^0,c
  2903  0076EC  0E7F               	movlw	high STR_14
  2904  0076EE  6E0A               	movwf	(UARTWriteByteHex@hexa+1)^0,c
  2905                           
  2906                           ;uart.c: 90:     if (data > 4095) UARTWriteByte(hexa[data / 4096]);
  2907  0076F0  0E10               	movlw	16
  2908  0076F2  5C03               	subwf	(UARTWriteByteHex@data+1)^0,w,c
  2909  0076F4  A0D8               	btfss	status,0,c
  2910  0076F6  EF7F  F03B         	goto	u331
  2911  0076FA  EF81  F03B         	goto	u330
  2912  0076FE                     u331:
  2913  0076FE  EF90  F03B         	goto	l1440
  2914  007702                     u330:
  2915  007702  3803               	swapf	(UARTWriteByteHex@data+1)^0,w,c
  2916  007704  0B0F               	andlw	15
  2917  007706  2409               	addwf	UARTWriteByteHex@hexa^0,w,c
  2918  007708  6E04               	movwf	??_UARTWriteByteHex^0,c
  2919  00770A  0E00               	movlw	0
  2920  00770C  200A               	addwfc	(UARTWriteByteHex@hexa+1)^0,w,c
  2921  00770E  6E05               	movwf	(??_UARTWriteByteHex+1)^0,c
  2922  007710  C004  FFF6         	movff	??_UARTWriteByteHex,tblptrl
  2923  007714  C005  FFF7         	movff	??_UARTWriteByteHex+1,tblptrh
  2924  007718                     	if	0	;tblptru may be non-zero
  2925  007718                     	endif
  2926  007718                     	if	0	;tblptru may be non-zero
  2927  007718                     	endif
  2928  007718  0008               	tblrd		*
  2929  00771A  50F5               	movf	tablat,w,c
  2930  00771C  EC3C  F03A         	call	_UARTWriteByte
  2931  007720                     l1440:
  2932                           
  2933                           ;uart.c: 91:     if (data > 255) UARTWriteByte(hexa[data / 256 % 16]);
  2934  007720  0403               	decf	(UARTWriteByteHex@data+1)^0,w,c
  2935  007722  A0D8               	btfss	status,0,c
  2936  007724  EF96  F03B         	goto	u341
  2937  007728  EF98  F03B         	goto	u340
  2938  00772C                     u341:
  2939  00772C  EFB3  F03B         	goto	l152
  2940  007730                     u340:
  2941  007730  C002  F004         	movff	UARTWriteByteHex@data,??_UARTWriteByteHex
  2942  007734  C003  F005         	movff	UARTWriteByteHex@data+1,??_UARTWriteByteHex+1
  2943  007738  C005  F004         	movff	??_UARTWriteByteHex+1,??_UARTWriteByteHex
  2944  00773C  6A05               	clrf	(??_UARTWriteByteHex+1)^0,c
  2945  00773E  0E0F               	movlw	15
  2946  007740  1604               	andwf	??_UARTWriteByteHex^0,f,c
  2947  007742  0E00               	movlw	0
  2948  007744  1605               	andwf	(??_UARTWriteByteHex+1)^0,f,c
  2949  007746  C009  F006         	movff	UARTWriteByteHex@hexa,??_UARTWriteByteHex+2
  2950  00774A  C00A  F007         	movff	UARTWriteByteHex@hexa+1,??_UARTWriteByteHex+3
  2951  00774E  5004               	movf	??_UARTWriteByteHex^0,w,c
  2952  007750  2606               	addwf	(??_UARTWriteByteHex+2)^0,f,c
  2953  007752  5005               	movf	(??_UARTWriteByteHex+1)^0,w,c
  2954  007754  2207               	addwfc	(??_UARTWriteByteHex+3)^0,f,c
  2955  007756  C006  FFF6         	movff	??_UARTWriteByteHex+2,tblptrl
  2956  00775A  C007  FFF7         	movff	??_UARTWriteByteHex+3,tblptrh
  2957  00775E                     	if	0	;tblptru may be non-zero
  2958  00775E                     	endif
  2959  00775E                     	if	0	;tblptru may be non-zero
  2960  00775E                     	endif
  2961  00775E  0008               	tblrd		*
  2962  007760  50F5               	movf	tablat,w,c
  2963  007762  EC3C  F03A         	call	_UARTWriteByte
  2964  007766                     l152:
  2965                           
  2966                           ;uart.c: 92:     UARTWriteByte(hexa[data / 16 % 16]);
  2967  007766  C002  F004         	movff	UARTWriteByteHex@data,??_UARTWriteByteHex
  2968  00776A  C003  F005         	movff	UARTWriteByteHex@data+1,??_UARTWriteByteHex+1
  2969  00776E  0E04               	movlw	4
  2970  007770  6E06               	movwf	(??_UARTWriteByteHex+2)^0,c
  2971  007772                     u355:
  2972  007772  90D8               	bcf	status,0,c
  2973  007774  3205               	rrcf	(??_UARTWriteByteHex+1)^0,f,c
  2974  007776  3204               	rrcf	??_UARTWriteByteHex^0,f,c
  2975  007778  2E06               	decfsz	(??_UARTWriteByteHex+2)^0,f,c
  2976  00777A  EFB9  F03B         	goto	u355
  2977  00777E  0E0F               	movlw	15
  2978  007780  1604               	andwf	??_UARTWriteByteHex^0,f,c
  2979  007782  0E00               	movlw	0
  2980  007784  1605               	andwf	(??_UARTWriteByteHex+1)^0,f,c
  2981  007786  C009  F007         	movff	UARTWriteByteHex@hexa,??_UARTWriteByteHex+3
  2982  00778A  C00A  F008         	movff	UARTWriteByteHex@hexa+1,??_UARTWriteByteHex+4
  2983  00778E  5004               	movf	??_UARTWriteByteHex^0,w,c
  2984  007790  2607               	addwf	(??_UARTWriteByteHex+3)^0,f,c
  2985  007792  5005               	movf	(??_UARTWriteByteHex+1)^0,w,c
  2986  007794  2208               	addwfc	(??_UARTWriteByteHex+4)^0,f,c
  2987  007796  C007  FFF6         	movff	??_UARTWriteByteHex+3,tblptrl
  2988  00779A  C008  FFF7         	movff	??_UARTWriteByteHex+4,tblptrh
  2989  00779E                     	if	0	;tblptru may be non-zero
  2990  00779E                     	endif
  2991  00779E                     	if	0	;tblptru may be non-zero
  2992  00779E                     	endif
  2993  00779E  0008               	tblrd		*
  2994  0077A0  50F5               	movf	tablat,w,c
  2995  0077A2  EC3C  F03A         	call	_UARTWriteByte
  2996                           
  2997                           ;uart.c: 93:     UARTWriteByte(hexa[data % 16]);
  2998  0077A6  0E0F               	movlw	15
  2999  0077A8  1402               	andwf	UARTWriteByteHex@data^0,w,c
  3000  0077AA  6E04               	movwf	??_UARTWriteByteHex^0,c
  3001  0077AC  0E00               	movlw	0
  3002  0077AE  1403               	andwf	(UARTWriteByteHex@data+1)^0,w,c
  3003  0077B0  6E05               	movwf	(??_UARTWriteByteHex+1)^0,c
  3004  0077B2  C009  F006         	movff	UARTWriteByteHex@hexa,??_UARTWriteByteHex+2
  3005  0077B6  C00A  F007         	movff	UARTWriteByteHex@hexa+1,??_UARTWriteByteHex+3
  3006  0077BA  5004               	movf	??_UARTWriteByteHex^0,w,c
  3007  0077BC  2606               	addwf	(??_UARTWriteByteHex+2)^0,f,c
  3008  0077BE  5005               	movf	(??_UARTWriteByteHex+1)^0,w,c
  3009  0077C0  2207               	addwfc	(??_UARTWriteByteHex+3)^0,f,c
  3010  0077C2  C006  FFF6         	movff	??_UARTWriteByteHex+2,tblptrl
  3011  0077C6  C007  FFF7         	movff	??_UARTWriteByteHex+3,tblptrh
  3012  0077CA                     	if	0	;tblptru may be non-zero
  3013  0077CA                     	endif
  3014  0077CA                     	if	0	;tblptru may be non-zero
  3015  0077CA                     	endif
  3016  0077CA  0008               	tblrd		*
  3017  0077CC  50F5               	movf	tablat,w,c
  3018  0077CE  EC3C  F03A         	call	_UARTWriteByte
  3019  0077D2  0012               	return		;funcret
  3020  0077D4                     __end_of_UARTWriteByteHex:
  3021                           	callstack 0
  3022                           
  3023 ;; *************** function _UARTWriteByte *****************
  3024 ;; Defined at:
  3025 ;;		line 59 in file "uart.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;  data            1    wreg     unsigned char 
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;  data            1    0[COMRAM] unsigned char 
  3030 ;; Return value:  Size  Location     Type
  3031 ;;                  1    wreg      void 
  3032 ;; Registers used:
  3033 ;;		wreg
  3034 ;; Tracked objects:
  3035 ;;		On entry : 0/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3039 ;;      Params:         0       0       0       0       0       0       0       0       0
  3040 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3041 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3042 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3043 ;;Total ram usage:        1 bytes
  3044 ;; Hardware stack levels used: 1
  3045 ;; This function calls:
  3046 ;;		Nothing
  3047 ;; This function is called by:
  3048 ;;		_UARTWriteStr
  3049 ;;		_UARTWriteStrLn
  3050 ;;		_UARTWriteByteHex
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           	psect	text16
  3055  007478                     __ptext16:
  3056                           	callstack 0
  3057  007478                     _UARTWriteByte:
  3058                           	callstack 29
  3059                           
  3060                           ;incstack = 0
  3061                           ;UARTWriteByte@data stored from wreg
  3062  007478  6E01               	movwf	UARTWriteByte@data^0,c
  3063  00747A                     l133:
  3064  00747A  A29E               	btfss	158,1,c	;volatile
  3065  00747C  EF42  F03A         	goto	u31
  3066  007480  EF44  F03A         	goto	u30
  3067  007484                     u31:
  3068  007484  EF3D  F03A         	goto	l133
  3069  007488                     u30:
  3070  007488                     
  3071                           ;uart.c: 63:     TX1REG = data;
  3072  007488  C001  FF9A         	movff	UARTWriteByte@data,3994	;volatile
  3073  00748C  0012               	return		;funcret
  3074  00748E                     __end_of_UARTWriteByte:
  3075                           	callstack 0
  3076                           
  3077 ;; *************** function _ReadSXRegister *****************
  3078 ;; Defined at:
  3079 ;;		line 29 in file "SX1272.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;  address         1    wreg     unsigned char 
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;  address         1    3[COMRAM] unsigned char 
  3084 ;;  RegValue        1    2[COMRAM] unsigned char 
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  1    wreg      unsigned char 
  3087 ;; Registers used:
  3088 ;;		wreg, status,2, status,0, cstack
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3094 ;;      Params:         0       0       0       0       0       0       0       0       0
  3095 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3096 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3097 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3098 ;;Total ram usage:        2 bytes
  3099 ;; Hardware stack levels used: 1
  3100 ;; Hardware stack levels required when called: 1
  3101 ;; This function calls:
  3102 ;;		_SPIReceive
  3103 ;;		_SPITransfer
  3104 ;; This function is called by:
  3105 ;;		_GetMode
  3106 ;;		_Transmit
  3107 ;;		_Receive
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111                           	psect	text17
  3112  007506                     __ptext17:
  3113                           	callstack 0
  3114  007506                     _ReadSXRegister:
  3115                           	callstack 28
  3116                           
  3117                           ;incstack = 0
  3118                           ;ReadSXRegister@address stored from wreg
  3119  007506  6E04               	movwf	ReadSXRegister@address^0,c
  3120  007508                     
  3121                           ;SX1272.c: 30:     uint8_t RegValue;;SX1272.c: 31:     LATCbits.LATC2 = 0;
  3122  007508  9485               	bcf	133,2,c	;volatile
  3123  00750A                     
  3124                           ;SX1272.c: 32:     address = address & 0x7F;
  3125  00750A  5004               	movf	ReadSXRegister@address^0,w,c
  3126  00750C  0B7F               	andlw	127
  3127  00750E  6E04               	movwf	ReadSXRegister@address^0,c
  3128  007510                     
  3129                           ;SX1272.c: 34:     SPITransfer(address);
  3130  007510  5004               	movf	ReadSXRegister@address^0,w,c
  3131  007512  EC75  F03A         	call	_SPITransfer
  3132  007516                     
  3133                           ;SX1272.c: 35:     RegValue = SPIReceive(0x00);
  3134  007516  0E00               	movlw	0
  3135  007518  EC92  F03A         	call	_SPIReceive
  3136  00751C  6E03               	movwf	ReadSXRegister@RegValue^0,c
  3137  00751E                     
  3138                           ;SX1272.c: 36:     LATCbits.LATC2 = 1;
  3139  00751E  8485               	bsf	133,2,c	;volatile
  3140  007520                     
  3141                           ;SX1272.c: 37:     return RegValue;
  3142  007520  5003               	movf	ReadSXRegister@RegValue^0,w,c
  3143  007522  0012               	return		;funcret
  3144  007524                     __end_of_ReadSXRegister:
  3145                           	callstack 0
  3146                           
  3147 ;; *************** function _SPITransfer *****************
  3148 ;; Defined at:
  3149 ;;		line 50 in file "spi.c"
  3150 ;; Parameters:    Size  Location     Type
  3151 ;;  data_out        1    wreg     unsigned char 
  3152 ;; Auto vars:     Size  Location     Type
  3153 ;;  data_out        1    0[COMRAM] unsigned char 
  3154 ;;  dummy_byte      1    0        unsigned char 
  3155 ;; Return value:  Size  Location     Type
  3156 ;;                  1    wreg      void 
  3157 ;; Registers used:
  3158 ;;		wreg
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3164 ;;      Params:         0       0       0       0       0       0       0       0       0
  3165 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3166 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3167 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3168 ;;Total ram usage:        1 bytes
  3169 ;; Hardware stack levels used: 1
  3170 ;; This function calls:
  3171 ;;		Nothing
  3172 ;; This function is called by:
  3173 ;;		_WriteSXRegister
  3174 ;;		_ReadSXRegister
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           	psect	text18
  3179  0074EA                     __ptext18:
  3180                           	callstack 0
  3181  0074EA                     _SPITransfer:
  3182                           	callstack 29
  3183                           
  3184                           ;incstack = 0
  3185                           ;SPITransfer@data_out stored from wreg
  3186  0074EA  6E01               	movwf	SPITransfer@data_out^0,c
  3187  0074EC  5092               	movf	146,w,c	;volatile
  3188                           
  3189                           ;spi.c: 54:     PIR3bits.SSP1IF = 0;
  3190  0074EE  010E               	movlb	14	; () banked
  3191  0074F0  91CD               	bcf	205,0,b	;volatile
  3192  0074F2                     
  3193                           ; BSR set to: 14
  3194                           ;spi.c: 55:     SSP1BUF = data_out;
  3195  0074F2  C001  FF92         	movff	SPITransfer@data_out,3986	;volatile
  3196  0074F6                     l48:
  3197                           
  3198                           ; BSR set to: 14
  3199  0074F6  A1CD               	btfss	205,0,b	;volatile
  3200  0074F8  EF80  F03A         	goto	u11
  3201  0074FC  EF82  F03A         	goto	u10
  3202  007500                     u11:
  3203  007500  EF7B  F03A         	goto	l48
  3204  007504                     u10:
  3205  007504                     
  3206                           ; BSR set to: 14
  3207  007504  0012               	return		;funcret
  3208  007506                     __end_of_SPITransfer:
  3209                           	callstack 0
  3210                           
  3211 ;; *************** function _SPIReceive *****************
  3212 ;; Defined at:
  3213 ;;		line 59 in file "spi.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;  data_out        1    wreg     unsigned char 
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;  data_out        1    0[COMRAM] unsigned char 
  3218 ;;  data_in         1    1[COMRAM] unsigned char 
  3219 ;;  dummy_byte      1    0        unsigned char 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      unsigned char 
  3222 ;; Registers used:
  3223 ;;		wreg, status,2
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3229 ;;      Params:         0       0       0       0       0       0       0       0       0
  3230 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3231 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3232 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3233 ;;Total ram usage:        2 bytes
  3234 ;; Hardware stack levels used: 1
  3235 ;; This function calls:
  3236 ;;		Nothing
  3237 ;; This function is called by:
  3238 ;;		_ReadSXRegister
  3239 ;; This function uses a non-reentrant model
  3240 ;;
  3241                           
  3242                           	psect	text19
  3243  007524                     __ptext19:
  3244                           	callstack 0
  3245  007524                     _SPIReceive:
  3246                           	callstack 28
  3247                           
  3248                           ; BSR set to: 14
  3249                           ;incstack = 0
  3250                           ;SPIReceive@data_out stored from wreg
  3251  007524  6E01               	movwf	SPIReceive@data_out^0,c
  3252  007526  5092               	movf	146,w,c	;volatile
  3253                           
  3254                           ;spi.c: 63:     PIR3bits.SSP1IF = 0;
  3255  007528  010E               	movlb	14	; () banked
  3256  00752A  91CD               	bcf	205,0,b	;volatile
  3257  00752C                     
  3258                           ; BSR set to: 14
  3259                           ;spi.c: 64:     SSP1BUF = data_out;
  3260  00752C  C001  FF92         	movff	SPIReceive@data_out,3986	;volatile
  3261  007530                     l54:
  3262                           
  3263                           ; BSR set to: 14
  3264  007530  A1CD               	btfss	205,0,b	;volatile
  3265  007532  EF9D  F03A         	goto	u21
  3266  007536  EF9F  F03A         	goto	u20
  3267  00753A                     u21:
  3268  00753A  EF98  F03A         	goto	l54
  3269  00753E                     u20:
  3270  00753E                     
  3271                           ; BSR set to: 14
  3272                           ;spi.c: 66:     data_in = SSP1BUF;
  3273  00753E  CF92 F002          	movff	3986,SPIReceive@data_in	;volatile
  3274                           
  3275                           ;spi.c: 67:     return(data_in);
  3276  007542  5002               	movf	SPIReceive@data_in^0,w,c
  3277  007544                     
  3278                           ; BSR set to: 14
  3279  007544  0012               	return		;funcret
  3280  007546                     __end_of_SPIReceive:
  3281                           	callstack 0
  3282                           
  3283                           	psect	rparam
  3284  0000                     
  3285                           	psect	idloc
  3286                           
  3287                           ;Config register IDLOC0 @ 0x200000
  3288                           ;	unspecified, using default values
  3289  200000                     	org	2097152
  3290  200000  0FFF               	dw	4095
  3291                           
  3292                           ;Config register IDLOC1 @ 0x200002
  3293                           ;	unspecified, using default values
  3294  200002                     	org	2097154
  3295  200002  0FFF               	dw	4095
  3296                           
  3297                           ;Config register IDLOC2 @ 0x200004
  3298                           ;	unspecified, using default values
  3299  200004                     	org	2097156
  3300  200004  0FFF               	dw	4095
  3301                           
  3302                           ;Config register IDLOC3 @ 0x200006
  3303                           ;	unspecified, using default values
  3304  200006                     	org	2097158
  3305  200006  0FFF               	dw	4095
  3306                           
  3307                           ;Config register IDLOC4 @ 0x200008
  3308                           ;	unspecified, using default values
  3309  200008                     	org	2097160
  3310  200008  0FFF               	dw	4095
  3311                           
  3312                           ;Config register IDLOC5 @ 0x20000A
  3313                           ;	unspecified, using default values
  3314  20000A                     	org	2097162
  3315  20000A  0FFF               	dw	4095
  3316                           
  3317                           ;Config register IDLOC6 @ 0x20000C
  3318                           ;	unspecified, using default values
  3319  20000C                     	org	2097164
  3320  20000C  0FFF               	dw	4095
  3321                           
  3322                           ;Config register IDLOC7 @ 0x20000E
  3323                           ;	unspecified, using default values
  3324  20000E                     	org	2097166
  3325  20000E  0FFF               	dw	4095
  3326                           
  3327                           	psect	config
  3328                           
  3329                           ;Config register CONFIG1L @ 0x300000
  3330                           ;	External Oscillator mode Selection bits
  3331                           ;	FEXTOSC = OFF, Oscillator not enabled
  3332                           ;	Power-up default value for COSC bits
  3333                           ;	RSTOSC = HFINTOSC_1MHZ, HFINTOSC with HFFRQ = 4 MHz and CDIV = 4:1
  3334  300000                     	org	3145728
  3335  300000  EC                 	db	236
  3336                           
  3337                           ;Config register CONFIG1H @ 0x300001
  3338                           ;	Clock Out Enable bit
  3339                           ;	CLKOUTEN = OFF, CLKOUT function is disabled
  3340                           ;	Clock Switch Enable bit
  3341                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  3342                           ;	Fail-Safe Clock Monitor Enable bit
  3343                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  3344  300001                     	org	3145729
  3345  300001  FF                 	db	255
  3346                           
  3347                           ;Config register CONFIG2L @ 0x300002
  3348                           ;	Master Clear Enable bit
  3349                           ;	MCLRE = EXTMCLR, If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR
  3350                           ;	Power-up Timer Enable bit
  3351                           ;	PWRTE = OFF, Power up timer disabled
  3352                           ;	Low-power BOR enable bit
  3353                           ;	LPBOREN = OFF, ULPBOR disabled
  3354                           ;	Brown-out Reset Enable bits
  3355                           ;	BOREN = SBORDIS, Brown-out Reset enabled , SBOREN bit is ignored
  3356  300002                     	org	3145730
  3357  300002  FF                 	db	255
  3358                           
  3359                           ;Config register CONFIG2H @ 0x300003
  3360                           ;	Brown Out Reset Voltage selection bits
  3361                           ;	BORV = VBOR_2P45, Brown-out Reset Voltage (VBOR) set to 2.45V
  3362                           ;	ZCD Disable bit
  3363                           ;	ZCD = OFF, ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON
  3364                           ;	PPSLOCK bit One-Way Set Enable bit
  3365                           ;	PPS1WAY = ON, PPSLOCK bit can be cleared and set only once; PPS registers remain locke
      +                          d after one clear/set cycle
  3366                           ;	Stack Full/Underflow Reset Enable bit
  3367                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3368                           ;	Debugger Enable bit
  3369                           ;	DEBUG = OFF, Background debugger disabled
  3370                           ;	Extended Instruction Set Enable bit
  3371                           ;	XINST = OFF, Extended Instruction Set and Indexed Addressing Mode disabled
  3372  300003                     	org	3145731
  3373  300003  FF                 	db	255
  3374                           
  3375                           ;Config register CONFIG3L @ 0x300004
  3376                           ;	WDT Period Select bits
  3377                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  3378                           ;	WDT operating mode
  3379                           ;	WDTE = OFF, WDT Disabled
  3380  300004                     	org	3145732
  3381  300004  9F                 	db	159
  3382                           
  3383                           ;Config register CONFIG3H @ 0x300005
  3384                           ;	WDT Window Select bits
  3385                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
  3386                           ;	WDT input clock selector
  3387                           ;	WDTCCS = SC, Software Control
  3388  300005                     	org	3145733
  3389  300005  FF                 	db	255
  3390                           
  3391                           ;Config register CONFIG4L @ 0x300006
  3392                           ;	Write Protection Block 0
  3393                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3394                           ;	Write Protection Block 1
  3395                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3396                           ;	Write Protection Block 2
  3397                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3398                           ;	Write Protection Block 3
  3399                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3400  300006                     	org	3145734
  3401  300006  FF                 	db	255
  3402                           
  3403                           ;Config register CONFIG4H @ 0x300007
  3404                           ;	Configuration Register Write Protection bit
  3405                           ;	WRTC = OFF, Configuration registers (300000-30000Bh) not write-protected
  3406                           ;	Boot Block Write Protection bit
  3407                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  3408                           ;	Data EEPROM Write Protection bit
  3409                           ;	WRTD = OFF, Data EEPROM not write-protected
  3410                           ;	Scanner Enable bit
  3411                           ;	SCANE = ON, Scanner module is available for use, SCANMD bit can control the module
  3412                           ;	Low Voltage Programming Enable bit
  3413                           ;	LVP = ON, Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE config
      +                          uration bit is ignored
  3414  300007                     	org	3145735
  3415  300007  FF                 	db	255
  3416                           
  3417                           ;Config register CONFIG5L @ 0x300008
  3418                           ;	UserNVM Program Memory Code Protection bit
  3419                           ;	CP = OFF, UserNVM code protection disabled
  3420                           ;	DataNVM Memory Code Protection bit
  3421                           ;	CPD = OFF, DataNVM code protection disabled
  3422  300008                     	org	3145736
  3423  300008  FF                 	db	255
  3424                           
  3425                           ;Config register CONFIG5H @ 0x300009
  3426                           ;	unspecified, using default values
  3427  300009                     	org	3145737
  3428  300009  FF                 	db	255
  3429                           
  3430                           ;Config register CONFIG6L @ 0x30000A
  3431                           ;	Table Read Protection Block 0
  3432                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3433                           ;	Table Read Protection Block 1
  3434                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3435                           ;	Table Read Protection Block 2
  3436                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3437                           ;	Table Read Protection Block 3
  3438                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3439  30000A                     	org	3145738
  3440  30000A  FF                 	db	255
  3441                           
  3442                           ;Config register CONFIG6H @ 0x30000B
  3443                           ;	Boot Block Table Read Protection bit
  3444                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3445  30000B                     	org	3145739
  3446  30000B  FF                 	db	255
  3447                           tosu	equ	0xFFF
  3448                           tosh	equ	0xFFE
  3449                           tosl	equ	0xFFD
  3450                           stkptr	equ	0xFFC
  3451                           pclatu	equ	0xFFB
  3452                           pclath	equ	0xFFA
  3453                           pcl	equ	0xFF9
  3454                           tblptru	equ	0xFF8
  3455                           tblptrh	equ	0xFF7
  3456                           tblptrl	equ	0xFF6
  3457                           tablat	equ	0xFF5
  3458                           prodh	equ	0xFF4
  3459                           prodl	equ	0xFF3
  3460                           indf0	equ	0xFEF
  3461                           postinc0	equ	0xFEE
  3462                           postdec0	equ	0xFED
  3463                           preinc0	equ	0xFEC
  3464                           plusw0	equ	0xFEB
  3465                           fsr0h	equ	0xFEA
  3466                           fsr0l	equ	0xFE9
  3467                           wreg	equ	0xFE8
  3468                           indf1	equ	0xFE7
  3469                           postinc1	equ	0xFE6
  3470                           postdec1	equ	0xFE5
  3471                           preinc1	equ	0xFE4
  3472                           plusw1	equ	0xFE3
  3473                           fsr1h	equ	0xFE2
  3474                           fsr1l	equ	0xFE1
  3475                           bsr	equ	0xFE0
  3476                           indf2	equ	0xFDF
  3477                           postinc2	equ	0xFDE
  3478                           postdec2	equ	0xFDD
  3479                           preinc2	equ	0xFDC
  3480                           plusw2	equ	0xFDB
  3481                           fsr2h	equ	0xFDA
  3482                           fsr2l	equ	0xFD9
  3483                           status	equ	0xFD8

Data Sizes:
    Strings     439
    Constant    0
    Data        9
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     66      75
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Receive@data	PTR unsigned char  size(2) Largest target is 30
		 -> main@rxMsg(COMRAM[30]), 

    Transmit@data	PTR const unsigned char  size(2) Largest target is 9
		 -> main@txMsg(COMRAM[9]), 

    UARTWriteByteHex@hexa	PTR unsigned char  size(2) Largest target is 17
		 -> STR_14(CODE[17]), 

    UARTWriteStrLn@string	PTR unsigned char  size(2) Largest target is 38
		 -> STR_31(CODE[18]), STR_30(CODE[25]), STR_29(CODE[2]), STR_28(CODE[2]), 
		 -> STR_25(CODE[18]), STR_24(CODE[2]), STR_23(CODE[22]), STR_22(CODE[25]), 
		 -> STR_21(CODE[24]), STR_20(CODE[2]), STR_17(CODE[2]), STR_15(CODE[2]), 
		 -> STR_13(CODE[27]), STR_12(CODE[20]), STR_11(CODE[24]), STR_10(CODE[23]), 
		 -> STR_9(CODE[8]), STR_8(CODE[23]), STR_7(CODE[13]), STR_6(CODE[11]), 
		 -> STR_5(CODE[11]), STR_4(CODE[38]), STR_3(CODE[12]), STR_2(CODE[2]), 

    UARTWriteStr@string	PTR unsigned char  size(2) Largest target is 27
		 -> STR_27(CODE[2]), STR_26(CODE[16]), STR_19(CODE[2]), STR_18(CODE[18]), 
		 -> STR_16(CODE[27]), printBatteryLevel@string(COMRAM[6]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_Receive
    _main->_Transmit
    _Transmit->_UARTWriteByteHex
    _Receive->_UARTWriteByteHex
    _InitModule->_WriteSXRegister
    _WriteSXRegister->_ReadSXRegister
    _GetMode->_UARTWriteByteHex
    _UARTWriteStrLn->_UARTWriteByte
    _UARTWriteStr->_UARTWriteByte
    _UARTWriteByteHex->_UARTWriteByte
    _ReadSXRegister->_SPIReceive

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                50    45      5   24330
                                             16 COMRAM    50    45      5
                            _GetMode
                         _InitModule
                     _InitRFLoRaPins
                            _Receive
                      _ResetRFModule
                            _SPIInit
                           _Transmit
                           _UARTInit
                     _UARTWriteStrLn
                    _WriteSXRegister
                      _initVoltmeter
 ---------------------------------------------------------------------------------
 (1) _initVoltmeter                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Transmit                                             6     3      3    6480
                                             10 COMRAM     6     3      3
                          _AntennaTX
                     _ReadSXRegister
                   _UARTWriteByteHex
                       _UARTWriteStr
                     _UARTWriteStrLn
                    _WriteSXRegister
 ---------------------------------------------------------------------------------
 (2) _AntennaTX                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ResetRFModule                                        1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Receive                                              6     4      2    6316
                                             10 COMRAM     6     4      2
                          _AntennaRX
                     _ReadSXRegister
                   _UARTWriteByteHex
                       _UARTWriteStr
                     _UARTWriteStrLn
                    _WriteSXRegister
 ---------------------------------------------------------------------------------
 (2) _AntennaRX                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitRFLoRaPins                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitModule                                           1     1      0    2917
                    _WriteSXRegister
 ---------------------------------------------------------------------------------
 (1) _WriteSXRegister                                      2     1      1    2894
                                              4 COMRAM     2     1      1
                     _ReadSXRegister (ARG)
                        _SPITransfer
 ---------------------------------------------------------------------------------
 (1) _GetMode                                              4     4      0    3278
                                             10 COMRAM     4     4      0
                     _ReadSXRegister
                   _UARTWriteByteHex
                       _UARTWriteStr
                     _UARTWriteStrLn
 ---------------------------------------------------------------------------------
 (1) _UARTWriteStrLn                                       5     3      2    1929
                                              1 COMRAM     5     3      2
                      _UARTWriteByte
 ---------------------------------------------------------------------------------
 (2) _UARTWriteStr                                         5     3      2     637
                                              1 COMRAM     5     3      2
                      _UARTWriteByte
 ---------------------------------------------------------------------------------
 (2) _UARTWriteByteHex                                     9     7      2     464
                                              1 COMRAM     9     7      2
                      _UARTWriteByte
 ---------------------------------------------------------------------------------
 (2) _UARTWriteByte                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ReadSXRegister                                       2     2      0      90
                                              2 COMRAM     2     2      0
                         _SPIReceive
                        _SPITransfer
 ---------------------------------------------------------------------------------
 (2) _SPITransfer                                          2     2      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SPIReceive                                           3     3      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetMode
     _ReadSXRegister
       _SPIReceive
       _SPITransfer
     _UARTWriteByteHex
       _UARTWriteByte
     _UARTWriteStr
       _UARTWriteByte
     _UARTWriteStrLn
       _UARTWriteByte
   _InitModule
     _WriteSXRegister
       _ReadSXRegister (ARG)
       _SPITransfer (ARG)
   _InitRFLoRaPins
   _Receive
     _AntennaRX
     _ReadSXRegister
     _UARTWriteByteHex
     _UARTWriteStr
     _UARTWriteStrLn
     _WriteSXRegister
   _ResetRFModule
   _SPIInit
   _Transmit
     _AntennaTX
     _ReadSXRegister
     _UARTWriteByteHex
     _UARTWriteStr
     _UARTWriteStrLn
     _WriteSXRegister
   _UARTInit
   _UARTWriteStrLn
   _WriteSXRegister
   _initVoltmeter

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      40        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     42      4B       1       78.9%
BITBIGSFRhhhhl      52      0       0      21        0.0%
BITBIGSFRllhl       35      0       0      31        0.0%
BITBIGSFRllllhh     2C      0       0      35        0.0%
BITBIGSFRllhhhh     1E      0       0      27        0.0%
BITBIGSFRlllll      17      0       0      38        0.0%
BITBIGSFRlllhhl     13      0       0      33        0.0%
BITBIGSFRlllhhh      F      0       0      32        0.0%
BITBIGSFRhhhhh       D      0       0      20        0.0%
BITBIGSFRllllhl      C      0       0      37        0.0%
BITBIGSFRllllhl      7      0       0      36        0.0%
BITBIGSFRhll         7      0       0      25        0.0%
BITBIGSFRllhhll      4      0       0      30        0.0%
BITBIGSFRllhhlh      2      0       0      29        0.0%
BITBIGSFRllhhhl      2      0       0      28        0.0%
BITBIGSFRhlh         2      0       0      24        0.0%
BITBIGSFRlh          2      0       0      26        0.0%
BITBIGSFRhhhl        1      0       0      22        0.0%
BITBIGSFRhhl         1      0       0      23        0.0%
BITBIGSFRlllhl       1      0       0      34        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4B      39        0.0%
DATA                 0      0      4B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon May 22 13:18:45 2023

  __end_of_InitRFLoRaPins 7478     __end_of_ResetRFModule 756E                         l9 7476  
                      l12 756C                        l15 74B8                        l18 74A2  
                      l51 7504                        l45 75CE                        l54 7530  
                      l56 753E                        l48 74F6                        l72 74E8  
                      l57 7544                        l75 7522                        l92 7B3C  
                      l95 78C4                        u10 7504                        u11 7500  
                      u20 753E                        u21 753A                        u30 7488  
                      u31 7484               _SPITransfer 74EA    Receive@RXNumberOfBytes 000E  
        _UARTWriteByteHex 76E8                       l130 7612                       l133 747A  
                     l142 76E6                       l136 748C                       l152 7766  
                     l153 77D2                       l225 7CB0                       l217 79D4  
                     l148 766E                       l228 7BF8                       l271 7DD8  
                     l176 74CE                       l960 752C                       l954 74EC  
                     l962 747A                       l970 74B6                       l956 74F2  
                     l964 7488                       l972 748E                       l958 7526  
                     l990 750A                       l974 7492                       l966 74A4  
                     l992 7510                       l976 74A0                       l968 74A8  
                     l994 7516                       l996 751E                       l988 7508  
                     l998 7520                       u300 76A4                       u310 76D6  
                     u320 76E6                       u400 7924                       u321 76E2  
                     u401 7920                       u330 7702                       u410 7960  
                     u331 76FE                       u307 769A                       u411 795C  
                     u340 7730                       u420 798A                       u341 772C  
                     u317 76CC                       u421 7986                       u501 7D68  
                     u430 79C8                       u510 7D8E                       u431 79C4  
                     u511 7D8A                       u360 7662                       u440 7B98  
                     u520 7DD8                       u361 765E                       u441 7B94  
                     u521 7DD4                       u370 7A16                       u450 7BA6  
                     u530 7E2A                       u355 7772                       u371 7A12  
                     u451 7BA2                       u531 7E26                       u380 7A2C  
                     u460 7BBC                       u381 7A28                       u461 7BB8  
                     u470 7BF8                       u390 78F6                       u471 7BF4  
                     u607 74AE                       u391 78F2                       u480 7C06  
                     u481 7C02                       u617 7550                       u490 7C9A  
                     u491 7C96                       u627 7562                       u547 7CBC  
                     u637 7B60                       u557 7CE6                       u647 7498  
                     u567 7CEE                       u577 7CFA                       u587 7D40  
                     u597 7934                       wreg 000FE8              _BAUD1CONbits 000F9F  
                    l1030 7546                      l1032 754A                      l1034 755A  
                    l1028 746C                      l1036 7598                      l1038 75B0  
                    l1170 74CC                      l1420 74D4                      l1164 74BA  
                    l1430 7678                      l1422 74DA                      l1510 7810  
                    l1502 77D4                      l1166 74C8                      l1440 7720  
                    l1432 76A8                      l1424 74E0                      l1520 7842  
                    l1512 781A                      l1504 77FC                      l1600 793E  
                    l1168 74CA                      l1442 7730                      l1434 76AA  
                    l1450 763A                      l1426 74E6                      l1418 74D2  
                    l1530 7874                      l1522 784C                      l1514 7824  
                    l1506 77FC                      l1610 7976                      l1602 794A  
                    l1436 76E8                      l1428 7670                      l1452 7662  
                    l1444 7614                      l1460 79F4                      l1540 78A6  
                    l1532 787E                      l1524 7856                      l1516 782E  
                    l1508 7806                      l1620 79B4                      l1612 797A  
                    l1604 7952                      l1438 7702                      l1446 761C  
                    l1470 7A2C                      l1462 7A00                      l1454 79D6  
                    l1542 78B0                      l1534 7888                      l1526 7860  
                    l1518 7838                      l1630 7B42                      l1622 79B6  
                    l1606 7960                      l1550 75EA                      l1448 7638  
                    l1800 7AF6                      l1480 7A72                      l1472 7A3C  
                    l1464 7A06                      l1456 79DE                      l1544 78BA  
                    l1536 7892                      l1528 786A                      l1640 7B82  
                    l1632 7B50                      l1624 79C8                      l1616 798E  
                    l1608 796A                      l1560 75F4                      l1552 75EC  
                    l1720 7CB2                      l1490 7AC2                      l1482 7A82  
                    l1466 7A16                      l1474 7A4C                      l1458 79EA  
                    l1538 789C                      l1642 7B8A                      l1634 7B5A  
                    l1618 79A8                      l1570 760A                      l1562 75F6  
                    l1554 75EE                      l1546 75D0                      l1730 7CE4  
                    l1722 7CC8                      l1492 7AD2                      l1484 7A92  
                    l1476 7A58                      l1468 7A1C                      l1660 7C06  
                    l1652 7BCA                      l1644 7B98                      l1636 7B6A  
                    l1628 7B3E                      l1580 78CA                      l1572 760C  
                    l1564 75F8                      l1556 75F0                      l1548 75DC  
                    l1740 7D1C                      l1732 7CEC                      l1724 7CCC  
                    l1486 7AA2                      l1478 7A62                      l1670 7C4C  
                    l1662 7C22                      l1654 7BD6                      l1646 7BA6  
                    l1638 7B76                      l1590 78FA                      l1582 78D8  
                    l1574 760E                      l1566 75FA                      l1558 75F2  
                    l1750 7D4E                      l1742 7D26                      l1734 7CF4  
                    l1726 7CD0                      l1488 7AB2                      l1496 7AE2  
                    l1680 7C9A                      l1672 7C60                      l1664 7C2E  
                    l1656 7BE2                      l1648 7BBC                      l1592 7910  
                    l1584 78E2                      l1576 7610                      l1568 7608  
                    l1760 7D8E                      l1752 7D5A                      l1744 7D30  
                    l1736 7D04                      l1728 7CD8                      l1674 7C7A  
                    l1666 7C36                      l1682 7CA6                      l1658 7BEA  
                    l1594 7912                      l1586 78E6                      l1578 78C6  
                    l1770 7DE8                      l1762 7D96                      l1754 7D5E  
                    l1746 7D3A                      l1738 7D10                      l1676 7C86  
                    l1668 7C44                      l1596 7924                      l1772 7E04  
                    l1764 7DB2                      l1756 7D70                      l1748 7D4A  
                    l1678 7C88                      l1598 792E                      l1774 7E06  
                    l1766 7DB4                      l1758 7D7C                      l1776 7E2A  
                    l1768 7DE0                      l1778 7E2E                      STR_1 7FA4  
                    STR_2 7E86                      STR_3 7FD2                      STR_4 7E47  
                    STR_5 7FDE                      STR_6 7FE9                      STR_7 7FC5  
                    STR_8 7F1C                      STR_9 7FF4         GetMode@masked_reg 000D  
   ReadSXRegister@address 0004                      _main 7CB2              Transmit@data 000B  
         __end_of_SPIInit 75D0                      fsr0h 000FEA                      indf0 000FEF  
                    fsr0l 000FE9                      indf1 000FE7                      indf2 000FDF  
                    fsr1l 000FE1                      fsr2l 000FD9                      start 0000  
         __end_of_GetMode 7B3E    ReadSXRegister@RegValue 0003              ___param_bank 000000  
         ?_InitRFLoRaPins 0001           __end_of_Receive 7CB2                     _ADACQ 000F5C  
                   ?_main 0011                     _ADCLK 000F57                     _ADPCH 000F5F  
                   STR_10 7F05                     STR_11 7EED                     STR_20 7E86  
                   STR_12 7F49                     STR_21 7ED5                     STR_13 7E88  
                   STR_14 7F93                     STR_22 7EBC                     STR_30 7EA3  
                   STR_31 7F5D                     STR_23 7F33                     STR_24 7E86  
                   STR_16 7E6D                     STR_17 7FFC                     STR_25 7F81  
                   STR_26 7FB5                     STR_18 7F6F                     STR_27 7E86  
                   STR_19 7E86                     STR_28 7E86                     STR_29 7E86  
        __end_of_UARTInit 7614                     main@i 0041           UARTWriteStrLn@i 0006  
                   tablat 000FF5            _ReadSXRegister 7506                     plusw1 000FE3  
                   plusw2 000FDB                     status 000FD8      UARTWriteByteHex@data 0002  
    UARTWriteByteHex@hexa 0009               ?_SPIReceive 0001           __initialization 756E  
              _InitModule 77D4              __end_of_main 7E46                    ??_main 0016  
           __activetblptr 000002          __end_of_Transmit 79D6                    _ADRESH 000F64  
                  _ADRESL 000F63                 ??_SPIInit 0001    __end_of_ReadSXRegister 7524  
                  _RC1STA 000F9D                    _RC3PPS 000EFA                    _RC5PPS 000EFC  
                  _RC6PPS 000EFD                    _SP1BRG 000F9B                 ??_GetMode 000B  
                  _TX1REG 000F9A                    _TX1STA 000F9E                 ??_Receive 000D  
             Receive@data 000B                    isa$std 000001        SPIReceive@data_out 0001  
            __pdataCOMRAM 0043              __mediumconst 7E46                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8           ?_ReadSXRegister 0001  
              __accesstop 0060   __end_of__initialization 758E  __end_of_UARTWriteByteHex 77D4  
           ___rparam_used 000001         __end_of_AntennaRX 74A4         __end_of_AntennaTX 74BA  
             ?_InitModule 0001            __pcstackCOMRAM 0001                 ?_UARTInit 0001  
            ?_SPITransfer 0001       main@RXNumberOfBytes 0040     __end_of_UARTWriteByte 748E  
           _initVoltmeter 74BA          ??_InitRFLoRaPins 0001                ??_UARTInit 0003  
               ?_Transmit 000B            ?_initVoltmeter 0001                   _SP1BRGH 000F9C  
                 _SSP1BUF 000F92                   _SPIInit 7598                   _GetMode 79D6  
       UARTWriteByte@data 0001                   _Receive 7B3E              ??_SPIReceive 0001  
                 __Hparam 0000                   __Lparam 0000             ?_UARTWriteStr 0002  
              ??_Transmit 000E                   __pcinit 756E                   __ramtop 0800  
                 __ptext0 7CB2                   __ptext1 74BA                   __ptext2 75D0  
                 __ptext3 78C6                   __ptext4 74A4                   __ptext5 7598  
                 __ptext6 7546                   __ptext7 7B3E                   __ptext8 748E  
                 __ptext9 746C         ??_WriteSXRegister 0006        __end_of_SPIReceive 7546  
         Transmit@reg_val 000F      end_of_initialization 758E             __Lmediumconst 7E46  
                 postdec1 000FE5            ??_UARTWriteStr 0004                   postinc0 000FEE  
           _ResetRFModule 7546           ??_initVoltmeter 0001          ??_ReadSXRegister 0003  
               _TRISAbits 000F88                 _TRISBbits 000F89                 _TRISCbits 000F8A  
              main@i_1043 0042            _UARTWriteStrLn 7614         ?_UARTWriteByteHex 0002  
      ??_UARTWriteByteHex 0004              ??_InitModule 0007            ?_ResetRFModule 0001  
               _AntennaRX 748E                 _AntennaTX 74A4      UARTWriteStrLn@string 0002  
           __pidataCOMRAM 7463       start_initialization 756E    __end_of_UARTWriteStrLn 7670  
      __end_of_InitModule 78C6            Receive@reg_val 0010                ?_AntennaRX 0001  
              ?_AntennaTX 0001         SPIReceive@data_in 0002                 Transmit@i 0010  
         ?_UARTWriteStrLn 0002                  ?_SPIInit 0001      __end_of_UARTWriteStr 76E8  
                ?_GetMode 0001                  ?_Receive 000B           ??_ResetRFModule 0001  
           __pmediumconst 7E46           _WriteSXRegister 74D0         Transmit@data_long 000D  
                _LATAbits 000F83                  _LATBbits 000F84                  _LATCbits 000F85  
                _PIE3bits 000EC5                  _PIR3bits 000ECD       SPITransfer@data_out 0001  
               main@F9592 0043                  _SSP1CON1 000F96                  _SSP1CON3 000F98  
                _UARTInit 75D0                  _SSP1STAT 000F95               ??_AntennaRX 0001  
             ??_AntennaTX 0001             _UARTWriteByte 7478                _ADCON0bits 000F60  
               main@rxMsg 0019                 main@txMsg 0037                  Receive@i 000F  
               copy_data0 7582             UARTWriteStr@i 0006   __end_of_WriteSXRegister 74EA  
                __Hrparam 0000                  __Lrparam 0000                  _Transmit 78C6  
           ??_SPITransfer 0001            ?_UARTWriteByte 0001     __end_of_initVoltmeter 74D0  
              _ANSELAbits 000F11                _ANSELCbits 000F21                  __ptext10 77D4  
                __ptext11 74D0                  __ptext12 79D6                  __ptext13 7614  
                __ptext14 7670                  __ptext15 76E8                  __ptext16 7478  
                __ptext17 7506                  __ptext18 74EA                  __ptext19 7524  
              _RC1STAbits 000F9D       WriteSXRegister@data 0005                  isa$xinst 000000  
            _UARTWriteStr 7670                  main@argc 0011                  main@argv 0013  
        ??_UARTWriteStrLn 0004        UARTWriteStr@string 0002                _INTCONbits 000FF2  
     __end_of_SPITransfer 7506          ?_WriteSXRegister 0005                GetMode@reg 000E  
  WriteSXRegister@address 0006           ??_UARTWriteByte 0001            _InitRFLoRaPins 746C  
              _SSP1DATPPS 000EB8                _SSP1CLKPPS 000EB7                _TX1STAbits 000F9E  
              _SPIReceive 7524          UARTInit@baudRate 0001  
