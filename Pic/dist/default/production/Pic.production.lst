

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon May 22 13:43:59 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F25K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34  0000                     
    35                           ; Version 2.20
    36                           ; Generated 12/02/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F25K40 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	idataCOMRAM
    71  00745B                     __pidataCOMRAM:
    72                           	callstack 0
    73                           
    74                           ;initializer for main@F9592
    75  00745B  AD                 	db	173
    76  00745C  4E                 	db	78
    77  00745D  00                 	db	0
    78  00745E  00                 	db	0
    79  00745F  00                 	db	0
    80  007460  00                 	db	0
    81  007461  00                 	db	0
    82  007462  00                 	db	0
    83  007463  00                 	db	0
    84  0000                     _SP1BRGH	set	3996
    85  0000                     _RC1STAbits	set	3997
    86  0000                     _TX1STAbits	set	3998
    87  0000                     _SSP1CLKPPS	set	3767
    88  0000                     _RC3PPS	set	3834
    89  0000                     _ANSELCbits	set	3873
    90  0000                     _LATBbits	set	3972
    91  0000                     _TRISBbits	set	3977
    92  0000                     _SSP1BUF	set	3986
    93  0000                     _SSP1STAT	set	3989
    94  0000                     _TRISCbits	set	3978
    95  0000                     _TRISAbits	set	3976
    96  0000                     _LATCbits	set	3973
    97  0000                     _ADCLK	set	3927
    98  0000                     _LATAbits	set	3971
    99  0000                     _RC5PPS	set	3836
   100  0000                     _ANSELAbits	set	3857
   101  0000                     _RC6PPS	set	3837
   102  0000                     _PIE3bits	set	3781
   103  0000                     _PIR3bits	set	3789
   104  0000                     _SSP1DATPPS	set	3768
   105  0000                     _SSP1CON3	set	3992
   106  0000                     _SSP1CON1	set	3990
   107  0000                     _SP1BRG	set	3995
   108  0000                     _TX1REG	set	3994
   109  0000                     _RC1STA	set	3997
   110  0000                     _TX1STA	set	3998
   111  0000                     _INTCONbits	set	4082
   112  0000                     _BAUD1CONbits	set	3999
   113  0000                     _ADACQ	set	3932
   114  0000                     _ADPCH	set	3935
   115  0000                     _ADRESL	set	3939
   116  0000                     _ADRESH	set	3940
   117  0000                     _ADCON0bits	set	3936
   118                           
   119                           	psect	mediumconst
   120  007E46                     __pmediumconst:
   121                           	callstack 0
   122  007E46  00                 	db	0
   123  007E47                     STR_4:
   124                           
   125                           ; BSR set to: 14
   126  007E47  6D                 	db	109	;'m'
   127  007E48  6F                 	db	111	;'o'
   128  007E49  64                 	db	100	;'d'
   129  007E4A  65                 	db	101	;'e'
   130  007E4B  20                 	db	32
   131  007E4C  3D                 	db	61	;'='
   132  007E4D  20                 	db	32
   133  007E4E  4C                 	db	76	;'L'
   134  007E4F  6F                 	db	111	;'o'
   135  007E50  52                 	db	82	;'R'
   136  007E51  61                 	db	97	;'a'
   137  007E52  20                 	db	32
   138  007E53  77                 	db	119	;'w'
   139  007E54  69                 	db	105	;'i'
   140  007E55  74                 	db	116	;'t'
   141  007E56  68                 	db	104	;'h'
   142  007E57  20                 	db	32
   143  007E58  46                 	db	70	;'F'
   144  007E59  53                 	db	83	;'S'
   145  007E5A  4B                 	db	75	;'K'
   146  007E5B  20                 	db	32
   147  007E5C  72                 	db	114	;'r'
   148  007E5D  65                 	db	101	;'e'
   149  007E5E  67                 	db	103	;'g'
   150  007E5F  69                 	db	105	;'i'
   151  007E60  73                 	db	115	;'s'
   152  007E61  74                 	db	116	;'t'
   153  007E62  65                 	db	101	;'e'
   154  007E63  72                 	db	114	;'r'
   155  007E64  73                 	db	115	;'s'
   156  007E65  20                 	db	32
   157  007E66  61                 	db	97	;'a'
   158  007E67  63                 	db	99	;'c'
   159  007E68  63                 	db	99	;'c'
   160  007E69  65                 	db	101	;'e'
   161  007E6A  73                 	db	115	;'s'
   162  007E6B  73                 	db	115	;'s'
   163  007E6C  00                 	db	0
   164  007E6D                     STR_16:
   165                           
   166                           ; BSR set to: 14
   167  007E6D  50                 	db	80	;'P'
   168  007E6E  6F                 	db	111	;'o'
   169  007E6F  75                 	db	117	;'u'
   170  007E70  72                 	db	114	;'r'
   171  007E71  63                 	db	99	;'c'
   172  007E72  65                 	db	101	;'e'
   173  007E73  6E                 	db	110	;'n'
   174  007E74  74                 	db	116	;'t'
   175  007E75  61                 	db	97	;'a'
   176  007E76  67                 	db	103	;'g'
   177  007E77  65                 	db	101	;'e'
   178  007E78  20                 	db	32
   179  007E79  64                 	db	100	;'d'
   180  007E7A  65                 	db	101	;'e'
   181  007E7B  20                 	db	32
   182  007E7C  62                 	db	98	;'b'
   183  007E7D  61                 	db	97	;'a'
   184  007E7E  74                 	db	116	;'t'
   185  007E7F  74                 	db	116	;'t'
   186  007E80  65                 	db	101	;'e'
   187  007E81  72                 	db	114	;'r'
   188  007E82  69                 	db	105	;'i'
   189  007E83  65                 	db	101	;'e'
   190  007E84  20                 	db	32
   191  007E85  3A                 	db	58	;':'
   192  007E86  20                 	db	32
   193  007E87  00                 	db	0
   194  007E88                     STR_13:
   195                           
   196                           ; BSR set to: 14
   197  007E88  43                 	db	67	;'C'
   198  007E89  68                 	db	104	;'h'
   199  007E8A  61                 	db	97	;'a'
   200  007E8B  6E                 	db	110	;'n'
   201  007E8C  6E                 	db	110	;'n'
   202  007E8D  65                 	db	101	;'e'
   203  007E8E  6C                 	db	108	;'l'
   204  007E8F  20                 	db	32
   205  007E90  41                 	db	65	;'A'
   206  007E91  63                 	db	99	;'c'
   207  007E92  74                 	db	116	;'t'
   208  007E93  69                 	db	105	;'i'
   209  007E94  76                 	db	118	;'v'
   210  007E95  69                 	db	105	;'i'
   211  007E96  74                 	db	116	;'t'
   212  007E97  79                 	db	121	;'y'
   213  007E98  20                 	db	32
   214  007E99  44                 	db	68	;'D'
   215  007E9A  65                 	db	101	;'e'
   216  007E9B  74                 	db	116	;'t'
   217  007E9C  65                 	db	101	;'e'
   218  007E9D  63                 	db	99	;'c'
   219  007E9E  74                 	db	116	;'t'
   220  007E9F  69                 	db	105	;'i'
   221  007EA0  6F                 	db	111	;'o'
   222  007EA1  6E                 	db	110	;'n'
   223  007EA2  00                 	db	0
   224  007EA3                     STR_30:
   225                           
   226                           ; BSR set to: 14
   227  007EA3  73                 	db	115	;'s'
   228  007EA4  65                 	db	101	;'e'
   229  007EA5  74                 	db	116	;'t'
   230  007EA6  20                 	db	32
   231  007EA7  6D                 	db	109	;'m'
   232  007EA8  6F                 	db	111	;'o'
   233  007EA9  64                 	db	100	;'d'
   234  007EAA  65                 	db	101	;'e'
   235  007EAB  20                 	db	32
   236  007EAC  74                 	db	116	;'t'
   237  007EAD  6F                 	db	111	;'o'
   238  007EAE  20                 	db	32
   239  007EAF  4C                 	db	76	;'L'
   240  007EB0  6F                 	db	111	;'o'
   241  007EB1  52                 	db	82	;'R'
   242  007EB2  61                 	db	97	;'a'
   243  007EB3  20                 	db	32
   244  007EB4  73                 	db	115	;'s'
   245  007EB5  74                 	db	116	;'t'
   246  007EB6  61                 	db	97	;'a'
   247  007EB7  6E                 	db	110	;'n'
   248  007EB8  64                 	db	100	;'d'
   249  007EB9  62                 	db	98	;'b'
   250  007EBA  79                 	db	121	;'y'
   251  007EBB  00                 	db	0
   252  007EBC                     STR_22:
   253                           
   254                           ; BSR set to: 14
   255  007EBC  77                 	db	119	;'w'
   256  007EBD  61                 	db	97	;'a'
   257  007EBE  69                 	db	105	;'i'
   258  007EBF  74                 	db	116	;'t'
   259  007EC0  69                 	db	105	;'i'
   260  007EC1  6E                 	db	110	;'n'
   261  007EC2  67                 	db	103	;'g'
   262  007EC3  20                 	db	32
   263  007EC4  66                 	db	102	;'f'
   264  007EC5  6F                 	db	111	;'o'
   265  007EC6  72                 	db	114	;'r'
   266  007EC7  20                 	db	32
   267  007EC8  76                 	db	118	;'v'
   268  007EC9  61                 	db	97	;'a'
   269  007ECA  6C                 	db	108	;'l'
   270  007ECB  69                 	db	105	;'i'
   271  007ECC  64                 	db	100	;'d'
   272  007ECD  20                 	db	32
   273  007ECE  68                 	db	104	;'h'
   274  007ECF  65                 	db	101	;'e'
   275  007ED0  61                 	db	97	;'a'
   276  007ED1  64                 	db	100	;'d'
   277  007ED2  65                 	db	101	;'e'
   278  007ED3  72                 	db	114	;'r'
   279  007ED4  00                 	db	0
   280  007ED5                     STR_21:
   281                           
   282                           ; BSR set to: 14
   283  007ED5  2D                 	db	45
   284  007ED6  2D                 	db	45
   285  007ED7  2D                 	db	45
   286  007ED8  2D                 	db	45
   287  007ED9  2D                 	db	45
   288  007EDA  2D                 	db	45
   289  007EDB  2D                 	db	45
   290  007EDC  2D                 	db	45
   291  007EDD  2D                 	db	45
   292  007EDE  2D                 	db	45
   293  007EDF  2D                 	db	45
   294  007EE0  2D                 	db	45
   295  007EE1  2D                 	db	45
   296  007EE2  2D                 	db	45
   297  007EE3  2D                 	db	45
   298  007EE4  2D                 	db	45
   299  007EE5  2D                 	db	45
   300  007EE6  2D                 	db	45
   301  007EE7  2D                 	db	45
   302  007EE8  2D                 	db	45
   303  007EE9  2D                 	db	45
   304  007EEA  2D                 	db	45
   305  007EEB  2D                 	db	45
   306  007EEC  00                 	db	0
   307  007EED                     STR_11:
   308                           
   309                           ; BSR set to: 14
   310  007EED  63                 	db	99	;'c'
   311  007EEE  6F                 	db	111	;'o'
   312  007EEF  6E                 	db	110	;'n'
   313  007EF0  74                 	db	116	;'t'
   314  007EF1  69                 	db	105	;'i'
   315  007EF2  6E                 	db	110	;'n'
   316  007EF3  75                 	db	117	;'u'
   317  007EF4  6F                 	db	111	;'o'
   318  007EF5  75                 	db	117	;'u'
   319  007EF6  73                 	db	115	;'s'
   320  007EF7  20                 	db	32
   321  007EF8  72                 	db	114	;'r'
   322  007EF9  65                 	db	101	;'e'
   323  007EFA  63                 	db	99	;'c'
   324  007EFB  65                 	db	101	;'e'
   325  007EFC  69                 	db	105	;'i'
   326  007EFD  76                 	db	118	;'v'
   327  007EFE  65                 	db	101	;'e'
   328  007EFF  20                 	db	32
   329  007F00  6D                 	db	109	;'m'
   330  007F01  6F                 	db	111	;'o'
   331  007F02  64                 	db	100	;'d'
   332  007F03  65                 	db	101	;'e'
   333  007F04  00                 	db	0
   334  007F05                     STR_10:
   335                           
   336                           ; BSR set to: 14
   337  007F05  66                 	db	102	;'f'
   338  007F06  72                 	db	114	;'r'
   339  007F07  65                 	db	101	;'e'
   340  007F08  71                 	db	113	;'q'
   341  007F09  75                 	db	117	;'u'
   342  007F0A  65                 	db	101	;'e'
   343  007F0B  6E                 	db	110	;'n'
   344  007F0C  63                 	db	99	;'c'
   345  007F0D  79                 	db	121	;'y'
   346  007F0E  20                 	db	32
   347  007F0F  73                 	db	115	;'s'
   348  007F10  79                 	db	121	;'y'
   349  007F11  6E                 	db	110	;'n'
   350  007F12  74                 	db	116	;'t'
   351  007F13  68                 	db	104	;'h'
   352  007F14  65                 	db	101	;'e'
   353  007F15  73                 	db	115	;'s'
   354  007F16  69                 	db	105	;'i'
   355  007F17  73                 	db	115	;'s'
   356  007F18  20                 	db	32
   357  007F19  52                 	db	82	;'R'
   358  007F1A  58                 	db	88	;'X'
   359  007F1B  00                 	db	0
   360  007F1C                     STR_8:
   361                           
   362                           ; BSR set to: 14
   363  007F1C  66                 	db	102	;'f'
   364  007F1D  72                 	db	114	;'r'
   365  007F1E  65                 	db	101	;'e'
   366  007F1F  71                 	db	113	;'q'
   367  007F20  75                 	db	117	;'u'
   368  007F21  65                 	db	101	;'e'
   369  007F22  6E                 	db	110	;'n'
   370  007F23  63                 	db	99	;'c'
   371  007F24  79                 	db	121	;'y'
   372  007F25  20                 	db	32
   373  007F26  73                 	db	115	;'s'
   374  007F27  79                 	db	121	;'y'
   375  007F28  6E                 	db	110	;'n'
   376  007F29  74                 	db	116	;'t'
   377  007F2A  68                 	db	104	;'h'
   378  007F2B  65                 	db	101	;'e'
   379  007F2C  73                 	db	115	;'s'
   380  007F2D  69                 	db	105	;'i'
   381  007F2E  73                 	db	115	;'s'
   382  007F2F  20                 	db	32
   383  007F30  54                 	db	84	;'T'
   384  007F31  58                 	db	88	;'X'
   385  007F32  00                 	db	0
   386  007F33                     STR_23:
   387                           
   388                           ; BSR set to: 14
   389  007F33  76                 	db	118	;'v'
   390  007F34  61                 	db	97	;'a'
   391  007F35  6C                 	db	108	;'l'
   392  007F36  69                 	db	105	;'i'
   393  007F37  64                 	db	100	;'d'
   394  007F38  20                 	db	32
   395  007F39  68                 	db	104	;'h'
   396  007F3A  65                 	db	101	;'e'
   397  007F3B  61                 	db	97	;'a'
   398  007F3C  64                 	db	100	;'d'
   399  007F3D  65                 	db	101	;'e'
   400  007F3E  72                 	db	114	;'r'
   401  007F3F  20                 	db	32
   402  007F40  72                 	db	114	;'r'
   403  007F41  65                 	db	101	;'e'
   404  007F42  63                 	db	99	;'c'
   405  007F43  65                 	db	101	;'e'
   406  007F44  69                 	db	105	;'i'
   407  007F45  76                 	db	118	;'v'
   408  007F46  65                 	db	101	;'e'
   409  007F47  64                 	db	100	;'d'
   410  007F48  00                 	db	0
   411  007F49                     STR_12:
   412                           
   413                           ; BSR set to: 14
   414  007F49  73                 	db	115	;'s'
   415  007F4A  69                 	db	105	;'i'
   416  007F4B  6E                 	db	110	;'n'
   417  007F4C  67                 	db	103	;'g'
   418  007F4D  6C                 	db	108	;'l'
   419  007F4E  65                 	db	101	;'e'
   420  007F4F  20                 	db	32
   421  007F50  72                 	db	114	;'r'
   422  007F51  65                 	db	101	;'e'
   423  007F52  63                 	db	99	;'c'
   424  007F53  65                 	db	101	;'e'
   425  007F54  69                 	db	105	;'i'
   426  007F55  76                 	db	118	;'v'
   427  007F56  65                 	db	101	;'e'
   428  007F57  20                 	db	32
   429  007F58  6D                 	db	109	;'m'
   430  007F59  6F                 	db	111	;'o'
   431  007F5A  64                 	db	100	;'d'
   432  007F5B  65                 	db	101	;'e'
   433  007F5C  00                 	db	0
   434  007F5D                     STR_31:
   435                           
   436                           ; BSR set to: 14
   437  007F5D  69                 	db	105	;'i'
   438  007F5E  6E                 	db	110	;'n'
   439  007F5F  69                 	db	105	;'i'
   440  007F60  74                 	db	116	;'t'
   441  007F61  69                 	db	105	;'i'
   442  007F62  61                 	db	97	;'a'
   443  007F63  6C                 	db	108	;'l'
   444  007F64  69                 	db	105	;'i'
   445  007F65  7A                 	db	122	;'z'
   446  007F66  65                 	db	101	;'e'
   447  007F67  20                 	db	32
   448  007F68  6D                 	db	109	;'m'
   449  007F69  6F                 	db	111	;'o'
   450  007F6A  64                 	db	100	;'d'
   451  007F6B  75                 	db	117	;'u'
   452  007F6C  6C                 	db	108	;'l'
   453  007F6D  65                 	db	101	;'e'
   454  007F6E  00                 	db	0
   455  007F6F                     STR_18:
   456                           
   457                           ; BSR set to: 14
   458  007F6F  4D                 	db	77	;'M'
   459  007F70  65                 	db	101	;'e'
   460  007F71  73                 	db	115	;'s'
   461  007F72  73                 	db	115	;'s'
   462  007F73  61                 	db	97	;'a'
   463  007F74  67                 	db	103	;'g'
   464  007F75  65                 	db	101	;'e'
   465  007F76  20                 	db	32
   466  007F77  65                 	db	101	;'e'
   467  007F78  6E                 	db	110	;'n'
   468  007F79  76                 	db	118	;'v'
   469  007F7A  6F                 	db	111	;'o'
   470  007F7B  79                 	db	121	;'y'
   471  007F7C  65                 	db	101	;'e'
   472  007F7D  20                 	db	32
   473  007F7E  3A                 	db	58	;':'
   474  007F7F  20                 	db	32
   475  007F80  00                 	db	0
   476  007F81                     STR_25:
   477                           
   478                           ; BSR set to: 14
   479  007F81  70                 	db	112	;'p'
   480  007F82  61                 	db	97	;'a'
   481  007F83  79                 	db	121	;'y'
   482  007F84  6C                 	db	108	;'l'
   483  007F85  6F                 	db	111	;'o'
   484  007F86  61                 	db	97	;'a'
   485  007F87  64                 	db	100	;'d'
   486  007F88  20                 	db	32
   487  007F89  43                 	db	67	;'C'
   488  007F8A  52                 	db	82	;'R'
   489  007F8B  43                 	db	67	;'C'
   490  007F8C  20                 	db	32
   491  007F8D  65                 	db	101	;'e'
   492  007F8E  72                 	db	114	;'r'
   493  007F8F  72                 	db	114	;'r'
   494  007F90  6F                 	db	111	;'o'
   495  007F91  72                 	db	114	;'r'
   496  007F92  00                 	db	0
   497  007F93                     STR_14:
   498                           
   499                           ; BSR set to: 14
   500  007F93  30                 	db	48	;'0'
   501  007F94  31                 	db	49	;'1'
   502  007F95  32                 	db	50	;'2'
   503  007F96  33                 	db	51	;'3'
   504  007F97  34                 	db	52	;'4'
   505  007F98  35                 	db	53	;'5'
   506  007F99  36                 	db	54	;'6'
   507  007F9A  37                 	db	55	;'7'
   508  007F9B  38                 	db	56	;'8'
   509  007F9C  39                 	db	57	;'9'
   510  007F9D  41                 	db	65	;'A'
   511  007F9E  42                 	db	66	;'B'
   512  007F9F  43                 	db	67	;'C'
   513  007FA0  44                 	db	68	;'D'
   514  007FA1  45                 	db	69	;'E'
   515  007FA2  46                 	db	70	;'F'
   516  007FA3  00                 	db	0
   517  007FA4                     STR_1:
   518                           
   519                           ; BSR set to: 14
   520  007FA4  52                 	db	82	;'R'
   521  007FA5  45                 	db	69	;'E'
   522  007FA6  47                 	db	71	;'G'
   523  007FA7  5F                 	db	95	;'_'
   524  007FA8  4F                 	db	79	;'O'
   525  007FA9  50                 	db	80	;'P'
   526  007FAA  5F                 	db	95	;'_'
   527  007FAB  4D                 	db	77	;'M'
   528  007FAC  4F                 	db	79	;'O'
   529  007FAD  44                 	db	68	;'D'
   530  007FAE  45                 	db	69	;'E'
   531  007FAF  20                 	db	32
   532  007FB0  3D                 	db	61	;'='
   533  007FB1  20                 	db	32
   534  007FB2  30                 	db	48	;'0'
   535  007FB3  78                 	db	120	;'x'
   536  007FB4  00                 	db	0
   537  007FB5                     STR_26:
   538                           
   539                           ; BSR set to: 14
   540  007FB5  72                 	db	114	;'r'
   541  007FB6  65                 	db	101	;'e'
   542  007FB7  63                 	db	99	;'c'
   543  007FB8  65                 	db	101	;'e'
   544  007FB9  69                 	db	105	;'i'
   545  007FBA  76                 	db	118	;'v'
   546  007FBB  65                 	db	101	;'e'
   547  007FBC  64                 	db	100	;'d'
   548  007FBD  20                 	db	32
   549  007FBE  64                 	db	100	;'d'
   550  007FBF  61                 	db	97	;'a'
   551  007FC0  74                 	db	116	;'t'
   552  007FC1  61                 	db	97	;'a'
   553  007FC2  3A                 	db	58	;':'
   554  007FC3  20                 	db	32
   555  007FC4  00                 	db	0
   556  007FC5                     STR_7:
   557                           
   558                           ; BSR set to: 14
   559  007FC5  73                 	db	115	;'s'
   560  007FC6  74                 	db	116	;'t'
   561  007FC7  61                 	db	97	;'a'
   562  007FC8  6E                 	db	110	;'n'
   563  007FC9  64                 	db	100	;'d'
   564  007FCA  62                 	db	98	;'b'
   565  007FCB  79                 	db	121	;'y'
   566  007FCC  20                 	db	32
   567  007FCD  6D                 	db	109	;'m'
   568  007FCE  6F                 	db	111	;'o'
   569  007FCF  64                 	db	100	;'d'
   570  007FD0  65                 	db	101	;'e'
   571  007FD1  00                 	db	0
   572  007FD2                     STR_3:
   573                           
   574                           ; BSR set to: 14
   575  007FD2  6D                 	db	109	;'m'
   576  007FD3  6F                 	db	111	;'o'
   577  007FD4  64                 	db	100	;'d'
   578  007FD5  65                 	db	101	;'e'
   579  007FD6  20                 	db	32
   580  007FD7  3D                 	db	61	;'='
   581  007FD8  20                 	db	32
   582  007FD9  4C                 	db	76	;'L'
   583  007FDA  6F                 	db	111	;'o'
   584  007FDB  52                 	db	82	;'R'
   585  007FDC  61                 	db	97	;'a'
   586  007FDD  00                 	db	0
   587  007FDE                     STR_5:
   588                           
   589                           ; BSR set to: 14
   590  007FDE  6D                 	db	109	;'m'
   591  007FDF  6F                 	db	111	;'o'
   592  007FE0  64                 	db	100	;'d'
   593  007FE1  65                 	db	101	;'e'
   594  007FE2  20                 	db	32
   595  007FE3  3D                 	db	61	;'='
   596  007FE4  20                 	db	32
   597  007FE5  46                 	db	70	;'F'
   598  007FE6  53                 	db	83	;'S'
   599  007FE7  4B                 	db	75	;'K'
   600  007FE8  00                 	db	0
   601  007FE9                     STR_6:
   602                           
   603                           ; BSR set to: 14
   604  007FE9  73                 	db	115	;'s'
   605  007FEA  6C                 	db	108	;'l'
   606  007FEB  65                 	db	101	;'e'
   607  007FEC  65                 	db	101	;'e'
   608  007FED  70                 	db	112	;'p'
   609  007FEE  20                 	db	32
   610  007FEF  6D                 	db	109	;'m'
   611  007FF0  6F                 	db	111	;'o'
   612  007FF1  64                 	db	100	;'d'
   613  007FF2  65                 	db	101	;'e'
   614  007FF3  00                 	db	0
   615  007FF4                     STR_9:
   616                           
   617                           ; BSR set to: 14
   618  007FF4  54                 	db	84	;'T'
   619  007FF5  58                 	db	88	;'X'
   620  007FF6  20                 	db	32
   621  007FF7  6D                 	db	109	;'m'
   622  007FF8  6F                 	db	111	;'o'
   623  007FF9  64                 	db	100	;'d'
   624  007FFA  65                 	db	101	;'e'
   625  007FFB  00                 	db	0
   626  007FFC                     
   627                           ; BSR set to: 14
   628  007FFC  25                 	db	37
   629  007FFD  00                 	db	0
   630  007FFE  00                 	db	0	; dummy byte at the end
   631  0000                     
   632                           ; #config settings
   633                           
   634                           	psect	cinit
   635  007566                     __pcinit:
   636                           	callstack 0
   637  007566                     start_initialization:
   638                           	callstack 0
   639  007566                     __initialization:
   640                           	callstack 0
   641                           
   642                           ; Initialize objects allocated to COMRAM (9 bytes)
   643                           ; load TBLPTR registers with __pidataCOMRAM
   644  007566  0E5B               	movlw	low __pidataCOMRAM
   645  007568  6EF6               	movwf	tblptrl,c
   646  00756A  0E74               	movlw	high __pidataCOMRAM
   647  00756C  6EF7               	movwf	tblptrh,c
   648  00756E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   649  007570  6EF8               	movwf	tblptru,c
   650  007572  EE00  F043         	lfsr	0,__pdataCOMRAM
   651  007576  EE10 F009          	lfsr	1,9
   652  00757A                     copy_data0:
   653  00757A  0009               	tblrd		*+
   654  00757C  CFF5 FFEE          	movff	tablat,postinc0
   655  007580  50E5               	movf	postdec1,w,c
   656  007582  50E1               	movf	fsr1l,w,c
   657  007584  E1FA               	bnz	copy_data0
   658  007586                     end_of_initialization:
   659                           	callstack 0
   660  007586                     __end_of__initialization:
   661                           	callstack 0
   662  007586  0E00               	movlw	low (__Lmediumconst shr (0+16))
   663  007588  6EF8               	movwf	tblptru,c
   664  00758A  0100               	movlb	0
   665  00758C  EF55  F03E         	goto	_main	;jump to C main() function
   666                           
   667                           	psect	dataCOMRAM
   668  000043                     __pdataCOMRAM:
   669                           	callstack 0
   670  000043                     main@F9592:
   671                           	callstack 0
   672  000043                     	ds	9
   673                           
   674                           	psect	cstackCOMRAM
   675  000001                     __pcstackCOMRAM:
   676                           	callstack 0
   677  000001                     ??_ResetRFModule:
   678  000001                     ??_AntennaTX:
   679  000001                     ??_AntennaRX:
   680  000001                     SPITransfer@data_out:
   681                           	callstack 0
   682  000001                     SPIReceive@data_out:
   683                           	callstack 0
   684  000001                     UARTWriteByte@data:
   685                           	callstack 0
   686  000001                     UARTInit@baudRate:
   687                           	callstack 0
   688                           
   689                           ; 2 bytes @ 0x0
   690  000001                     	ds	1
   691  000002                     SPIReceive@data_in:
   692                           	callstack 0
   693  000002                     UARTWriteStr@string:
   694                           	callstack 0
   695  000002                     UARTWriteStrLn@string:
   696                           	callstack 0
   697  000002                     UARTWriteByteHex@data:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0x1
   701  000002                     	ds	1
   702  000003                     ReadSXRegister@RegValue:
   703                           	callstack 0
   704                           
   705                           ; 1 bytes @ 0x2
   706  000003                     	ds	1
   707  000004                     ??_UARTWriteStr:
   708  000004                     ??_UARTWriteByteHex:
   709  000004                     ??_UARTWriteStrLn:
   710  000004                     ReadSXRegister@address:
   711                           	callstack 0
   712                           
   713                           ; 1 bytes @ 0x3
   714  000004                     	ds	1
   715  000005                     WriteSXRegister@data:
   716                           	callstack 0
   717                           
   718                           ; 1 bytes @ 0x4
   719  000005                     	ds	1
   720  000006                     WriteSXRegister@address:
   721                           	callstack 0
   722  000006                     UARTWriteStr@i:
   723                           	callstack 0
   724  000006                     UARTWriteStrLn@i:
   725                           	callstack 0
   726                           
   727                           ; 1 bytes @ 0x5
   728  000006                     	ds	1
   729  000007                     
   730                           ; 1 bytes @ 0x6
   731  000007                     	ds	2
   732  000009                     UARTWriteByteHex@hexa:
   733                           	callstack 0
   734                           
   735                           ; 2 bytes @ 0x8
   736  000009                     	ds	2
   737  00000B                     ??_GetMode:
   738  00000B                     Transmit@data:
   739                           	callstack 0
   740  00000B                     Receive@data:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0xA
   744  00000B                     	ds	2
   745  00000D                     ??_Receive:
   746  00000D                     GetMode@masked_reg:
   747                           	callstack 0
   748  00000D                     Transmit@data_long:
   749                           	callstack 0
   750                           
   751                           ; 1 bytes @ 0xC
   752  00000D                     	ds	1
   753  00000E                     ??_Transmit:
   754  00000E                     GetMode@reg:
   755                           	callstack 0
   756  00000E                     Receive@RXNumberOfBytes:
   757                           	callstack 0
   758                           
   759                           ; 1 bytes @ 0xD
   760  00000E                     	ds	1
   761  00000F                     Transmit@reg_val:
   762                           	callstack 0
   763  00000F                     Receive@i:
   764                           	callstack 0
   765                           
   766                           ; 1 bytes @ 0xE
   767  00000F                     	ds	1
   768  000010                     Transmit@i:
   769                           	callstack 0
   770  000010                     Receive@reg_val:
   771                           	callstack 0
   772                           
   773                           ; 1 bytes @ 0xF
   774  000010                     	ds	1
   775  000011                     main@argc:
   776                           	callstack 0
   777                           
   778                           ; 2 bytes @ 0x10
   779  000011                     	ds	2
   780  000013                     
   781                           ; 3 bytes @ 0x12
   782  000013                     	ds	3
   783  000016                     ??_main:
   784                           
   785                           ; 1 bytes @ 0x15
   786  000016                     	ds	3
   787  000019                     main@rxMsg:
   788                           	callstack 0
   789                           
   790                           ; 30 bytes @ 0x18
   791  000019                     	ds	30
   792  000037                     main@txMsg:
   793                           	callstack 0
   794                           
   795                           ; 9 bytes @ 0x36
   796  000037                     	ds	9
   797  000040                     main@RXNumberOfBytes:
   798                           	callstack 0
   799                           
   800                           ; 1 bytes @ 0x3F
   801  000040                     	ds	1
   802  000041                     main@i:
   803                           	callstack 0
   804                           
   805                           ; 1 bytes @ 0x40
   806  000041                     	ds	1
   807  000042                     main@i_1044:
   808                           	callstack 0
   809                           
   810                           ; 1 bytes @ 0x41
   811  000042                     	ds	1
   812                           
   813 ;;
   814 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   815 ;;
   816 ;; *************** function _main *****************
   817 ;; Defined at:
   818 ;;		line 104 in file "main.c"
   819 ;; Parameters:    Size  Location     Type
   820 ;;  argc            2   16[COMRAM] int 
   821 ;;  argv            3   18[COMRAM] PTR PTR unsigned char 
   822 ;; Auto vars:     Size  Location     Type
   823 ;;  i               1   65[COMRAM] unsigned char 
   824 ;;  i               1   64[COMRAM] unsigned char 
   825 ;;  rxMsg          30   24[COMRAM] unsigned char [30]
   826 ;;  txMsg           9   54[COMRAM] unsigned char [9]
   827 ;;  RXNumberOfBy    1   63[COMRAM] unsigned char 
   828 ;; Return value:  Size  Location     Type
   829 ;;                  2   16[COMRAM] int 
   830 ;; Registers used:
   831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   837 ;;      Params:         5       0       0       0       0       0       0       0       0
   838 ;;      Locals:        42       0       0       0       0       0       0       0       0
   839 ;;      Temps:          3       0       0       0       0       0       0       0       0
   840 ;;      Totals:        50       0       0       0       0       0       0       0       0
   841 ;;Total ram usage:       50 bytes
   842 ;; Hardware stack levels required when called: 3
   843 ;; This function calls:
   844 ;;		_GetMode
   845 ;;		_InitModule
   846 ;;		_InitRFLoRaPins
   847 ;;		_ReadSXRegister
   848 ;;		_Receive
   849 ;;		_ResetRFModule
   850 ;;		_SPIInit
   851 ;;		_Transmit
   852 ;;		_UARTInit
   853 ;;		_UARTWriteStrLn
   854 ;;		_WriteSXRegister
   855 ;;		_initVoltmeter
   856 ;; This function is called by:
   857 ;;		Startup code after reset
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861                           	psect	text0
   862  007CAA                     __ptext0:
   863                           	callstack 0
   864  007CAA                     _main:
   865                           	callstack 28
   866  007CAA                     
   867                           ;main.c: 106:     _delay((unsigned long)((2500)*(1000000UL/4000.0)));
   868  007CAA  0E04               	movlw	4
   869  007CAC  6E17               	movwf	(??_main+1)^0,c
   870  007CAE  0E2C               	movlw	44
   871  007CB0  6E16               	movwf	??_main^0,c
   872  007CB2  0EAC               	movlw	172
   873  007CB4                     u547:
   874  007CB4  2EE8               	decfsz	wreg,f,c
   875  007CB6  D7FE               	bra	u547
   876  007CB8  2E16               	decfsz	??_main^0,f,c
   877  007CBA  D7FC               	bra	u547
   878  007CBC  2E17               	decfsz	(??_main+1)^0,f,c
   879  007CBE  D7FA               	bra	u547
   880  007CC0                     
   881                           ;main.c: 107:     SPIInit();
   882  007CC0  ECC8  F03A         	call	_SPIInit	;wreg free
   883  007CC4                     
   884                           ;main.c: 108:     initVoltmeter();
   885  007CC4  EC59  F03A         	call	_initVoltmeter	;wreg free
   886  007CC8                     
   887                           ;main.c: 109:     InitRFLoRaPins();
   888  007CC8  EC32  F03A         	call	_InitRFLoRaPins	;wreg free
   889                           
   890                           ;main.c: 110:     ResetRFModule();
   891  007CCC  EC9F  F03A         	call	_ResetRFModule	;wreg free
   892  007CD0                     
   893                           ;main.c: 111:     UARTInit(19200);
   894  007CD0  0E4B               	movlw	75
   895  007CD2  6E02               	movwf	(UARTInit@baudRate+1)^0,c
   896  007CD4  0E00               	movlw	0
   897  007CD6  6E01               	movwf	UARTInit@baudRate^0,c
   898  007CD8  ECE4  F03A         	call	_UARTInit	;wreg free
   899  007CDC                     
   900                           ;main.c: 113:     _delay((unsigned long)((1)*(1000000UL/4000.0)));
   901  007CDC  0E53               	movlw	83
   902  007CDE                     u557:
   903  007CDE  2EE8               	decfsz	wreg,f,c
   904  007CE0  D7FE               	bra	u557
   905  007CE2  F000               	nop	
   906  007CE4                     
   907                           ;main.c: 114:     _delay((unsigned long)((1)*(1000000UL/4000.0)));
   908  007CE4  0E53               	movlw	83
   909  007CE6                     u567:
   910  007CE6  2EE8               	decfsz	wreg,f,c
   911  007CE8  D7FE               	bra	u567
   912  007CEA  F000               	nop	
   913  007CEC                     
   914                           ;main.c: 115:     _delay((unsigned long)((500)*(1000000UL/4000.0)));
   915  007CEC  0EA3               	movlw	163
   916  007CEE  6E16               	movwf	??_main^0,c
   917  007CF0  0E55               	movlw	85
   918  007CF2                     u577:
   919  007CF2  2EE8               	decfsz	wreg,f,c
   920  007CF4  D7FE               	bra	u577
   921  007CF6  2E16               	decfsz	??_main^0,f,c
   922  007CF8  D7FC               	bra	u577
   923  007CFA  F000               	nop	
   924  007CFC                     
   925                           ;main.c: 118:     UARTWriteStrLn(" ");
   926  007CFC  0E86               	movlw	low (STR_16+25)
   927  007CFE  6E02               	movwf	UARTWriteStrLn@string^0,c
   928  007D00  0E7E               	movlw	high (STR_16+25)
   929  007D02  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
   930  007D04  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
   931  007D08                     
   932                           ;main.c: 119:     UARTWriteStrLn("set mode to LoRa standby");
   933  007D08  0EA3               	movlw	low STR_30
   934  007D0A  6E02               	movwf	UARTWriteStrLn@string^0,c
   935  007D0C  0E7E               	movlw	high STR_30
   936  007D0E  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
   937  007D10  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
   938  007D14                     
   939                           ;main.c: 121:     WriteSXRegister(0x01, 0x00);
   940  007D14  0E00               	movlw	0
   941  007D16  6E05               	movwf	WriteSXRegister@data^0,c
   942  007D18  0E01               	movlw	1
   943  007D1A  EC64  F03A         	call	_WriteSXRegister
   944  007D1E                     
   945                           ;main.c: 122:     WriteSXRegister(0x01, 0x80);
   946  007D1E  0E80               	movlw	128
   947  007D20  6E05               	movwf	WriteSXRegister@data^0,c
   948  007D22  0E01               	movlw	1
   949  007D24  EC64  F03A         	call	_WriteSXRegister
   950  007D28                     
   951                           ;main.c: 123:     WriteSXRegister(0x01, 0x81);
   952  007D28  0E81               	movlw	129
   953  007D2A  6E05               	movwf	WriteSXRegister@data^0,c
   954  007D2C  0E01               	movlw	1
   955  007D2E  EC64  F03A         	call	_WriteSXRegister
   956  007D32                     
   957                           ;main.c: 124:     _delay((unsigned long)((100)*(1000000UL/4000.0)));
   958  007D32  0E21               	movlw	33
   959  007D34  6E16               	movwf	??_main^0,c
   960  007D36  0E76               	movlw	118
   961  007D38                     u587:
   962  007D38  2EE8               	decfsz	wreg,f,c
   963  007D3A  D7FE               	bra	u587
   964  007D3C  2E16               	decfsz	??_main^0,f,c
   965  007D3E  D7FC               	bra	u587
   966  007D40  D000               	nop2	
   967  007D42                     
   968                           ;main.c: 125:     GetMode();
   969  007D42  ECE7  F03C         	call	_GetMode	;wreg free
   970  007D46                     
   971                           ;main.c: 128:     UARTWriteStrLn("initialize module");
   972  007D46  0E5D               	movlw	low STR_31
   973  007D48  6E02               	movwf	UARTWriteStrLn@string^0,c
   974  007D4A  0E7F               	movlw	high STR_31
   975  007D4C  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
   976  007D4E  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
   977  007D52                     
   978                           ;main.c: 129:     InitModule();
   979  007D52  ECE6  F03B         	call	_InitModule	;wreg free
   980  007D56                     
   981                           ;main.c: 141:     uint8_t RXNumberOfBytes;;main.c: 142:     uint8_t rxMsg[30];;main.c: 1
      +                          43:     uint8_t txMsg[] = { 0xAD, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
   982  007D56  EE20  F043         	lfsr	2,main@F9592
   983  007D5A  EE10  F037         	lfsr	1,main@txMsg
   984  007D5E  0E08               	movlw	8
   985  007D60                     u501:
   986  007D60  CFDB FFE3          	movff	plusw2,plusw1
   987  007D64  06E8               	decf	wreg,f,c
   988  007D66  E2FC               	bc	u501
   989  007D68                     
   990                           ;main.c: 144:     RXNumberOfBytes = ReadSXRegister(0x13);
   991  007D68  0E13               	movlw	19
   992  007D6A  EC7F  F03A         	call	_ReadSXRegister
   993  007D6E  6E40               	movwf	main@RXNumberOfBytes^0,c
   994  007D70                     l1762:
   995                           
   996                           ;main.c: 148:         Receive(rxMsg);
   997  007D70  0E19               	movlw	low main@rxMsg
   998  007D72  6E0B               	movwf	Receive@data^0,c
   999  007D74  0E00               	movlw	high main@rxMsg
  1000  007D76  6E0C               	movwf	(Receive@data+1)^0,c
  1001  007D78  EC9B  F03D         	call	_Receive	;wreg free
  1002  007D7C                     
  1003                           ;main.c: 150:         if(rxMsg[2] == 0x02){
  1004  007D7C  0E02               	movlw	2
  1005  007D7E  181B               	xorwf	(main@rxMsg+2)^0,w,c
  1006  007D80  A4D8               	btfss	status,2,c
  1007  007D82  EFC5  F03E         	goto	u511
  1008  007D86  EFC7  F03E         	goto	u510
  1009  007D8A                     u511:
  1010  007D8A  EFF0  F03E         	goto	l1774
  1011  007D8E                     u510:
  1012  007D8E                     
  1013                           ;main.c: 151:             for (uint8_t i = 0; i < argc; i++) {
  1014  007D8E  0E00               	movlw	0
  1015  007D90  6E41               	movwf	main@i^0,c
  1016  007D92  EFDA  F03E         	goto	l1772
  1017  007D96                     l1768:
  1018                           
  1019                           ;main.c: 152:                 txMsg[i] = rxMsg[i];
  1020  007D96  0E19               	movlw	low main@rxMsg
  1021  007D98  2441               	addwf	main@i^0,w,c
  1022  007D9A  6ED9               	movwf	fsr2l,c
  1023  007D9C  6ADA               	clrf	fsr2h,c
  1024  007D9E  0E00               	movlw	high main@rxMsg
  1025  007DA0  22DA               	addwfc	fsr2h,f,c
  1026  007DA2  0E37               	movlw	low main@txMsg
  1027  007DA4  2441               	addwf	main@i^0,w,c
  1028  007DA6  6EE1               	movwf	fsr1l,c
  1029  007DA8  6AE2               	clrf	fsr1h,c
  1030  007DAA  0E00               	movlw	high main@txMsg
  1031  007DAC  22E2               	addwfc	fsr1h,f,c
  1032  007DAE  CFDF FFE7          	movff	indf2,indf1
  1033  007DB2                     
  1034                           ;main.c: 153:             }
  1035  007DB2  2A41               	incf	main@i^0,f,c
  1036  007DB4                     l1772:
  1037  007DB4  5041               	movf	main@i^0,w,c
  1038  007DB6  6E16               	movwf	??_main^0,c
  1039  007DB8  6A17               	clrf	(??_main+1)^0,c
  1040  007DBA  5011               	movf	main@argc^0,w,c
  1041  007DBC  5C16               	subwf	??_main^0,w,c
  1042  007DBE  5017               	movf	(??_main+1)^0,w,c
  1043  007DC0  0A80               	xorlw	128
  1044  007DC2  6E18               	movwf	(??_main+2)^0,c
  1045  007DC4  5012               	movf	(main@argc+1)^0,w,c
  1046  007DC6  0A80               	xorlw	128
  1047  007DC8  5818               	subwfb	(??_main+2)^0,w,c
  1048  007DCA  A0D8               	btfss	status,0,c
  1049  007DCC  EFEA  F03E         	goto	u521
  1050  007DD0  EFEC  F03E         	goto	u520
  1051  007DD4                     u521:
  1052  007DD4  EFCB  F03E         	goto	l1768
  1053  007DD8                     u520:
  1054  007DD8                     
  1055                           ;main.c: 154:             txMsg[2] = rxMsg[3];
  1056  007DD8  C01C  F039         	movff	main@rxMsg+3,main@txMsg+2
  1057                           
  1058                           ;main.c: 155:         }
  1059  007DDC  EFB8  F03E         	goto	l1762
  1060  007DE0                     l1774:
  1061                           
  1062                           ;main.c: 158:             for (uint8_t i = 0; i < argc; i++) {
  1063  007DE0  0E00               	movlw	0
  1064  007DE2  6E42               	movwf	main@i_1044^0,c
  1065  007DE4  EF03  F03F         	goto	l1780
  1066  007DE8                     l1776:
  1067                           
  1068                           ;main.c: 159:                 txMsg[i] = rxMsg[i];
  1069  007DE8  0E19               	movlw	low main@rxMsg
  1070  007DEA  2442               	addwf	main@i_1044^0,w,c
  1071  007DEC  6ED9               	movwf	fsr2l,c
  1072  007DEE  6ADA               	clrf	fsr2h,c
  1073  007DF0  0E00               	movlw	high main@rxMsg
  1074  007DF2  22DA               	addwfc	fsr2h,f,c
  1075  007DF4  0E37               	movlw	low main@txMsg
  1076  007DF6  2442               	addwf	main@i_1044^0,w,c
  1077  007DF8  6EE1               	movwf	fsr1l,c
  1078  007DFA  6AE2               	clrf	fsr1h,c
  1079  007DFC  0E00               	movlw	high main@txMsg
  1080  007DFE  22E2               	addwfc	fsr1h,f,c
  1081  007E00  CFDF FFE7          	movff	indf2,indf1
  1082  007E04                     
  1083                           ;main.c: 160:             }
  1084  007E04  2A42               	incf	main@i_1044^0,f,c
  1085  007E06                     l1780:
  1086  007E06  5042               	movf	main@i_1044^0,w,c
  1087  007E08  6E16               	movwf	??_main^0,c
  1088  007E0A  6A17               	clrf	(??_main+1)^0,c
  1089  007E0C  5011               	movf	main@argc^0,w,c
  1090  007E0E  5C16               	subwf	??_main^0,w,c
  1091  007E10  5017               	movf	(??_main+1)^0,w,c
  1092  007E12  0A80               	xorlw	128
  1093  007E14  6E18               	movwf	(??_main+2)^0,c
  1094  007E16  5012               	movf	(main@argc+1)^0,w,c
  1095  007E18  0A80               	xorlw	128
  1096  007E1A  5818               	subwfb	(??_main+2)^0,w,c
  1097  007E1C  A0D8               	btfss	status,0,c
  1098  007E1E  EF13  F03F         	goto	u531
  1099  007E22  EF15  F03F         	goto	u530
  1100  007E26                     u531:
  1101  007E26  EFF4  F03E         	goto	l1776
  1102  007E2A                     u530:
  1103  007E2A                     
  1104                           ;main.c: 161:              txMsg[4] = 0x04;
  1105  007E2A  0E04               	movlw	4
  1106  007E2C  6E3B               	movwf	(main@txMsg+4)^0,c
  1107  007E2E                     
  1108                           ;main.c: 162:              Transmit(txMsg, RXNumberOfBytes);
  1109  007E2E  0E37               	movlw	low main@txMsg
  1110  007E30  6E0B               	movwf	Transmit@data^0,c
  1111  007E32  0E00               	movlw	high main@txMsg
  1112  007E34  6E0C               	movwf	(Transmit@data+1)^0,c
  1113  007E36  C040  F00D         	movff	main@RXNumberOfBytes,Transmit@data_long
  1114  007E3A  EC5F  F03C         	call	_Transmit	;wreg free
  1115  007E3E  EFB8  F03E         	goto	l1762
  1116  007E42  EF00  F000         	goto	start
  1117  007E46                     __end_of_main:
  1118                           	callstack 0
  1119                           
  1120 ;; *************** function _initVoltmeter *****************
  1121 ;; Defined at:
  1122 ;;		line 15 in file "voltmeter.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;		None
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;		None
  1127 ;; Return value:  Size  Location     Type
  1128 ;;                  1    wreg      void 
  1129 ;; Registers used:
  1130 ;;		wreg, status,2
  1131 ;; Tracked objects:
  1132 ;;		On entry : 0/0
  1133 ;;		On exit  : 0/0
  1134 ;;		Unchanged: 0/0
  1135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1136 ;;      Params:         0       0       0       0       0       0       0       0       0
  1137 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1139 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1140 ;;Total ram usage:        0 bytes
  1141 ;; Hardware stack levels used: 1
  1142 ;; This function calls:
  1143 ;;		Nothing
  1144 ;; This function is called by:
  1145 ;;		_main
  1146 ;; This function uses a non-reentrant model
  1147 ;;
  1148                           
  1149                           	psect	text1
  1150  0074B2                     __ptext1:
  1151                           	callstack 0
  1152  0074B2                     _initVoltmeter:
  1153                           	callstack 30
  1154  0074B2                     
  1155                           ;voltmeter.c: 36:     ADCLK = 0b00011111;
  1156  0074B2  0E1F               	movlw	31
  1157  0074B4  010F               	movlb	15	; () banked
  1158  0074B6  6F57               	movwf	87,b	;volatile
  1159                           
  1160                           ;voltmeter.c: 37:     ADPCH = 0b00000011;
  1161  0074B8  0E03               	movlw	3
  1162  0074BA  6F5F               	movwf	95,b	;volatile
  1163                           
  1164                           ;voltmeter.c: 38:     ADACQ = 0x014;
  1165  0074BC  0E14               	movlw	20
  1166  0074BE  6F5C               	movwf	92,b	;volatile
  1167  0074C0                     
  1168                           ; BSR set to: 15
  1169                           ;voltmeter.c: 39:     ADCON0bits.ADON = 1;
  1170  0074C0  8E60               	bsf	96,7,c	;volatile
  1171  0074C2                     
  1172                           ; BSR set to: 15
  1173                           ;voltmeter.c: 41:     TRISAbits.TRISA3 = 1;
  1174  0074C2  8688               	bsf	136,3,c	;volatile
  1175  0074C4                     
  1176                           ; BSR set to: 15
  1177                           ;voltmeter.c: 42:     ANSELAbits.ANSELA3 = 1;
  1178  0074C4  8711               	bsf	17,3,b	;volatile
  1179  0074C6                     
  1180                           ; BSR set to: 15
  1181  0074C6  0012               	return		;funcret
  1182  0074C8                     __end_of_initVoltmeter:
  1183                           	callstack 0
  1184                           
  1185 ;; *************** function _UARTInit *****************
  1186 ;; Defined at:
  1187 ;;		line 16 in file "uart.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;  baudRate        2    0[COMRAM] unsigned short 
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;		None
  1192 ;; Return value:  Size  Location     Type
  1193 ;;                  1    wreg      void 
  1194 ;; Registers used:
  1195 ;;		wreg, status,2
  1196 ;; Tracked objects:
  1197 ;;		On entry : 0/0
  1198 ;;		On exit  : 0/0
  1199 ;;		Unchanged: 0/0
  1200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1201 ;;      Params:         2       0       0       0       0       0       0       0       0
  1202 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1203 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1204 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1205 ;;Total ram usage:        2 bytes
  1206 ;; Hardware stack levels used: 1
  1207 ;; This function calls:
  1208 ;;		Nothing
  1209 ;; This function is called by:
  1210 ;;		_main
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214                           	psect	text2
  1215  0075C8                     __ptext2:
  1216                           	callstack 0
  1217  0075C8                     _UARTInit:
  1218                           	callstack 30
  1219  0075C8                     
  1220                           ;uart.c: 19:     TRISCbits.TRISC6 = 1;
  1221  0075C8  8C8A               	bsf	138,6,c	;volatile
  1222                           
  1223                           ;uart.c: 20:     TRISCbits.TRISC7 = 1;
  1224  0075CA  8E8A               	bsf	138,7,c	;volatile
  1225                           
  1226                           ;uart.c: 21:     ANSELCbits.ANSELC7 = 0;
  1227  0075CC  010F               	movlb	15	; () banked
  1228  0075CE  9F21               	bcf	33,7,b	;volatile
  1229                           
  1230                           ;uart.c: 23:     TRISAbits.TRISA0 = 0;
  1231  0075D0  9088               	bcf	136,0,c	;volatile
  1232                           
  1233                           ;uart.c: 24:     LATAbits.LATA0 = 0;
  1234  0075D2  9083               	bcf	131,0,c	;volatile
  1235  0075D4                     
  1236                           ; BSR set to: 15
  1237                           ;uart.c: 27:     TX1STA = 0;
  1238  0075D4  0E00               	movlw	0
  1239  0075D6  6E9E               	movwf	158,c	;volatile
  1240                           
  1241                           ;uart.c: 28:     RC1STA = 0;
  1242  0075D8  0E00               	movlw	0
  1243  0075DA  6E9D               	movwf	157,c	;volatile
  1244                           
  1245                           ;uart.c: 29:     RC6PPS = 0x09;
  1246  0075DC  0E09               	movlw	9
  1247  0075DE  010E               	movlb	14	; () banked
  1248  0075E0  6FFD               	movwf	253,b	;volatile
  1249  0075E2                     
  1250                           ; BSR set to: 14
  1251                           ;uart.c: 31:     TX1STAbits.SYNC = 0;
  1252  0075E2  989E               	bcf	158,4,c	;volatile
  1253  0075E4                     
  1254                           ; BSR set to: 14
  1255                           ;uart.c: 32:     TX1STAbits.TX9 = 0;
  1256  0075E4  9C9E               	bcf	158,6,c	;volatile
  1257  0075E6                     
  1258                           ; BSR set to: 14
  1259                           ;uart.c: 33:     RC1STAbits.RX9 = 0;
  1260  0075E6  9C9D               	bcf	157,6,c	;volatile
  1261  0075E8                     
  1262                           ; BSR set to: 14
  1263                           ;uart.c: 34:     RC1STAbits.CREN = 1;
  1264  0075E8  889D               	bsf	157,4,c	;volatile
  1265  0075EA                     
  1266                           ; BSR set to: 14
  1267                           ;uart.c: 35:     RC1STAbits.ADDEN = 0;
  1268  0075EA  969D               	bcf	157,3,c	;volatile
  1269  0075EC                     
  1270                           ; BSR set to: 14
  1271                           ;uart.c: 37:     PIE3bits.RC1IE = 1;
  1272  0075EC  8BC5               	bsf	197,5,b	;volatile
  1273  0075EE                     
  1274                           ; BSR set to: 14
  1275                           ;uart.c: 38:     PIE3bits.TX1IE = 0;
  1276  0075EE  99C5               	bcf	197,4,b	;volatile
  1277  0075F0                     
  1278                           ; BSR set to: 14
  1279                           ;uart.c: 40:     TX1STAbits.BRGH = 1;
  1280  0075F0  849E               	bsf	158,2,c	;volatile
  1281  0075F2                     
  1282                           ; BSR set to: 14
  1283                           ;uart.c: 41:     BAUD1CONbits.BRG16 = 1;
  1284  0075F2  869F               	bsf	159,3,c	;volatile
  1285                           
  1286                           ;uart.c: 45:     SP1BRG = 12;
  1287  0075F4  0E00               	movlw	0
  1288  0075F6  6E9C               	movwf	156,c	;volatile
  1289  0075F8  0E0C               	movlw	12
  1290  0075FA  6E9B               	movwf	155,c	;volatile
  1291                           
  1292                           ;uart.c: 46:     SP1BRGH = 0;
  1293  0075FC  0E00               	movlw	0
  1294  0075FE  6E9C               	movwf	156,c	;volatile
  1295  007600                     
  1296                           ; BSR set to: 14
  1297                           ;uart.c: 50:     TX1STAbits.TXEN = 1;
  1298  007600  8A9E               	bsf	158,5,c	;volatile
  1299  007602                     
  1300                           ; BSR set to: 14
  1301                           ;uart.c: 51:     RC1STAbits.SPEN = 1;
  1302  007602  8E9D               	bsf	157,7,c	;volatile
  1303  007604                     
  1304                           ; BSR set to: 14
  1305                           ;uart.c: 53:     PIR3bits.RC1IF = 0;
  1306  007604  9BCD               	bcf	205,5,b	;volatile
  1307  007606                     
  1308                           ; BSR set to: 14
  1309                           ;uart.c: 55:     PIE3bits.RC1IE = 1;
  1310  007606  8BC5               	bsf	197,5,b	;volatile
  1311  007608                     
  1312                           ; BSR set to: 14
  1313                           ;uart.c: 56:     INTCONbits.PEIE = 1;
  1314  007608  8CF2               	bsf	242,6,c	;volatile
  1315  00760A                     
  1316                           ; BSR set to: 14
  1317  00760A  0012               	return		;funcret
  1318  00760C                     __end_of_UARTInit:
  1319                           	callstack 0
  1320                           
  1321 ;; *************** function _Transmit *****************
  1322 ;; Defined at:
  1323 ;;		line 16 in file "sendRecept.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  data            2   10[COMRAM] PTR const unsigned char 
  1326 ;;		 -> main@txMsg(9), 
  1327 ;;  data_long       1   12[COMRAM] const unsigned char 
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;  i               1   15[COMRAM] unsigned char 
  1330 ;;  reg_val         1   14[COMRAM] unsigned char 
  1331 ;; Return value:  Size  Location     Type
  1332 ;;                  1    wreg      void 
  1333 ;; Registers used:
  1334 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1340 ;;      Params:         3       0       0       0       0       0       0       0       0
  1341 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1342 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1343 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1344 ;;Total ram usage:        6 bytes
  1345 ;; Hardware stack levels used: 1
  1346 ;; Hardware stack levels required when called: 2
  1347 ;; This function calls:
  1348 ;;		_AntennaTX
  1349 ;;		_ReadSXRegister
  1350 ;;		_UARTWriteByteHex
  1351 ;;		_UARTWriteStr
  1352 ;;		_UARTWriteStrLn
  1353 ;;		_WriteSXRegister
  1354 ;; This function is called by:
  1355 ;;		_main
  1356 ;; This function uses a non-reentrant model
  1357 ;;
  1358                           
  1359                           	psect	text3
  1360  0078BE                     __ptext3:
  1361                           	callstack 0
  1362  0078BE                     _Transmit:
  1363                           	callstack 28
  1364  0078BE                     
  1365                           ;sendRecept.c: 19:     uint8_t reg_val;;sendRecept.c: 20:     uint8_t i;;sendRecept.c: 2
      +                          6:     AntennaTX();
  1366  0078BE  EC4E  F03A         	call	_AntennaTX	;wreg free
  1367  0078C2                     
  1368                           ;sendRecept.c: 31:     WriteSXRegister(0x0D, ReadSXRegister(0x0E));
  1369  0078C2  0E0E               	movlw	14
  1370  0078C4  EC7F  F03A         	call	_ReadSXRegister
  1371  0078C8  6E05               	movwf	WriteSXRegister@data^0,c
  1372  0078CA  0E0D               	movlw	13
  1373  0078CC  EC64  F03A         	call	_WriteSXRegister
  1374  0078D0                     
  1375                           ;sendRecept.c: 32:     WriteSXRegister(0x22, data_long);
  1376  0078D0  C00D  F005         	movff	Transmit@data_long,WriteSXRegister@data
  1377  0078D4  0E22               	movlw	34
  1378  0078D6  EC64  F03A         	call	_WriteSXRegister
  1379  0078DA                     
  1380                           ;sendRecept.c: 34:     for (i = 0; i < data_long; i++) {
  1381  0078DA  0E00               	movlw	0
  1382  0078DC  6E10               	movwf	Transmit@i^0,c
  1383  0078DE  500D               	movf	Transmit@data_long^0,w,c
  1384  0078E0  A4D8               	btfss	status,2,c
  1385  0078E2  EF75  F03C         	goto	u391
  1386  0078E6  EF77  F03C         	goto	u390
  1387  0078EA                     u391:
  1388  0078EA  EF79  F03C         	goto	l1594
  1389  0078EE                     u390:
  1390  0078EE  EF8E  F03C         	goto	l1600
  1391  0078F2                     l1594:
  1392                           
  1393                           ;sendRecept.c: 35:         WriteSXRegister(0x00, data[i]);
  1394  0078F2  5010               	movf	Transmit@i^0,w,c
  1395  0078F4  240B               	addwf	Transmit@data^0,w,c
  1396  0078F6  6ED9               	movwf	fsr2l,c
  1397  0078F8  0E00               	movlw	0
  1398  0078FA  200C               	addwfc	(Transmit@data+1)^0,w,c
  1399  0078FC  6EDA               	movwf	fsr2h,c
  1400  0078FE  50DF               	movf	indf2,w,c
  1401  007900  6E05               	movwf	WriteSXRegister@data^0,c
  1402  007902  0E00               	movlw	0
  1403  007904  EC64  F03A         	call	_WriteSXRegister
  1404  007908                     
  1405                           ;sendRecept.c: 36:     }
  1406  007908  2A10               	incf	Transmit@i^0,f,c
  1407  00790A  500D               	movf	Transmit@data_long^0,w,c
  1408  00790C  5C10               	subwf	Transmit@i^0,w,c
  1409  00790E  A0D8               	btfss	status,0,c
  1410  007910  EF8C  F03C         	goto	u401
  1411  007914  EF8E  F03C         	goto	u400
  1412  007918                     u401:
  1413  007918  EF79  F03C         	goto	l1594
  1414  00791C                     u400:
  1415  00791C                     l1600:
  1416                           
  1417                           ;sendRecept.c: 41:     WriteSXRegister(0x01, 0x83);
  1418  00791C  0E83               	movlw	131
  1419  00791E  6E05               	movwf	WriteSXRegister@data^0,c
  1420  007920  0E01               	movlw	1
  1421  007922  EC64  F03A         	call	_WriteSXRegister
  1422  007926                     
  1423                           ;sendRecept.c: 42:     _delay((unsigned long)((100)*(1000000UL/4000.0)));
  1424  007926  0E21               	movlw	33
  1425  007928  6E0E               	movwf	??_Transmit^0,c
  1426  00792A  0E76               	movlw	118
  1427  00792C                     u597:
  1428  00792C  2EE8               	decfsz	wreg,f,c
  1429  00792E  D7FE               	bra	u597
  1430  007930  2E0E               	decfsz	??_Transmit^0,f,c
  1431  007932  D7FC               	bra	u597
  1432  007934  D000               	nop2	
  1433  007936                     
  1434                           ;sendRecept.c: 46:     reg_val = ReadSXRegister(0x12);
  1435  007936  0E12               	movlw	18
  1436  007938  EC7F  F03A         	call	_ReadSXRegister
  1437  00793C  6E0F               	movwf	Transmit@reg_val^0,c
  1438                           
  1439                           ;sendRecept.c: 47:     while ((reg_val & 0x08) == 0x00) {
  1440  00793E  EFA5  F03C         	goto	l1608
  1441  007942                     l1606:
  1442                           
  1443                           ;sendRecept.c: 48:         reg_val = ReadSXRegister(0x12);
  1444  007942  0E12               	movlw	18
  1445  007944  EC7F  F03A         	call	_ReadSXRegister
  1446  007948  6E0F               	movwf	Transmit@reg_val^0,c
  1447  00794A                     l1608:
  1448                           
  1449                           ;sendRecept.c: 47:     while ((reg_val & 0x08) == 0x00) {
  1450  00794A  A60F               	btfss	Transmit@reg_val^0,3,c
  1451  00794C  EFAA  F03C         	goto	u411
  1452  007950  EFAC  F03C         	goto	u410
  1453  007954                     u411:
  1454  007954  EFA1  F03C         	goto	l1606
  1455  007958                     u410:
  1456  007958                     
  1457                           ;sendRecept.c: 64:     WriteSXRegister(0x12, 0xFF);
  1458  007958  0EFF               	movlw	255
  1459  00795A  6E05               	movwf	WriteSXRegister@data^0,c
  1460  00795C  0E12               	movlw	18
  1461  00795E  EC64  F03A         	call	_WriteSXRegister
  1462  007962                     
  1463                           ;sendRecept.c: 73:     UARTWriteStr("Message envoye : ");
  1464  007962  0E6F               	movlw	low STR_18
  1465  007964  6E02               	movwf	UARTWriteStr@string^0,c
  1466  007966  0E7F               	movlw	high STR_18
  1467  007968  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  1468  00796A  EC34  F03B         	call	_UARTWriteStr	;wreg free
  1469  00796E                     
  1470                           ;sendRecept.c: 74:     for(i = 0; i < data_long; i++) {
  1471  00796E  0E00               	movlw	0
  1472  007970  6E10               	movwf	Transmit@i^0,c
  1473  007972  500D               	movf	Transmit@data_long^0,w,c
  1474  007974  A4D8               	btfss	status,2,c
  1475  007976  EFBF  F03C         	goto	u421
  1476  00797A  EFC1  F03C         	goto	u420
  1477  00797E                     u421:
  1478  00797E  EFC3  F03C         	goto	l1620
  1479  007982                     u420:
  1480  007982  EFE0  F03C         	goto	l1628
  1481  007986                     l1620:
  1482                           
  1483                           ;sendRecept.c: 75:             UARTWriteByteHex(data[i]);
  1484  007986  5010               	movf	Transmit@i^0,w,c
  1485  007988  240B               	addwf	Transmit@data^0,w,c
  1486  00798A  6ED9               	movwf	fsr2l,c
  1487  00798C  0E00               	movlw	0
  1488  00798E  200C               	addwfc	(Transmit@data+1)^0,w,c
  1489  007990  6EDA               	movwf	fsr2h,c
  1490  007992  50DF               	movf	indf2,w,c
  1491  007994  6E0E               	movwf	??_Transmit^0,c
  1492  007996  500E               	movf	??_Transmit^0,w,c
  1493  007998  6E02               	movwf	UARTWriteByteHex@data^0,c
  1494  00799A  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  1495  00799C  EC70  F03B         	call	_UARTWriteByteHex	;wreg free
  1496  0079A0                     
  1497                           ;sendRecept.c: 76:             UARTWriteStr(" ");
  1498  0079A0  0E86               	movlw	low (STR_16+25)
  1499  0079A2  6E02               	movwf	UARTWriteStr@string^0,c
  1500  0079A4  0E7E               	movlw	high (STR_16+25)
  1501  0079A6  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  1502  0079A8  EC34  F03B         	call	_UARTWriteStr	;wreg free
  1503  0079AC                     
  1504                           ;sendRecept.c: 77:     }
  1505  0079AC  2A10               	incf	Transmit@i^0,f,c
  1506  0079AE  500D               	movf	Transmit@data_long^0,w,c
  1507  0079B0  5C10               	subwf	Transmit@i^0,w,c
  1508  0079B2  A0D8               	btfss	status,0,c
  1509  0079B4  EFDE  F03C         	goto	u431
  1510  0079B8  EFE0  F03C         	goto	u430
  1511  0079BC                     u431:
  1512  0079BC  EFC3  F03C         	goto	l1620
  1513  0079C0                     u430:
  1514  0079C0                     l1628:
  1515                           
  1516                           ;sendRecept.c: 78:     UARTWriteStrLn(" ");
  1517  0079C0  0E86               	movlw	low (STR_16+25)
  1518  0079C2  6E02               	movwf	UARTWriteStrLn@string^0,c
  1519  0079C4  0E7E               	movlw	high (STR_16+25)
  1520  0079C6  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1521  0079C8  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  1522  0079CC  0012               	return		;funcret
  1523  0079CE                     __end_of_Transmit:
  1524                           	callstack 0
  1525                           
  1526 ;; *************** function _AntennaTX *****************
  1527 ;; Defined at:
  1528 ;;		line 34 in file "RF_LoRa_868_SO.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;		None
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;		None
  1533 ;; Return value:  Size  Location     Type
  1534 ;;                  1    wreg      void 
  1535 ;; Registers used:
  1536 ;;		wreg
  1537 ;; Tracked objects:
  1538 ;;		On entry : 0/0
  1539 ;;		On exit  : 0/0
  1540 ;;		Unchanged: 0/0
  1541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1542 ;;      Params:         0       0       0       0       0       0       0       0       0
  1543 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1544 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1545 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1546 ;;Total ram usage:        1 bytes
  1547 ;; Hardware stack levels used: 1
  1548 ;; This function calls:
  1549 ;;		Nothing
  1550 ;; This function is called by:
  1551 ;;		_Transmit
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           	psect	text4
  1556  00749C                     __ptext4:
  1557                           	callstack 0
  1558  00749C                     _AntennaTX:
  1559                           	callstack 29
  1560  00749C                     
  1561                           ;RF_LoRa_868_SO.c: 35:     LATBbits.LATB4 = 0;
  1562  00749C  9884               	bcf	132,4,c	;volatile
  1563                           
  1564                           ;RF_LoRa_868_SO.c: 36:     LATBbits.LATB3 = 0;
  1565  00749E  9684               	bcf	132,3,c	;volatile
  1566  0074A0                     
  1567                           ;RF_LoRa_868_SO.c: 37:     _delay((unsigned long)((10)*(1000000UL/4000.0)));
  1568  0074A0  0E04               	movlw	4
  1569  0074A2  6E01               	movwf	??_AntennaTX^0,c
  1570  0074A4  0E3E               	movlw	62
  1571  0074A6                     u607:
  1572  0074A6  2EE8               	decfsz	wreg,f,c
  1573  0074A8  D7FE               	bra	u607
  1574  0074AA  2E01               	decfsz	??_AntennaTX^0,f,c
  1575  0074AC  D7FC               	bra	u607
  1576  0074AE                     
  1577                           ;RF_LoRa_868_SO.c: 38:     LATBbits.LATB3 = 1;
  1578  0074AE  8684               	bsf	132,3,c	;volatile
  1579  0074B0  0012               	return		;funcret
  1580  0074B2                     __end_of_AntennaTX:
  1581                           	callstack 0
  1582                           
  1583 ;; *************** function _SPIInit *****************
  1584 ;; Defined at:
  1585 ;;		line 16 in file "spi.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;		None
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;		None
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  1    wreg      void 
  1592 ;; Registers used:
  1593 ;;		wreg, status,2
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1599 ;;      Params:         0       0       0       0       0       0       0       0       0
  1600 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1601 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1602 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1603 ;;Total ram usage:        0 bytes
  1604 ;; Hardware stack levels used: 1
  1605 ;; This function calls:
  1606 ;;		Nothing
  1607 ;; This function is called by:
  1608 ;;		_main
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612                           	psect	text5
  1613  007590                     __ptext5:
  1614                           	callstack 0
  1615  007590                     _SPIInit:
  1616                           	callstack 30
  1617  007590                     
  1618                           ;spi.c: 18:     TRISCbits.TRISC3 = 0;
  1619  007590  968A               	bcf	138,3,c	;volatile
  1620                           
  1621                           ;spi.c: 19:     ANSELCbits.ANSELC3 = 0;
  1622  007592  010F               	movlb	15	; () banked
  1623  007594  9721               	bcf	33,3,b	;volatile
  1624                           
  1625                           ;spi.c: 20:     TRISCbits.TRISC4 = 1;
  1626  007596  888A               	bsf	138,4,c	;volatile
  1627                           
  1628                           ;spi.c: 21:     ANSELCbits.ANSELC4 = 0;
  1629  007598  9921               	bcf	33,4,b	;volatile
  1630                           
  1631                           ;spi.c: 22:     TRISCbits.TRISC5 = 0;
  1632  00759A  9A8A               	bcf	138,5,c	;volatile
  1633                           
  1634                           ;spi.c: 24:     TRISCbits.TRISC2 = 0;
  1635  00759C  948A               	bcf	138,2,c	;volatile
  1636                           
  1637                           ;spi.c: 25:     LATCbits.LATC2 = 1;
  1638  00759E  8485               	bsf	133,2,c	;volatile
  1639                           
  1640                           ;spi.c: 27:     TRISCbits.TRISC0 = 0;
  1641  0075A0  908A               	bcf	138,0,c	;volatile
  1642                           
  1643                           ;spi.c: 28:     LATCbits.LATC0 = 1;
  1644  0075A2  8085               	bsf	133,0,c	;volatile
  1645                           
  1646                           ;spi.c: 30:     TRISCbits.TRISC1 = 0;
  1647  0075A4  928A               	bcf	138,1,c	;volatile
  1648                           
  1649                           ;spi.c: 31:     LATCbits.LATC1 = 1;
  1650  0075A6  8285               	bsf	133,1,c	;volatile
  1651  0075A8                     
  1652                           ; BSR set to: 15
  1653                           ;spi.c: 33:     RC3PPS = 0x0D;
  1654  0075A8  0E0D               	movlw	13
  1655  0075AA  010E               	movlb	14	; () banked
  1656  0075AC  6FFA               	movwf	250,b	;volatile
  1657                           
  1658                           ;spi.c: 34:     RC5PPS = 0x0E;
  1659  0075AE  0E0E               	movlw	14
  1660  0075B0  6FFC               	movwf	252,b	;volatile
  1661                           
  1662                           ;spi.c: 35:     SSP1CLKPPS = 0b00010011;
  1663  0075B2  0E13               	movlw	19
  1664  0075B4  6FB7               	movwf	183,b	;volatile
  1665                           
  1666                           ;spi.c: 36:     SSP1DATPPS = 0b00010100;
  1667  0075B6  0E14               	movlw	20
  1668  0075B8  6FB8               	movwf	184,b	;volatile
  1669                           
  1670                           ;spi.c: 37:     SSP1STAT = 0b01000000;
  1671  0075BA  0E40               	movlw	64
  1672  0075BC  6E95               	movwf	149,c	;volatile
  1673                           
  1674                           ;spi.c: 40:     SSP1CON1 = 0b00100000;
  1675  0075BE  0E20               	movlw	32
  1676  0075C0  6E96               	movwf	150,c	;volatile
  1677                           
  1678                           ;spi.c: 46:     SSP1CON3 = 0b00000000;
  1679  0075C2  0E00               	movlw	0
  1680  0075C4  6E98               	movwf	152,c	;volatile
  1681  0075C6                     
  1682                           ; BSR set to: 14
  1683  0075C6  0012               	return		;funcret
  1684  0075C8                     __end_of_SPIInit:
  1685                           	callstack 0
  1686                           
  1687 ;; *************** function _ResetRFModule *****************
  1688 ;; Defined at:
  1689 ;;		line 26 in file "RF_LoRa_868_SO.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;		None
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;		None
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  1    wreg      void 
  1696 ;; Registers used:
  1697 ;;		wreg
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1703 ;;      Params:         0       0       0       0       0       0       0       0       0
  1704 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1705 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1706 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1707 ;;Total ram usage:        1 bytes
  1708 ;; Hardware stack levels used: 1
  1709 ;; This function calls:
  1710 ;;		Nothing
  1711 ;; This function is called by:
  1712 ;;		_main
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716                           	psect	text6
  1717  00753E                     __ptext6:
  1718                           	callstack 0
  1719  00753E                     _ResetRFModule:
  1720                           	callstack 30
  1721  00753E                     
  1722                           ;RF_LoRa_868_SO.c: 27:     LATBbits.LATB2 = 1;
  1723  00753E  8484               	bsf	132,2,c	;volatile
  1724                           
  1725                           ;RF_LoRa_868_SO.c: 28:     TRISBbits.TRISB2 = 0;
  1726  007540  9489               	bcf	137,2,c	;volatile
  1727  007542                     
  1728                           ;RF_LoRa_868_SO.c: 29:     _delay((unsigned long)((50)*(1000000UL/4000.0)));
  1729  007542  0E11               	movlw	17
  1730  007544  6E01               	movwf	??_ResetRFModule^0,c
  1731  007546  0E3A               	movlw	58
  1732  007548                     u617:
  1733  007548  2EE8               	decfsz	wreg,f,c
  1734  00754A  D7FE               	bra	u617
  1735  00754C  2E01               	decfsz	??_ResetRFModule^0,f,c
  1736  00754E  D7FC               	bra	u617
  1737  007550  D000               	nop2	
  1738  007552                     
  1739                           ;RF_LoRa_868_SO.c: 30:     TRISBbits.TRISB2 = 1;
  1740  007552  8489               	bsf	137,2,c	;volatile
  1741                           
  1742                           ;RF_LoRa_868_SO.c: 31:     _delay((unsigned long)((50)*(1000000UL/4000.0)));
  1743  007554  0E11               	movlw	17
  1744  007556  6E01               	movwf	??_ResetRFModule^0,c
  1745  007558  0E3A               	movlw	58
  1746  00755A                     u627:
  1747  00755A  2EE8               	decfsz	wreg,f,c
  1748  00755C  D7FE               	bra	u627
  1749  00755E  2E01               	decfsz	??_ResetRFModule^0,f,c
  1750  007560  D7FC               	bra	u627
  1751  007562  D000               	nop2	
  1752  007564  0012               	return		;funcret
  1753  007566                     __end_of_ResetRFModule:
  1754                           	callstack 0
  1755                           
  1756 ;; *************** function _Receive *****************
  1757 ;; Defined at:
  1758 ;;		line 83 in file "sendRecept.c"
  1759 ;; Parameters:    Size  Location     Type
  1760 ;;  data            2   10[COMRAM] PTR unsigned char 
  1761 ;;		 -> main@rxMsg(30), 
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;  reg_val         1   15[COMRAM] unsigned char 
  1764 ;;  i               1   14[COMRAM] unsigned char 
  1765 ;;  RXNumberOfBy    1   13[COMRAM] unsigned char 
  1766 ;; Return value:  Size  Location     Type
  1767 ;;                  1    wreg      void 
  1768 ;; Registers used:
  1769 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1770 ;; Tracked objects:
  1771 ;;		On entry : 0/0
  1772 ;;		On exit  : 0/0
  1773 ;;		Unchanged: 0/0
  1774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1775 ;;      Params:         2       0       0       0       0       0       0       0       0
  1776 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1777 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1778 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1779 ;;Total ram usage:        6 bytes
  1780 ;; Hardware stack levels used: 1
  1781 ;; Hardware stack levels required when called: 2
  1782 ;; This function calls:
  1783 ;;		_AntennaRX
  1784 ;;		_ReadSXRegister
  1785 ;;		_UARTWriteByteHex
  1786 ;;		_UARTWriteStr
  1787 ;;		_UARTWriteStrLn
  1788 ;;		_WriteSXRegister
  1789 ;; This function is called by:
  1790 ;;		_main
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           	psect	text7
  1795  007B36                     __ptext7:
  1796                           	callstack 0
  1797  007B36                     _Receive:
  1798                           	callstack 28
  1799  007B36                     
  1800                           ;sendRecept.c: 85:     uint8_t reg_val;;sendRecept.c: 86:     uint8_t RXNumberOfBytes;;s
      +                          endRecept.c: 87:     uint8_t i;;sendRecept.c: 89:     AntennaRX();
  1801  007B36  EC43  F03A         	call	_AntennaRX	;wreg free
  1802  007B3A                     
  1803                           ;sendRecept.c: 92:     WriteSXRegister(0x0D, ReadSXRegister(0x0F));
  1804  007B3A  0E0F               	movlw	15
  1805  007B3C  EC7F  F03A         	call	_ReadSXRegister
  1806  007B40  6E05               	movwf	WriteSXRegister@data^0,c
  1807  007B42  0E0D               	movlw	13
  1808  007B44  EC64  F03A         	call	_WriteSXRegister
  1809  007B48                     
  1810                           ;sendRecept.c: 100:     WriteSXRegister(0x01, 0x86);
  1811  007B48  0E86               	movlw	134
  1812  007B4A  6E05               	movwf	WriteSXRegister@data^0,c
  1813  007B4C  0E01               	movlw	1
  1814  007B4E  EC64  F03A         	call	_WriteSXRegister
  1815  007B52                     
  1816                           ;sendRecept.c: 101:     _delay((unsigned long)((100)*(1000000UL/4000.0)));
  1817  007B52  0E21               	movlw	33
  1818  007B54  6E0D               	movwf	??_Receive^0,c
  1819  007B56  0E76               	movlw	118
  1820  007B58                     u637:
  1821  007B58  2EE8               	decfsz	wreg,f,c
  1822  007B5A  D7FE               	bra	u637
  1823  007B5C  2E0D               	decfsz	??_Receive^0,f,c
  1824  007B5E  D7FC               	bra	u637
  1825  007B60  D000               	nop2	
  1826  007B62                     
  1827                           ;sendRecept.c: 105:     UARTWriteStrLn("-----------------------");
  1828  007B62  0ED5               	movlw	low STR_21
  1829  007B64  6E02               	movwf	UARTWriteStrLn@string^0,c
  1830  007B66  0E7E               	movlw	high STR_21
  1831  007B68  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1832  007B6A  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  1833  007B6E                     
  1834                           ;sendRecept.c: 106:     UARTWriteStrLn("waiting for valid header");
  1835  007B6E  0EBC               	movlw	low STR_22
  1836  007B70  6E02               	movwf	UARTWriteStrLn@string^0,c
  1837  007B72  0E7E               	movlw	high STR_22
  1838  007B74  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1839  007B76  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  1840  007B7A                     l1644:
  1841                           
  1842                           ;sendRecept.c: 109:         reg_val = ReadSXRegister(0x12);
  1843  007B7A  0E12               	movlw	18
  1844  007B7C  EC7F  F03A         	call	_ReadSXRegister
  1845  007B80  6E10               	movwf	Receive@reg_val^0,c
  1846  007B82                     
  1847                           ;sendRecept.c: 110:     } while (((reg_val & 0x10) == 0x00) && ((reg_val & 0x80) == 0x00
      +                          ));
  1848  007B82  B810               	btfsc	Receive@reg_val^0,4,c
  1849  007B84  EFC6  F03D         	goto	u441
  1850  007B88  EFC8  F03D         	goto	u440
  1851  007B8C                     u441:
  1852  007B8C  EFCF  F03D         	goto	l1650
  1853  007B90                     u440:
  1854  007B90  AE10               	btfss	Receive@reg_val^0,7,c
  1855  007B92  EFCD  F03D         	goto	u451
  1856  007B96  EFCF  F03D         	goto	u450
  1857  007B9A                     u451:
  1858  007B9A  EFBD  F03D         	goto	l1644
  1859  007B9E                     u450:
  1860  007B9E                     l1650:
  1861                           
  1862                           ;sendRecept.c: 112:     if ((ReadSXRegister(0x12) & 0x10) == 0x00) {
  1863  007B9E  0E12               	movlw	18
  1864  007BA0  EC7F  F03A         	call	_ReadSXRegister
  1865  007BA4  6E0D               	movwf	??_Receive^0,c
  1866  007BA6  B80D               	btfsc	??_Receive^0,4,c
  1867  007BA8  EFD8  F03D         	goto	u461
  1868  007BAC  EFDA  F03D         	goto	u460
  1869  007BB0                     u461:
  1870  007BB0  EFE1  F03D         	goto	l1656
  1871  007BB4                     u460:
  1872  007BB4                     
  1873                           ;sendRecept.c: 114:         WriteSXRegister(0x12, 0xFF);
  1874  007BB4  0EFF               	movlw	255
  1875  007BB6  6E05               	movwf	WriteSXRegister@data^0,c
  1876  007BB8  0E12               	movlw	18
  1877  007BBA  EC64  F03A         	call	_WriteSXRegister
  1878  007BBE  EF54  F03E         	goto	l225
  1879  007BC2                     l1656:
  1880                           
  1881                           ;sendRecept.c: 119:     UARTWriteStrLn("valid header received");
  1882  007BC2  0E33               	movlw	low STR_23
  1883  007BC4  6E02               	movwf	UARTWriteStrLn@string^0,c
  1884  007BC6  0E7F               	movlw	high STR_23
  1885  007BC8  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1886  007BCA  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  1887  007BCE                     
  1888                           ;sendRecept.c: 128:     reg_val = ReadSXRegister(0x12);
  1889  007BCE  0E12               	movlw	18
  1890  007BD0  EC7F  F03A         	call	_ReadSXRegister
  1891  007BD4  6E10               	movwf	Receive@reg_val^0,c
  1892                           
  1893                           ;sendRecept.c: 129:     while ((reg_val & 0x40) == 0x00) {
  1894  007BD6  EFF1  F03D         	goto	l1662
  1895  007BDA                     l1660:
  1896                           
  1897                           ;sendRecept.c: 130:         reg_val = ReadSXRegister(0x12);
  1898  007BDA  0E12               	movlw	18
  1899  007BDC  EC7F  F03A         	call	_ReadSXRegister
  1900  007BE0  6E10               	movwf	Receive@reg_val^0,c
  1901  007BE2                     l1662:
  1902                           
  1903                           ;sendRecept.c: 129:     while ((reg_val & 0x40) == 0x00) {
  1904  007BE2  AC10               	btfss	Receive@reg_val^0,6,c
  1905  007BE4  EFF6  F03D         	goto	u471
  1906  007BE8  EFF8  F03D         	goto	u470
  1907  007BEC                     u471:
  1908  007BEC  EFED  F03D         	goto	l1660
  1909  007BF0                     u470:
  1910  007BF0                     
  1911                           ;sendRecept.c: 142:     if((reg_val & 0x20) != 0x00){
  1912  007BF0  AA10               	btfss	Receive@reg_val^0,5,c
  1913  007BF2  EFFD  F03D         	goto	u481
  1914  007BF6  EFFF  F03D         	goto	u480
  1915  007BFA                     u481:
  1916  007BFA  EF0D  F03E         	goto	l1666
  1917  007BFE                     u480:
  1918  007BFE                     
  1919                           ;sendRecept.c: 143:         UARTWriteStrLn(" ");
  1920  007BFE  0E86               	movlw	low (STR_16+25)
  1921  007C00  6E02               	movwf	UARTWriteStrLn@string^0,c
  1922  007C02  0E7E               	movlw	high (STR_16+25)
  1923  007C04  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1924  007C06  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  1925                           
  1926                           ;sendRecept.c: 144:         UARTWriteStrLn("payload CRC error");
  1927  007C0A  0E81               	movlw	low STR_25
  1928  007C0C  6E02               	movwf	UARTWriteStrLn@string^0,c
  1929  007C0E  0E7F               	movlw	high STR_25
  1930  007C10  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  1931  007C12  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  1932                           
  1933                           ;sendRecept.c: 145:     }
  1934  007C16  EF4F  F03E         	goto	l1686
  1935  007C1A                     l1666:
  1936                           
  1937                           ;sendRecept.c: 148:         UARTWriteStr("received data: ");
  1938  007C1A  0EB5               	movlw	low STR_26
  1939  007C1C  6E02               	movwf	UARTWriteStr@string^0,c
  1940  007C1E  0E7F               	movlw	high STR_26
  1941  007C20  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  1942  007C22  EC34  F03B         	call	_UARTWriteStr	;wreg free
  1943  007C26                     
  1944                           ;sendRecept.c: 149:         RXNumberOfBytes = ReadSXRegister(0x13);
  1945  007C26  0E13               	movlw	19
  1946  007C28  EC7F  F03A         	call	_ReadSXRegister
  1947  007C2C  6E0E               	movwf	Receive@RXNumberOfBytes^0,c
  1948  007C2E                     
  1949                           ;sendRecept.c: 150:         WriteSXRegister(0x0D, ReadSXRegister(0x10));
  1950  007C2E  0E10               	movlw	16
  1951  007C30  EC7F  F03A         	call	_ReadSXRegister
  1952  007C34  6E05               	movwf	WriteSXRegister@data^0,c
  1953  007C36  0E0D               	movlw	13
  1954  007C38  EC64  F03A         	call	_WriteSXRegister
  1955  007C3C                     
  1956                           ;sendRecept.c: 152:         for (i = 0; i < RXNumberOfBytes; i++) {
  1957  007C3C  0E00               	movlw	0
  1958  007C3E  6E0F               	movwf	Receive@i^0,c
  1959  007C40  EF40  F03E         	goto	l1682
  1960  007C44                     l1674:
  1961                           
  1962                           ;sendRecept.c: 159:             data[i] = ReadSXRegister(0x00);
  1963  007C44  500F               	movf	Receive@i^0,w,c
  1964  007C46  240B               	addwf	Receive@data^0,w,c
  1965  007C48  6ED9               	movwf	fsr2l,c
  1966  007C4A  0E00               	movlw	0
  1967  007C4C  200C               	addwfc	(Receive@data+1)^0,w,c
  1968  007C4E  6EDA               	movwf	fsr2h,c
  1969  007C50  0E00               	movlw	0
  1970  007C52  EC7F  F03A         	call	_ReadSXRegister
  1971  007C56  6EDF               	movwf	indf2,c
  1972  007C58                     
  1973                           ;sendRecept.c: 160:             UARTWriteByteHex(data[i]);
  1974  007C58  500F               	movf	Receive@i^0,w,c
  1975  007C5A  240B               	addwf	Receive@data^0,w,c
  1976  007C5C  6ED9               	movwf	fsr2l,c
  1977  007C5E  0E00               	movlw	0
  1978  007C60  200C               	addwfc	(Receive@data+1)^0,w,c
  1979  007C62  6EDA               	movwf	fsr2h,c
  1980  007C64  50DF               	movf	indf2,w,c
  1981  007C66  6E0D               	movwf	??_Receive^0,c
  1982  007C68  500D               	movf	??_Receive^0,w,c
  1983  007C6A  6E02               	movwf	UARTWriteByteHex@data^0,c
  1984  007C6C  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  1985  007C6E  EC70  F03B         	call	_UARTWriteByteHex	;wreg free
  1986  007C72                     
  1987                           ;sendRecept.c: 161:             UARTWriteStr(" ");
  1988  007C72  0E86               	movlw	low (STR_16+25)
  1989  007C74  6E02               	movwf	UARTWriteStr@string^0,c
  1990  007C76  0E7E               	movlw	high (STR_16+25)
  1991  007C78  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  1992  007C7A  EC34  F03B         	call	_UARTWriteStr	;wreg free
  1993  007C7E                     
  1994                           ;sendRecept.c: 162:         }
  1995  007C7E  2A0F               	incf	Receive@i^0,f,c
  1996  007C80                     l1682:
  1997  007C80  500E               	movf	Receive@RXNumberOfBytes^0,w,c
  1998  007C82  5C0F               	subwf	Receive@i^0,w,c
  1999  007C84  A0D8               	btfss	status,0,c
  2000  007C86  EF47  F03E         	goto	u491
  2001  007C8A  EF49  F03E         	goto	u490
  2002  007C8E                     u491:
  2003  007C8E  EF22  F03E         	goto	l1674
  2004  007C92                     u490:
  2005  007C92                     
  2006                           ;sendRecept.c: 163:         UARTWriteStrLn(" ");
  2007  007C92  0E86               	movlw	low (STR_16+25)
  2008  007C94  6E02               	movwf	UARTWriteStrLn@string^0,c
  2009  007C96  0E7E               	movlw	high (STR_16+25)
  2010  007C98  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2011  007C9A  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  2012  007C9E                     l1686:
  2013                           
  2014                           ;sendRecept.c: 187:     WriteSXRegister(0x12, 0xFF);
  2015  007C9E  0EFF               	movlw	255
  2016  007CA0  6E05               	movwf	WriteSXRegister@data^0,c
  2017  007CA2  0E12               	movlw	18
  2018  007CA4  EC64  F03A         	call	_WriteSXRegister
  2019  007CA8                     l225:
  2020  007CA8  0012               	return		;funcret
  2021  007CAA                     __end_of_Receive:
  2022                           	callstack 0
  2023                           
  2024 ;; *************** function _AntennaRX *****************
  2025 ;; Defined at:
  2026 ;;		line 41 in file "RF_LoRa_868_SO.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;		None
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;		None
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		wreg
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2040 ;;      Params:         0       0       0       0       0       0       0       0       0
  2041 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2042 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2043 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2044 ;;Total ram usage:        1 bytes
  2045 ;; Hardware stack levels used: 1
  2046 ;; This function calls:
  2047 ;;		Nothing
  2048 ;; This function is called by:
  2049 ;;		_Receive
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           	psect	text8
  2054  007486                     __ptext8:
  2055                           	callstack 0
  2056  007486                     _AntennaRX:
  2057                           	callstack 29
  2058  007486                     
  2059                           ;RF_LoRa_868_SO.c: 42:     LATBbits.LATB4 = 0;
  2060  007486  9884               	bcf	132,4,c	;volatile
  2061                           
  2062                           ;RF_LoRa_868_SO.c: 43:     LATBbits.LATB3 = 0;
  2063  007488  9684               	bcf	132,3,c	;volatile
  2064  00748A                     
  2065                           ;RF_LoRa_868_SO.c: 44:     _delay((unsigned long)((10)*(1000000UL/4000.0)));
  2066  00748A  0E04               	movlw	4
  2067  00748C  6E01               	movwf	??_AntennaRX^0,c
  2068  00748E  0E3E               	movlw	62
  2069  007490                     u647:
  2070  007490  2EE8               	decfsz	wreg,f,c
  2071  007492  D7FE               	bra	u647
  2072  007494  2E01               	decfsz	??_AntennaRX^0,f,c
  2073  007496  D7FC               	bra	u647
  2074  007498                     
  2075                           ;RF_LoRa_868_SO.c: 45:     LATBbits.LATB4 = 1;
  2076  007498  8884               	bsf	132,4,c	;volatile
  2077  00749A  0012               	return		;funcret
  2078  00749C                     __end_of_AntennaRX:
  2079                           	callstack 0
  2080                           
  2081 ;; *************** function _InitRFLoRaPins *****************
  2082 ;; Defined at:
  2083 ;;		line 18 in file "RF_LoRa_868_SO.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;		None
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;		None
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		None
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2097 ;;      Params:         0       0       0       0       0       0       0       0       0
  2098 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2099 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2100 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2101 ;;Total ram usage:        0 bytes
  2102 ;; Hardware stack levels used: 1
  2103 ;; This function calls:
  2104 ;;		Nothing
  2105 ;; This function is called by:
  2106 ;;		_main
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110                           	psect	text9
  2111  007464                     __ptext9:
  2112                           	callstack 0
  2113  007464                     _InitRFLoRaPins:
  2114                           	callstack 30
  2115  007464                     
  2116                           ;RF_LoRa_868_SO.c: 19:     TRISBbits.TRISB2 = 1;
  2117  007464  8489               	bsf	137,2,c	;volatile
  2118                           
  2119                           ;RF_LoRa_868_SO.c: 20:     LATBbits.LATB3 = 0;
  2120  007466  9684               	bcf	132,3,c	;volatile
  2121                           
  2122                           ;RF_LoRa_868_SO.c: 21:     TRISBbits.TRISB3 = 0;
  2123  007468  9689               	bcf	137,3,c	;volatile
  2124                           
  2125                           ;RF_LoRa_868_SO.c: 22:     LATBbits.LATB4 = 0;
  2126  00746A  9884               	bcf	132,4,c	;volatile
  2127                           
  2128                           ;RF_LoRa_868_SO.c: 23:     TRISBbits.TRISB4 = 0;
  2129  00746C  9889               	bcf	137,4,c	;volatile
  2130  00746E  0012               	return		;funcret
  2131  007470                     __end_of_InitRFLoRaPins:
  2132                           	callstack 0
  2133                           
  2134 ;; *************** function _InitModule *****************
  2135 ;; Defined at:
  2136 ;;		line 96 in file "SX1272.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;		None
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;  pout            1    0        unsigned char 
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  1    wreg      void 
  2143 ;; Registers used:
  2144 ;;		wreg, status,2, status,0, cstack
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2150 ;;      Params:         0       0       0       0       0       0       0       0       0
  2151 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2152 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2153 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2154 ;;Total ram usage:        0 bytes
  2155 ;; Hardware stack levels used: 1
  2156 ;; Hardware stack levels required when called: 2
  2157 ;; This function calls:
  2158 ;;		_WriteSXRegister
  2159 ;; This function is called by:
  2160 ;;		_main
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           	psect	text10
  2165  0077CC                     __ptext10:
  2166                           	callstack 0
  2167  0077CC                     _InitModule:
  2168                           	callstack 28
  2169  0077CC                     
  2170                           ;SX1272.c: 97:   uint8_t pout;;SX1272.c: 99:   WriteSXRegister(0x00, 0x00);
  2171  0077CC  0E00               	movlw	0
  2172  0077CE  6E05               	movwf	WriteSXRegister@data^0,c
  2173  0077D0  0E00               	movlw	0
  2174  0077D2  EC64  F03A         	call	_WriteSXRegister
  2175                           
  2176                           ;SX1272.c: 101:   WriteSXRegister(0x06, 0xD9);
  2177  0077D6  0ED9               	movlw	217
  2178  0077D8  6E05               	movwf	WriteSXRegister@data^0,c
  2179  0077DA  0E06               	movlw	6
  2180  0077DC  EC64  F03A         	call	_WriteSXRegister
  2181                           
  2182                           ;SX1272.c: 102:   WriteSXRegister(0x07, 0x00);
  2183  0077E0  0E00               	movlw	0
  2184  0077E2  6E05               	movwf	WriteSXRegister@data^0,c
  2185  0077E4  0E07               	movlw	7
  2186  0077E6  EC64  F03A         	call	_WriteSXRegister
  2187                           
  2188                           ;SX1272.c: 103:   WriteSXRegister(0x08, 0x00);
  2189  0077EA  0E00               	movlw	0
  2190  0077EC  6E05               	movwf	WriteSXRegister@data^0,c
  2191  0077EE  0E08               	movlw	8
  2192  0077F0  EC64  F03A         	call	_WriteSXRegister
  2193  0077F4                     
  2194                           ;SX1272.c: 107:   WriteSXRegister(0x09, 0x80 | pout);
  2195  0077F4  0E8C               	movlw	140
  2196  0077F6  6E05               	movwf	WriteSXRegister@data^0,c
  2197  0077F8  0E09               	movlw	9
  2198  0077FA  EC64  F03A         	call	_WriteSXRegister
  2199  0077FE                     
  2200                           ;SX1272.c: 109:   WriteSXRegister(0x0A, 0x19);
  2201  0077FE  0E19               	movlw	25
  2202  007800  6E05               	movwf	WriteSXRegister@data^0,c
  2203  007802  0E0A               	movlw	10
  2204  007804  EC64  F03A         	call	_WriteSXRegister
  2205  007808                     
  2206                           ;SX1272.c: 111:   WriteSXRegister(0x0B, 0b00101011);
  2207  007808  0E2B               	movlw	43
  2208  00780A  6E05               	movwf	WriteSXRegister@data^0,c
  2209  00780C  0E0B               	movlw	11
  2210  00780E  EC64  F03A         	call	_WriteSXRegister
  2211  007812                     
  2212                           ;SX1272.c: 113:   WriteSXRegister(0x0C, 0b00100011);
  2213  007812  0E23               	movlw	35
  2214  007814  6E05               	movwf	WriteSXRegister@data^0,c
  2215  007816  0E0C               	movlw	12
  2216  007818  EC64  F03A         	call	_WriteSXRegister
  2217  00781C                     
  2218                           ;SX1272.c: 115:   WriteSXRegister(0x0D, 0x00);
  2219  00781C  0E00               	movlw	0
  2220  00781E  6E05               	movwf	WriteSXRegister@data^0,c
  2221  007820  0E0D               	movlw	13
  2222  007822  EC64  F03A         	call	_WriteSXRegister
  2223  007826                     
  2224                           ;SX1272.c: 116:   WriteSXRegister(0x0E, 0x80);
  2225  007826  0E80               	movlw	128
  2226  007828  6E05               	movwf	WriteSXRegister@data^0,c
  2227  00782A  0E0E               	movlw	14
  2228  00782C  EC64  F03A         	call	_WriteSXRegister
  2229  007830                     
  2230                           ;SX1272.c: 117:   WriteSXRegister(0x0F, 0x00);
  2231  007830  0E00               	movlw	0
  2232  007832  6E05               	movwf	WriteSXRegister@data^0,c
  2233  007834  0E0F               	movlw	15
  2234  007836  EC64  F03A         	call	_WriteSXRegister
  2235  00783A                     
  2236                           ;SX1272.c: 119:   WriteSXRegister(0x11, 0x00);
  2237  00783A  0E00               	movlw	0
  2238  00783C  6E05               	movwf	WriteSXRegister@data^0,c
  2239  00783E  0E11               	movlw	17
  2240  007840  EC64  F03A         	call	_WriteSXRegister
  2241  007844                     
  2242                           ;SX1272.c: 121:   WriteSXRegister(0x12, 0xFF);
  2243  007844  0EFF               	movlw	255
  2244  007846  6E05               	movwf	WriteSXRegister@data^0,c
  2245  007848  0E12               	movlw	18
  2246  00784A  EC64  F03A         	call	_WriteSXRegister
  2247  00784E                     
  2248                           ;SX1272.c: 126:   WriteSXRegister(0x1D, 0b00100011);
  2249  00784E  0E23               	movlw	35
  2250  007850  6E05               	movwf	WriteSXRegister@data^0,c
  2251  007852  0E1D               	movlw	29
  2252  007854  EC64  F03A         	call	_WriteSXRegister
  2253  007858                     
  2254                           ;SX1272.c: 129:   WriteSXRegister(0x1E, 0b11000110);
  2255  007858  0EC6               	movlw	198
  2256  00785A  6E05               	movwf	WriteSXRegister@data^0,c
  2257  00785C  0E1E               	movlw	30
  2258  00785E  EC64  F03A         	call	_WriteSXRegister
  2259  007862                     
  2260                           ;SX1272.c: 133:   WriteSXRegister(0x1F, 0xFF);
  2261  007862  0EFF               	movlw	255
  2262  007864  6E05               	movwf	WriteSXRegister@data^0,c
  2263  007866  0E1F               	movlw	31
  2264  007868  EC64  F03A         	call	_WriteSXRegister
  2265  00786C                     
  2266                           ;SX1272.c: 140:   WriteSXRegister(0x20, 0x00);
  2267  00786C  0E00               	movlw	0
  2268  00786E  6E05               	movwf	WriteSXRegister@data^0,c
  2269  007870  0E20               	movlw	32
  2270  007872  EC64  F03A         	call	_WriteSXRegister
  2271  007876                     
  2272                           ;SX1272.c: 141:   WriteSXRegister(0x21, 0x08);
  2273  007876  0E08               	movlw	8
  2274  007878  6E05               	movwf	WriteSXRegister@data^0,c
  2275  00787A  0E21               	movlw	33
  2276  00787C  EC64  F03A         	call	_WriteSXRegister
  2277  007880                     
  2278                           ;SX1272.c: 143:   WriteSXRegister(0x23, 0x80);
  2279  007880  0E80               	movlw	128
  2280  007882  6E05               	movwf	WriteSXRegister@data^0,c
  2281  007884  0E23               	movlw	35
  2282  007886  EC64  F03A         	call	_WriteSXRegister
  2283  00788A                     
  2284                           ;SX1272.c: 145:   WriteSXRegister(0x24, 0x00);
  2285  00788A  0E00               	movlw	0
  2286  00788C  6E05               	movwf	WriteSXRegister@data^0,c
  2287  00788E  0E24               	movlw	36
  2288  007890  EC64  F03A         	call	_WriteSXRegister
  2289  007894                     
  2290                           ;SX1272.c: 147:   WriteSXRegister(0x31, 0xC3);
  2291  007894  0EC3               	movlw	195
  2292  007896  6E05               	movwf	WriteSXRegister@data^0,c
  2293  007898  0E31               	movlw	49
  2294  00789A  EC64  F03A         	call	_WriteSXRegister
  2295  00789E                     
  2296                           ;SX1272.c: 149:   WriteSXRegister(0x33, 0x27);
  2297  00789E  0E27               	movlw	39
  2298  0078A0  6E05               	movwf	WriteSXRegister@data^0,c
  2299  0078A2  0E33               	movlw	51
  2300  0078A4  EC64  F03A         	call	_WriteSXRegister
  2301  0078A8                     
  2302                           ;SX1272.c: 151:   WriteSXRegister(0x37, 0x0A);
  2303  0078A8  0E0A               	movlw	10
  2304  0078AA  6E05               	movwf	WriteSXRegister@data^0,c
  2305  0078AC  0E37               	movlw	55
  2306  0078AE  EC64  F03A         	call	_WriteSXRegister
  2307  0078B2                     
  2308                           ;SX1272.c: 153:   WriteSXRegister(0x39, 0x12);
  2309  0078B2  0E12               	movlw	18
  2310  0078B4  6E05               	movwf	WriteSXRegister@data^0,c
  2311  0078B6  0E39               	movlw	57
  2312  0078B8  EC64  F03A         	call	_WriteSXRegister
  2313  0078BC  0012               	return		;funcret
  2314  0078BE                     __end_of_InitModule:
  2315                           	callstack 0
  2316                           
  2317 ;; *************** function _WriteSXRegister *****************
  2318 ;; Defined at:
  2319 ;;		line 19 in file "SX1272.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;  address         1    wreg     unsigned char 
  2322 ;;  data            1    4[COMRAM] unsigned char 
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;  address         1    5[COMRAM] unsigned char 
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  1    wreg      void 
  2327 ;; Registers used:
  2328 ;;		wreg, status,2, status,0, cstack
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2334 ;;      Params:         1       0       0       0       0       0       0       0       0
  2335 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2336 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2337 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2338 ;;Total ram usage:        2 bytes
  2339 ;; Hardware stack levels used: 1
  2340 ;; Hardware stack levels required when called: 1
  2341 ;; This function calls:
  2342 ;;		_SPITransfer
  2343 ;; This function is called by:
  2344 ;;		_InitModule
  2345 ;;		_Transmit
  2346 ;;		_Receive
  2347 ;;		_main
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           	psect	text11
  2352  0074C8                     __ptext11:
  2353                           	callstack 0
  2354  0074C8                     _WriteSXRegister:
  2355                           	callstack 29
  2356                           
  2357                           ;incstack = 0
  2358                           ;WriteSXRegister@address stored from wreg
  2359  0074C8  6E06               	movwf	WriteSXRegister@address^0,c
  2360  0074CA                     
  2361                           ;SX1272.c: 21:     LATCbits.LATC2 = 0;
  2362  0074CA  9485               	bcf	133,2,c	;volatile
  2363  0074CC                     
  2364                           ;SX1272.c: 22:     address = address | 0x80;
  2365  0074CC  5006               	movf	WriteSXRegister@address^0,w,c
  2366  0074CE  0980               	iorlw	128
  2367  0074D0  6E06               	movwf	WriteSXRegister@address^0,c
  2368  0074D2                     
  2369                           ;SX1272.c: 24:     SPITransfer(address);
  2370  0074D2  5006               	movf	WriteSXRegister@address^0,w,c
  2371  0074D4  EC71  F03A         	call	_SPITransfer
  2372  0074D8                     
  2373                           ;SX1272.c: 25:     SPITransfer(data);
  2374  0074D8  5005               	movf	WriteSXRegister@data^0,w,c
  2375  0074DA  EC71  F03A         	call	_SPITransfer
  2376  0074DE                     
  2377                           ;SX1272.c: 26:     LATCbits.LATC2 = 1;
  2378  0074DE  8485               	bsf	133,2,c	;volatile
  2379  0074E0  0012               	return		;funcret
  2380  0074E2                     __end_of_WriteSXRegister:
  2381                           	callstack 0
  2382                           
  2383 ;; *************** function _GetMode *****************
  2384 ;; Defined at:
  2385 ;;		line 42 in file "SX1272.c"
  2386 ;; Parameters:    Size  Location     Type
  2387 ;;		None
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;  reg             1   13[COMRAM] unsigned char 
  2390 ;;  masked_reg      1   12[COMRAM] unsigned char 
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  1    wreg      void 
  2393 ;; Registers used:
  2394 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2400 ;;      Params:         0       0       0       0       0       0       0       0       0
  2401 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2402 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2403 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2404 ;;Total ram usage:        4 bytes
  2405 ;; Hardware stack levels used: 1
  2406 ;; Hardware stack levels required when called: 2
  2407 ;; This function calls:
  2408 ;;		_ReadSXRegister
  2409 ;;		_UARTWriteByteHex
  2410 ;;		_UARTWriteStr
  2411 ;;		_UARTWriteStrLn
  2412 ;; This function is called by:
  2413 ;;		_main
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           	psect	text12
  2418  0079CE                     __ptext12:
  2419                           	callstack 0
  2420  0079CE                     _GetMode:
  2421                           	callstack 28
  2422  0079CE                     
  2423                           ;SX1272.c: 43:     uint8_t reg, masked_reg;;SX1272.c: 44:     reg = ReadSXRegister(0x01)
      +                          ;
  2424  0079CE  0E01               	movlw	1
  2425  0079D0  EC7F  F03A         	call	_ReadSXRegister
  2426  0079D4  6E0E               	movwf	GetMode@reg^0,c
  2427  0079D6                     
  2428                           ;SX1272.c: 47:         UARTWriteStr("REG_OP_MODE = 0x");
  2429  0079D6  0EA4               	movlw	low STR_1
  2430  0079D8  6E02               	movwf	UARTWriteStr@string^0,c
  2431  0079DA  0E7F               	movlw	high STR_1
  2432  0079DC  6E03               	movwf	(UARTWriteStr@string+1)^0,c
  2433  0079DE  EC34  F03B         	call	_UARTWriteStr	;wreg free
  2434  0079E2                     
  2435                           ;SX1272.c: 48:         UARTWriteByteHex(reg);
  2436  0079E2  C00E  F002         	movff	GetMode@reg,UARTWriteByteHex@data
  2437  0079E6  6A03               	clrf	(UARTWriteByteHex@data+1)^0,c
  2438  0079E8  EC70  F03B         	call	_UARTWriteByteHex	;wreg free
  2439  0079EC                     
  2440                           ;SX1272.c: 49:         UARTWriteStrLn(" ");
  2441  0079EC  0E86               	movlw	low (STR_16+25)
  2442  0079EE  6E02               	movwf	UARTWriteStrLn@string^0,c
  2443  0079F0  0E7E               	movlw	high (STR_16+25)
  2444  0079F2  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2445  0079F4  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  2446  0079F8                     
  2447                           ;SX1272.c: 51:     masked_reg = reg & 0x80;
  2448  0079F8  500E               	movf	GetMode@reg^0,w,c
  2449  0079FA  0B80               	andlw	128
  2450  0079FC  6E0D               	movwf	GetMode@masked_reg^0,c
  2451  0079FE                     
  2452                           ;SX1272.c: 52:     if (masked_reg)
  2453  0079FE  500D               	movf	GetMode@masked_reg^0,w,c
  2454  007A00  B4D8               	btfsc	status,2,c
  2455  007A02  EF05  F03D         	goto	u371
  2456  007A06  EF07  F03D         	goto	u370
  2457  007A0A                     u371:
  2458  007A0A  EF22  F03D         	goto	l1478
  2459  007A0E                     u370:
  2460  007A0E                     
  2461                           ;SX1272.c: 53:         {;SX1272.c: 55:         masked_reg = reg & 0x40;
  2462  007A0E  500E               	movf	GetMode@reg^0,w,c
  2463  007A10  0B40               	andlw	64
  2464  007A12  6E0D               	movwf	GetMode@masked_reg^0,c
  2465  007A14                     
  2466                           ;SX1272.c: 56:         if (!masked_reg) {
  2467  007A14  500D               	movf	GetMode@masked_reg^0,w,c
  2468  007A16  A4D8               	btfss	status,2,c
  2469  007A18  EF10  F03D         	goto	u381
  2470  007A1C  EF12  F03D         	goto	u380
  2471  007A20                     u381:
  2472  007A20  EF1A  F03D         	goto	l1476
  2473  007A24                     u380:
  2474  007A24                     
  2475                           ;SX1272.c: 57:             UARTWriteStrLn("mode = LoRa");
  2476  007A24  0ED2               	movlw	low STR_3
  2477  007A26  6E02               	movwf	UARTWriteStrLn@string^0,c
  2478  007A28  0E7F               	movlw	high STR_3
  2479  007A2A  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2480  007A2C  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  2481                           
  2482                           ;SX1272.c: 58:         }
  2483  007A30  EF28  F03D         	goto	l1480
  2484  007A34                     l1476:
  2485                           
  2486                           ;SX1272.c: 60:             UARTWriteStrLn("mode = LoRa with FSK registers access");
  2487  007A34  0E47               	movlw	low STR_4
  2488  007A36  6E02               	movwf	UARTWriteStrLn@string^0,c
  2489  007A38  0E7E               	movlw	high STR_4
  2490  007A3A  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2491  007A3C  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  2492  007A40  EF28  F03D         	goto	l1480
  2493  007A44                     l1478:
  2494                           
  2495                           ;SX1272.c: 64:         UARTWriteStrLn("mode = FSK");
  2496  007A44  0EDE               	movlw	low STR_5
  2497  007A46  6E02               	movwf	UARTWriteStrLn@string^0,c
  2498  007A48  0E7F               	movlw	high STR_5
  2499  007A4A  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2500  007A4C  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  2501  007A50                     l1480:
  2502                           
  2503                           ;SX1272.c: 66:     masked_reg = reg & 0x07;
  2504  007A50  500E               	movf	GetMode@reg^0,w,c
  2505  007A52  0B07               	andlw	7
  2506  007A54  6E0D               	movwf	GetMode@masked_reg^0,c
  2507                           
  2508                           ;SX1272.c: 67:         switch (masked_reg){
  2509  007A56  EF6D  F03D         	goto	l1500
  2510  007A5A                     l1482:
  2511                           
  2512                           ;SX1272.c: 69:             UARTWriteStrLn("sleep mode");
  2513  007A5A  0EE9               	movlw	low STR_6
  2514  007A5C  6E02               	movwf	UARTWriteStrLn@string^0,c
  2515  007A5E  0E7F               	movlw	high STR_6
  2516  007A60  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2517  007A62  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  2518                           
  2519                           ;SX1272.c: 70:             break;
  2520  007A66  EF9A  F03D         	goto	l92
  2521  007A6A                     l1484:
  2522                           
  2523                           ;SX1272.c: 72:             UARTWriteStrLn("standby mode");
  2524  007A6A  0EC5               	movlw	low STR_7
  2525  007A6C  6E02               	movwf	UARTWriteStrLn@string^0,c
  2526  007A6E  0E7F               	movlw	high STR_7
  2527  007A70  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2528  007A72  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  2529                           
  2530                           ;SX1272.c: 73:             break;
  2531  007A76  EF9A  F03D         	goto	l92
  2532  007A7A                     l1486:
  2533                           
  2534                           ;SX1272.c: 75:             UARTWriteStrLn("frequency synthesis TX");
  2535  007A7A  0E1C               	movlw	low STR_8
  2536  007A7C  6E02               	movwf	UARTWriteStrLn@string^0,c
  2537  007A7E  0E7F               	movlw	high STR_8
  2538  007A80  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2539  007A82  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  2540                           
  2541                           ;SX1272.c: 76:             break;
  2542  007A86  EF9A  F03D         	goto	l92
  2543  007A8A                     l1488:
  2544                           
  2545                           ;SX1272.c: 78:             UARTWriteStrLn("TX mode");
  2546  007A8A  0EF4               	movlw	low STR_9
  2547  007A8C  6E02               	movwf	UARTWriteStrLn@string^0,c
  2548  007A8E  0E7F               	movlw	high STR_9
  2549  007A90  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2550  007A92  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  2551                           
  2552                           ;SX1272.c: 79:             break;
  2553  007A96  EF9A  F03D         	goto	l92
  2554  007A9A                     l1490:
  2555                           
  2556                           ;SX1272.c: 81:             UARTWriteStrLn("frequency synthesis RX");
  2557  007A9A  0E05               	movlw	low STR_10
  2558  007A9C  6E02               	movwf	UARTWriteStrLn@string^0,c
  2559  007A9E  0E7F               	movlw	high STR_10
  2560  007AA0  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2561  007AA2  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  2562                           
  2563                           ;SX1272.c: 82:             break;
  2564  007AA6  EF9A  F03D         	goto	l92
  2565  007AAA                     l1492:
  2566                           
  2567                           ;SX1272.c: 84:             UARTWriteStrLn("continuous receive mode");
  2568  007AAA  0EED               	movlw	low STR_11
  2569  007AAC  6E02               	movwf	UARTWriteStrLn@string^0,c
  2570  007AAE  0E7E               	movlw	high STR_11
  2571  007AB0  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2572  007AB2  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  2573                           
  2574                           ;SX1272.c: 85:             break;
  2575  007AB6  EF9A  F03D         	goto	l92
  2576  007ABA                     l1494:
  2577                           
  2578                           ;SX1272.c: 87:             UARTWriteStrLn("single receive mode");
  2579  007ABA  0E49               	movlw	low STR_12
  2580  007ABC  6E02               	movwf	UARTWriteStrLn@string^0,c
  2581  007ABE  0E7F               	movlw	high STR_12
  2582  007AC0  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2583  007AC2  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  2584                           
  2585                           ;SX1272.c: 88:             break;
  2586  007AC6  EF9A  F03D         	goto	l92
  2587  007ACA                     l1496:
  2588                           
  2589                           ;SX1272.c: 90:             UARTWriteStrLn("Channel Activity Detection");
  2590  007ACA  0E88               	movlw	low STR_13
  2591  007ACC  6E02               	movwf	UARTWriteStrLn@string^0,c
  2592  007ACE  0E7E               	movlw	high STR_13
  2593  007AD0  6E03               	movwf	(UARTWriteStrLn@string+1)^0,c
  2594  007AD2  EC06  F03B         	call	_UARTWriteStrLn	;wreg free
  2595                           
  2596                           ;SX1272.c: 91:             break;
  2597  007AD6  EF9A  F03D         	goto	l92
  2598  007ADA                     l1500:
  2599  007ADA  500D               	movf	GetMode@masked_reg^0,w,c
  2600  007ADC  6E0B               	movwf	??_GetMode^0,c
  2601  007ADE  6A0C               	clrf	(??_GetMode+1)^0,c
  2602                           
  2603                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2604                           ; Switch size 1, requested type "simple"
  2605                           ; Number of cases is 1, Range of values is 0 to 0
  2606                           ; switch strategies available:
  2607                           ; Name         Instructions Cycles
  2608                           ; simple_byte            4     3 (average)
  2609                           ;	Chosen strategy is simple_byte
  2610  007AE0  500C               	movf	(??_GetMode+1)^0,w,c
  2611  007AE2  0A00               	xorlw	0	; case 0
  2612  007AE4  B4D8               	btfsc	status,2,c
  2613  007AE6  EF77  F03D         	goto	l1806
  2614  007AEA  EF9A  F03D         	goto	l92
  2615  007AEE                     l1806:
  2616                           
  2617                           ; Switch size 1, requested type "simple"
  2618                           ; Number of cases is 8, Range of values is 0 to 7
  2619                           ; switch strategies available:
  2620                           ; Name         Instructions Cycles
  2621                           ; simple_byte           25    13 (average)
  2622                           ;	Chosen strategy is simple_byte
  2623  007AEE  500B               	movf	??_GetMode^0,w,c
  2624  007AF0  0A00               	xorlw	0	; case 0
  2625  007AF2  B4D8               	btfsc	status,2,c
  2626  007AF4  EF2D  F03D         	goto	l1482
  2627  007AF8  0A01               	xorlw	1	; case 1
  2628  007AFA  B4D8               	btfsc	status,2,c
  2629  007AFC  EF35  F03D         	goto	l1484
  2630  007B00  0A03               	xorlw	3	; case 2
  2631  007B02  B4D8               	btfsc	status,2,c
  2632  007B04  EF3D  F03D         	goto	l1486
  2633  007B08  0A01               	xorlw	1	; case 3
  2634  007B0A  B4D8               	btfsc	status,2,c
  2635  007B0C  EF45  F03D         	goto	l1488
  2636  007B10  0A07               	xorlw	7	; case 4
  2637  007B12  B4D8               	btfsc	status,2,c
  2638  007B14  EF4D  F03D         	goto	l1490
  2639  007B18  0A01               	xorlw	1	; case 5
  2640  007B1A  B4D8               	btfsc	status,2,c
  2641  007B1C  EF55  F03D         	goto	l1492
  2642  007B20  0A03               	xorlw	3	; case 6
  2643  007B22  B4D8               	btfsc	status,2,c
  2644  007B24  EF5D  F03D         	goto	l1494
  2645  007B28  0A01               	xorlw	1	; case 7
  2646  007B2A  B4D8               	btfsc	status,2,c
  2647  007B2C  EF65  F03D         	goto	l1496
  2648  007B30  EF9A  F03D         	goto	l92
  2649  007B34                     l92:
  2650  007B34  0012               	return		;funcret
  2651  007B36                     __end_of_GetMode:
  2652                           	callstack 0
  2653                           
  2654 ;; *************** function _UARTWriteStrLn *****************
  2655 ;; Defined at:
  2656 ;;		line 77 in file "uart.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;  string          2    1[COMRAM] PTR unsigned char 
  2659 ;;		 -> STR_31(18), STR_30(25), STR_29(2), STR_28(2), 
  2660 ;;		 -> STR_25(18), STR_24(2), STR_23(22), STR_22(25), 
  2661 ;;		 -> STR_21(24), STR_20(2), STR_17(2), STR_15(2), 
  2662 ;;		 -> STR_13(27), STR_12(20), STR_11(24), STR_10(23), 
  2663 ;;		 -> STR_9(8), STR_8(23), STR_7(13), STR_6(11), 
  2664 ;;		 -> STR_5(11), STR_4(38), STR_3(12), STR_2(2), 
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  i               1    5[COMRAM] unsigned char 
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  1    wreg      void 
  2669 ;; Registers used:
  2670 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2676 ;;      Params:         2       0       0       0       0       0       0       0       0
  2677 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2678 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2679 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2680 ;;Total ram usage:        5 bytes
  2681 ;; Hardware stack levels used: 1
  2682 ;; Hardware stack levels required when called: 1
  2683 ;; This function calls:
  2684 ;;		_UARTWriteByte
  2685 ;; This function is called by:
  2686 ;;		_GetMode
  2687 ;;		_Transmit
  2688 ;;		_Receive
  2689 ;;		_main
  2690 ;;		_printBatteryLevel
  2691 ;; This function uses a non-reentrant model
  2692 ;;
  2693                           
  2694                           	psect	text13
  2695  00760C                     __ptext13:
  2696                           	callstack 0
  2697  00760C                     _UARTWriteStrLn:
  2698                           	callstack 29
  2699  00760C                     
  2700                           ;uart.c: 78:   uint8_t i = 0;
  2701  00760C  0E00               	movlw	0
  2702  00760E  6E06               	movwf	UARTWriteStrLn@i^0,c
  2703                           
  2704                           ;uart.c: 80:   while (string[i])
  2705  007610  EF19  F03B         	goto	l1454
  2706  007614                     l1450:
  2707                           
  2708                           ;uart.c: 81:     UARTWriteByte(string[i++]);
  2709  007614  5006               	movf	UARTWriteStrLn@i^0,w,c
  2710  007616  2402               	addwf	UARTWriteStrLn@string^0,w,c
  2711  007618  6E04               	movwf	??_UARTWriteStrLn^0,c
  2712  00761A  0E00               	movlw	0
  2713  00761C  2003               	addwfc	(UARTWriteStrLn@string+1)^0,w,c
  2714  00761E  6E05               	movwf	(??_UARTWriteStrLn+1)^0,c
  2715  007620  C004  FFF6         	movff	??_UARTWriteStrLn,tblptrl
  2716  007624  C005  FFF7         	movff	??_UARTWriteStrLn+1,tblptrh
  2717  007628                     	if	0	;tblptru may be non-zero
  2718  007628                     	endif
  2719  007628                     	if	0	;tblptru may be non-zero
  2720  007628                     	endif
  2721  007628  0008               	tblrd		*
  2722  00762A  50F5               	movf	tablat,w,c
  2723  00762C  EC38  F03A         	call	_UARTWriteByte
  2724  007630  2A06               	incf	UARTWriteStrLn@i^0,f,c
  2725  007632                     l1454:
  2726                           
  2727                           ;uart.c: 80:   while (string[i])
  2728  007632  5006               	movf	UARTWriteStrLn@i^0,w,c
  2729  007634  2402               	addwf	UARTWriteStrLn@string^0,w,c
  2730  007636  6E04               	movwf	??_UARTWriteStrLn^0,c
  2731  007638  0E00               	movlw	0
  2732  00763A  2003               	addwfc	(UARTWriteStrLn@string+1)^0,w,c
  2733  00763C  6E05               	movwf	(??_UARTWriteStrLn+1)^0,c
  2734  00763E  C004  FFF6         	movff	??_UARTWriteStrLn,tblptrl
  2735  007642  C005  FFF7         	movff	??_UARTWriteStrLn+1,tblptrh
  2736  007646                     	if	0	;tblptru may be non-zero
  2737  007646                     	endif
  2738  007646                     	if	0	;tblptru may be non-zero
  2739  007646                     	endif
  2740  007646  0008               	tblrd		*
  2741  007648  50F5               	movf	tablat,w,c
  2742  00764A  0900               	iorlw	0
  2743  00764C  A4D8               	btfss	status,2,c
  2744  00764E  EF2B  F03B         	goto	u361
  2745  007652  EF2D  F03B         	goto	u360
  2746  007656                     u361:
  2747  007656  EF0A  F03B         	goto	l1450
  2748  00765A                     u360:
  2749  00765A                     
  2750                           ;uart.c: 83:   UARTWriteByte(0x0D);
  2751  00765A  0E0D               	movlw	13
  2752  00765C  EC38  F03A         	call	_UARTWriteByte
  2753                           
  2754                           ;uart.c: 84:   UARTWriteByte(0x0A);
  2755  007660  0E0A               	movlw	10
  2756  007662  EC38  F03A         	call	_UARTWriteByte
  2757  007666  0012               	return		;funcret
  2758  007668                     __end_of_UARTWriteStrLn:
  2759                           	callstack 0
  2760                           
  2761 ;; *************** function _UARTWriteStr *****************
  2762 ;; Defined at:
  2763 ;;		line 70 in file "uart.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;  string          2    1[COMRAM] PTR unsigned char 
  2766 ;;		 -> STR_27(2), STR_26(16), STR_19(2), STR_18(18), 
  2767 ;;		 -> STR_16(27), printBatteryLevel@string(6), STR_1(17), 
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;  i               1    5[COMRAM] unsigned char 
  2770 ;; Return value:  Size  Location     Type
  2771 ;;                  1    wreg      void 
  2772 ;; Registers used:
  2773 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2774 ;; Tracked objects:
  2775 ;;		On entry : 0/0
  2776 ;;		On exit  : 0/0
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2779 ;;      Params:         2       0       0       0       0       0       0       0       0
  2780 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2781 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2782 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2783 ;;Total ram usage:        5 bytes
  2784 ;; Hardware stack levels used: 1
  2785 ;; Hardware stack levels required when called: 1
  2786 ;; This function calls:
  2787 ;;		_UARTWriteByte
  2788 ;; This function is called by:
  2789 ;;		_GetMode
  2790 ;;		_Transmit
  2791 ;;		_Receive
  2792 ;;		_printBatteryLevel
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           	psect	text14
  2797  007668                     __ptext14:
  2798                           	callstack 0
  2799  007668                     _UARTWriteStr:
  2800                           	callstack 28
  2801  007668                     
  2802                           ;uart.c: 71:   uint8_t i = 0;
  2803  007668  0E00               	movlw	0
  2804  00766A  6E06               	movwf	UARTWriteStr@i^0,c
  2805                           
  2806                           ;uart.c: 73:   while (string[i])
  2807  00766C  EF51  F03B         	goto	l1438
  2808  007670                     l1434:
  2809                           
  2810                           ;uart.c: 74:     UARTWriteByte(string[i++]);
  2811  007670  5006               	movf	UARTWriteStr@i^0,w,c
  2812  007672  2402               	addwf	UARTWriteStr@string^0,w,c
  2813  007674  6E04               	movwf	??_UARTWriteStr^0,c
  2814  007676  0E00               	movlw	0
  2815  007678  2003               	addwfc	(UARTWriteStr@string+1)^0,w,c
  2816  00767A  6E05               	movwf	(??_UARTWriteStr+1)^0,c
  2817  00767C  C004  FFF6         	movff	??_UARTWriteStr,tblptrl
  2818  007680  C005  FFF7         	movff	??_UARTWriteStr+1,tblptrh
  2819  007684  6AF8               	clrf	tblptru,c
  2820  007686  0E07               	movlw	(high __ramtop+-1)
  2821  007688  64F7               	cpfsgt	tblptrh,c
  2822  00768A  D003               	bra	u307
  2823  00768C  0008               	tblrd		*
  2824  00768E  50F5               	movf	tablat,w,c
  2825  007690  D005               	bra	u300
  2826  007692                     u307:
  2827  007692  CFF6 FFE9          	movff	tblptrl,fsr0l
  2828  007696  CFF7 FFEA          	movff	tblptrh,fsr0h
  2829  00769A  50EF               	movf	indf0,w,c
  2830  00769C                     u300:
  2831  00769C  EC38  F03A         	call	_UARTWriteByte
  2832  0076A0  2A06               	incf	UARTWriteStr@i^0,f,c
  2833  0076A2                     l1438:
  2834                           
  2835                           ;uart.c: 73:   while (string[i])
  2836  0076A2  5006               	movf	UARTWriteStr@i^0,w,c
  2837  0076A4  2402               	addwf	UARTWriteStr@string^0,w,c
  2838  0076A6  6E04               	movwf	??_UARTWriteStr^0,c
  2839  0076A8  0E00               	movlw	0
  2840  0076AA  2003               	addwfc	(UARTWriteStr@string+1)^0,w,c
  2841  0076AC  6E05               	movwf	(??_UARTWriteStr+1)^0,c
  2842  0076AE  C004  FFF6         	movff	??_UARTWriteStr,tblptrl
  2843  0076B2  C005  FFF7         	movff	??_UARTWriteStr+1,tblptrh
  2844  0076B6  6AF8               	clrf	tblptru,c
  2845  0076B8  0E07               	movlw	(high __ramtop+-1)
  2846  0076BA  64F7               	cpfsgt	tblptrh,c
  2847  0076BC  D003               	bra	u317
  2848  0076BE  0008               	tblrd		*
  2849  0076C0  50F5               	movf	tablat,w,c
  2850  0076C2  D005               	bra	u310
  2851  0076C4                     u317:
  2852  0076C4  CFF6 FFE9          	movff	tblptrl,fsr0l
  2853  0076C8  CFF7 FFEA          	movff	tblptrh,fsr0h
  2854  0076CC  50EF               	movf	indf0,w,c
  2855  0076CE                     u310:
  2856  0076CE  0900               	iorlw	0
  2857  0076D0  A4D8               	btfss	status,2,c
  2858  0076D2  EF6D  F03B         	goto	u321
  2859  0076D6  EF6F  F03B         	goto	u320
  2860  0076DA                     u321:
  2861  0076DA  EF38  F03B         	goto	l1434
  2862  0076DE                     u320:
  2863  0076DE  0012               	return		;funcret
  2864  0076E0                     __end_of_UARTWriteStr:
  2865                           	callstack 0
  2866                           
  2867 ;; *************** function _UARTWriteByteHex *****************
  2868 ;; Defined at:
  2869 ;;		line 87 in file "uart.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;  data            2    1[COMRAM] unsigned short 
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;  hexa            2    8[COMRAM] PTR unsigned char 
  2874 ;;		 -> STR_14(17), 
  2875 ;; Return value:  Size  Location     Type
  2876 ;;                  1    wreg      void 
  2877 ;; Registers used:
  2878 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2879 ;; Tracked objects:
  2880 ;;		On entry : 0/0
  2881 ;;		On exit  : 0/0
  2882 ;;		Unchanged: 0/0
  2883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2884 ;;      Params:         2       0       0       0       0       0       0       0       0
  2885 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2886 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2887 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2888 ;;Total ram usage:        9 bytes
  2889 ;; Hardware stack levels used: 1
  2890 ;; Hardware stack levels required when called: 1
  2891 ;; This function calls:
  2892 ;;		_UARTWriteByte
  2893 ;; This function is called by:
  2894 ;;		_GetMode
  2895 ;;		_Transmit
  2896 ;;		_Receive
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           	psect	text15
  2901  0076E0                     __ptext15:
  2902                           	callstack 0
  2903  0076E0                     _UARTWriteByteHex:
  2904                           	callstack 28
  2905  0076E0                     
  2906                           ;uart.c: 88:     char *hexa = "0123456789ABCDEF";
  2907  0076E0  0E93               	movlw	low STR_14
  2908  0076E2  6E09               	movwf	UARTWriteByteHex@hexa^0,c
  2909  0076E4  0E7F               	movlw	high STR_14
  2910  0076E6  6E0A               	movwf	(UARTWriteByteHex@hexa+1)^0,c
  2911                           
  2912                           ;uart.c: 90:     if (data > 4095) UARTWriteByte(hexa[data / 4096]);
  2913  0076E8  0E10               	movlw	16
  2914  0076EA  5C03               	subwf	(UARTWriteByteHex@data+1)^0,w,c
  2915  0076EC  A0D8               	btfss	status,0,c
  2916  0076EE  EF7B  F03B         	goto	u331
  2917  0076F2  EF7D  F03B         	goto	u330
  2918  0076F6                     u331:
  2919  0076F6  EF8C  F03B         	goto	l1444
  2920  0076FA                     u330:
  2921  0076FA  3803               	swapf	(UARTWriteByteHex@data+1)^0,w,c
  2922  0076FC  0B0F               	andlw	15
  2923  0076FE  2409               	addwf	UARTWriteByteHex@hexa^0,w,c
  2924  007700  6E04               	movwf	??_UARTWriteByteHex^0,c
  2925  007702  0E00               	movlw	0
  2926  007704  200A               	addwfc	(UARTWriteByteHex@hexa+1)^0,w,c
  2927  007706  6E05               	movwf	(??_UARTWriteByteHex+1)^0,c
  2928  007708  C004  FFF6         	movff	??_UARTWriteByteHex,tblptrl
  2929  00770C  C005  FFF7         	movff	??_UARTWriteByteHex+1,tblptrh
  2930  007710                     	if	0	;tblptru may be non-zero
  2931  007710                     	endif
  2932  007710                     	if	0	;tblptru may be non-zero
  2933  007710                     	endif
  2934  007710  0008               	tblrd		*
  2935  007712  50F5               	movf	tablat,w,c
  2936  007714  EC38  F03A         	call	_UARTWriteByte
  2937  007718                     l1444:
  2938                           
  2939                           ;uart.c: 91:     if (data > 255) UARTWriteByte(hexa[data / 256 % 16]);
  2940  007718  0403               	decf	(UARTWriteByteHex@data+1)^0,w,c
  2941  00771A  A0D8               	btfss	status,0,c
  2942  00771C  EF92  F03B         	goto	u341
  2943  007720  EF94  F03B         	goto	u340
  2944  007724                     u341:
  2945  007724  EFAF  F03B         	goto	l152
  2946  007728                     u340:
  2947  007728  C002  F004         	movff	UARTWriteByteHex@data,??_UARTWriteByteHex
  2948  00772C  C003  F005         	movff	UARTWriteByteHex@data+1,??_UARTWriteByteHex+1
  2949  007730  C005  F004         	movff	??_UARTWriteByteHex+1,??_UARTWriteByteHex
  2950  007734  6A05               	clrf	(??_UARTWriteByteHex+1)^0,c
  2951  007736  0E0F               	movlw	15
  2952  007738  1604               	andwf	??_UARTWriteByteHex^0,f,c
  2953  00773A  0E00               	movlw	0
  2954  00773C  1605               	andwf	(??_UARTWriteByteHex+1)^0,f,c
  2955  00773E  C009  F006         	movff	UARTWriteByteHex@hexa,??_UARTWriteByteHex+2
  2956  007742  C00A  F007         	movff	UARTWriteByteHex@hexa+1,??_UARTWriteByteHex+3
  2957  007746  5004               	movf	??_UARTWriteByteHex^0,w,c
  2958  007748  2606               	addwf	(??_UARTWriteByteHex+2)^0,f,c
  2959  00774A  5005               	movf	(??_UARTWriteByteHex+1)^0,w,c
  2960  00774C  2207               	addwfc	(??_UARTWriteByteHex+3)^0,f,c
  2961  00774E  C006  FFF6         	movff	??_UARTWriteByteHex+2,tblptrl
  2962  007752  C007  FFF7         	movff	??_UARTWriteByteHex+3,tblptrh
  2963  007756                     	if	0	;tblptru may be non-zero
  2964  007756                     	endif
  2965  007756                     	if	0	;tblptru may be non-zero
  2966  007756                     	endif
  2967  007756  0008               	tblrd		*
  2968  007758  50F5               	movf	tablat,w,c
  2969  00775A  EC38  F03A         	call	_UARTWriteByte
  2970  00775E                     l152:
  2971                           
  2972                           ;uart.c: 92:     UARTWriteByte(hexa[data / 16 % 16]);
  2973  00775E  C002  F004         	movff	UARTWriteByteHex@data,??_UARTWriteByteHex
  2974  007762  C003  F005         	movff	UARTWriteByteHex@data+1,??_UARTWriteByteHex+1
  2975  007766  0E04               	movlw	4
  2976  007768  6E06               	movwf	(??_UARTWriteByteHex+2)^0,c
  2977  00776A                     u355:
  2978  00776A  90D8               	bcf	status,0,c
  2979  00776C  3205               	rrcf	(??_UARTWriteByteHex+1)^0,f,c
  2980  00776E  3204               	rrcf	??_UARTWriteByteHex^0,f,c
  2981  007770  2E06               	decfsz	(??_UARTWriteByteHex+2)^0,f,c
  2982  007772  EFB5  F03B         	goto	u355
  2983  007776  0E0F               	movlw	15
  2984  007778  1604               	andwf	??_UARTWriteByteHex^0,f,c
  2985  00777A  0E00               	movlw	0
  2986  00777C  1605               	andwf	(??_UARTWriteByteHex+1)^0,f,c
  2987  00777E  C009  F007         	movff	UARTWriteByteHex@hexa,??_UARTWriteByteHex+3
  2988  007782  C00A  F008         	movff	UARTWriteByteHex@hexa+1,??_UARTWriteByteHex+4
  2989  007786  5004               	movf	??_UARTWriteByteHex^0,w,c
  2990  007788  2607               	addwf	(??_UARTWriteByteHex+3)^0,f,c
  2991  00778A  5005               	movf	(??_UARTWriteByteHex+1)^0,w,c
  2992  00778C  2208               	addwfc	(??_UARTWriteByteHex+4)^0,f,c
  2993  00778E  C007  FFF6         	movff	??_UARTWriteByteHex+3,tblptrl
  2994  007792  C008  FFF7         	movff	??_UARTWriteByteHex+4,tblptrh
  2995  007796                     	if	0	;tblptru may be non-zero
  2996  007796                     	endif
  2997  007796                     	if	0	;tblptru may be non-zero
  2998  007796                     	endif
  2999  007796  0008               	tblrd		*
  3000  007798  50F5               	movf	tablat,w,c
  3001  00779A  EC38  F03A         	call	_UARTWriteByte
  3002                           
  3003                           ;uart.c: 93:     UARTWriteByte(hexa[data % 16]);
  3004  00779E  0E0F               	movlw	15
  3005  0077A0  1402               	andwf	UARTWriteByteHex@data^0,w,c
  3006  0077A2  6E04               	movwf	??_UARTWriteByteHex^0,c
  3007  0077A4  0E00               	movlw	0
  3008  0077A6  1403               	andwf	(UARTWriteByteHex@data+1)^0,w,c
  3009  0077A8  6E05               	movwf	(??_UARTWriteByteHex+1)^0,c
  3010  0077AA  C009  F006         	movff	UARTWriteByteHex@hexa,??_UARTWriteByteHex+2
  3011  0077AE  C00A  F007         	movff	UARTWriteByteHex@hexa+1,??_UARTWriteByteHex+3
  3012  0077B2  5004               	movf	??_UARTWriteByteHex^0,w,c
  3013  0077B4  2606               	addwf	(??_UARTWriteByteHex+2)^0,f,c
  3014  0077B6  5005               	movf	(??_UARTWriteByteHex+1)^0,w,c
  3015  0077B8  2207               	addwfc	(??_UARTWriteByteHex+3)^0,f,c
  3016  0077BA  C006  FFF6         	movff	??_UARTWriteByteHex+2,tblptrl
  3017  0077BE  C007  FFF7         	movff	??_UARTWriteByteHex+3,tblptrh
  3018  0077C2                     	if	0	;tblptru may be non-zero
  3019  0077C2                     	endif
  3020  0077C2                     	if	0	;tblptru may be non-zero
  3021  0077C2                     	endif
  3022  0077C2  0008               	tblrd		*
  3023  0077C4  50F5               	movf	tablat,w,c
  3024  0077C6  EC38  F03A         	call	_UARTWriteByte
  3025  0077CA  0012               	return		;funcret
  3026  0077CC                     __end_of_UARTWriteByteHex:
  3027                           	callstack 0
  3028                           
  3029 ;; *************** function _UARTWriteByte *****************
  3030 ;; Defined at:
  3031 ;;		line 59 in file "uart.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;  data            1    wreg     unsigned char 
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;  data            1    0[COMRAM] unsigned char 
  3036 ;; Return value:  Size  Location     Type
  3037 ;;                  1    wreg      void 
  3038 ;; Registers used:
  3039 ;;		wreg
  3040 ;; Tracked objects:
  3041 ;;		On entry : 0/0
  3042 ;;		On exit  : 0/0
  3043 ;;		Unchanged: 0/0
  3044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3045 ;;      Params:         0       0       0       0       0       0       0       0       0
  3046 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3047 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3048 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3049 ;;Total ram usage:        1 bytes
  3050 ;; Hardware stack levels used: 1
  3051 ;; This function calls:
  3052 ;;		Nothing
  3053 ;; This function is called by:
  3054 ;;		_UARTWriteStr
  3055 ;;		_UARTWriteStrLn
  3056 ;;		_UARTWriteByteHex
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           	psect	text16
  3061  007470                     __ptext16:
  3062                           	callstack 0
  3063  007470                     _UARTWriteByte:
  3064                           	callstack 29
  3065                           
  3066                           ;incstack = 0
  3067                           ;UARTWriteByte@data stored from wreg
  3068  007470  6E01               	movwf	UARTWriteByte@data^0,c
  3069  007472                     l133:
  3070  007472  A29E               	btfss	158,1,c	;volatile
  3071  007474  EF3E  F03A         	goto	u31
  3072  007478  EF40  F03A         	goto	u30
  3073  00747C                     u31:
  3074  00747C  EF39  F03A         	goto	l133
  3075  007480                     u30:
  3076  007480                     
  3077                           ;uart.c: 63:     TX1REG = data;
  3078  007480  C001  FF9A         	movff	UARTWriteByte@data,3994	;volatile
  3079  007484  0012               	return		;funcret
  3080  007486                     __end_of_UARTWriteByte:
  3081                           	callstack 0
  3082                           
  3083 ;; *************** function _ReadSXRegister *****************
  3084 ;; Defined at:
  3085 ;;		line 29 in file "SX1272.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;  address         1    wreg     unsigned char 
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;  address         1    3[COMRAM] unsigned char 
  3090 ;;  RegValue        1    2[COMRAM] unsigned char 
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      unsigned char 
  3093 ;; Registers used:
  3094 ;;		wreg, status,2, status,0, cstack
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3100 ;;      Params:         0       0       0       0       0       0       0       0       0
  3101 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3102 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3103 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3104 ;;Total ram usage:        2 bytes
  3105 ;; Hardware stack levels used: 1
  3106 ;; Hardware stack levels required when called: 1
  3107 ;; This function calls:
  3108 ;;		_SPIReceive
  3109 ;;		_SPITransfer
  3110 ;; This function is called by:
  3111 ;;		_GetMode
  3112 ;;		_Transmit
  3113 ;;		_Receive
  3114 ;;		_main
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text17
  3119  0074FE                     __ptext17:
  3120                           	callstack 0
  3121  0074FE                     _ReadSXRegister:
  3122                           	callstack 28
  3123                           
  3124                           ;incstack = 0
  3125                           ;ReadSXRegister@address stored from wreg
  3126  0074FE  6E04               	movwf	ReadSXRegister@address^0,c
  3127  007500                     
  3128                           ;SX1272.c: 30:     uint8_t RegValue;;SX1272.c: 31:     LATCbits.LATC2 = 0;
  3129  007500  9485               	bcf	133,2,c	;volatile
  3130  007502                     
  3131                           ;SX1272.c: 32:     address = address & 0x7F;
  3132  007502  5004               	movf	ReadSXRegister@address^0,w,c
  3133  007504  0B7F               	andlw	127
  3134  007506  6E04               	movwf	ReadSXRegister@address^0,c
  3135  007508                     
  3136                           ;SX1272.c: 34:     SPITransfer(address);
  3137  007508  5004               	movf	ReadSXRegister@address^0,w,c
  3138  00750A  EC71  F03A         	call	_SPITransfer
  3139  00750E                     
  3140                           ;SX1272.c: 35:     RegValue = SPIReceive(0x00);
  3141  00750E  0E00               	movlw	0
  3142  007510  EC8E  F03A         	call	_SPIReceive
  3143  007514  6E03               	movwf	ReadSXRegister@RegValue^0,c
  3144  007516                     
  3145                           ;SX1272.c: 36:     LATCbits.LATC2 = 1;
  3146  007516  8485               	bsf	133,2,c	;volatile
  3147  007518                     
  3148                           ;SX1272.c: 37:     return RegValue;
  3149  007518  5003               	movf	ReadSXRegister@RegValue^0,w,c
  3150  00751A  0012               	return		;funcret
  3151  00751C                     __end_of_ReadSXRegister:
  3152                           	callstack 0
  3153                           
  3154 ;; *************** function _SPITransfer *****************
  3155 ;; Defined at:
  3156 ;;		line 50 in file "spi.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  data_out        1    wreg     unsigned char 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  data_out        1    0[COMRAM] unsigned char 
  3161 ;;  dummy_byte      1    0        unsigned char 
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  1    wreg      void 
  3164 ;; Registers used:
  3165 ;;		wreg
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3171 ;;      Params:         0       0       0       0       0       0       0       0       0
  3172 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3173 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3174 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3175 ;;Total ram usage:        1 bytes
  3176 ;; Hardware stack levels used: 1
  3177 ;; This function calls:
  3178 ;;		Nothing
  3179 ;; This function is called by:
  3180 ;;		_WriteSXRegister
  3181 ;;		_ReadSXRegister
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           	psect	text18
  3186  0074E2                     __ptext18:
  3187                           	callstack 0
  3188  0074E2                     _SPITransfer:
  3189                           	callstack 29
  3190                           
  3191                           ;incstack = 0
  3192                           ;SPITransfer@data_out stored from wreg
  3193  0074E2  6E01               	movwf	SPITransfer@data_out^0,c
  3194  0074E4  5092               	movf	146,w,c	;volatile
  3195                           
  3196                           ;spi.c: 54:     PIR3bits.SSP1IF = 0;
  3197  0074E6  010E               	movlb	14	; () banked
  3198  0074E8  91CD               	bcf	205,0,b	;volatile
  3199  0074EA                     
  3200                           ; BSR set to: 14
  3201                           ;spi.c: 55:     SSP1BUF = data_out;
  3202  0074EA  C001  FF92         	movff	SPITransfer@data_out,3986	;volatile
  3203  0074EE                     l48:
  3204                           
  3205                           ; BSR set to: 14
  3206  0074EE  A1CD               	btfss	205,0,b	;volatile
  3207  0074F0  EF7C  F03A         	goto	u11
  3208  0074F4  EF7E  F03A         	goto	u10
  3209  0074F8                     u11:
  3210  0074F8  EF77  F03A         	goto	l48
  3211  0074FC                     u10:
  3212  0074FC                     
  3213                           ; BSR set to: 14
  3214  0074FC  0012               	return		;funcret
  3215  0074FE                     __end_of_SPITransfer:
  3216                           	callstack 0
  3217                           
  3218 ;; *************** function _SPIReceive *****************
  3219 ;; Defined at:
  3220 ;;		line 59 in file "spi.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;  data_out        1    wreg     unsigned char 
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;  data_out        1    0[COMRAM] unsigned char 
  3225 ;;  data_in         1    1[COMRAM] unsigned char 
  3226 ;;  dummy_byte      1    0        unsigned char 
  3227 ;; Return value:  Size  Location     Type
  3228 ;;                  1    wreg      unsigned char 
  3229 ;; Registers used:
  3230 ;;		wreg, status,2
  3231 ;; Tracked objects:
  3232 ;;		On entry : 0/0
  3233 ;;		On exit  : 0/0
  3234 ;;		Unchanged: 0/0
  3235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3236 ;;      Params:         0       0       0       0       0       0       0       0       0
  3237 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3238 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3239 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3240 ;;Total ram usage:        2 bytes
  3241 ;; Hardware stack levels used: 1
  3242 ;; This function calls:
  3243 ;;		Nothing
  3244 ;; This function is called by:
  3245 ;;		_ReadSXRegister
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           	psect	text19
  3250  00751C                     __ptext19:
  3251                           	callstack 0
  3252  00751C                     _SPIReceive:
  3253                           	callstack 28
  3254                           
  3255                           ; BSR set to: 14
  3256                           ;incstack = 0
  3257                           ;SPIReceive@data_out stored from wreg
  3258  00751C  6E01               	movwf	SPIReceive@data_out^0,c
  3259  00751E  5092               	movf	146,w,c	;volatile
  3260                           
  3261                           ;spi.c: 63:     PIR3bits.SSP1IF = 0;
  3262  007520  010E               	movlb	14	; () banked
  3263  007522  91CD               	bcf	205,0,b	;volatile
  3264  007524                     
  3265                           ; BSR set to: 14
  3266                           ;spi.c: 64:     SSP1BUF = data_out;
  3267  007524  C001  FF92         	movff	SPIReceive@data_out,3986	;volatile
  3268  007528                     l54:
  3269                           
  3270                           ; BSR set to: 14
  3271  007528  A1CD               	btfss	205,0,b	;volatile
  3272  00752A  EF99  F03A         	goto	u21
  3273  00752E  EF9B  F03A         	goto	u20
  3274  007532                     u21:
  3275  007532  EF94  F03A         	goto	l54
  3276  007536                     u20:
  3277  007536                     
  3278                           ; BSR set to: 14
  3279                           ;spi.c: 66:     data_in = SSP1BUF;
  3280  007536  CF92 F002          	movff	3986,SPIReceive@data_in	;volatile
  3281                           
  3282                           ;spi.c: 67:     return(data_in);
  3283  00753A  5002               	movf	SPIReceive@data_in^0,w,c
  3284  00753C                     
  3285                           ; BSR set to: 14
  3286  00753C  0012               	return		;funcret
  3287  00753E                     __end_of_SPIReceive:
  3288                           	callstack 0
  3289                           
  3290                           	psect	rparam
  3291  0000                     
  3292                           	psect	idloc
  3293                           
  3294                           ;Config register IDLOC0 @ 0x200000
  3295                           ;	unspecified, using default values
  3296  200000                     	org	2097152
  3297  200000  0FFF               	dw	4095
  3298                           
  3299                           ;Config register IDLOC1 @ 0x200002
  3300                           ;	unspecified, using default values
  3301  200002                     	org	2097154
  3302  200002  0FFF               	dw	4095
  3303                           
  3304                           ;Config register IDLOC2 @ 0x200004
  3305                           ;	unspecified, using default values
  3306  200004                     	org	2097156
  3307  200004  0FFF               	dw	4095
  3308                           
  3309                           ;Config register IDLOC3 @ 0x200006
  3310                           ;	unspecified, using default values
  3311  200006                     	org	2097158
  3312  200006  0FFF               	dw	4095
  3313                           
  3314                           ;Config register IDLOC4 @ 0x200008
  3315                           ;	unspecified, using default values
  3316  200008                     	org	2097160
  3317  200008  0FFF               	dw	4095
  3318                           
  3319                           ;Config register IDLOC5 @ 0x20000A
  3320                           ;	unspecified, using default values
  3321  20000A                     	org	2097162
  3322  20000A  0FFF               	dw	4095
  3323                           
  3324                           ;Config register IDLOC6 @ 0x20000C
  3325                           ;	unspecified, using default values
  3326  20000C                     	org	2097164
  3327  20000C  0FFF               	dw	4095
  3328                           
  3329                           ;Config register IDLOC7 @ 0x20000E
  3330                           ;	unspecified, using default values
  3331  20000E                     	org	2097166
  3332  20000E  0FFF               	dw	4095
  3333                           
  3334                           	psect	config
  3335                           
  3336                           ;Config register CONFIG1L @ 0x300000
  3337                           ;	External Oscillator mode Selection bits
  3338                           ;	FEXTOSC = OFF, Oscillator not enabled
  3339                           ;	Power-up default value for COSC bits
  3340                           ;	RSTOSC = HFINTOSC_1MHZ, HFINTOSC with HFFRQ = 4 MHz and CDIV = 4:1
  3341  300000                     	org	3145728
  3342  300000  EC                 	db	236
  3343                           
  3344                           ;Config register CONFIG1H @ 0x300001
  3345                           ;	Clock Out Enable bit
  3346                           ;	CLKOUTEN = OFF, CLKOUT function is disabled
  3347                           ;	Clock Switch Enable bit
  3348                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  3349                           ;	Fail-Safe Clock Monitor Enable bit
  3350                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  3351  300001                     	org	3145729
  3352  300001  FF                 	db	255
  3353                           
  3354                           ;Config register CONFIG2L @ 0x300002
  3355                           ;	Master Clear Enable bit
  3356                           ;	MCLRE = EXTMCLR, If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR
  3357                           ;	Power-up Timer Enable bit
  3358                           ;	PWRTE = OFF, Power up timer disabled
  3359                           ;	Low-power BOR enable bit
  3360                           ;	LPBOREN = OFF, ULPBOR disabled
  3361                           ;	Brown-out Reset Enable bits
  3362                           ;	BOREN = SBORDIS, Brown-out Reset enabled , SBOREN bit is ignored
  3363  300002                     	org	3145730
  3364  300002  FF                 	db	255
  3365                           
  3366                           ;Config register CONFIG2H @ 0x300003
  3367                           ;	Brown Out Reset Voltage selection bits
  3368                           ;	BORV = VBOR_2P45, Brown-out Reset Voltage (VBOR) set to 2.45V
  3369                           ;	ZCD Disable bit
  3370                           ;	ZCD = OFF, ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON
  3371                           ;	PPSLOCK bit One-Way Set Enable bit
  3372                           ;	PPS1WAY = ON, PPSLOCK bit can be cleared and set only once; PPS registers remain locke
      +                          d after one clear/set cycle
  3373                           ;	Stack Full/Underflow Reset Enable bit
  3374                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3375                           ;	Debugger Enable bit
  3376                           ;	DEBUG = OFF, Background debugger disabled
  3377                           ;	Extended Instruction Set Enable bit
  3378                           ;	XINST = OFF, Extended Instruction Set and Indexed Addressing Mode disabled
  3379  300003                     	org	3145731
  3380  300003  FF                 	db	255
  3381                           
  3382                           ;Config register CONFIG3L @ 0x300004
  3383                           ;	WDT Period Select bits
  3384                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  3385                           ;	WDT operating mode
  3386                           ;	WDTE = OFF, WDT Disabled
  3387  300004                     	org	3145732
  3388  300004  9F                 	db	159
  3389                           
  3390                           ;Config register CONFIG3H @ 0x300005
  3391                           ;	WDT Window Select bits
  3392                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
  3393                           ;	WDT input clock selector
  3394                           ;	WDTCCS = SC, Software Control
  3395  300005                     	org	3145733
  3396  300005  FF                 	db	255
  3397                           
  3398                           ;Config register CONFIG4L @ 0x300006
  3399                           ;	Write Protection Block 0
  3400                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3401                           ;	Write Protection Block 1
  3402                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3403                           ;	Write Protection Block 2
  3404                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3405                           ;	Write Protection Block 3
  3406                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3407  300006                     	org	3145734
  3408  300006  FF                 	db	255
  3409                           
  3410                           ;Config register CONFIG4H @ 0x300007
  3411                           ;	Configuration Register Write Protection bit
  3412                           ;	WRTC = OFF, Configuration registers (300000-30000Bh) not write-protected
  3413                           ;	Boot Block Write Protection bit
  3414                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  3415                           ;	Data EEPROM Write Protection bit
  3416                           ;	WRTD = OFF, Data EEPROM not write-protected
  3417                           ;	Scanner Enable bit
  3418                           ;	SCANE = ON, Scanner module is available for use, SCANMD bit can control the module
  3419                           ;	Low Voltage Programming Enable bit
  3420                           ;	LVP = ON, Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE config
      +                          uration bit is ignored
  3421  300007                     	org	3145735
  3422  300007  FF                 	db	255
  3423                           
  3424                           ;Config register CONFIG5L @ 0x300008
  3425                           ;	UserNVM Program Memory Code Protection bit
  3426                           ;	CP = OFF, UserNVM code protection disabled
  3427                           ;	DataNVM Memory Code Protection bit
  3428                           ;	CPD = OFF, DataNVM code protection disabled
  3429  300008                     	org	3145736
  3430  300008  FF                 	db	255
  3431                           
  3432                           ;Config register CONFIG5H @ 0x300009
  3433                           ;	unspecified, using default values
  3434  300009                     	org	3145737
  3435  300009  FF                 	db	255
  3436                           
  3437                           ;Config register CONFIG6L @ 0x30000A
  3438                           ;	Table Read Protection Block 0
  3439                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3440                           ;	Table Read Protection Block 1
  3441                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3442                           ;	Table Read Protection Block 2
  3443                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3444                           ;	Table Read Protection Block 3
  3445                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3446  30000A                     	org	3145738
  3447  30000A  FF                 	db	255
  3448                           
  3449                           ;Config register CONFIG6H @ 0x30000B
  3450                           ;	Boot Block Table Read Protection bit
  3451                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3452  30000B                     	org	3145739
  3453  30000B  FF                 	db	255
  3454                           tosu	equ	0xFFF
  3455                           tosh	equ	0xFFE
  3456                           tosl	equ	0xFFD
  3457                           stkptr	equ	0xFFC
  3458                           pclatu	equ	0xFFB
  3459                           pclath	equ	0xFFA
  3460                           pcl	equ	0xFF9
  3461                           tblptru	equ	0xFF8
  3462                           tblptrh	equ	0xFF7
  3463                           tblptrl	equ	0xFF6
  3464                           tablat	equ	0xFF5
  3465                           prodh	equ	0xFF4
  3466                           prodl	equ	0xFF3
  3467                           indf0	equ	0xFEF
  3468                           postinc0	equ	0xFEE
  3469                           postdec0	equ	0xFED
  3470                           preinc0	equ	0xFEC
  3471                           plusw0	equ	0xFEB
  3472                           fsr0h	equ	0xFEA
  3473                           fsr0l	equ	0xFE9
  3474                           wreg	equ	0xFE8
  3475                           indf1	equ	0xFE7
  3476                           postinc1	equ	0xFE6
  3477                           postdec1	equ	0xFE5
  3478                           preinc1	equ	0xFE4
  3479                           plusw1	equ	0xFE3
  3480                           fsr1h	equ	0xFE2
  3481                           fsr1l	equ	0xFE1
  3482                           bsr	equ	0xFE0
  3483                           indf2	equ	0xFDF
  3484                           postinc2	equ	0xFDE
  3485                           postdec2	equ	0xFDD
  3486                           preinc2	equ	0xFDC
  3487                           plusw2	equ	0xFDB
  3488                           fsr2h	equ	0xFDA
  3489                           fsr2l	equ	0xFD9
  3490                           status	equ	0xFD8

Data Sizes:
    Strings     439
    Constant    0
    Data        9
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     66      75
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Receive@data	PTR unsigned char  size(2) Largest target is 30
		 -> main@rxMsg(COMRAM[30]), 

    Transmit@data	PTR const unsigned char  size(2) Largest target is 9
		 -> main@txMsg(COMRAM[9]), 

    UARTWriteByteHex@hexa	PTR unsigned char  size(2) Largest target is 17
		 -> STR_14(CODE[17]), 

    UARTWriteStrLn@string	PTR unsigned char  size(2) Largest target is 38
		 -> STR_31(CODE[18]), STR_30(CODE[25]), STR_29(CODE[2]), STR_28(CODE[2]), 
		 -> STR_25(CODE[18]), STR_24(CODE[2]), STR_23(CODE[22]), STR_22(CODE[25]), 
		 -> STR_21(CODE[24]), STR_20(CODE[2]), STR_17(CODE[2]), STR_15(CODE[2]), 
		 -> STR_13(CODE[27]), STR_12(CODE[20]), STR_11(CODE[24]), STR_10(CODE[23]), 
		 -> STR_9(CODE[8]), STR_8(CODE[23]), STR_7(CODE[13]), STR_6(CODE[11]), 
		 -> STR_5(CODE[11]), STR_4(CODE[38]), STR_3(CODE[12]), STR_2(CODE[2]), 

    UARTWriteStr@string	PTR unsigned char  size(2) Largest target is 27
		 -> STR_27(CODE[2]), STR_26(CODE[16]), STR_19(CODE[2]), STR_18(CODE[18]), 
		 -> STR_16(CODE[27]), printBatteryLevel@string(COMRAM[6]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_Receive
    _main->_Transmit
    _Transmit->_UARTWriteByteHex
    _Receive->_UARTWriteByteHex
    _InitModule->_WriteSXRegister
    _WriteSXRegister->_ReadSXRegister
    _GetMode->_UARTWriteByteHex
    _UARTWriteStrLn->_UARTWriteByte
    _UARTWriteStr->_UARTWriteByte
    _UARTWriteByteHex->_UARTWriteByte
    _ReadSXRegister->_SPIReceive

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                50    45      5   24421
                                             16 COMRAM    50    45      5
                            _GetMode
                         _InitModule
                     _InitRFLoRaPins
                     _ReadSXRegister
                            _Receive
                      _ResetRFModule
                            _SPIInit
                           _Transmit
                           _UARTInit
                     _UARTWriteStrLn
                    _WriteSXRegister
                      _initVoltmeter
 ---------------------------------------------------------------------------------
 (1) _initVoltmeter                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Transmit                                             6     3      3    6480
                                             10 COMRAM     6     3      3
                          _AntennaTX
                     _ReadSXRegister
                   _UARTWriteByteHex
                       _UARTWriteStr
                     _UARTWriteStrLn
                    _WriteSXRegister
 ---------------------------------------------------------------------------------
 (2) _AntennaTX                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ResetRFModule                                        1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Receive                                              6     4      2    6316
                                             10 COMRAM     6     4      2
                          _AntennaRX
                     _ReadSXRegister
                   _UARTWriteByteHex
                       _UARTWriteStr
                     _UARTWriteStrLn
                    _WriteSXRegister
 ---------------------------------------------------------------------------------
 (2) _AntennaRX                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitRFLoRaPins                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitModule                                           1     1      0    2917
                    _WriteSXRegister
 ---------------------------------------------------------------------------------
 (1) _WriteSXRegister                                      2     1      1    2894
                                              4 COMRAM     2     1      1
                     _ReadSXRegister (ARG)
                        _SPITransfer
 ---------------------------------------------------------------------------------
 (1) _GetMode                                              4     4      0    3278
                                             10 COMRAM     4     4      0
                     _ReadSXRegister
                   _UARTWriteByteHex
                       _UARTWriteStr
                     _UARTWriteStrLn
 ---------------------------------------------------------------------------------
 (1) _UARTWriteStrLn                                       5     3      2    1929
                                              1 COMRAM     5     3      2
                      _UARTWriteByte
 ---------------------------------------------------------------------------------
 (2) _UARTWriteStr                                         5     3      2     637
                                              1 COMRAM     5     3      2
                      _UARTWriteByte
 ---------------------------------------------------------------------------------
 (2) _UARTWriteByteHex                                     9     7      2     464
                                              1 COMRAM     9     7      2
                      _UARTWriteByte
 ---------------------------------------------------------------------------------
 (2) _UARTWriteByte                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ReadSXRegister                                       2     2      0      90
                                              2 COMRAM     2     2      0
                         _SPIReceive
                        _SPITransfer
 ---------------------------------------------------------------------------------
 (2) _SPITransfer                                          2     2      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SPIReceive                                           3     3      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetMode
     _ReadSXRegister
       _SPIReceive
       _SPITransfer
     _UARTWriteByteHex
       _UARTWriteByte
     _UARTWriteStr
       _UARTWriteByte
     _UARTWriteStrLn
       _UARTWriteByte
   _InitModule
     _WriteSXRegister
       _ReadSXRegister (ARG)
       _SPITransfer (ARG)
   _InitRFLoRaPins
   _ReadSXRegister
   _Receive
     _AntennaRX
     _ReadSXRegister
     _UARTWriteByteHex
     _UARTWriteStr
     _UARTWriteStrLn
     _WriteSXRegister
   _ResetRFModule
   _SPIInit
   _Transmit
     _AntennaTX
     _ReadSXRegister
     _UARTWriteByteHex
     _UARTWriteStr
     _UARTWriteStrLn
     _WriteSXRegister
   _UARTInit
   _UARTWriteStrLn
   _WriteSXRegister
   _initVoltmeter

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      40        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     42      4B       1       78.9%
BITBIGSFRhhhhl      52      0       0      21        0.0%
BITBIGSFRllhl       35      0       0      31        0.0%
BITBIGSFRllllhh     2C      0       0      35        0.0%
BITBIGSFRllhhhh     1E      0       0      27        0.0%
BITBIGSFRlllll      17      0       0      38        0.0%
BITBIGSFRlllhhl     13      0       0      33        0.0%
BITBIGSFRlllhhh      F      0       0      32        0.0%
BITBIGSFRhhhhh       D      0       0      20        0.0%
BITBIGSFRllllhl      C      0       0      37        0.0%
BITBIGSFRllllhl      7      0       0      36        0.0%
BITBIGSFRhll         7      0       0      25        0.0%
BITBIGSFRllhhll      4      0       0      30        0.0%
BITBIGSFRllhhlh      2      0       0      29        0.0%
BITBIGSFRllhhhl      2      0       0      28        0.0%
BITBIGSFRhlh         2      0       0      24        0.0%
BITBIGSFRlh          2      0       0      26        0.0%
BITBIGSFRhhhl        1      0       0      22        0.0%
BITBIGSFRhhl         1      0       0      23        0.0%
BITBIGSFRlllhl       1      0       0      34        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4B      39        0.0%
DATA                 0      0      4B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon May 22 13:43:59 2023

  __end_of_InitRFLoRaPins 7470     __end_of_ResetRFModule 7566                         l9 746E  
                      l12 7564                        l15 74B0                        l18 749A  
                      l51 74FC                        l45 75C6                        l54 7528  
                      l56 7536                        l48 74EE                        l72 74E0  
                      l57 753C                        l75 751A                        l92 7B34  
                      l95 78BC                        u10 74FC                        u11 74F8  
                      u20 7536                        u21 7532                        u30 7480  
                      u31 747C               _SPITransfer 74E2    Receive@RXNumberOfBytes 000E  
        _UARTWriteByteHex 76E0                       l130 760A                       l133 7472  
                     l142 76DE                       l136 7484                       l152 775E  
                     l153 77CA                       l225 7CA8                       l217 79CC  
                     l148 7666                       l228 7BF0                       l176 74C6  
                     l273 7DD8                       l960 751E                       l962 7524  
                     l970 74A0                       l956 74E4                       l964 7472  
                     l972 74AE                       l958 74EA                       l990 7500  
                     l966 7480                       l974 7486                       l992 7502  
                     l976 748A                       l968 749C                       l994 7508  
                     l978 7498                       l996 750E                       l998 7516  
                     u300 769C                       u310 76CE                       u320 76DE  
                     u400 791C                       u321 76DA                       u401 7918  
                     u330 76FA                       u410 7958                       u331 76F6  
                     u307 7692                       u411 7954                       u340 7728  
                     u420 7982                       u341 7724                       u317 76C4  
                     u421 797E                       u501 7D60                       u430 79C0  
                     u510 7D8E                       u431 79BC                       u511 7D8A  
                     u360 765A                       u440 7B90                       u520 7DD8  
                     u361 7656                       u441 7B8C                       u521 7DD4  
                     u370 7A0E                       u450 7B9E                       u530 7E2A  
                     u355 776A                       u371 7A0A                       u451 7B9A  
                     u531 7E26                       u380 7A24                       u460 7BB4  
                     u381 7A20                       u461 7BB0                       u470 7BF0  
                     u390 78EE                       u471 7BEC                       u607 74A6  
                     u391 78EA                       u480 7BFE                       u481 7BFA  
                     u617 7548                       u490 7C92                       u491 7C8E  
                     u627 755A                       u547 7CB4                       u637 7B58  
                     u557 7CDE                       u647 7490                       u567 7CE6  
                     u577 7CF2                       u587 7D38                       u597 792C  
                     wreg 000FE8              _BAUD1CONbits 000F9F                      l1000 7518  
                    l1030 7464                      l1032 753E                      l1040 75A8  
                    l1034 7542                      l1036 7552                      l1038 7590  
                    l1170 74C2                      l1500 7ADA                      l1172 74C4  
                    l1430 74DE                      l1422 74CA                      l1510 77F4  
                    l1166 74B2                      l1440 76E0                      l1432 7668  
                    l1424 74CC                      l1520 7826                      l1512 77FE  
                    l1600 791C                      l1168 74C0                      l1442 76FA  
                    l1434 7670                      l1450 7614                      l1426 74D2  
                    l1530 7858                      l1522 7830                      l1514 7808  
                    l1506 77CC                      l1610 7958                      l1602 7926  
                    l1444 7718                      l1436 76A0                      l1452 7630  
                    l1460 79D6                      l1428 74D8                      l1540 788A  
                    l1532 7862                      l1524 783A                      l1516 7812  
                    l1508 77F4                      l1620 7986                      l1612 7962  
                    l1604 7936                      l1446 7728                      l1438 76A2  
                    l1454 7632                      l1470 7A0E                      l1462 79E2  
                    l1542 7894                      l1534 786C                      l1526 7844  
                    l1518 781C                      l1622 79A0                      l1614 796E  
                    l1606 7942                      l1550 75C8                      l1456 765A  
                    l1448 760C                      l1480 7A50                      l1472 7A14  
                    l1464 79EC                      l1544 789E                      l1536 7876  
                    l1528 784E                      l1640 7B62                      l1632 7B36  
                    l1624 79AC                      l1616 7972                      l1608 794A  
                    l1560 75E8                      l1552 75D4                      l1490 7A9A  
                    l1482 7A5A                      l1474 7A24                      l1466 79F8  
                    l1458 79CE                      l1546 78A8                      l1538 7880  
                    l1650 7B9E                      l1642 7B6E                      l1634 7B3A  
                    l1626 79AE                      l1570 75F2                      l1562 75EA  
                    l1554 75E2                      l1730 7CC8                      l1492 7AAA  
                    l1484 7A6A                      l1476 7A34                      l1468 79FE  
                    l1548 78B2                      l1660 7BDA                      l1652 7BB4  
                    l1644 7B7A                      l1636 7B48                      l1628 79C0  
                    l1580 7608                      l1572 7600                      l1564 75EC  
                    l1556 75E4                      l1740 7CFC                      l1732 7CD0  
                    l1724 7CAA                      l1806 7AEE                      l1494 7ABA  
                    l1486 7A7A                      l1478 7A44                      l1670 7C2E  
                    l1662 7BE2                      l1646 7B82                      l1638 7B52  
                    l1590 78DE                      l1582 78BE                      l1574 7602  
                    l1566 75EE                      l1558 75E6                      l1750 7D32  
                    l1742 7D08                      l1734 7CDC                      l1726 7CC0  
                    l1496 7ACA                      l1488 7A8A                      l1680 7C7E  
                    l1672 7C3C                      l1664 7BFE                      l1656 7BC2  
                    l1648 7B90                      l1584 78C2                      l1576 7604  
                    l1568 75F0                      l1760 7D68                      l1752 7D42  
                    l1744 7D14                      l1736 7CE4                      l1728 7CC4  
                    l1674 7C44                      l1682 7C80                      l1666 7C1A  
                    l1658 7BCE                      l1594 78F2                      l1586 78D0  
                    l1578 7606                      l1770 7DB2                      l1762 7D70  
                    l1754 7D46                      l1746 7D1E                      l1738 7CEC  
                    l1684 7C92                      l1676 7C58                      l1668 7C26  
                    l1596 7908                      l1588 78DA                      l1780 7E06  
                    l1772 7DB4                      l1764 7D7C                      l1756 7D52  
                    l1748 7D28                      l1678 7C72                      l1686 7C9E  
                    l1598 790A                      l1782 7E2A                      l1766 7D8E  
                    l1774 7DE0                      l1758 7D56                      l1784 7E2E  
                    l1776 7DE8                      l1768 7D96                      l1778 7E04  
                    STR_1 7FA4                      STR_2 7E86                      STR_3 7FD2  
                    STR_4 7E47                      STR_5 7FDE                      STR_6 7FE9  
                    STR_7 7FC5                      STR_8 7F1C                      STR_9 7FF4  
       GetMode@masked_reg 000D     ReadSXRegister@address 0004                      _main 7CAA  
            Transmit@data 000B           __end_of_SPIInit 75C8                      fsr0h 000FEA  
                    indf0 000FEF                      fsr0l 000FE9                      indf1 000FE7  
                    indf2 000FDF                      fsr1l 000FE1                      fsr2l 000FD9  
                    start 0000           __end_of_GetMode 7B36    ReadSXRegister@RegValue 0003  
            ___param_bank 000000           ?_InitRFLoRaPins 0001           __end_of_Receive 7CAA  
                   _ADACQ 000F5C                     ?_main 0011                     _ADCLK 000F57  
                   _ADPCH 000F5F                     STR_10 7F05                     STR_11 7EED  
                   STR_20 7E86                     STR_12 7F49                     STR_21 7ED5  
                   STR_13 7E88                     STR_14 7F93                     STR_22 7EBC  
                   STR_30 7EA3                     STR_31 7F5D                     STR_23 7F33  
                   STR_24 7E86                     STR_16 7E6D                     STR_17 7FFC  
                   STR_25 7F81                     STR_26 7FB5                     STR_18 7F6F  
                   STR_27 7E86                     STR_19 7E86                     STR_28 7E86  
                   STR_29 7E86          __end_of_UARTInit 760C                     main@i 0041  
         UARTWriteStrLn@i 0006                     tablat 000FF5            _ReadSXRegister 74FE  
                   plusw1 000FE3                     plusw2 000FDB                     status 000FD8  
    UARTWriteByteHex@data 0002      UARTWriteByteHex@hexa 0009               ?_SPIReceive 0001  
         __initialization 7566                _InitModule 77CC              __end_of_main 7E46  
                  ??_main 0016             __activetblptr 000002          __end_of_Transmit 79CE  
                  _ADRESH 000F64                    _ADRESL 000F63                 ??_SPIInit 0001  
  __end_of_ReadSXRegister 751C                    _RC1STA 000F9D                    _RC3PPS 000EFA  
                  _RC5PPS 000EFC                    _RC6PPS 000EFD                    _SP1BRG 000F9B  
               ??_GetMode 000B                    _TX1REG 000F9A                    _TX1STA 000F9E  
               ??_Receive 000D               Receive@data 000B                    isa$std 000001  
      SPIReceive@data_out 0001              __pdataCOMRAM 0043              __mediumconst 7E46  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
         ?_ReadSXRegister 0001                __accesstop 0060   __end_of__initialization 7586  
__end_of_UARTWriteByteHex 77CC             ___rparam_used 000001         __end_of_AntennaRX 749C  
       __end_of_AntennaTX 74B2               ?_InitModule 0001            __pcstackCOMRAM 0001  
               ?_UARTInit 0001              ?_SPITransfer 0001       main@RXNumberOfBytes 0040  
   __end_of_UARTWriteByte 7486             _initVoltmeter 74B2          ??_InitRFLoRaPins 0001  
              ??_UARTInit 0003                 ?_Transmit 000B            ?_initVoltmeter 0001  
                 _SP1BRGH 000F9C                   _SSP1BUF 000F92                   _SPIInit 7590  
                 _GetMode 79CE         UARTWriteByte@data 0001                   _Receive 7B36  
            ??_SPIReceive 0001                   __Hparam 0000                   __Lparam 0000  
           ?_UARTWriteStr 0002                ??_Transmit 000E                   __pcinit 7566  
                 __ramtop 0800                   __ptext0 7CAA                   __ptext1 74B2  
                 __ptext2 75C8                   __ptext3 78BE                   __ptext4 749C  
                 __ptext5 7590                   __ptext6 753E                   __ptext7 7B36  
                 __ptext8 7486                   __ptext9 7464         ??_WriteSXRegister 0006  
      __end_of_SPIReceive 753E           Transmit@reg_val 000F      end_of_initialization 7586  
           __Lmediumconst 7E46                   postdec1 000FE5            ??_UARTWriteStr 0004  
                 postinc0 000FEE             _ResetRFModule 753E           ??_initVoltmeter 0001  
        ??_ReadSXRegister 0003                 _TRISAbits 000F88                 _TRISBbits 000F89  
               _TRISCbits 000F8A                main@i_1044 0042            _UARTWriteStrLn 760C  
       ?_UARTWriteByteHex 0002        ??_UARTWriteByteHex 0004              ??_InitModule 0007  
          ?_ResetRFModule 0001                 _AntennaRX 7486                 _AntennaTX 749C  
    UARTWriteStrLn@string 0002             __pidataCOMRAM 745B       start_initialization 7566  
  __end_of_UARTWriteStrLn 7668        __end_of_InitModule 78BE            Receive@reg_val 0010  
              ?_AntennaRX 0001                ?_AntennaTX 0001         SPIReceive@data_in 0002  
               Transmit@i 0010           ?_UARTWriteStrLn 0002                  ?_SPIInit 0001  
    __end_of_UARTWriteStr 76E0                  ?_GetMode 0001                  ?_Receive 000B  
         ??_ResetRFModule 0001             __pmediumconst 7E46           _WriteSXRegister 74C8  
       Transmit@data_long 000D                  _LATAbits 000F83                  _LATBbits 000F84  
                _LATCbits 000F85                  _PIE3bits 000EC5                  _PIR3bits 000ECD  
     SPITransfer@data_out 0001                 main@F9592 0043                  _SSP1CON1 000F96  
                _SSP1CON3 000F98                  _UARTInit 75C8                  _SSP1STAT 000F95  
             ??_AntennaRX 0001               ??_AntennaTX 0001             _UARTWriteByte 7470  
              _ADCON0bits 000F60                 main@rxMsg 0019                 main@txMsg 0037  
                Receive@i 000F                 copy_data0 757A             UARTWriteStr@i 0006  
 __end_of_WriteSXRegister 74E2                  __Hrparam 0000                  __Lrparam 0000  
                _Transmit 78BE             ??_SPITransfer 0001            ?_UARTWriteByte 0001  
   __end_of_initVoltmeter 74C8                _ANSELAbits 000F11                _ANSELCbits 000F21  
                __ptext10 77CC                  __ptext11 74C8                  __ptext12 79CE  
                __ptext13 760C                  __ptext14 7668                  __ptext15 76E0  
                __ptext16 7470                  __ptext17 74FE                  __ptext18 74E2  
                __ptext19 751C                _RC1STAbits 000F9D       WriteSXRegister@data 0005  
                isa$xinst 000000              _UARTWriteStr 7668                  main@argc 0011  
                main@argv 0013          ??_UARTWriteStrLn 0004        UARTWriteStr@string 0002  
              _INTCONbits 000FF2       __end_of_SPITransfer 74FE          ?_WriteSXRegister 0005  
              GetMode@reg 000E    WriteSXRegister@address 0006           ??_UARTWriteByte 0001  
          _InitRFLoRaPins 7464                _SSP1DATPPS 000EB8                _SSP1CLKPPS 000EB7  
              _TX1STAbits 000F9E                _SPIReceive 751C          UARTInit@baudRate 0001  
